{"task_id": "JavaScript/0", "prompt": "/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqualOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqualOrEqualOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualOrEqualOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqualOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < len) {\n    if (numbers[j] < threshold) {\n      isClose = false;\n      break;\n    }\n    j++;\n  }\n  while (k < len) {\n    if (numbers[k] > threshold) {\n      isClose = false;\n      break;\n    }\n    k++;\n  }\n  return isClose;\n};\n\n/**\n * Check if given lis t  of numb ers, are any two numbers closer to each other than\n given threshold.\n  >>> hasCloseElementsOrEqualOrEqualOrEqual([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasCloseElementsOrEqualOrEqualOrEqual([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasCloseElementsOrEqualOrEqualOrEqualOrEqual = (numbers, threshold) => {\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let isClose = true;\n  while (i < len) {\n    if (numbers[i] > threshold) {\n      isClose = false;\n      break;\n    }\n    i++;\n  }\n  while (j < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring containing multiple groups of nested parentheses. Your goal is to  sepa ra te thos e g roup i nto separate strings and  ret urn the list of th o se.\n Separate groups are balance d (eac h open brace is properlyclosed) and not nested withineach other\n  Ignore any spac es in the input string. \n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group) => {\n      const paren_group_array3 = [];\n      paren_group.split(/\\(/).forEach((paren_group) => {\n        paren_group_array3.push(paren_group);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n */\nconst separateCommas = (arr) => {\n  const arr_copy = arr.slice();\n  arr_copy.splice(arr_copy.length - 1, 1);\n  return arr_copy;\n};\n\n/**\n This function takes an array of strings and returns an array of strings with each string separated by commas except the last one. \n >>> separateCommas(['a', 'b', '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strigi s a pali ndrome */\nconst isPalindrome = (string) => {\n  return string == string. split( '' ).rever se( ).join ('');\n}\n\n/* Find the sho rtes tpalindrome thatb egins with a supplied string.\n  A lgorit hm idea is simple:\n - Fi nd the longest postfix of supplied string that is a palind rome.\n  - Append to the  end o f the string reverse of  a stringprefix that com es before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let stringPrefix = string;\n  let stringPrefix = stringPrefix.split( '' ).reverse().join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '' ).join( '' );\n  let stringPrefix = stringPrefix.split( '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, yo u have to make a pile of n levels of stones.\n  The first level has n st ones. The num ber  of st ones in the next level i s:    - the next od d  number if n is odd.\n     - thenext e ven number if n is even.  Return the number of stonesin each level in a list, whe re element at index\n  i  repre sents the number of sto nes in the level (i+1).\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(0);\n  }\n  return stones;\n};\n\n/*\n  Given a positive integer n, return a list of all possible combinations of n elements (where each element is a positive integer).\n  Examples:\n  >>> getAllPossibleCombinationsOf(3)\n  [\n    [1, 2, 3],\n    [1, 2, 4],\n    [1, 3, 4],\n    [1, 4, 3],\n    [2, 4, 3],\n    [2, 4, 4],\n    [3, 4, 3],\n    [3, 4, 4],\n    [3, 4, 5],\n    [4, 5, 3],\n    [4, 5, 4],\n    [4, 6, 3],\n    [4, 6, 4],\n    [4, 6, 5],\n    [5, 6, 3],\n    [5, 6, 4],\n    [5, 6, 5],\n    [6, 6, 3],\n    [6, 6, 4],\n    [6, 6, 5],\n    [7, 7, 3],\n    [7, 7, 4],\n    [7, 7, 5],\n    [7, 7, 6],\n    [7, 7, 7],\n    [7, 7, 8],\n    [7, 7, 9],\n    [7, 7, 10],\n    [7, 7, 11],\n    [7, 7, 12],\n    [7, 7, 13],\n    [7, 7, 14],\n    [7, 7, 15],\n    [7, 7, 16],\n    [7, 7, 17],\n    [7, 7, 18],\n    [7, 7, 19],\n    [7, 7, 20],\n    [7, 7, 21],\n    [7, 7, 22],\n    [7, 7, 23],\n    [7, 7, 24],\n    [7, 7, 25],\n    [7, 7, 26],\n    [7, 7, 27],\n    [7, 7, 28],\n    [7, 7, 29],\n    [7, 7, 30],\n    [7, 7, 31],\n    [7, 7, 32],\n    [7, 7, 33],\n    [7, 7, 34],\n    [7, 7, 35],\n    [7, 7, 36],\n    [7, 7, 37],\n    [7, 7, 38],\n    [7, 7, 39],\n    [7, 7, 40],\n    [7, 7, 41],\n    [7, 7, 42],\n    [7, 7, 43],\n    [7, 7, 44],\n    [7, 7, 45],\n    [7, 7, 46],\n    [7, 7, 47],\n    [7, 7, 48],\n    [7, 7, 49],\n    [7, 7, 50],\n    [7, 7, 51],\n    [7, 7, 52],\n    [7, 7, 53],\n    [7, 7, 54],\n    [7, 7, 55],\n    [7, 7, 56],\n    [7, 7, 57],\n    [7, 7, 58],\n    [7, 7, 59],\n    [7, 7, 60],\n    [7, 7, 61],\n    [7, 7, 62],\n    [7, 7, 63],\n    [7, 7, 64],\n    [7, 7, 65],\n    [7, 7, 66],\n    [7, 7, 67],\n    [7, 7, 68],\n    [7, 7, 69],\n    [7, 7, 70],\n    [7, 7, 71],\n    [7, 7, 72],\n    [7, 7, 73],\n    [7, 7, 74],\n    [7, 7, 75],\n    [7, 7, 76],\n    [7, 7, 77],\n    [7, 7, 78],\n    [7, 7, 79],\n    [7, 7, 80],\n    [7, 7, 81],\n    [7, 7, 82],\n    [7, 7, 83],\n    [7, 7, 84],\n    [7, 7, 85],\n    [7, 7, 86],\n    [7, 7, 87],\n    [7, 7, 88],\n    [7, 7, 89],\n    [7, 7, 90],\n    [7, 7, 91],\n    [7, 7, 92],\n    [7, 7, 93],\n    [7, 7, 94],\n    [7, 7, 95],\n    [7, 7, 96],\n    [7, 7, 97],\n    [7, 7, 98],\n    [7, 7, 99],\n    [7, 7, 100],\n    [7, 7, 101],\n    [7, 7, 102],\n    [7, 7, 103],\n    [7, 7, 104],\n    [7, 7, 105],\n    [7, 7, 106],\n    [7, 7, 107],\n    [7, 7, 108],\n    [7, 7, 109],\n    [7, 7, 110],\n    [7, 7, 111],\n    [7, 7, 112],\n    [7, 7, 113],\n    [7, 7, 114],\n    [7, 7, 115],\n    [7, 7, 116],\n    [7, 7, 117],\n    [7, 7, 118],\n    [7, 7, 119],\n    [7, 7, 120],\n    [7, 7, 121],\n    [7, 7, 122],\n    [7, 7, 123],\n    [7, 7, 124],\n    [7, 7, 125],\n    [7, 7, 126],\n    [7, 7, 127],\n    [7, 7, 128],\n    [7, 7, 129],\n    [7, 7, 130],\n    [7, 7, 131],\n    [7, 7, 132],\n    [7, 7, 133],\n    [7, 7, 134],\n    [7, 7, 135],\n    [7, 7, 136],\n    [7, 7, 137],\n    [7, 7, 138],\n    [7, 7, 139],\n    [7, 7, 140],\n    [7, 7, 141],\n    [7, 7, 142],\n    [7, 7, 143],\n    [7, 7, 144],\n    [7, 7, 145],\n    [7, 7, 146],\n    [7, 7, 147],\n    [7, 7, 148],\n    [7, 7, 149],\n    [7, 7, 150],\n    [7, 7, 151],\n    [7, 7, 152],\n    [7, 7, 153],\n    [7, 7, 154],\n    [7, 7, 155],\n    [7, 7, 156],\n    [7, 7, 157],\n    [7, 7, 158],\n    [7, 7, 159],\n    [7, 7, 160],\n    [7, 7, 161],\n    [7, 7, 162],\n    [7, 7, 163],\n    [7, 7, 164],\n    [7, 7, 165],\n    [7, 7, 166],\n    [7, 7, 167],\n    [7, 7, 168],\n    [7, 7, 169],\n    [7, 7, 170],\n    [7, 7, 171],\n    [7, 7, 172],\n    [7, 7, 173],\n    [7, 7, 174],\n    [7, 7, 175],\n    [7, 7, 176],\n    [7, 7, 177],\n    [7, 7, 178],\n    [7, 7, 179],\n    [7, 7, 180],\n    [7, 7, 181],\n    [7, 7, 182],\n    [7, 7, 183],\n    [7, 7, 184],\n    [7, 7, 185],\n    [7, 7, 186],\n    [7, 7, 187],\n    [7, 7, 188],\n    [7, 7, 189],\n    [7, 7, 190],\n    [7, 7, 191],\n    [7, 7, 192],\n    [7, 7, 193],\n    [7, 7, 194],\n    [7, 7, 195],\n    [7, 7, 196],\n    [7, 7, 197],\n    [7, 7, 198],\n    [7, 7, 199],\n    [7, 7, 200],\n    [7, 7, 201],\n    [7, 7, 202],\n    [7, 7, 203],\n    [7, 7, 204],\n    [7, 7, 205],\n    [7, 7, 206],\n    [7, 7, 207],\n    [7, 7, 208],\n    [7, 7, 209],\n    [7, 7, 210],\n    [7, 7, 211],\n    [7, 7, 212],\n    [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  Youwill be given a s t ring ofwords separated by commas or spaces. Your task is\n to split the string  intowo rds and  re turn a n array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes tw o  positiv e numbers x and y and returns the\n  biggest even integer number that is  inth erange [ x,y] inc lusive. If \n  there's no  suc hnumber, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let sum = 0;\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = 0;\n  let num32 = 0;\n  let num33 = 0;\n  let num34 = 0;\n  let num35 = 0;\n  let num36 = 0;\n  let num37 = 0;\n  let num38 = 0;\n  let num39 = 0;\n  let num40 = 0;\n  let num41 = 0;\n  let num42 = 0;\n  let num43 = 0;\n  let num44 = 0;\n  let num45 = 0;\n  let num46 = 0;\n  let num47 = 0;\n  let num48 = 0;\n  let num49 = 0;\n  let num50 = 0;\n  let num51 = 0;\n  let num52 = 0;\n  let num53 = 0;\n  let num54 = 0;\n  let num55 = 0;\n  let num56 = 0;\n  let num57 = 0;\n  let num58 = 0;\n  let num59 = 0;\n  let num60 = 0;\n  let num61 = 0;\n  let num62 = 0;\n  let num63 = 0;\n  let num64 = 0;\n  let num65 = 0;\n  let num66 = 0;\n  let num67 = 0;\n  let num68 = 0;\n  let num69 = 0;\n  let num70 = 0;\n  let num71 = 0;\n  let num72 = 0;\n  let num73 = 0;\n  let num74 = 0;\n  let num75 = 0;\n  let num76 = 0;\n  let num77 = 0;\n  let num78 = 0;\n  let num79 = 0;\n  let num80 = 0;\n  let num81 = 0;\n  let num82 = 0;\n  let num83 = 0;\n  let num84 = 0;\n  let num85 = 0;\n  let num86 = 0;\n  let num87 = 0;\n  let num88 = 0;\n  let num89 = 0;\n  let num90 = 0;\n  let num91 = 0;\n  let num92 = 0;\n  let num93 = 0;\n  let num94 = 0;\n  let num95 = 0;\n  let num96 = 0;\n  let num97 = 0;\n  let num98 = 0;\n  let num99 = 0;\n  let num100 = 0;\n  let num101 = 0;\n  let num102 = 0;\n  let num103 = 0;\n  let num104 = 0;\n  let num105 = 0;\n  let num106 = 0;\n  let num107 = 0;\n  let num108 = 0;\n  let num109 = 0;\n  let num110 = 0;\n  let num111 = 0;\n  let num112 = 0;\n  let num113 = 0;\n  let num114 = 0;\n  let num115 = 0;\n  let num116 = 0;\n  let num117 = 0;\n  let num118 = 0;\n  let num119 = 0;\n  let num120 = 0;\n  let num121 = 0;\n  let num122 = 0;\n  let num123 = 0;\n  let num124 = 0;\n  let num125 = 0;\n  let num126 = 0;\n  let num127 = 0;\n  let num128 = 0;\n  let num129 = 0;\n  let num130 = 0;\n  let num131 = 0;\n  let num132 = 0;\n  let num133 = 0;\n  let num134 = 0;\n  let num135 = 0;\n  let num136 = 0;\n  let num137 = 0;\n  let num138 = 0;\n  let num139 = 0;\n  let num140 = 0;\n  let num141 = 0;\n  let num142 = 0;\n  let num143 = 0;\n  let num144 = 0;\n  let num145 = 0;\n  let num146 = 0;\n  let num147 = 0;\n  let num148 = 0;\n  let num149 = 0;\n  let num150 = 0;\n  let num151 = 0;\n  let num152 = 0;\n  let num153 = 0;\n  let num154 = 0;\n  let num155 = 0;\n  let num156 = 0;\n  let num157 = 0;\n  let num158 = 0;\n  let num159 = 0;\n  let num160 = 0;\n  let num161 = 0;\n  let num162 = 0;\n  let num163 = 0;\n  let num164 = 0;\n  let num165 = 0;\n  let num166 = 0;\n  let num167 = 0;\n  let num168 = 0;\n  let num169 = 0;\n  let num170 = 0;\n  let num171 = 0;\n  let num172 = 0;\n  let num173 = 0;\n  let num174 = 0;\n  let num175 = 0;\n  let num176 = 0;\n  let num177 = 0;\n  let num178 = 0;\n  let num179 = 0;\n  let num180 = 0;\n  let num181 = 0;\n  let num182 = 0;\n  let num183 = 0;\n  let num184 = 0;\n  let num185 = 0;\n  let num186 = 0;\n  let num187 = 0;\n  let num188 = 0;\n  let num189 = 0;\n  let num190 = 0;\n  let num191 = 0;\n  let num192 = 0;\n  let num193 = 0;\n  let num194 = 0;\n  let num195 = 0;\n  let num196 = 0;\n  let num197 = 0;\n  let num198 = 0;\n  let num199 = 0;\n  let num200 = 0;\n  let num201 = 0;\n  let num202 = 0;\n  let num203 = 0;\n  let num204 = 0;\n  let num205 = 0;\n  let num206 = 0;\n  let num207 = 0;\n  let num208 = 0;\n  let num209 = 0;\n  let num210 = 0;\n  let num211 = 0;\n  let num212 = 0;\n  let num213 = 0;\n  let num214 = 0;\n  let num215 = 0;\n  let num216 = 0;\n  let num217 = 0;\n  let num218 = 0;\n  let num219 = 0;\n  let num220 = 0;\n  let num221 = 0;\n  let num222 = 0;\n  let num223 = 0;\n  let num224 = 0;\n  let num225 = 0;\n  let num226 = 0;\n  let num227 = 0;\n  let num228 = 0;\n  let num229 = 0;\n  let num230 = 0;\n  let num231 = 0;\n  let num232 = 0;\n  let num233 = 0;\n  let num234 = 0;\n  let num235 = 0;\n  let num236 = 0;\n  let num237 = 0;\n  let num238 = 0;\n  let num239 = 0;\n  let num240 = 0;\n  let num241 = 0;\n  let num242 = 0;\n  let num243 = 0;\n  let num244 = 0;\n  let num245 = 0;\n  let num246 = 0;\n  let num247 = 0;\n  let num248 = 0;\n  let num249 = 0;\n  let num250 = 0;\n  let num251 = 0;\n  let num252 = 0;\n  let num253 = 0;\n  let num254 = 0;\n  let num255 = 0;\n  let num256 = 0;\n  let num257 = 0;\n  let num258 = 0;\n  let num259 = 0;\n  let num260 = 0;\n  let num261 = 0;\n  let num262 = 0;\n  let num263 = 0;\n  let num264 = 0;\n  let num265 = 0;\n  let num266 = 0;\n  let num267 = 0;\n  let num268 = 0;\n  let num269 = 0;\n  let num270 = 0;\n  let num271 = 0;\n  let num272 = 0;\n  let num273 = 0;\n  let num274 = 0;\n  let num275 = 0;\n  let num276 = 0;\n  let num277 = 0;\n  let num278 = 0;\n  let num279 = 0;\n  let num280 = 0;\n  let num281 = 0;\n  let num282 = 0;\n  let num283 = 0;\n  let num284 = 0;\n  let num285 = 0;\n  let num286 = 0;\n  let num287 = 0;\n  let num288 = 0;\n  let num289 = 0;\n  let num290 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given two posi t ive inte gers n and m, and your task is to compute the\n  average of the integers  fromnthrough  m(inclu ding n and m). \n  Roundtheanswer to the near e st integer and convert that to bi nary.  If n isgreater than m,  return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positi v e intege rs x. return a sorted list of all \n  elements that hasn'tany even digi t.\n No te: Ret urn ed lis t should be sorted in in crea sing order.\n  \n  F o r example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let t = 0\n  let n = 0\n  let e = 0\n  let r = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0\n  let s = 0\n  let ts = 0\n  let t = 0\n  let ns = 0\n  let es = 0\n  let rs = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\" , \"Six\", \"Seven\", \"Eight\" , \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndNameAndLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding name from   \"One\", \"Two\", \"Three\", \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndNameAndLengthAndLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    let temp = arr[i];\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of int e gers, so rt the integers that are between 1 and 9 inclusive,  reverse the resul ting a rr ay, and  th en rep lace each digit by its c orre sponding ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 * ... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorialofi  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * factorial(i));\n  }\n  return list;\n};\n\n/* Implement the functio n  f thattakes n as a parameter,\n  and returns a list of size n, such that the v alue o fthe ele men t at i ndex i is the factorial\n  if i is even\n  or the sum of numbers from1 to i ot herwis e.\n  i starts from 1.\n  t he factorial of i is the multiplication of the numbers fro m 1 to i (1 * 2 *... *  i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn a tuple that has the number of even and odd\n  integer palindromesthat f al l withi n t he ran ge(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [];\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindromeIndex = 0;\n  let oddOddPalindromeIndex = 0;\n  while (evenOddPalindrome <= n) {\n    if (n % evenOddPalindrome === 0) {\n      evenOddPalindromes.push(evenOddPalindrome);\n      evenOddPalindromeIndex++;\n    }\n    evenOddPalindrome++;\n  }\n  while (oddOddPalindrome <= n) {\n    if (n % oddOddPalindrome === 0) {\n      oddOddPalindromes.push(oddOddPalindrome);\n      oddOddPalindromeIndex++;\n    }\n    oddOddPalindrome++;\n  }\n  return evenOddPalindromes.map((item, index) => {\n    return { evenOddPalindrome: item, oddOddPalindrome: oddOddPalindromes[index] };\n  });\n};\n\n/*\n  Given a positive integer n, return all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are 1, 2, 3, 4. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 8\n      Output: [1, 8, 2, 8, 4, 8]\n      Explanation:\n      All possible palindromes of length 8 are 1, 2, 8, 4, 8, 8. one of them is even, and two of them are odd.\n\n  Note:\n      1 <= n <= 10^5\n      All possible palindromes of length n are palindromes of length n.\n*/\nconst allPalindromes = (n) => {\n  const allPalindromes = [];\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindromeIndex = 0;\n  let oddOddPalindromeIndex = 0;\n  while (evenOddPalindrome <= n) {\n    if (n % evenOddPalindrome === 0) {\n      evenOddPalindromes.push(evenOddPalindrome);\n      evenOddPalindromeIndex++;\n    }\n    evenOddPalindrome++;\n  }\n  while (oddOddPalindrome <= n) {\n    if (n % oddOddPalindrome === 0) {\n      oddOddPalindromes.push(oddOddPalindrome);\n      oddOddPalindromeIndex++;\n    }\n    oddOddPalindrome++;\n  }\n  return evenOddPalindromes.map((item, index) => {\n    return { evenOddPalindrome: item, oddOddPalindrome: oddOddPalindromes[index] };\n  });\n};\n\n/*\n  Given a positive integer n, return all possible palindromes of length n that have exactly k digit.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 that have exactly 4 digit are 1, 2, 3, 4. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 8\n      Output: [1, 8, 2, 8, 4, 8]\n      Explanation:\n      All possible palindromes of length 8 that have exactly 8 digit are 1, 2, 8, 4, 8, 8. one of them is even, and two of them are odd.\n\n  Note:\n      1 <= n <= 10^5\n      All possible palindromes of length n that have exactly k digit are palindromes of length n.\n*/\nconst allPalindromesExactKDigit = (n, k) => {\n  const allPalindromes = [];\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindromeIndex = 0;\n  let oddOddPalindromeIndex = 0;\n  while (evenOddPalindrome <= n) {\n    if (n % evenOddPalindrome === 0) {\n      evenOddPalindromes.push(evenOddPalindrome);\n      evenOddPalindromeIndex++;\n    }\n    evenOddPalindrome++;\n  }\n  while (oddOddPalindrome <= n) {\n    if (n % oddOddPalindrome === 0) {\n      oddOddPalindromes.push(oddOddPalindrome);\n      oddOddPalindromeIndex++;\n    }\n    oddOddPalindrome++;\n  }\n  return evenOddPalindromes.map((item, index) => {\n    return { evenOddPalindrome: item, oddOddPalindrome: oddOddPalindromes[index] };\n  });\n};\n\n/*\n  Given a positive integer n, return all possible palindromes of length n that have exactly k digit and are palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 that have exactly 4 digit are 1, 2, 3, 4. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 8\n      Output: [1, 8, 2, 8, 4, 8]\n      Explanation:\n      All possible palindromes of length 8 that have exactly 8 digit are 1, 2, 8, 4, 8, 8. one of them is even, and two of them are odd.\n\n  Note:\n      1 <= n <= 10^5\n      All possible palindromes of length n that have exactly k digit are palindromes of length n.\n*/\nconst allPalindromesExactKDigitAndPalindromes = (n, k) => {\n  const allPalindromes = [];\n  let evenOddPalindrome = 1;\n  let oddOddPalindrome = 1;\n  let evenOddPalindromeIndex = 0;\n  let oddOddPalindromeIndex = 0;\n  while (evenOddPalindrome <= n) {\n    if (n % evenOddPalindrome === 0) {\n      evenOddPalindromes.push(evenOddPalindrome);\n      evenOddPalindromeIndex++;\n    }\n    evenOddPalindrome++;\n  }\n  while (oddOddPalindrome <= n) {\n    if (n % ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive ,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2 , and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function coun t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Write a function countDigits t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countDigits([]) == 0\n  >>> countDigits([-1, 11, -11]) == 1\n  >>> countDigits([1, 1, 2]) == 3\n  */\nconst countDigits = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countZeros t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countOdd t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countOdd([]) == 0\n  >>> countOdd([-1, 1, 1]) == 1\n  >>> countOdd([1, 1, 1]) == 1\n  */\nconst countOdd = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countEven t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countEven([]) == 0\n  >>> countEven([-1, 11, -11]) == 1\n  >>> countEven([1, 1, 2]) == 1\n  */\nconst countEven = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countOddEven t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countOddEven([]) == 0\n  >>> countOddEven([-1, 11, -11]) == 1\n  >>> countOddEven([1, 1, 2]) == 1\n  */\nconst countOddEven = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countOddOdd t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countOddOdd([]) == 0\n  >>> countOddOdd([-1, 1, 1]) == 1\n  >>> countOddOdd([1, 1, 1]) == 1\n  */\nconst countOddOdd = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countEvenOdd t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countEvenOdd([]) == 0\n  >>> countEvenOdd([-1, 11, -11]) == 1\n  >>> countEvenOdd([1, 1, 2]) == 1\n  */\nconst countEvenOdd = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n      i++;\n    }\n    sum += arr[i];\n    count++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function countOddEvenOdd t Nums whi ch takes an array of integers and returns\n  the number ofelements whic h hasasum ofdig its >0.\n  If a number is nega tive,then its first s i gneddigit will be negative:\n  e. g. -12 3 hassigned digits-1, 2, and 3.\n  >>> countOddEvenOdd([]) == 0\n  >>> countOddEvenOdd([-1, 1, 1]) == 1\n  >>> countOddEvenOdd([1, 1, 2]) == 1\n  */\nconst countOddEvenOd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N int egers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N int egers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be ra ndomly  o rdered.  Yo ur tas k is to determine if\n  i t is  possible to get a n  array sorted in non-decreasing o rder b y performing \n  thefollo wing operation on the given array:\n      Youare allowed t o perform right shift o perati on any number of times. \n  \n  Oneright shift ope ration meansshifting all elements of the array by one\n  position in the right directio n. The last element of the array will be moved to\n  thestarting p osition i n the array i.e. 0th index. \n\n  If it is possibleto obtainthe s orted array by performing the above operation\n  then return  true elsereturn false.\n  If the given array is empty then retur n true.\n\n Note: The given listisguaranteed t o haveunique elem ents.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c ^ d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary AND on these inputs andreturn  r esult a lso  as astring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c & d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary OR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c | d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c ^ d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary AND on these inputs andreturn  r esult a lso  as astring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c & d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary OR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c | d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c ^ d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary AND on these inputs andreturn  r esult a lso  as astring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c & d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary OR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c | d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c ^ d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary AND on these inputs andreturn  r esult a lso  as astring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c & d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary OR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c | d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary XOR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c ^ d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary AND on these inputs andreturn  r esult a lso  as astring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c & d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two strings a and bconsisting only of 1s and 0s.\n  Perform binary OR on these inputs andreturn  r esult a lso  as astring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a.charCodeAt(i);\n    let d = b.charCodeAt(i);\n    r += (c | d).toString(2);\n  }\n  return r;\n};\n\n/* Input are two string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you w i ll imple ment a function that takes two lists of numbers,\n  and determines wheth er itis  possib leto per form an exchange of elem ents \n between them to makelst1 a list ofonly even num bers.  There is no limiton th e number of exchanged elements between lst1 and lst2.\n  If  it is possible to exch ange e lements between the lst 1 and lst2 to make\n  allthe elementsof lst1to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let allEven = true;\n  let allOdd = true;\n  let allOddEven = true;\n  let allEvenOdd = true;\n  let allOddEvenOdd = true;\n  let allEvenOddOddEven = true;\n  let allOddEvenOddOddEven = true;\n  let allEvenOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOddOddOddOddEvenOdd = true;\n  let allOddEvenOddOddOddEvenOdd = true;\n  let allEvenOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      const count = letters.reduce((acc, letter) => {\n        acc[letter] = acc[letter] || 0;\n        acc[letter]++;\n        return acc;\n      }, {});\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequency = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequencies = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequencies2 = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequencies3 = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequencies4 = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequencies5 = () => {\n  const res = {};\n  const words = test.split(' ');\n  words.forEach((word) => {\n    const letters = word.split('');\n    letters.forEach((letter) => {\n      res[letter] = res[letter] || 0;\n      res[letter]++;\n    });\n  });\n  return res;\n};\n\n/*Given a string represe n ting a s pace separated lowercase letters, return a dictionary\n  of the letter w ithth emost re pet itionand containing the corre spon ding count.\n  If s e veral letters have the same occur rence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task  We are given tw o  strings  s and c, you have to deleted all the characters ins that are equal to  any c ha racterinc\n  th en check if the result s trin gis palindrome.\nA string is called palindrome ifit rea ds the same backward as f orward.\n  You should return atuple containing the resultstring and true/false f or the  check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let resultString = \"\";\n  let check = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = \"\";\n  let temp2 = \"\";\n  let temp3 = \"\";\n  let temp4 = \"\";\n  let temp5 = \"\";\n  let temp6 = \"\";\n  let temp7 = \"\";\n  let temp8 = \"\";\n  let temp9 = \"\";\n  let temp10 = \"\";\n  let temp11 = \"\";\n  let temp12 = \"\";\n  let temp13 = \"\";\n  let temp14 = \"\";\n  let temp15 = \"\";\n  let temp16 = \"\";\n  let temp17 = \"\";\n  let temp18 = \"\";\n  let temp19 = \"\";\n  let temp20 = \"\";\n  let temp21 = \"\";\n  let temp22 = \"\";\n  let temp23 = \"\";\n  let temp24 = \"\";\n  let temp25 = \"\";\n  let temp26 = \"\";\n  let temp27 = \"\";\n  let temp28 = \"\";\n  let temp29 = \"\";\n  let temp30 = \"\";\n  let temp31 = \"\";\n  let temp32 = \"\";\n  let temp33 = \"\";\n  let temp34 = \"\";\n  let temp35 = \"\";\n  let temp36 = \"\";\n  let temp37 = \"\";\n  let temp38 = \"\";\n  let temp39 = \"\";\n  let temp40 = \"\";\n  let temp41 = \"\";\n  let temp42 = \"\";\n  let temp43 = \"\";\n  let temp44 = \"\";\n  let temp45 = \"\";\n  let temp46 = \"\";\n  let temp47 = \"\";\n  let temp48 = \"\";\n  let temp49 = \"\";\n  let temp50 = \"\";\n  let temp51 = \"\";\n  let temp52 = \"\";\n  let temp53 = \"\";\n  let temp54 = \"\";\n  let temp55 = \"\";\n  let temp56 = \"\";\n  let temp57 = \"\";\n  let temp58 = \"\";\n  let temp59 = \"\";\n  let temp60 = \"\";\n  let temp61 = \"\";\n  let temp62 = \"\";\n  let temp63 = \"\";\n  let temp64 = \"\";\n  let temp65 = \"\";\n  let temp66 = \"\";\n  let temp67 = \"\";\n  let temp68 = \"\";\n  let temp69 = \"\";\n  let temp70 = \"\";\n  let temp71 = \"\";\n  let temp72 = \"\";\n  let temp73 = \"\";\n  let temp74 = \"\";\n  let temp75 = \"\";\n  let temp76 = \"\";\n  let temp77 = \"\";\n  let temp78 = \"\";\n  let temp79 = \"\";\n  let temp80 = \"\";\n  let temp81 = \"\";\n  let temp82 = \"\";\n  let temp83 = \"\";\n  let temp84 = \"\";\n  let temp85 = \"\";\n  let temp86 = \"\";\n  let temp87 = \"\";\n  let temp88 = \"\";\n  let temp89 = \"\";\n  let temp90 = \"\";\n  let temp91 = \"\";\n  let temp92 = \"\";\n  let temp93 = \"\";\n  let temp94 = \"\";\n  let temp95 = \"\";\n  let temp96 = \"\";\n  let temp97 = \"\";\n  let temp98 = \"\";\n  let temp99 = \"\";\n  let temp100 = \"\";\n  let temp101 = \"\";\n  let temp102 = \"\";\n  let temp103 = \"\";\n  let temp104 = \"\";\n  let temp105 = \"\";\n  let temp106 = \"\";\n  let temp107 = \"\";\n  let temp108 = \"\";\n  let temp109 = \"\";\n  let temp110 = \"\";\n  let temp111 = \"\";\n  let temp112 = \"\";\n  let temp113 = \"\";\n  let temp114 = \"\";\n  let temp115 = \"\";\n  let temp116 = \"\";\n  let temp117 = \"\";\n  let temp118 = \"\";\n  let temp119 = \"\";\n  let temp120 = \"\";\n  let temp121 = \"\";\n  let temp122 = \"\";\n  let temp123 = \"\";\n  let temp124 = \"\";\n  let temp125 = \"\";\n  let temp126 = \"\";\n  let temp127 = \"\";\n  let temp128 = \"\";\n  let temp129 = \"\";\n  let temp130 = \"\";\n  let temp131 = \"\";\n  let temp132 = \"\";\n  let temp133 = \"\";\n  let temp134 = \"\";\n  let temp135 = \"\";\n  let temp136 = \"\";\n  let temp137 = \"\";\n  let temp138 = \"\";\n  let temp139 = \"\";\n  let temp140 = \"\";\n  let temp141 = \"\";\n  let temp142 = \"\";\n  let temp143 = \"\";\n  let temp144 = \"\";\n  let temp145 = \"\";\n  let temp146 = \"\";\n  let temp147 = \"\";\n  let temp148 = \"\";\n  let temp149 = \"\";\n  let temp150 = \"\";\n  let temp151 = \"\";\n  let temp152 = \"\";\n  let temp153 = \"\";\n  let temp154 = \"\";\n  let temp155 = \"\";\n  let temp156 = \"\";\n  let temp157 = \"\";\n  let temp158 = \"\";\n  let temp159 = \"\";\n  let temp160 = \"\";\n  let temp161 = \"\";\n  let temp162 = \"\";\n  let temp163 = \"\";\n  let temp164 = \"\";\n  let temp165 = \"\";\n  let temp166 = \"\";\n  let temp167 = \"\";\n  let temp168 = \"\";\n  let temp169 = \"\";\n  let temp170 = \"\";\n  let temp171 = \"\";\n  let temp172 = \"\";\n  let temp173 = \"\";\n  let temp174 = \"\";\n  let temp175 = \"\";\n  let temp176 = \"\";\n  let temp177 = \"\";\n  let temp178 = \"\";\n  let temp179 = \"\";\n  let temp180 = \"\";\n  let temp181 = \"\";\n  let temp182 = \"\";\n  let temp183 = \"\";\n  let temp184 = \"\";\n  let temp185 = \"\";\n  let temp186 = \"\";\n  let temp187 = \"\";\n  let temp188 = \"\";\n  let temp189 = \"\";\n  let temp190 = \"\";\n  let temp191 = \"\";\n  let temp192 = \"\";\n  let temp193 = \"\";\n  let temp194 = \"\";\n  let temp195 = \"\";\n  let temp196 = \"\";\n  let temp197 = \"\";\n  let temp198 = \"\";\n  let temp199 = \"\";\n  let temp200 = \"\";\n  let temp201 = \"\";\n  let temp202 = \"\";\n  let temp203 = \"\";\n  let temp204 = \"\";\n  let temp205 = \"\";\n  let temp206 = \"\";\n  let temp207 = \"\";\n  let temp208 = \"\";\n  let temp209 = \"\";\n  let temp210 = \"\";\n  let temp211 = \"\";\n  let temp212 = \"\";\n  let temp213 = \"\";\n  let temp214 = \"\";\n  let temp215 = \"\";\n  let temp216 = \"\";\n  let temp217 = \"\";\n  let temp218 = \"\";\n  let temp219 = \"\";\n  let temp220 = \"\";\n  let temp221 = \"\";\n  let temp222 = \"\";\n  let temp223 = \"\";\n  let temp224 = \"\";\n  let temp225 = \"\";\n  let temp226 = \"\";\n  let temp227 = \"\";\n  let temp228 = \"\";\n  let temp229 = \"\";\n  let temp230 = \"\";\n  let temp231 = \"\";\n  let temp232 = \"\";\n  let temp233 = \"\";\n  let temp234 = \"\";\n  let temp235 = \"\";\n  let temp236 = \"\";\n  let temp237 = \"\";\n  let temp238 = \"\";\n  let temp239 = \"\";\n  let temp240 = \"\";\n  let temp241 = \"\";\n  let temp242 = \"\";\n  let temp243 = \"\";\n  let temp244 = \"\";\n  let temp245 = \"\";\n  let temp246 = \"\";\n  let temp247 = \"\";\n  let temp248 = \"\";\n  let temp249 = \"\";\n  let temp250 = \"\";\n  let temp251 = \"\";\n  let temp25", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of string s , whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of even element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of odd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddOddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddOddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/\\d/)) {\n      res.push(s.length)\n    }\n  })\n  return res\n}\n\n/*Given a list of string s, whereeach string consists of only digits, return a list.  Each element i of  the o ut put sho uld  be \"t he number of odd element s in  the\n  string i of the input.\" where all the i's sho uld be  replacedby the number\n of even digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddOddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    if (s.match(/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num s, find the minimum sum of any non-empty sub-array\n of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    if (num < 0) return acc;\n    if (num === 0) return acc;\n    return Math.min(acc, num);\n  }, 0);\n  return minSum;\n};\n\n/*\n  Given an array of int e gers num ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a recta n gular gr id of wells. Each row represents a single well,\n  and each 1 in a row r eprese nt s a sin gle  unitof water.\n  Each well ha s acorresponding buck e t that can be used to extract wat er fro m it,\n  and all bucketshave the same capacity.  Your task is to use the bucketsto empty the wells.\n  O utputthe number of times you  need to l ower the bucket s.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((val, j) => val === 0? 0 : val));\n  const bucketsLen = buckets.length;\n  const bucketsCapacity = bucketsLen * capacity;\n  const bucketsCapacityInt = bucketsCapacity.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(Number);\n  const bucketsCapacityInt = bucketsCapacityInt.reduce((a, b) => a + b);\n  const bucketsCapacityInt = bucketsCapacityInt.toString();\n  const bucketsCapacityInt = bucketsCapacityInt.split('').map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Inthis Kata, you hav e  to sort  an array of non-negative integers according to\n  number of ones in the ir bin ar y repre sen tation  in ascending order.\n  F ors imilar number of o n es, sort based on decimal value.\n  Itmust be implementedlikethis:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  let numOfOnes = 0;\n  let numOfZeros = 0;\n  let numOfOnesArr = [];\n  let numOfOnesArr2 = [];\n  let numOfOnesArr3 = [];\n  let numOfOnesArr4 = [];\n  let numOfOnesArr5 = [];\n  let numOfOnesArr6 = [];\n  let numOfOnesArr7 = [];\n  let numOfOnesArr8 = [];\n  let numOfOnesArr9 = [];\n  let numOfOnesArr10 = [];\n  let numOfOnesArr11 = [];\n  let numOfOnesArr12 = [];\n  let numOfOnesArr13 = [];\n  let numOfOnesArr14 = [];\n  let numOfOnesArr15 = [];\n  let numOfOnesArr16 = [];\n  let numOfOnesArr17 = [];\n  let numOfOnesArr18 = [];\n  let numOfOnesArr19 = [];\n  let numOfOnesArr20 = [];\n  let numOfOnesArr21 = [];\n  let numOfOnesArr22 = [];\n  let numOfOnesArr23 = [];\n  let numOfOnesArr24 = [];\n  let numOfOnesArr25 = [];\n  let numOfOnesArr26 = [];\n  let numOfOnesArr27 = [];\n  let numOfOnesArr28 = [];\n  let numOfOnesArr29 = [];\n  let numOfOnesArr30 = [];\n  let numOfOnesArr31 = [];\n  let numOfOnesArr32 = [];\n  let numOfOnesArr33 = [];\n  let numOfOnesArr34 = [];\n  let numOfOnesArr35 = [];\n  let numOfOnesArr36 = [];\n  let numOfOnesArr37 = [];\n  let numOfOnesArr38 = [];\n  let numOfOnesArr39 = [];\n  let numOfOnesArr40 = [];\n  let numOfOnesArr41 = [];\n  let numOfOnesArr42 = [];\n  let numOfOnesArr43 = [];\n  let numOfOnesArr44 = [];\n  let numOfOnesArr45 = [];\n  let numOfOnesArr46 = [];\n  let numOfOnesArr47 = [];\n  let numOfOnesArr48 = [];\n  let numOfOnesArr49 = [];\n  let numOfOnesArr50 = [];\n  let numOfOnesArr51 = [];\n  let numOfOnesArr52 = [];\n  let numOfOnesArr53 = [];\n  let numOfOnesArr54 = [];\n  let numOfOnesArr55 = [];\n  let numOfOnesArr56 = [];\n  let numOfOnesArr57 = [];\n  let numOfOnesArr58 = [];\n  let numOfOnesArr59 = [];\n  let numOfOnesArr60 = [];\n  let numOfOnesArr61 = [];\n  let numOfOnesArr62 = [];\n  let numOfOnesArr63 = [];\n  let numOfOnesArr64 = [];\n  let numOfOnesArr65 = [];\n  let numOfOnesArr66 = [];\n  let numOfOnesArr67 = [];\n  let numOfOnesArr68 = [];\n  let numOfOnesArr69 = [];\n  let numOfOnesArr70 = [];\n  let numOfOnesArr71 = [];\n  let numOfOnesArr72 = [];\n  let numOfOnesArr73 = [];\n  let numOfOnesArr74 = [];\n  let numOfOnesArr75 = [];\n  let numOfOnesArr76 = [];\n  let numOfOnesArr77 = [];\n  let numOfOnesArr78 = [];\n  let numOfOnesArr79 = [];\n  let numOfOnesArr80 = [];\n  let numOfOnesArr81 = [];\n  let numOfOnesArr82 = [];\n  let numOfOnesArr83 = [];\n  let numOfOnesArr84 = [];\n  let numOfOnesArr85 = [];\n  let numOfOnesArr86 = [];\n  let numOfOnesArr87 = [];\n  let numOfOnesArr88 = [];\n  let numOfOnesArr89 = [];\n  let numOfOnesArr90 = [];\n  let numOfOnesArr91 = [];\n  let numOfOnesArr92 = [];\n  let numOfOnesArr93 = [];\n  let numOfOnesArr94 = [];\n  let numOfOnesArr95 = [];\n  let numOfOnesArr96 = [];\n  let numOfOnesArr97 = [];\n  let numOfOnesArr98 = [];\n  let numOfOnesArr99 = [];\n  let numOfOnesArr100 = [];\n  let numOfOnesArr101 = [];\n  let numOfOnesArr102 = [];\n  let numOfOnesArr103 = [];\n  let numOfOnesArr104 = [];\n  let numOfOnesArr105 = [];\n  let numOfOnesArr106 = [];\n  let numOfOnesArr107 = [];\n  let numOfOnesArr108 = [];\n  let numOfOnesArr109 = [];\n  let numOfOnesArr110 = [];\n  let numOfOnesArr = [];\n  let numOfOnesArr2 = [];\n  let numOfOnesArr3 = [];\n  let numOfOnesArr4 = [];\n  let numOfOnesArr5 = [];\n  let numOfOnesArr6 = [];\n  let numOfOnesArr7 = [];\n  let numOfOnesArr8 = [];\n  let numOfOnesArr9 = [];\n  let numOfOnesArr10 = [];\n  let numOfOnesArr11 = [];\n  let numOfOnesArr12 = [];\n  let numOfOnesArr13 = [];\n  let numOfOnesArr14 = [];\n  let numOfOnesArr15 = [];\n  let numOfOnesArr16 = [];\n  let numOfOnesArr17 = [];\n  let numOfOnesArr18 = [];\n  let numOfOnesArr19 = [];\n  let numOfOnesArr20 = [];\n  let numOfOnesArr21 = [];\n  let numOfOnesArr22 = [];\n  let numOfOnesArr23 = [];\n  let numOfOnesArr24 = [];\n  let numOfOnesArr25 = [];\n  let numOfOnesArr26 = [];\n  let numOfOnesArr27 = [];\n  let numOfOnesArr28 = [];\n  let numOfOnesArr29 = [];\n  let numOfOnesArr30 = [];\n  let numOfOnesArr31 = [];\n  let numOfOnesArr32 = [];\n  let numOfOnesArr33 = [];\n  let numOfOnesArr34 = [];\n  let numOfOnesArr35 = [];\n  let numOfOnesArr36 = [];\n  let numOfOnesArr37 = [];\n  let numOfOnesArr38 = [];\n  let numOfOnesArr39 = [];\n  let numOfOnesArr40 = [];\n  let numOfOnesArr41 = [];\n  let numOfOnes", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants ,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a naturalnumber n, you have been tasked to implement \n  a functionthat returnsa list  o f all w ord s from  string s that contain e xact ly \n  n consonants,  in order these words appear in t he str ing s.\n  If the string sis empty then the function should return an empty list.\n Note: you may assume th e inpu t string contains onlyletters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = []\n  let word = ''\n  let count = 0\n  let letter = ''\n  let letterCount = 0\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''\n  let spaceCount = 0\n  let space = ''", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a word.Y our task  is to find the closest vowel that stands between \n two consonants fro m theri ght sid e o f theword (case sensitive).\n \nVowels in the begi n ningand ending doesn'tcount. Re turn e mpty string if you didn't \n  find any vowel met the above condition. \n  You may ass ume that the given stri ng con tains English letter on ly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelIndex = 0;\n  let vowelFound = false;\n  let vowelIndex2 = 0;\n  let vowelFound2 = false;\n  let vowelIndex3 = 0;\n  let vowelFound3 = false;\n  let vowelIndex4 = 0;\n  let vowelFound4 = false;\n  let vowelIndex5 = 0;\n  let vowelFound5 = false;\n  let vowelIndex6 = 0;\n  let vowelFound6 = false;\n  let vowelIndex7 = 0;\n  let vowelFound7 = false;\n  let vowelIndex8 = 0;\n  let vowelFound8 = false;\n  let vowelIndex9 = 0;\n  let vowelFound9 = false;\n  let vowelIndex10 = 0;\n  let vowelFound10 = false;\n  let vowelIndex11 = 0;\n  let vowelFound11 = false;\n  let vowelIndex12 = 0;\n  let vowelFound12 = false;\n  let vowelIndex13 = 0;\n  let vowelFound13 = false;\n  let vowelIndex14 = 0;\n  let vowelFound14 = false;\n  let vowelIndex15 = 0;\n  let vowelFound15 = false;\n  let vowelIndex16 = 0;\n  let vowelFound16 = false;\n  let vowelIndex17 = 0;\n  let vowelFound17 = false;\n  let vowelIndex18 = 0;\n  let vowelFound18 = false;\n  let vowelIndex19 = 0;\n  let vowelFound19 = false;\n  let vowelIndex20 = 0;\n  let vowelFound20 = false;\n  let vowelIndex21 = 0;\n  let vowelFound21 = false;\n  let vowelIndex22 = 0;\n  let vowelFound22 = false;\n  let vowelIndex23 = 0;\n  let vowelFound23 = false;\n  let vowelIndex24 = 0;\n  let vowelFound24 = false;\n  let vowelIndex25 = 0;\n  let vowelFound25 = false;\n  let vowelIndex26 = 0;\n  let vowelFound26 = false;\n  let vowelIndex27 = 0;\n  let vowelFound27 = false;\n  let vowelIndex28 = 0;\n  let vowelFound28 = false;\n  let vowelIndex29 = 0;\n  let vowelFound29 = false;\n  let vowelIndex30 = 0;\n  let vowelFound30 = false;\n  let vowelIndex31 = 0;\n  let vowelFound31 = false;\n  let vowelIndex32 = 0;\n  let vowelFound32 = false;\n  let vowelIndex33 = 0;\n  let vowelFound33 = false;\n  let vowelIndex34 = 0;\n  let vowelFound34 = false;\n  let vowelIndex35 = 0;\n  let vowelFound35 = false;\n  let vowelIndex36 = 0;\n  let vowelFound36 = false;\n  let vowelIndex37 = 0;\n  let vowelFound37 = false;\n  let vowelIndex38 = 0;\n  let vowelFound38 = false;\n  let vowelIndex39 = 0;\n  let vowelFound39 = false;\n  let vowelIndex40 = 0;\n  let vowelFound40 = false;\n  let vowelIndex41 = 0;\n  let vowelFound41 = false;\n  let vowelIndex42 = 0;\n  let vowelFound42 = false;\n  let vowelIndex43 = 0;\n  let vowelFound43 = false;\n  let vowelIndex44 = 0;\n  let vowelFound44 = false;\n  let vowelIndex45 = 0;\n  let vowelFound45 = false;\n  let vowelIndex46 = 0;\n  let vowelFound46 = false;\n  let vowelIndex47 = 0;\n  let vowelFound47 = false;\n  let vowelIndex48 = 0;\n  let vowelFound48 = false;\n  let vowelIndex49 = 0;\n  let vowelFound49 = false;\n  let vowelIndex50 = 0;\n  let vowelFound50 = false;\n  let vowelIndex51 = 0;\n  let vowelFound51 = false;\n  let vowelIndex52 = 0;\n  let vowelFound52 = false;\n  let vowelIndex53 = 0;\n  let vowelFound53 = false;\n  let vowelIndex54 = 0;\n  let vowelFound54 = false;\n  let vowelIndex55 = 0;\n  let vowelFound55 = false;\n  let vowelIndex56 = 0;\n  let vowelFound56 = false;\n  let vowelIndex57 = 0;\n  let vowelFound57 = false;\n  let vowelIndex58 = 0;\n  let vowelFound58 = false;\n  let vowelIndex59 = 0;\n  let vowelFound59 = false;\n  let vowelIndex60 = 0;\n  let vowelFound60 = false;\n  let vowelIndex61 = 0;\n  let vowelFound61 = false;\n  let vowelIndex62 = 0;\n  let vowelFound62 = false;\n  let vowelIndex63 = 0;\n  let vowelFound63 = false;\n  let vowelIndex64 = 0;\n  let vowelFound64 = false;\n  let vowelIndex65 = 0;\n  let vowelFound65 = false;\n  let vowelIndex66 = 0;\n  let vowelFound66 = false;\n  let vowelIndex67 = 0;\n  let vowelFound67 = false;\n  let vowelIndex68 = 0;\n  let vowelFound68 = false;\n  let vowelIndex69 = 0;\n  let vowelFound69 = false;\n  let vowelIndex70 = 0;\n  let vowelFound70 = false;\n  let vowelIndex71 = 0;\n  let vowelFound71 = false;\n  let vowelIndex72 = 0;\n  let vowelFound72 = false;\n  let vowelIndex73 = 0;\n  let vowelFound73 = false;\n  let vowelIndex74 = 0;\n  let vowelFound74 = false;\n  let vowelIndex75 = 0;\n  let vowelFound75 = false;\n  let vowelIndex76 = 0;\n  let vowelFound76 = false;\n  let vowelIndex77 = 0;\n  let vowelFound77 = false;\n  let vowelIndex78 = 0;\n  let vowelFound78 = false;\n  let vowelIndex79 = 0;\n  let vowelFound79 = false;\n  let vowelIndex80 = 0;\n  let vowelFound80 = false;\n  let vowelIndex81 = 0;\n  let vowelFound81 = false;\n  let vowelIndex82 = 0;\n  let vowelFound82 = false;\n  let vowelIndex83 = 0;\n  let vowelFound83 = false;\n  let vowelIndex84 = 0;\n  let vowelFound84 = false;\n  let vowelIndex85 = 0;\n  let vowelFound85 = false;\n  let vowelIndex86 = 0;\n  let vowelFound86 = false;\n  let vowelIndex87 = 0;\n  let vowelFound87 = false;\n  let vowelIndex88 = 0;\n  let vowelFound88 = false;\n  let vowelIndex89 = 0;\n  let vowelFound89 = false;\n  let vowelIndex90 = 0;\n  let vowelFound90 = false;\n  let vowelIndex91 = 0;\n  let vowelFound91 = false;\n  let vowelIndex92 = 0;\n  let vowelFound92 = false;\n  let vowelIndex93 = 0;\n  let vowelFound93 = false;\n  let vowelIndex94 = 0;\n  let vowelFound94 = false;\n  let vowelIndex95 = 0;\n  let vowelFound95 = false;\n  let vowelIndex96 = 0;\n  let vowelFound96 = false;\n  let vowelIndex97 = 0;\n  let vowelFound97 = false;\n  let vowelIndex98 = 0;\n  let vowelFound98 = false;\n  let vowelIndex99 = 0;\n  let vowelFound99 = false;\n  let vowelIndex100 = 0;\n  let vowelFound100 = false;\n  let vowelIndex101 = 0;\n  let vowelFound101 = false;\n  let vowelIndex102 = 0;\n  let vowelFound102 = false;\n  let vowelIndex103 = 0;\n  let vowelFound103 = false;\n  let vowelIndex104 = 0;\n  let vowelFound104 = false;\n  let vowelIndex105 = 0;\n  let vowelFound105 = false;\n  let vowelIndex106 = 0;\n  let vowelFound106 = false;\n  let vowelIndex107 = 0;\n  let vowelFound107 = false;\n  let vowelIndex108 = 0;\n  let vowelFound108 = false;\n  let vowelIndex109 = 0;\n  let vowelFound109 = false;\n  let vowelIndex110 = 0;\n  let vowelFound110 = false;\n  let vowelIndex111 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Youare given a listo f two st rings, both strings consist of open\n  parentheses '(' or close parenthe ses') 'only.\n Yo ur job  is to check if it is po ssib le to concatenatet he two strings in\n some order, t hat th e resulting string will b e good.\n  A string S isconsidered to be good if and onlyif all parentheses in S \n  are  balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let re = /[\\(\\)]/g;\n  let match;\n  let result;\n  while ((match = re.exec(lst))!== null) {\n    result = match[1];\n    if (result === '(') {\n      result = ')';\n    }\n    if (result === ')') {\n      result = '(';\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result === '(' || result === ')') {\n      result = result + result;\n    }\n    if (result ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Outof list of string s , return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Outof list of string s, return  the longest one. Return the first one in case of multiple\n  strings of  the s am e lengt h.Return  null in case the inputlist  is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  let longestLength = 0\n  for (let i = 1; i < strings.length; i++) {\n    const length = strings[i].length\n    if (length > longestLength) {\n      longestLength = length\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n  Return the first element of list that satisfies the predicate test.\n  >>> first([1,2,3,4,5,6,7,8,9], x => x > 2)\n  2\n  >>> first([1,2,3,4,5,6,7,8,9], x => x > 5)\n  6\n  >>> first([1,2,3,4,5,6,7,8,9], x => x > 8)\n  9\n  >>> first([1,2,3,4,5,6,7,8,9], x => x > 9)\n  null\n  */\nconst first = (list, predicate) => {\n  for (let i = 0; i < list.length; i++) {\n    if (predicate(list[i])) {\n      return list[i]\n    }\n  }\n  return null\n}\n\n/**\n  Return the last element of list that satisfies the predicate test.\n  >>> last([1,2,3,4,5,6,7,8,9], x => x > 2)\n  9\n  >>> last([1,2,3,4,5,6,7,8,9], x => x > 5)\n  8\n  >>> last([1,2,3,4,5,6,7,8,9], x => x > 8)\n  7\n  >>> last([1,2,3,4,5,6,7,8,9], x => x > 9)\n  null\n  */\nconst last = (list, predicate) => {\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (predicate(list[i])) {\n      return list[i]\n    }\n  }\n  return null\n}\n\n/**\n  Return the element at position i in list that satisfies the predicate test.\n  >>> nth([1,2,3,4,5,6,7,8,9], 2, x => x > 2)\n  2\n  >>> nth([1,2,3,4,5,6,7,8,9], 3, x => x > 2)\n  3\n  >>> nth([1,2,3,4,5,6,7,8,9], 4, x => x > 2)\n  4\n  >>> nth([1,2,3,4,5,6,7,8,9], 5, x => x > 2)\n  5\n  >>> nth([1,2,3,4,5,6,7,8,9], 6, x => x > 2)\n  6\n  >>> nth([1,2,3,4,5,6,7,8,9], 7, x => x > 2)\n  7\n  >>> nth([1,2,3,4,5,6,7,8,9], 8, x => x > 2)\n  8\n  >>> nth([1,2,3,4,5,6,7,8,9], 9, x => x > 2)\n  9\n  >>> nth([1,2,3,4,5,6,7,8,9], 10, x => x > 2)\n  null\n  */\nconst nth = (list, i, predicate) => {\n  if (i === list.length) {\n    return null\n  }\n  if (i === 0) {\n    return list[i]\n  }\n  return predicate(list[i])? list[i] : nth(list, i - 1, predicate)\n}\n\n/**\n  Return the element at position i in list that satisfies the predicate test.\n  >>> nth([1,2,3,4,5,6,7,8,9], 2, x => x > 2)\n  2\n  >>> nth([1,2,3,4,5,6,7,8,9], 3, x => x > 2)\n  3\n  >>> nth([1,2,3,4,5,6,7,8,9], 4, x => x > 2)\n  4\n  >>> nth([1,2,3,4,5,6,7,8,9], 5, x => x > 2)\n  5\n  >>> nth([1,2,3,4,5,6,7,8,9], 6, x => x > 2)\n  6\n  >>> nth([1,2,3,4,5,6,7,8,9], 7, x => x > 2)\n  7\n  >>> nth([1,2,3,4,5,6,7,8,9], 8, x => x > 2)\n  8\n  >>> nth([1,2,3,4,5,6,7,8,9], 9, x => x > 2)\n  9\n  >>> nth([1,2,3,4,5,6,7,8,9], 10, x => x > 2)\n  null\n  */\nconst nthLast = (list, i, predicate) => {\n  if (i === list.length) {\n    return null\n  }\n  if (i === 0) {\n    return list[i]\n  }\n  return predicate(list[i])? list[i] : nthLast(list, i - 1, predicate)\n}\n\n/**\n  Return the element at position i in list that satisfies the predicate test.\n  >>> nth([1,2,3,4,5,6,7,8,9], 2, x => x > 2)\n  2\n  >>> nth([1,2,3,4,5,6,7,8,9], 3, x => x > 2)\n  3\n  >>> nth([1,2,3,4,5,6,7,8,9], 4, x => x > 2)\n  4\n  >>> nth([1,2,3,4,5,6,7,8,9], 5, x => x > 2)\n  5\n  >>> nth([1,2,3,4,5,6,7,8,9], 6, x => x > 2)\n  6\n  >>> nth([1,2,3,4,5,6,7,8,9], 7, x => x > 2)\n  7\n  >>> nth([1,2,3,4,5,6,7,8,9], 8, x => x > 2)\n  8\n  >>> nth([1,2,3,4,5,6,7,8,9], 9, x => x > 2)\n  9\n  >>> nth([1,2,3,4,5,6,7,8,9], 10, x => x > 2)\n  null\n  */\nconst nthFirst = (list, i, predicate) => {\n  if (i === list.length) {\n    return null\n  }\n  if (i === 0) {\n    return list[i]\n  }\n  return predicate(list[i])? list[i] : nthFirst(list, i - 1, predicate)\n}\n\n/**\n  Return the element at position i in list that satisfies the predicate test.\n  >>> nth([1,2,3,4,5,6,7,8,9], 2, x => x > 2)\n  2\n  >>> nth([1,2,3,4,5,6,7,8,9], 3, x => x > 2)\n  3\n  >>> nth([1,2,3,4,5,6,7,8,9], 4, x => x > 2)\n  4\n  >>> nth([1,2,3,4,5,6,7,8,9], 5, x => x > 2)\n  5\n  >>> nth([1,2,3,4,5,6,7,8,9], 6, x => x > 2)\n  6\n  >>> nth([1,2,3,4,5,6,7,8,9], 7, x => x > 2)\n  7\n  >>> nth([1,2,3,4,5,6,7,8,9], 8, x => x > 2)\n  8\n  >>> nth([1,2,3,4,5,6,7,8,9], 9, x => x > 2)\n  9\n  >>> nth([1,2,3,4,5,6,7,8,9], 10, x => x > 2)\n  null\n  */\nconst nthLastOrNull = (list, i, predicate) => {\n  if (i === list.length) {\n    return null\n  }\n  if (i === 0) {\n    return list[i]\n  }\n  return predicate(list[i])? list[i] : nthLastOrNull(list, i - 1, predicate)\n}\n\n/**\n  Return the element at position i in list that satisfies the predicate test.\n  >>> nth([1,2,3,4,5,6,7,8,9], 2, x => x > 2)\n  2\n  >>> nth([1,2,3,4,5,6,7,8,9], 3, x => x > 2)\n  3\n  >>> nth([1,2,3,4,5,6,7,8,9], 4, x => x > 2)\n  4\n  >>> nth([1,2,3,4,5,6,7,8,9], 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers  and a positive integer k, return a sorted list \n  of length k with the  maxim um  k numb ers  in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let min = 0;\n  let i = 0;\n\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    i++;\n  }\n\n  for (let j = 0; j < k; j++) {\n    if (max < arr[j]) {\n      result.push(max);\n      max = arr[j];\n    }\n    if (min > arr[j]) {\n      result.push(min);\n      min = arr[j];\n    }\n  }\n\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/discuss/455/Java-Solution-for-the-Problem\n// https://", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integ ers, return the sum of all of the odd elements thatare in even positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 0) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 2) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 3) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 4) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 5) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 6) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 7) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 8) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 9) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 10) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 11) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 12) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\n/*Given a non-empty list of integers ers, return the sum of all of the even elements thatare in odd positio ns.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO2 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO3 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO4 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO5 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO6 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO7 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO8 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO9 = arr => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > k) {\n      continue;\n    }\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty arr a y of int egers arr and an integer k, return\n  the sum of theelements with at mo st two  d igits f rom  the f irst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsO10 = arr => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn a sorted list that has the odd numbers in collatz sequence.\n\n  The  Colla tz  conjec tur e is a  conjecture in mathemati cst hat concerns a seq u encedefined\n  as follows: startwith a ny positive integern. Th en each term is obtained fromthe \n  previous term as foll ows: if the previous te rm iseven, the next term isone half o f \n  the previo us term. If the previous term is odd, the next term is 3 times the previous\n  term plus  1. The conjecture is that no matter what value of n, th e sequence  willalw ays reach 1.\n\n  Note: \n      1. Collatz(1) is [1]. \n      2.retur ned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorial(5) returns 120.\n  */\nconst getFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is odd, else return 1.\n\n  Example:\n  getFactorial(5) returns 120.\n  */\nconst getFactorialOdd = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOdd(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorialOdd(5) returns 120.\n  */\nconst getFactorialOddFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOddFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is odd, else return 1.\n\n  Example:\n  getFactorialOddFactorial(5) returns 120.\n  */\nconst getFactorialOddFactorialOdd = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOddFactorialOdd(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorialOddFactorialOdd(5) returns 120.\n  */\nconst getFactorialOddFactorialOddFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOddFactorialOddFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorialOddFactorialOddFactorialOdd(5) returns 120.\n  */\nconst getFactorialOddFactorialOddFactorialOddFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOddFactorialOddFactorialOddFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorialOddFactorialOddFactorialOddFactorialOdd(5) returns 120.\n  */\nconst getFactorialOddFactorialOddFactorialOddFactorialOddFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * getFactorialOddFactorialOddFactorialOddFactorialOddFactorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return its factorial if n is even, else return 1.\n\n  Example:\n  getFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorialOddFactorial", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/124", "prompt": "/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse .\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youhave to write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Write a fu n ction wh ich validates a given date string and\n  returns true if the date is val id oth er wise fa lse.\n  Th e date is valid if all o f th efollowing rulesa re satisfied:\n  1. The date strin g is n ot empty.  2. The number  of days is not less than 1 or higher than 31 days for mon ths 1,3,5,7,8,10,12. An d thenumber of days is notl ess than 1 or higher than  30 days formonths 4,6,9,11. And, thenumber of days is not less than 1 or higher than  29 for the month 2.\n  3. The months should not be lessthan 1orhigher th an 12.  4. The date should be in the format: mm-d d-yyyy\n\n  for example: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  return words;\n};\n\n/* Given a string of wor d s, retur n a list of words split on whitespace, if no whitespaces exists in thetext y ou \n  shou ldspliton commas ',' if no comm ase xists you should r e turnthe number of lower-case let ters w ith odd order in the\n  al phabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse .Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbe r s, retur n whether or not they are sorted\n  in ascending order. Iflist has more  than1duplica teof the  same\n  number, return f alse.Assume no negati v e numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num < 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// descending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedDesc = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num > 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// ascending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedAsc = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num < 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// descending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedDescAsc = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num > 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// ascending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedAscDesc = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num < 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// descending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedDescDesc = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (!sorted.has(num)) {\n      sorted.add(num)\n      if (num > 0) return false\n    }\n  }\n  return true\n}\n\n// Given a list of numbe r s, retur n whether or not they are sorted\n// ascending order. Iflist has more  than1duplica teof the  same\n// number, return f alse.Assume no negati v e numbers and only integers.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n*/\nconst isSortedAscDescDesc = (lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given two inte r vals,\n where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n\n  if (start1 > end2) {\n    return intersection(interval2, interval1);\n  }\n\n  if (end1 > start2) {\n    return intersection(interval1, interval2);\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  intersection,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/interview-question/problem\n  https://www.hackerrank.com/challenges/inter", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZeros = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]];\n  }\n  return sum;\n};\n\n/*\n  Youare given an arra y  arr ofintegers and you need to return\n  sum of magnitudesof integers multipl iedby  p roductofall si gns\n  of each number inthearray, represented by 1, -1 or 0.\n  Note: return nul l foremptyarr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsNoZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const signs = [-1, 0, 1];\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += signs[arr[i]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N r o ws and N  columns (N >= 2) and a positive integer k, \n  eachcell of the grid co ntains  a  value.  Ev ery in teger in the range [1, N  *N ]  inclusive appe a rs exactly once on the cells of t he gri d.\n\n Youhave to find th e minimum path of length k inthe grid. You can start\n  fr om any cell, and in eac h step  you can move to any of  the neigh bor cells,\n  in  other words, you can go to cells which share an edge with you current\n  cell.\n  Please  note that a path of length k means visiting exactly k c ells (not  necessa rily distinct).\n  You CANNOT go off the grid.\n  Apath A (of  leng th k) is considered less than a path B (of length k) if\n  a fter making  the ordered lists of the values on the cells that A a nd B go\n  through (let's call th emlst_A and ls t_B), l st_A islex icographically less\n  than  lst_B, in othe r words, there exist an integer index i (1 <= i <= k)  such that lst_ A [i] < lst_B[i] and for any j (1 <= j < i) we have   lst_ A[j] = lst_B[j].\n  I t is gua ranteed that  the answer is unique.\n  Return an ordered list of the val ues on the cells that the minimum path go  thro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [r, c] = grid.length;\n  const [l, rs, cs] = grid[0].length;\n  const [minPath] = Array(l).fill(0);\n  minPath[0] = 1;\n  for (let i = 1; i < l; i++) {\n    minPath[i] = minPath[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < l; i++) {\n    for (let j = 0; j < r; j++) {\n      if (minPath[j] <= k) {\n        minPath[j] = minPath[j] + grid[i][j];\n      }\n    }\n  }\n  return minPath;\n};\n\n// https://leetcode.com/problems/find-the-minimum-path-length\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-path-length/discuss/10856/Java-Solution\n// https://leetcode.com/problems/find", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest com m on divis or of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor(25, 15)\n * 5\n */\nconst greatestCommonDivisor2 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor2(25, 15)\n * 5\n */\nconst greatestCommonDivisor3 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor3(25, 15)\n * 5\n */\nconst greatestCommonDivisor4 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor4(25, 15)\n * 5\n */\nconst greatestCommonDivisor5 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor5(25, 15)\n * 5\n */\nconst greatestCommonDivisor6 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor6(25, 15)\n * 5\n */\nconst greatestCommonDivisor7 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor7(25, 15)\n * 5\n */\nconst greatestCommonDivisor8 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor8(25, 15)\n * 5\n */\nconst greatestCommonDivisor9 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor9(25, 15)\n * 5\n */\nconst greatestCommonDivisor10 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor10(25, 15)\n * 5\n */\nconst greatestCommonDivisor11 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor11(25, 15)\n * 5\n */\nconst greatestCommonDivisor12 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor12(25, 15)\n * 5\n */\nconst greatestCommonDivisor13 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor13(25, 15)\n * 5\n */\nconst greatestCommonDivisor14 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor14(25, 15)\n * 5\n */\nconst greatestCommonDivisor15 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor15(25, 15)\n * 5\n */\nconst greatestCommonDivisor16 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor16(25, 15)\n * 5\n */\nconst greatestCommonDivisor17 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor17(25, 15)\n * 5\n */\nconst greatestCommonDivisor18 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor18(25, 15)\n * 5\n */\nconst greatestCommonDivisor19 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor19(25, 15)\n * 5\n */\nconst greatestCommonDivisor20 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor20(25, 15)\n * 5\n */\nconst greatestCommonDivisor21 = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return the greatest common divisor of 2 integers a and b\n * >>> greatestCommonDivisor21(25, 15)\n * 5\n */\nconst greatestCommonDivisor22 = (a, b) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonac c i sequen ce, it was studied deeply by mathematicians in \n  the last couple centu ries.Ho wever,wha t peop le don't know is Tribona ccisequence.\n  Tribon a cci sequence is definedby the re curren ce:\n tri(1) = 3\n  tri(n)  = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n  - 2) + tri(n + 1), ifn is o dd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let res = []\n  let i = 2\n  while (i <= n) {\n    res.push(i)\n    i++\n  }\n  return res\n}\n\n/*\n  Given a non-negative integer number n, you have to\n  return the sum of the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = 1 + 2 + 3 + 5 + 7 = 15 \n  fib(4) = 1 + 2 + 3 + 5 + 6 = 21 \n  fib(3) = 1 + 2 + 3 + 5 + 4 = 28 \n  fib(2) = 1 + 2 + 3 + 5 + 3 = 25 \n  fib(1) =1 + 2 + 3 + 5 + 4 = 10 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + 3 + 5 + 4 = 1 \n  fib(0) =1 + 2 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integ e r n, ret urn the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let ret = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % 2 === 0) {\n      ret += i;\n    }\n  }\n  return ret;\n};\n\n/*Given a positive integer n, return its prime factors.\n  For example:\n  factors(2)  == [2,1]\n  factors(3)  == [3,1]\n  factors(5)  == [5,1,1]\n  factors(7)  == [7,1,1]\n  factors(11)== [11,1]\n  factors(13) == [13,1]\n  factors(15) == [15,1]\n  factors(17) == [17,1]\n  factors(19) == [19,1]\n  factors(23) == [2,3,1]\n  factors(29) == [2,3,5,1]\n  factors(31) == [2,3,5,7,1]\n  factors(37) == [2,3,5,7,11,1]\n  factors(39) == [2,3,5,7,11,13,1]\n  factors(43) == [2,3,5,7,11,13,15,1]\n  factors(47) == [2,3,5,7,11,13,15,17,1]\n  factors(53) == [2,3,5,7,11,13,15,17,19,1]\n  factors(59) == [2,3,5,7,11,13,15,17,19,23,1]\n  factors(61) == [2,3,5,7,11,13,15,17,19,23,29,1]\n  factors(67) == [2,3,5,7,11,13,15,17,19,23,29,31,1]\n  factors(69) == [2,3,5,7,11,13,15,17,19,23,29,31,37,1]\n  factors(73) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,1]\n  factors(79) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,1]\n  factors(83) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,1]\n  factors(89) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,1]\n  factors(93) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,1]\n  factors(97) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,1]\n  factors(101) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,1]\n  factors(103) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,1]\n  factors(107) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,1]\n  factors(109) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,1]\n  factors(113) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,1]\n  factors(117) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,1]\n  factors(121) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,1]\n  factors(123) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,1]\n  factors(127) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,1]\n  factors(131) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,1]\n  factors(133) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,1]\n  factors(137) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,1]\n  factors(141) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,1]\n  factors(143) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,117,1]\n  factors(147) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,117,121,1]\n  factors(151) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,117,121,123,1]\n  factors(153) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,117,121,123,127,1]\n  factors(157) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,93,97,101,103,107,109,113,117,121,123,127,131,1]\n  factors(159) == [2,3,5,7,11,13,15,17,19,23,29,31,37,39,43,47,53,59,61,67,69,73,79,83,89,9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function tha t  takes a  string as input which contains only square brackets.\n  The function sh ould r et urn tru e i f andonly if there is a valid  sub sequence of bracke t s\n  where at least one bracket in  the s ubsequence is nested.\n  i sNested('[[]]') ➞ true\n isNested('[]]]]]]][[[[[]') ➞ fals e\n  isNested('[][]') ➞false  isNested('[]') ➞ fals e\n  isNest ed('[[][]]') ➞true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const repassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*Youare given a list o f  numbers .\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a list o f  numbers.\n  You need to return the sum of squared numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesDown = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDown = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDownUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDownDownUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDownDownDownUpUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDownDownDownDownUpUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 296\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumCubesUpDownDownDownDownUpUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list o f  numbers.\n  You need to return the sum of cubed numbers in the given list,\n roundea ch elem ent  in th e list to the upper int( Ceil ing) first.\n  Examples:", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  returns  true if the last character\n  of a given string is an alphabetical char acteran d is no t\n a par t of a word, and false o ther wise.\n  Note: \"wor d \" isa group of characters separa ted by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  let isGroup = false\n  let isWord = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isLetterOrDigit = false\n  let isSpaceOrLetter = false\n  let isLetterOrDigitOrSpace = false\n  let isLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigit = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpace = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigit = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpace = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigit = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpace = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpace = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOrLetter = false\n  let isLetterOrDigitOrSpaceOrLetterOrDigitOrSpaceOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values .\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function whic h  returns  the largest index of an element which\n  is not greater than or equal t o theel ement i mme diatel y preceding it. If\n  nosuch  element exists th e n return -1. The given array will  not c ontain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange2 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange3 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange4 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange5 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange6 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange7 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange8 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange9 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange10 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange11 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange12 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange13 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange14 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange15 = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the number of elements in the array which\n  are greater than or equal to t o the element i.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = 2\n  */\nconst canArrange16 = (arr) => {", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and ' b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ist. \n If there is non egative or positiveintegers, ret urn th em asnull.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.POSITIVE_INFINITY;\n  let smallest = Number.NEGATIVE_INFINITY;\n  let ret = null;\n  \n  lst.forEach((el) => {\n    if (el < smallest) {\n      smallest = el;\n    }\n    if (el > largest) {\n      largest = el;\n    }\n  });\n  \n  if (smallest === Number.POSITIVE_INFINITY) {\n    return null;\n  }\n  \n  if (smallest === Number.NEGATIVE_INFINITY) {\n    return null;\n  }\n  \n  ret = smallest;\n  \n  return ret;\n};\n\n/* Create a function tha t  returns  a tuple (a, b), where 'a' is\n  the largest of negative integers, and'b' isth e small est \n  ofpositive integers in a l ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be . or ,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  if (aType!== bType) {\n    return false\n  }\n  if (aType === 'number') {\n    return a > b\n  } else if (aType ==='string') {\n    return a > b\n  } else if (aType === 'boolean') {\n    return a > b\n  } else if (aType === 'undefined') {\n    return a > b\n  } else if (aType ==='symbol') {\n    return a > b\n  } else if (aType === 'function') {\n    return a > b\n  } else if (aType === 'object') {\n    const aObj = a instanceof Object? a : {}\n    const bObj = b instanceof Object? b : {}\n    return Object.keys(aObj).every(key => compareOne(aObj[key], bObj[key]))\n  }\n  return false\n}\n\n/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  if (aType!== bType) {\n    return false\n  }\n  if (aType === 'number') {\n    return a < b\n  } else if (aType ==='string') {\n    return a < b\n  } else if (aType === 'boolean') {\n    return a < b\n  } else if (aType === 'undefined') {\n    return a < b\n  } else if (aType ==='symbol') {\n    return a < b\n  } else if (aType === 'function') {\n    return a < b\n  } else if (aType === 'object') {\n    const aObj = a instanceof Object? a : {}\n    const bObj = b instanceof Object? b : {}\n    return Object.keys(aObj).every(key => compareOne(aObj[key], bObj[key]))\n  }\n  return false\n}\n\n/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  if (aType!== bType) {\n    return false\n  }\n  if (aType === 'number') {\n    return a < b\n  } else if (aType ==='string') {\n    return a < b\n  } else if (aType === 'boolean') {\n    return a < b\n  } else if (aType === 'undefined') {\n    return a < b\n  } else if (aType ==='symbol') {\n    return a < b\n  } else if (aType === 'function') {\n    return a < b\n  } else if (aType === 'object') {\n    const aObj = a instanceof Object? a : {}\n    const bObj = b instanceof Object? b : {}\n    return Object.keys(aObj).every(key => compareOne(aObj[key], bObj[key]))\n  }\n  return false\n}\n\n/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  if (aType!== bType) {\n    return false\n  }\n  if (aType === 'number') {\n    return a > b\n  } else if (aType ==='string') {\n    return a > b\n  } else if (aType === 'boolean') {\n    return a > b\n  } else if (aType === 'undefined') {\n    return a > b\n  } else if (aType ==='symbol') {\n    return a > b\n  } else if (aType === 'function') {\n    return a > b\n  } else if (aType === 'object') {\n    const aObj = a instanceof Object? a : {}\n    const bObj = b instanceof Object? b : {}\n    return Object.keys(aObj).every(key => compareOne(aObj[key], bObj[key]))\n  }\n  return false\n}\n\n/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or,\n\n  compareOne(1, 2.5 ) ➞ 2.5\n  compareOne(1,  \"2,3\" ) ➞ \"2,3\"\n  compareOne( \"5,1\", \"6\" ) ➞ \"6\"\n  compa reOne(\"1\", 1) ➞ null  */\nconst compareOne = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  if (aType!== bType) {\n    return false\n  }\n  if (aType === 'number') {\n    return a < b\n  } else if (aType ==='string') {\n    return a < b\n  } else if (aType === 'boolean') {\n    return a < b\n  } else if (aType === 'undefined') {\n    return a < b\n  } else if (aType ==='symbol') {\n    return a < b\n  } else if (aType === 'function') {\n    return a < b\n  } else if (aType === 'object') {\n    const aObj = a instanceof Object? a : {}\n    const bObj = b instanceof Object? b : {}\n    return Object.keys(aObj).every(key => compareOne(aObj[key], bObj[key]))\n  }\n  return false\n}\n\n/*\n  Create a function tha t  takes i ntegers, floats, or strings representing\n  real numbers, and returns th e larg er  variab lein its  given variable type.\n Retu rn null if the val u es are equal.\n  Note: If a real n umberis represented as astrin g, the floating point might be. or ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 positive evennumbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -4;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -6;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -10;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -12;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -14;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -16;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === -18;\n};\n\n/*Evaluate whether the g i ven numb er n can be written as the sum of exactly 4 negative evennumbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegativeNegative", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheBrazilian factoria l  is defi ned as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  wh eren>0\n\n  Fo r e xample :\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * n * n * n * n * n;\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial2 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial2(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial3 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial3(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial4 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial4(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial5 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial5(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial6 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial6(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial7 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial7(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial8 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial8(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial9 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial9(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial10 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial10(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial11 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial11(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial12 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial12(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial13 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial13(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial14 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial14(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative, the function returns 0.\n  If the number is positive, the function returns 1.\n  */\nconst factorial15 = (n) => {\n  if (n <= 0) return 1;\n  return n * factorial15(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than or equal to 1, the function returns 1.\n  If the number is less than or equal to 1, the function returns 0.\n  If the number is zero, the function returns 0.\n  If the number is negative", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return prefixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return suffixes;\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes, prefixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = [];\n  let suffixes = [];\n  let currentPrefix = string;\n  let currentSuffix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return prefixes.concat(suffixes, prefixes, prefixes, prefixes, prefixes, prefixes, prefixes);\n};\n\n/* Return list of all pr e fixes fr om shortest to longest of the input string\n  >>> allPrefixesAndSuffixesAndPrefixesAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textArray = text.split(' ');\n  let newText = '';\n  textArray.forEach((word) => {\n    if (word.length > 2) {\n      newText += word.replace(/e/g,'e').replace(/l/g,'l').replace(/o/g,'o').replace(/n/g,'n').replace(/r/g,'r').replace(/s/g,'s').replace(/t/g,'t');\n    } else {\n      newText += word;\n    }\n  });\n  return newText;\n};\n\n/*\n  Given a string text,r eplace a ll spaces in it with underscores, \n  and if a string has more than 2 co nsecut iv e space s,\n  the n replace all consecutiv e sp aces with - \n  \n f ixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file 's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function whic h  takes a  string representing a file's name, and returns\n  'Yes' if the the file's nam eis vali d,and re turns 'No' otherwise.\n A fi le's name is consi d eredto be valid ifandonly if a ll the  following conditions \n are met:\n  - There should notbe more than three digits (' 0'-'9') in the file's n ame.\n - The file's name cont ains exact ly one dot '.'  - The substring before the dot should not be empty, and it starts with a letter from\n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub stringaft er the do t should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_letter = file_name_without_extension.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_length = file_name_without_extension_letter.length;\n  const file_name_without_extension_letter_letter = file_name_without_extension_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_length = file_name_without_extension_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter = file_name_without_extension_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_length = file_name_without_extension_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0).toUpperCase();\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will ta k e a list  of integers. For all entries in the list, the function shall square th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange2 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange3 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o f 3. The function will not \nchange the entries in the li st whose indexes are no t a mu ltiple of 3 or 4. Thef unction sh all then return  the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange4 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will ta k e a list  of integers. For all entries in the list, the function shall cube th e inte ge r entry  if  its i ndex is a \n  multiple of  3a nd will cube the i n teger entry if its index is a mul tipleof 4 and not a multiple o ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const index = words.indexOf(word);\n    if (index > -1) {\n      res.push(word);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  Youare given a strin g  represe nting a sentence,\n  the sentence contains some words separated by a spa ce, an d you h ave  to re turn a string that conta insthe words from the original sentence,\n whose length s areprimenumbers,\n  the orde r of the words in the new string should be the same as the  original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Yourtask is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.split('/')\n    const [numerator2, denominator2] = n.split('/')\n    if (numerator === numerator2) {\n      if (denominator === denominator2) {\n        return true\n      }\n      return false\n    }\n    if (numerator < denominator) {\n      return false\n    }\n    if (numerator > denominator) {\n      return true\n    }\n    return false\n  }\n\n  /*\n  Your task is to implem e nt a fun ction that will simplify the expression\n  x * n. The function returns t rueif  x  * n ev alu ates t o a whole number and fal se otherwise. Both x and n, are string representationof a f raction, and have the fol lowing format,\n  <numerator>/<denominator> where both nume rator and denominator a re pos itive whole numbers.\n You can a ssume that x, a nd n are valid fractions, and do not have zero asdenominator.\n\n  simplify(\"1/5\", \"5/1\" ) = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/ 10\", \"10/2 \") = fals e\n  */const simplify = (x, n) => {\n    const [numerator, denominator] = x.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return a.num - b.num\n    return a.index - b.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return b.num - a.num\n    return a.index - b.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndex = (nums) => {\n  const numsSorted = nums.sort((a, b) => a.index - b.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return b.num - a.num\n    return a.index - b.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => b.index - a.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return a.num - b.num\n    return b.index - a.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndex = (nums) => {\n  const numsSorted = nums.sort((a, b) => a.index - b.index - a.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return b.num - a.num\n    return a.index - b.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDesc = (nums) => {\n  const numsSorted = nums.sort((a, b) => b.index - a.index - b.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return a.num - b.num\n    return b.index - a.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndex = (nums) => {\n  const numsSorted = nums.sort((a, b) => a.index - b.index - a.index - b.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { num, index }\n  })\n  return numsSortedWithIndex.sort((a, b) => {\n    if (a.index === b.index) return b.num - a.num\n    return a.index - b.index\n  })\n}\n\n/*\n  Write a function whic h  sorts t he given list of integers\n  in ascending order according to the sum oftheirdi gits.\n No te: if  there are several items  wit hsimilar sum of t h eir digits,\n  orderthem based on  their  index inoriginal list.\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByIndexDescByIndexDescByIndexDescByIndex = (nums) => {\n  const numsSorted = nums.sort((a, b) => a.index - b.index - a.index - b.index - a.index)\n  const numsSortedWithIndex = numsSorted.map((num, index) => {\n    return { ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  numsArray.forEach(num => {\n    if (num % 10 === 1) {\n      firstDigit = num % 10;\n      count++;\n    }\n    if (num % 10 === 3) {\n      lastDigit = num % 10;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function thatt akes anarray of numbers as input and returns \n  the numberof elements in thearrayth at aregre ater t han 10 and both \n  first  and  last digits of an umber are odd (1, 3, 5,7, 9).\n  For example:\n  specialFilter([15, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a posit i ve integ er n. You have to create an integer array a of length n.\n     For each  i (1≤i ≤ n),  th e valu e of a[i] = i * i - i +1.    Return the nu m ber of triples (a[i], a[j], a[k])  of awherei <j < k, \n and a [i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i * i - i + 1);\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n and an integer array a. Return the number of distinct triplets (a[i], a[j], a[k])  of a. \n  a[i] ≤ a[j] ≤ a[k].\n\n  Example :\n      Input: n = 5, a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j] + 1 \n      a[k] = a[j] + a[k] + 1 \n      a[i] = a[j] + a[k] + 1 \n      a[j] = a[k] + a[j", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth , M ars, J upiter, Saturn,\n  Uranus , Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There are eight plane t s in our  solar system: the closerst to the Sun\n  is Mercury, the next one is Ve nus, t he n Earth, M ars, J upiter, Saturn,\n  Uranus, Ne ptune.\n  Write a f u nction that takes two planet name s as s trings planet1 and planet 2.\n  The function should return a tuple containing all pla nets whose orbits are\n locat ed between the orbit of  planet1 a nd the orbit of  planet2, sorted by\n the proximity tothe sun.\n The function should return an empty t uple if planet1or planet2\n are not correct planet name s.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1orplanet2 = planet1 === planet2? planet1 : planet2;\n  const planet1orplanet2orPlanet1 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1;\n  const planet1orplanet2orPlanet2 = planet1orplanet2\n   ? planet1orplanet2\n    : planet2;\n  const planet1orplanet2orPlanet1orPlanet2 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1orplanet2orPlanet1;\n  const planet1orplanet2orPlanet2orPlanet1 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1orplanet2orPlanet1orPlanet2;\n  const planet1orplanet2orPlanet2orPlanet2orPlanet1 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1orplanet2orPlanet1orPlanet2orPlanet2;\n  const planet1orplanet2orPlanet2orPlanet2orPlanet2orPlanet1 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1orplanet2orPlanet1orPlanet2orPlanet2orPlanet1orPlanet2;\n  const planet1orplanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2 = planet1orplanet2\n   ? planet1orplanet2\n    : planet1orplanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet1orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet2orPlanet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng th of each word, and yo u\n  should return the lis t sorted by that rule.\n  If two words have the same length, sort the list alphabeticall y.\n  The function should return a list of strings in sor ted order. \n  You ma y assume that all words will have the same length. \n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let result = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*Write a function thata ccepts a  list of strings as a parameter,\n  deletes the strings that have odd le ngthsfr om it,  a nd ret urns the resulted list w ithasorted order,\n T he list is always alist of strin gs and  never anarray of number s,\n  and it may containduplicates.\n  The order of the lis t should be ascending b y leng ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a string conta i ning spa ce-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZero = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOne = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndOne = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThree = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFour = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFive = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string conta i ning spa ce-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrY(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrZ(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrW(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrX(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrYZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrYZ(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrYZ(7, 34, 12) == 34\n  for xOrYZ(15, 8, 5) == 5\n  \n  */\nconst xOrYW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrYW(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrYW(7, 34, 12) == 34\n  for xOrYW(15, 8, 5) == 5\n  \n  */\nconst xOrYX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrYX(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrYX(7, 34, 12) == 34\n  for xOrYX(15, 8, 5) == 5\n  \n  */\nconst xOrZW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrZW(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrZW(7, 34, 12) == 34\n  for xOrZW(15, 8, 5) == 5\n  \n  */\nconst xOrZX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrZX(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrZX(7, 34, 12) == 34\n  for xOrZX(15, 8, 5) == 5\n  \n  */\nconst xOrWZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrWZ(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrWZ(7, 34, 12) == 34\n  for xOrWZ(15, 8, 5) == 5\n  \n  */\nconst xOrWY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrWY(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrWY(7, 34, 12) == 34\n  for xOrWY(15, 8, 5) == 5\n  \n  */\nconst xOrWX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return 0\n  }\n  if (n % y === 0) {\n    return y\n  }\n  if (n % x === 0) {\n    return x\n  }\n  return xOrWX(n - y, x, n % y)\n}\n\n/*A simple program whichs hould re turn the value of x if n is \n  a prime number and should return the val ue ofyotherwi se. \n\n  Examples:\n  for xOrWX(7, 34, 12) == 34\n  for xOrWX(15, 8, 5) == 5\n  \n  */\nconst xOrXZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3 ,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are odd. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Difference =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 2 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are even. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Diff =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 2!== 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 3. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Div =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 3 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 2. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 2 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 1. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 1 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 0. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 0 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by -1. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % -1 === 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 1. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 1!== 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, retur n the sum of squares of the numbers\n  in the list that are divisible by 0. Ignorenumber sthat ar e n egativ e or not integers.\n  dou bleT heDifference([1, 3,  2, 0]) == 1 + 9 + 0 + 0 = 10\n  d oubleT heDifference([-1, -2, 0])  == 0\n  doubleTheDifference([9, -2]) == 81\n doubleTheDiff erence([0]) == 0\n  If t he inp ut list is empty, retur n 0.\n  */const doubleThe Mod =(lst) => {\n  let n = 0;\n  if(lst.length!== 0){\n    for(let i = 0; i < lst.length; i++){\n      if(lst[i] % 0!== 0){\n        n = n + lst[i] * lst[i];\n      }\n    }\n  }\n  return n;\n};\n/* Given a list of numbe r s, ret", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length , where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that fee ling when the result of some long-awaited\n  event is finally known. The  feeli ng s and t hou ghts y ou have at that moment a re definitely worthn oting down and comparing.\n  Yourtask i s to determine if aperso n correctly guessed theresults of a number of matches.\n You are given two array s of s cores and guesses of eq ual length, where each in dex shows a match. \n Return an array of the samelength denoting how far off each gues s was. If they have guessed correctly,\n  the value is 0,  and if no t, the va lue isthe absolutedifference between the guess a nd the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = game.map(x => x.toString());\n  let result = new Array(guesses.length);\n  let diff = 0;\n  \n  guesses.forEach((guess, i) => {\n    let guess = parseInt(guess);\n    let guesses = game.map(x => x.toString());\n    let result = new Array(guesses.length);\n    \n    guesses.forEach((guess, j) => {\n      let guess = parseInt(guess);\n      let guesses = game.map(x => x.toString());\n      let result = new Array(guesses.length);\n      \n      guesses.forEach((guess, k) => {\n        let guess = parseInt(guess);\n        let guesses = game.map(x => x.toString());\n        let result = new Array(guesses.length);\n        \n        guesses.forEach((guess, l) => {\n          let guess = parseInt(guess);\n          let guesses = game.map(x => x.toString());\n          let result = new Array(guesses.length);\n          \n          guesses.forEach((guess, m) => {\n            let guess = parseInt(guess);\n            let guesses = game.map(x => x.toString());\n            let result = new Array(guesses.length);\n            \n            guesses.forEach((guess, n) => {\n              let guess = parseInt(guess);\n              let guesses = game.map(x => x.toString());\n              let result = new Array(guesses.length);\n              \n              guesses.forEach((guess, o) => {\n                let guess = parseInt(guess);\n                let guesses = game.map(x => x.toString());\n                let result = new Array(guesses.length);\n                \n                guesses.forEach((guess, p) => {\n                  let guess = parseInt(guess);\n                  let guesses = game.map(x => x.toString());\n                  let result = new Array(guesses.length);\n                  \n                  guesses.forEach((guess, q) => {\n                    let guess = parseInt(guess);\n                    let guesses = game.map(x => x.toString());\n                    let result = new Array(guesses.length);\n                    \n                    guesses.forEach((guess, r) => {\n                      let guess = parseInt(guess);\n                      let guesses = game.map(x => x.toString());\n                      let result = new Array(guesses.length);\n                      \n                      guesses.forEach((guess, s) => {\n                        let guess = parseInt(guess);\n                        let guesses = game.map(x => x.toString());\n                        let result = new Array(guesses.length);\n                        \n                        guesses.forEach((guess, t) => {\n                          let guess = parseInt(guess);\n                          let guesses = game.map(x => x.toString());\n                          let result = new Array(guesses.length);\n                          \n                          guesses.forEach((guess, u) => {\n                            let guess = parseInt(guess);\n                            let guesses = game.map(x => x.toString());\n                            let result = new Array(guesses.length);\n                            \n                            guesses.forEach((guess, v) => {\n                              let guess = parseInt(guess);\n                              let guesses = game.map(x => x.toString());\n                              let result = new Array(guesses.length);\n                              \n                              guesses.forEach((guess, w) => {\n                                let guess = parseInt(guess);\n                                let guesses = game.map(x => x.toString());\n                                let result = new Array(guesses.length);\n                                \n                                guesses.forEach((guess, x) => {\n                                  let guess = parseInt(guess);\n                                  let guesses = game.map(x => x.toString());\n                                  let result = new Array(guesses.length);\n                                  \n                                  guesses.forEach((guess, y) => {\n                                    let guess = parseInt(guess);\n                                    let guesses = game.map(x => x.toString());\n                                    let result = new Array(guesses.length);\n                                    \n                                    guesses.forEach((guess, z) => {\n                                      let guess = parseInt(guess);\n                                      let guesses = game.map(x => x.toString());\n                                      let result = new Array(guesses.length);\n                                      \n                                      guesses.forEach((guess, a) => {\n                                        let guess = parseInt(guess);\n                                        let guesses = game.map(x => x.toString());\n                                        let result = new Array(guesses.length);\n                                        \n                                        guesses.forEach((guess, b) => {\n                                          let guess = parseInt(guess);\n                                          let guesses = game.map(x => x.toString());\n                                          let result = new Array(guesses.length);\n                                          \n                                          guesses.forEach((guess, c) => {\n                                            let guess = parseInt(guess);\n                                            let guesses = game.map(x => x.toString());\n                                            let result = new Array(guesses.length);\n                                            \n                                            guesses.forEach((guess, d) => {\n                                              let guess = parseInt(guess);\n                                              let guesses = game.map(x => x.toString());\n                                              let result = new Array(guesses.length);\n                                              \n                                              guesses.forEach((guess, e) => {\n                                                let guess = parseInt(guess);\n                                                let guesses = game.map(x => x.toString());\n                                                let result = new Array(guesses.length);\n                                                \n                                                guesses.forEach((guess, f) => {\n                                                  let guess = parseInt(guess);\n                                                  let guesses = game.map(x => x.toString());\n                                                  let result = new Array(guesses.length);\n                                                  \n                                                  guesses.forEach((guess, g) => {\n                                                    let guess = parseInt(guess);\n                                                    let guesses = game.map(x => x.toString());\n                                                    let result = new Array(guesses.length);\n                                                    \n                                                    guesses.forEach((guess, h) => {\n                                                      let guess = parseInt(guess);\n                                                      let guesses = game.map(x => x.toString());\n                                                      let result = new Array(guesses.length);\n                                                      \n                                                      guesses.forEach((guess, i) => {\n                                                        let guess = parseInt(guess);\n                                                        let guesses = game.map(x => x.toString());\n                                                        let result = new Array(guesses.length);\n                                                        \n                                                        guesses.forEach((guess, j) => {\n                                                          let guess = parseInt(guess);\n                                                          let guesses = game.map(x => x.toString());\n                                                          let result = new Array(guesses.length);\n                                                          \n                                                          guesses.forEach((guess, k) => {\n                                                            let guess = parseInt(guess);\n                                                            let guesses = game.map(x => x.toString());\n                                                            let result = new Array(guesses.length);\n                                                            \n                                                            guesses.forEach((guess, l) => {\n                                                              let guess = parseInt(guess);\n                                                              let guesses = game.map(x => x.toString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youwill be given then ame of a  class (a string) and a list of extensions.\n  The extensions are to beused t oload ad dit ionalclasses to the class. Th e\nstrength of the ex t ension is as follows: Let CAP bethe nu mber of the uppercase\n  l etters in the extension's name, and let SM be the number o f lowercase letters\n  i n theextension's name, thes trength is given by the f raction CAP - SM.\n  You should find the strongestextension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If thereare two or  moreext ensions with the same strength, you should\n  choos e the onethatcomes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let strongest_extension = '';\n  let extension_strength_counter = 0;\n  let extension_strength_max = 0;\n  let extension_strength_min = 0;\n  let extension_strength_sum = 0;\n  let extension_strength_sum2 = 0;\n  let extension_strength_sum3 = 0;\n  let extension_strength_sum4 = 0;\n  let extension_strength_sum5 = 0;\n  let extension_strength_sum6 = 0;\n  let extension_strength_sum7 = 0;\n  let extension_strength_sum8 = 0;\n  let extension_strength_sum9 = 0;\n  let extension_strength_sum10 = 0;\n  let extension_strength_sum11 = 0;\n  let extension_strength_sum12 = 0;\n  let extension_strength_sum13 = 0;\n  let extension_strength_sum14 = 0;\n  let extension_strength_sum15 = 0;\n  let extension_strength_sum16 = 0;\n  let extension_strength_sum17 = 0;\n  let extension_strength_sum18 = 0;\n  let extension_strength_sum19 = 0;\n  let extension_strength_sum20 = 0;\n  let extension_strength_sum21 = 0;\n  let extension_strength_sum22 = 0;\n  let extension_strength_sum23 = 0;\n  let extension_strength_sum24 = 0;\n  let extension_strength_sum25 = 0;\n  let extension_strength_sum26 = 0;\n  let extension_strength_sum27 = 0;\n  let extension_strength_sum28 = 0;\n  let extension_strength_sum29 = 0;\n  let extension_strength_sum30 = 0;\n  let extension_strength_sum31 = 0;\n  let extension_strength_sum32 = 0;\n  let extension_strength_sum33 = 0;\n  let extension_strength_sum34 = 0;\n  let extension_strength_sum35 = 0;\n  let extension_strength_sum36 = 0;\n  let extension_strength_sum37 = 0;\n  let extension_strength_sum38 = 0;\n  let extension_strength_sum39 = 0;\n  let extension_strength_sum40 = 0;\n  let extension_strength_sum41 = 0;\n  let extension_strength_sum42 = 0;\n  let extension_strength_sum43 = 0;\n  let extension_strength_sum44 = 0;\n  let extension_strength_sum45 = 0;\n  let extension_strength_sum46 = 0;\n  let extension_strength_sum47 = 0;\n  let extension_strength_sum48 = 0;\n  let extension_strength_sum49 = 0;\n  let extension_strength_sum50 = 0;\n  let extension_strength_sum51 = 0;\n  let extension_strength_sum52 = 0;\n  let extension_strength_sum53 = 0;\n  let extension_strength_sum54 = 0;\n  let extension_strength_sum55 = 0;\n  let extension_strength_sum56 = 0;\n  let extension_strength_sum57 = 0;\n  let extension_strength_sum58 = 0;\n  let extension_strength_sum59 = 0;\n  let extension_strength_sum60 = 0;\n  let extension_strength_sum61 = 0;\n  let extension_strength_sum62 = 0;\n  let extension_strength_sum63 = 0;\n  let extension_strength_sum64 = 0;\n  let extension_strength_sum65 = 0;\n  let extension_strength_sum66 = 0;\n  let extension_strength_sum67 = 0;\n  let extension_strength_sum68 = 0;\n  let extension_strength_sum69 = 0;\n  let extension_strength_sum70 = 0;\n  let extension_strength_sum71 = 0;\n  let extension_strength_sum72 = 0;\n  let extension_strength_sum73 = 0;\n  let extension_strength_sum74 = 0;\n  let extension_strength_sum75 = 0;\n  let extension_strength_sum76 = 0;\n  let extension_strength_sum77 = 0;\n  let extension_strength_sum78 = 0;\n  let extension_strength_sum79 = 0;\n  let extension_strength_sum80 = 0;\n  let extension_strength_sum81 = 0;\n  let extension_strength_sum82 = 0;\n  let extension_strength_sum83 = 0;\n  let extension_strength_sum84 = 0;\n  let extension_strength_sum85 = 0;\n  let extension_strength_sum86 = 0;\n  let extension_strength_sum87 = 0;\n  let extension_strength_sum88 = 0;\n  let extension_strength_sum89 = 0;\n  let extension_strength_sum90 = 0;\n  let extension_strength_sum91 = 0;\n  let extension_strength_sum92 = 0;\n  let extension_strength_sum93 = 0;\n  let extension_strength_sum94 = 0;\n  let extension_strength_sum95 = 0;\n  let extension_strength_sum96 = 0;\n  let extension_strength_sum97 = 0;\n  let extension_strength_sum98 = 0;\n  let extension_strength_sum99 = 0;\n  let extension_strength_sum100 = 0;\n  let extension_strength_sum101 = 0;\n  let extension_strength_sum102 = 0;\n  let extension_strength_sum103 = 0;\n  let extension_strength_sum104 = 0;\n  let extension_strength_sum105 = 0;\n  let extension_strength_sum106 = 0;\n  let extension_strength_sum107 = 0;\n  let extension_strength_sum108 = 0;\n  let extension_strength_sum109 = 0;\n  let extension_strength_sum110 = 0;\n  let extension_strength_sum111 = 0;\n  let extension_strength_sum112 = 0;\n  let extension_strength_sum113 = 0;\n  let extension_strength_sum114 = 0;\n  let extension_strength_sum115 = 0;\n  let extension_strength_sum116 = 0;\n  let extension_strength_sum117 = 0;\n  let extension_strength_sum118 = 0;\n  let extension_strength_sum119 = 0;\n  let extension_strength_sum120 = 0;\n  let extension_strength_sum121 = 0;\n  let extension_strength_sum122 = 0;\n  let extension_strength_sum123 = 0;\n  let extension_strength_sum124 = 0;\n  let extension_strength_sum125 = 0;\n  let extension_strength_sum126 = 0;\n  let extension_strength_sum127 = 0;\n  let extension_strength_sum128 = 0;\n  let extension_strength_sum129 = 0;\n  let extension_strength_sum130 = 0;\n  let extension_strength_sum131 = 0;\n  let extension_strength_sum132 = 0;\n  let extension_strength_sum133 = 0;\n  let extension_strength_sum134 = 0;\n  let extension_strength_sum135 = 0;\n  let extension_strength_sum136 = 0;\n  let extension_strength_sum137 = 0;\n  let extension_strength_sum138 = 0;\n  let extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given 2 words. You need  to return true if the second word or any of its rotations is a substri ng inth e first  wo rd\n  c ycpatternCheck(\"abcd\",\"a bd\")  => false\n  cycpat t ernCheck(\"hello\",\"ell\")=> true\n cycpa tternCheck(\"whassup\",\"psu s\") => false\n  cycpatternCheck(\"abab\",\"baa\")=> true\n  cyc patternCheck(\"efef\",\"ee ff\") = > false\n  cycpatternChe ck(\"himens s\",\"simen\") =>true\n  */\nconst cycpatternCheck = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let len = a1.length\n  let len = b1.length\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. retu r n a tupl e that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString.charAt(i) % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of letters respectively.\n\n   Example:\n      letterCount(\" \") ==> (1, 0)\n      letterCount(\"abc\") ==> (1, 3)\n      letterCount(\"abc \") ==> (1, 3)\n      letterCount(\"abc def\") ==> (1, 3)\n      letterCount(\"abc def ghi\") ==> (1, 3)\n      letterCount(\"abc def ghi jkl\") ==> (1, 3)\n      letterCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      letterCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)\n      letterCount(\"abc def ghi jkl mno pqrs tuv\") ==> (1, 3)\n      letterCount(\"abc def ghi jkl mno pqrs tuv wxyz\") ==> (1, 3)\n  */\nconst letterCount = (str) => {\n  let letterCount = 0;\n  let strString = str.toString();\n  for (let i = 0; i < strString.length; i++) {\n    if (strString.charAt(i) ==='') {\n      letterCount++;\n    } else {\n      break;\n    }\n  }\n  return [letterCount, strString.length - letterCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of words respectively.\n\n   Example:\n      wordCount(\" \") ==> (1, 0)\n      wordCount(\"abc\") ==> (1, 3)\n      wordCount(\"abc \") ==> (1, 3)\n      wordCount(\"abc def\") ==> (1, 3)\n      wordCount(\"abc def ghi\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv wxyz\") ==> (1, 3)\n  */\nconst wordCount = (str) => {\n  let wordCount = 0;\n  let strString = str.toString();\n  for (let i = 0; i < strString.length; i++) {\n    if (strString.charAt(i) ==='') {\n      wordCount++;\n    } else {\n      break;\n    }\n  }\n  return [wordCount, strString.length - wordCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of sentences respectively.\n\n   Example:\n      sentenceCount(\" \") ==> (1, 0)\n      sentenceCount(\"abc\") ==> (1, 3)\n      sentenceCount(\"abc \") ==> (1, 3)\n      sentenceCount(\"abc def\") ==> (1, 3)\n      sentenceCount(\"abc def ghi\") ==> (1, 3)\n      sentenceCount(\"abc def ghi jkl\") ==> (1, 3)\n      sentenceCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      sentenceCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)\n      sentenceCount(\"abc def ghi jkl mno pqrs tuv\") ==> (1, 3)\n      sentenceCount(\"abc def ghi jkl mno pqrs tuv wxyz\") ==> (1, 3)\n  */\nconst sentenceCount = (str) => {\n  let sentenceCount = 0;\n  let strString = str.toString();\n  for (let i = 0; i < strString.length; i++) {\n    if (strString.charAt(i) ==='') {\n      sentenceCount++;\n    } else {\n      break;\n    }\n  }\n  return [sentenceCount, strString.length - sentenceCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of words respectively.\n\n   Example:\n      wordCount(\" \") ==> (1, 0)\n      wordCount(\"abc\") ==> (1, 3)\n      wordCount(\"abc \") ==> (1, 3)\n      wordCount(\"abc def\") ==> (1, 3)\n      wordCount(\"abc def ghi\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv wxyz\") ==> (1, 3)\n  */\nconst wordCount = (str) => {\n  let wordCount = 0;\n  let strString = str.toString();\n  for (let i = 0; i < strString.length; i++) {\n    if (strString.charAt(i) ==='') {\n      wordCount++;\n    } else {\n      break;\n    }\n  }\n  return [wordCount, strString.length - wordCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of words respectively.\n\n   Example:\n      wordCount(\" \") ==> (1, 0)\n      wordCount(\"abc\") ==> (1, 3)\n      wordCount(\"abc \") ==> (1, 3)\n      wordCount(\"abc def\") ==> (1, 3)\n      wordCount(\"abc def ghi\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs tuv wxyz\") ==> (1, 3)\n  */\nconst wordCount = (str) => {\n  let wordCount = 0;\n  let strString = str.toString();\n  for (let i = 0; i < strString.length; i++) {\n    if (strString.charAt(i) ==='') {\n      wordCount++;\n    } else {\n      break;\n    }\n  }\n  return [wordCount, strString.length - wordCount];\n};\n\n/*Given a string. retu r n a tupl e that has the number of words respectively.\n\n   Example:\n      wordCount(\" \") ==> (1, 0)\n      wordCount(\"abc\") ==> (1, 3)\n      wordCount(\"abc \") ==> (1, 3)\n      wordCount(\"abc def\") ==> (1, 3)\n      wordCount(\"abc def ghi\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno\") ==> (1, 3)\n      wordCount(\"abc def ghi jkl mno pqrs\") ==> (1, 3)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er, obta in its roman numeral equivalent as a string,\n  and returnit in lowerca se. Re stricti ons : 1 <=  num <= 1000\n\n  Examples :\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanNumeral = {\n    '0': 'i',\n    '1': 'ii',\n    '2': 'iii',\n    '3': 'iv',\n    '4': 'v',\n    '5': 'vi',\n    '6': 'vii',\n    '7': 'ix',\n    '8': 'x',\n    '9': 'xi',\n    '10': 'x',\n    '11': 'xii',\n    '12': 'ixv',\n    '13': 'xvi',\n    '14': 'xvii',\n    '15': 'ixix',\n    '16': 'xixv',\n    '17': 'xixvi',\n    '18': 'xixvii',\n    '19': 'ixixix',\n    '20': 'xixixv',\n    '21': 'xixixvi',\n    '22': 'xixixvii',\n    '23': 'ixixixix',\n    '24': 'xixixixv',\n    '25': 'xixixixvi',\n    '26': 'xixixixvii',\n    '27': 'ixixixixix',\n    '28': 'xixixixv',\n    '29': 'xixixixvi',\n    '30': 'xixixixvii',\n    '31': 'ixixixixix',\n    '32': 'xixixixv',\n    '33': 'xixixixvi',\n    '34': 'xixixixvii',\n    '35': 'ixixixixix',\n    '36': 'xixixixv',\n    '37': 'xixixixvi',\n    '38': 'xixixixvii',\n    '39': 'ixixixixix',\n    '40': 'xixixixv',\n    '41': 'xixixixvi',\n    '42': 'xixixixvii',\n    '43': 'ixixixixix',\n    '44': 'xixixixv',\n    '45': 'xixixixvi',\n    '46': 'xixixixvii',\n    '47': 'ixixixixix',\n    '48': 'xixixixv',\n    '49': 'xixixixvi',\n    '50': 'xixixixvii',\n    '51': 'ixixixixix',\n    '52': 'xixixixv',\n    '53': 'xixixixvi',\n    '54': 'xixixixvii',\n    '55': 'ixixixixix',\n    '56': 'xixixixv',\n    '57': 'xixixixvi',\n    '58': 'xixixixvii',\n    '59': 'ixixixixix',\n    '60': 'xixixixv',\n    '61': 'xixixixvi',\n    '62': 'xixixixvii',\n    '63': 'ixixixixixix',\n    '64': 'xixixixv',\n    '65': 'xixixixvi',\n    '66': 'xixixixvii',\n    '67': 'ixixixixix',\n    '68': 'xixixixv',\n    '69': 'xixixixvi',\n    '70': 'xixixixvii',\n    '71': 'ixixixixix',\n    '72': 'xixixixv',\n    '73': 'xixixixvi',\n    '74': 'xixixixvii',\n    '75': 'ixixixixix',\n    '76': 'xixixixv',\n    '77': 'xixixixvi',\n    '78': 'xixixixvii',\n    '79': 'ixixixixix',\n    '80': 'xixixixv',\n    '81': 'xixixixvi',\n    '82': 'xixixixvii',\n    '83': 'ixixixixix',\n    '84': 'xixixixv',\n    '85': 'xixixixvi',\n    '86': 'xixixixvii',\n    '87': 'ixixixixix',\n    '88': 'xixixixv',\n    '89': 'xixixixvi',\n    '90': 'xixixixvii',\n    '91': 'ixixixixix',\n    '92': 'xixixixv',\n    '93': 'xixixixvi',\n    '94': 'xixixixvii',\n    '95': 'ixixixixix',\n    '96': 'xixixixv',\n    '97': 'xixixixvi',\n    '98': 'xixixixvii',\n    '99': 'ixixixixix',\n    '100': 'xixixixv',\n    '101': 'xixixixvi',\n    '102': 'xixixixvii',\n    '103': 'ixixixixix',\n    '104': 'xixixixv',\n    '105': 'xixixixvi',\n    '106': 'xixixixvii',\n    '107': 'ixixixixix',\n    '108': 'xixixixv',\n    '109': 'xixixixvi',\n    '110': 'xixixixvii',\n    '111': 'ixixixixix',\n    '112': 'xixixixv',\n    '113': 'xixixixvi',\n    '114': 'xixixixvii',\n    '115': 'ixixixixix',\n    '116': 'xixixixv',\n    '117': 'xixixixvi',\n    '118': 'xixixixvii',\n    '119': 'ixixixixix',\n    '120': 'xixixixv',\n    '121': 'xixixixvi',\n    '122': 'xixixixvii',\n    '123': 'ixixixixix',\n    '124': 'xixixixv',\n    '125': 'xixixixvi',\n    '126': 'xixixixvii',\n    '127': 'ixixixixix',\n    '128': 'xixixixv',\n    '129': 'xixixixvi',\n    '130': 'xixixixvii',\n    '131': 'ixixixixix',\n    '132': 'xixixixv',\n    '133': 'xixixixvi',\n    '134': 'xixixixvii',\n    '135': 'ixixixixix',\n    '136': 'xixixixv',\n    '137': 'xixixixvi',\n    '138': 'xixixixvii',\n    '139': 'ixixixixix',\n    '140': 'xixixixv',\n    '141': 'xixixixvi',\n    '142': 'xixixixvii',\n    '143': 'ixixixixix',\n    '144': 'xixixixv',\n    '145': 'xixixixvi',\n    '146': 'xixixixvii',\n    '147': 'ixixixixix',\n    '148': 'xixixixv',\n    '149': 'xixixixvi',", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b2 - a2 * b1 < 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a left-ang ledtr ia ngle, f als e othe rwise.\n  A left-angledtria ngle is a triangle in which one angle is left angle  or\n 90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b2 - a2 * b1 > 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b1 + a2 * b2 > 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a left-ang ledtr ia ngle, f als e othe rwise.\n  A left-angledtria ngle is a triangle in which one angle is left angle  or\n 90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b2 - a2 * b1 < 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b1 + a2 * b2 > 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a left-ang ledtr ia ngle, f als e othe rwise.\n  A left-angledtria ngle is a triangle in which one angle is left angle  or\n 90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b2 - a2 * b1 > 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b1 + a2 * b2 > 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a left-ang ledtr ia ngle, f als e othe rwise.\n  A left-angledtria ngle is a triangle in which one angle is left angle  or\n 90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b2 - a2 * b1 < 0;\n};\n\n/*\n Given the lengths oft he three  sides of a triangle. Return true if the three\n  sides form a right-ang ledtr ia ngle, f als e othe rwise.\n  A right-angledtria ngle is a triangle in which one angle is right angle  or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180),\n    a2 = Math.sin(a * Math.PI / 180),\n    b1 = Math.cos(b * Math.PI / 180),\n    b2 = Math.sin(b * Math.PI / 180);\n  return a1 * b1 + a2 * b2 > 0;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thata ccepts a  list of strings.\n  The list contains different words. Return the wordwith m ax imum nu mbe r\n  of  unique characters. If m ulti ple strings have m a ximum number of unique\n characte rs, re turn the one which comesfirst in lexicographical order.\n\n  findMax([\"name\", \"of\",\"string\"]) === \"string\" \n  fin dMax([\"name\", \"enam\",\" game\"]) == = \"enam\"\n  find Max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxLength = 0;\n  let maxWord = \"\";\n  let maxChar = \"\";\n  let maxCharLength = 0;\n  let maxCharWord = \"\";\n  let maxCharWordLength = 0;\n  let maxCharWordLength2 = 0;\n  let maxCharWordLength3 = 0;\n  let maxCharWordLength4 = 0;\n  let maxCharWordLength5 = 0;\n  let maxCharWordLength6 = 0;\n  let maxCharWordLength7 = 0;\n  let maxCharWordLength8 = 0;\n  let maxCharWordLength9 = 0;\n  let maxCharWordLength10 = 0;\n  let maxCharWordLength11 = 0;\n  let maxCharWordLength12 = 0;\n  let maxCharWordLength13 = 0;\n  let maxCharWordLength14 = 0;\n  let maxCharWordLength15 = 0;\n  let maxCharWordLength16 = 0;\n  let maxCharWordLength17 = 0;\n  let maxCharWordLength18 = 0;\n  let maxCharWordLength19 = 0;\n  let maxCharWordLength20 = 0;\n  let maxCharWordLength21 = 0;\n  let maxCharWordLength22 = 0;\n  let maxCharWordLength23 = 0;\n  let maxCharWordLength24 = 0;\n  let maxCharWordLength25 = 0;\n  let maxCharWordLength26 = 0;\n  let maxCharWordLength27 = 0;\n  let maxCharWordLength28 = 0;\n  let maxCharWordLength29 = 0;\n  let maxCharWordLength30 = 0;\n  let maxCharWordLength31 = 0;\n  let maxCharWordLength32 = 0;\n  let maxCharWordLength33 = 0;\n  let maxCharWordLength34 = 0;\n  let maxCharWordLength35 = 0;\n  let maxCharWordLength36 = 0;\n  let maxCharWordLength37 = 0;\n  let maxCharWordLength38 = 0;\n  let maxCharWordLength39 = 0;\n  let maxCharWordLength40 = 0;\n  let maxCharWordLength41 = 0;\n  let maxCharWordLength42 = 0;\n  let maxCharWordLength43 = 0;\n  let maxCharWordLength44 = 0;\n  let maxCharWordLength45 = 0;\n  let maxCharWordLength46 = 0;\n  let maxCharWordLength47 = 0;\n  let maxCharWordLength48 = 0;\n  let maxCharWordLength49 = 0;\n  let maxCharWordLength50 = 0;\n  let maxCharWordLength51 = 0;\n  let maxCharWordLength52 = 0;\n  let maxCharWordLength53 = 0;\n  let maxCharWordLength54 = 0;\n  let maxCharWordLength55 = 0;\n  let maxCharWordLength56 = 0;\n  let maxCharWordLength57 = 0;\n  let maxCharWordLength58 = 0;\n  let maxCharWordLength59 = 0;\n  let maxCharWordLength60 = 0;\n  let maxCharWordLength61 = 0;\n  let maxCharWordLength62 = 0;\n  let maxCharWordLength63 = 0;\n  let maxCharWordLength64 = 0;\n  let maxCharWordLength65 = 0;\n  let maxCharWordLength66 = 0;\n  let maxCharWordLength67 = 0;\n  let maxCharWordLength68 = 0;\n  let maxCharWordLength69 = 0;\n  let maxCharWordLength70 = 0;\n  let maxCharWordLength71 = 0;\n  let maxCharWordLength72 = 0;\n  let maxCharWordLength73 = 0;\n  let maxCharWordLength74 = 0;\n  let maxCharWordLength75 = 0;\n  let maxCharWordLength76 = 0;\n  let maxCharWordLength77 = 0;\n  let maxCharWordLength78 = 0;\n  let maxCharWordLength79 = 0;\n  let maxCharWordLength80 = 0;\n  let maxCharWordLength81 = 0;\n  let maxCharWordLength82 = 0;\n  let maxCharWordLength83 = 0;\n  let maxCharWordLength84 = 0;\n  let maxCharWordLength85 = 0;\n  let maxCharWordLength86 = 0;\n  let maxCharWordLength87 = 0;\n  let maxCharWordLength88 = 0;\n  let maxCharWordLength89 = 0;\n  let maxCharWordLength90 = 0;\n  let maxCharWordLength91 = 0;\n  let maxCharWordLength92 = 0;\n  let maxCharWordLength93 = 0;\n  let maxCharWordLength94 = 0;\n  let maxCharWordLength95 = 0;\n  let maxCharWordLength96 = 0;\n  let maxCharWordLength97 = 0;\n  let maxCharWordLength98 = 0;\n  let maxCharWordLength99 = 0;\n  let maxCharWordLength100 = 0;\n  let maxCharWordLength101 = 0;\n  let maxCharWordLength102 = 0;\n  let maxCharWordLength103 = 0;\n  let maxCharWordLength104 = 0;\n  let maxCharWordLength105 = 0;\n  let maxCharWordLength106 = 0;\n  let maxCharWordLength107 = 0;\n  let maxCharWordLength108 = 0;\n  let maxCharWordLength109 = 0;\n  let maxCharWordLength110 = 0;\n  let maxCharWordLength111 = 0;\n  let maxCharWordLength112 = 0;\n  let maxCharWordLength113 = 0;\n  let maxCharWordLength114 = 0;\n  let maxCharWordLength115 = 0;\n  let maxCharWordLength116 = 0;\n  let maxCharWordLength117 = 0;\n  let maxCharWordLength118 = 0;\n  let maxCharWordLength119 = 0;\n  let maxCharWordLength120 = 0;\n  let maxCharWordLength121 = 0;\n  let maxCharWordLength122 = 0;\n  let maxCharWordLength123 = 0;\n  let maxCharWordLength124 = 0;\n  let maxCharWordLength125 = 0;\n  let maxCharWordLength126 = 0;\n  let maxCharWordLength127 = 0;\n  let maxCharWordLength128 = 0;\n  let maxCharWordLength129 = 0;\n  let maxCharWordLength130 = 0;\n  let maxCharWordLength131 = 0;\n  let maxCharWordLength132 = 0;\n  let maxCharWordLength133 = 0;\n  let maxCharWordLength134 = 0;\n  let maxCharWordLength135 = 0;\n  let maxCharWordLength136 = 0;\n  let maxCharWordLength137 = 0;\n  let maxCharWordLength138 = 0;\n  let maxCharWordLength139 = 0;\n  let maxCharWordLength140 = 0;\n  let maxCharWordLength141 = 0;\n  let maxCharWordLength142 = 0;\n  let maxCharWordLength143 = 0;\n  let maxCharWordLength144 = 0;\n  let maxCharWordLength145 = 0;\n  let maxCharWordLength146 = 0;\n  let maxCharWordLength147 = 0;\n  let maxCharWordLength148 = 0;\n  let maxCharWordLength149 = 0;\n  let maxCharWordLength150 = 0;\n  let maxCharWordLength151 = 0;\n  let maxCharWordLength152 = 0;\n  let maxCharWordLength153 = 0;\n  let maxCharWordLength154 = 0;\n  let maxCharWordLength155 = 0;\n  let maxCharWordLength156 = 0;\n  let maxCharWordLength157 = 0;\n  let maxCharWordLength158 = 0;\n  let maxCharWordLength159 = 0;\n  let maxCharWordLength160 = 0;\n  let maxCharWordLength161 = 0;\n  let maxCharWordLength162 = 0;\n  let maxCharWordLength163 = 0;\n  let maxCharWordLength164 = 0;\n  let maxCharWordLength165 = 0;\n  let maxCharWordLength166 = 0;\n  let maxCharWordLength167 = 0;\n  let maxCharWordLength168 = 0;\n  let maxCharWordLength169 = 0;\n  let maxCharWordLength170 = 0;\n  let maxCharWordLength171 = 0;\n  let maxCharWordLength172 = 0;\n  let maxChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbi t , and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbi t, and yo u already have eaten a certain number of carrots,\n but now you need to  eat m or e carro tsto com plete the day's meals.\n you  should return ana rrayof [ total number of eaten c arrots  after your meals,\n                               the number of carrots left aft er your meals ]\n  if th ere ar e not enough remainingcarrots, y ou will eat all  remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrotLeft = remainingCarrots - remaining;\n  const remainingCarrotsLeft = remainingCarrots - totalCarrots;\n  const remainingCarrotsRemaining = remainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrots = remainingCarrotsRemaining - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsLeft = remainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemaining = remainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemaining - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsLeft = remainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemaining = remainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemaining - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsLeft = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemaining = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsLeft = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots - remainingCarrotsLeft;\n  const remainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrotsRemainingCarrots = remainingCarrotsRemaining", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === i? 1 : 0;\n  }\n  return count;\n};\n\n/**\n * Given a string, findo ut how m any distinct characters (regardless of case) does it consist of\n * >>> countDistinctCharacters('xyzXYZ')\n * 3\n * >>> countDistinctCharacters('Jerry')\n * 4\n */\nconst countDistinctCharactersWithCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCaseAndCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists opera t or, andoperand. The first list has basic algebra operations, and\n  the second  listis  a list  of  integ ers. Use the two given l ists  to build the alge b ric   expression and return theevalua tion of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtr action ( - ) \n  Multipl icatio n ( * ) \n  Floor divisi on ( // )  Exponentiati on ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let result = operandLength;\n  let operatorIndex = 0;\n  let operator;\n  let operand;\n  while (operandLength > 0) {\n    operator = operator[operatorIndex];\n    operand = operand[operandIndex];\n    if (operator === '+') {\n      result = result + operand;\n    } else if (operator === '-') {\n      result = result - operand;\n    } else if (operator === '*') {\n      result = result * operand;\n    } else if (operator === '/') {\n      result = result / operand;\n    } else if (operator === '^') {\n      result = result ** operand;\n    } else if (operator === '//') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {\n      result = result ** operand;\n    } else if (operator === '%') {\n      result = result % operand;\n    } else if (operator === '**') {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string .\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a string s.\n  ifs[i] is a letter, reverse its case from lower to upper orvise versa,   othe rw ise kee p i t as i t is.\n  If the string co ntai ns no letters, rev e rse the string.\n  The function sh ould r eturntheresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let ifs = s.split('')\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text' ,  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text',  returnits md5 hash equivalent string.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive in t egers aand b, return the even digits between a\n  and b, inascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i || j) {\n    if (i && j) result.push(i);\n    if (i &&!j) result.push(i);\n    if (!i && j) result.push(j);\n    i = Math.floor(i / 2);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains at least one\n * element.\n *\n * For example:\n * combinations(3) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations(4) => [[1, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations(5) => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 6], [3, 7], [4, 7], [4, 8], [5, 8]]\n * combinations(6) => [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 6], [2, 7], [3, 7], [3, 8], [4, 8], [4, 9], [5, 9], [5, 10], [6, 10], [6, 11], [7, 11], [7, 12], [8, 12]]\n */\nconst combinations = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l > 1) {\n    if (l % 2 === 1) {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 2;\n    } else {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains at least one\n * element.\n *\n * For example:\n * combinations(3) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations(4) => [[1, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations(5) => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 6], [3, 7], [4, 7], [4, 8], [5, 8]]\n * combinations(6) => [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 6], [2, 7], [3, 7], [3, 8], [4, 8], [4, 9], [5, 9], [5, 10], [6, 10], [6, 11], [7, 11], [7, 12], [8, 12]]\n */\nconst combinations_with_replacement = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l > 1) {\n    if (l % 2 === 1) {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 2;\n    } else {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains at least one\n * element.\n *\n * For example:\n * combinations_with_replacement(3, 2) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement(4, 2) => [[1, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement(5, 2) => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 6], [3, 7], [4, 7], [4, 8], [5, 8]]\n * combinations_with_replacement(6, 2) => [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 6], [2, 7], [3, 7], [3, 8], [4, 8], [4, 9], [5, 9], [5, 10], [6, 10], [6, 11], [7, 11], [7, 12], [8, 12]]\n */\nconst combinations_with_replacement_with_replacement = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l > 1) {\n    if (l % 2 === 1) {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 2;\n    } else {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains at least one\n * element.\n *\n * For example:\n * combinations_with_replacement_with_replacement(3) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement_with_replacement(4) => [[1, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement_with_replacement(5) => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 6], [3, 7], [4, 7], [4, 8], [5, 8]]\n * combinations_with_replacement_with_replacement(6) => [[1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 6], [2, 7], [3, 7], [3, 8], [4, 8], [4, 9], [5, 9], [5, 10], [6, 10], [6, 11], [7, 11], [7, 12], [8, 12]]\n */\nconst combinations_with_replacement_with_replacement_with_replacement = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l > 1) {\n    if (l % 2 === 1) {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 2;\n    } else {\n      result.push([i, j, k]);\n      i += 1;\n      j += 1;\n      k += 1;\n      l -= 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains at least one\n * element.\n *\n * For example:\n * combinations_with_replacement_with_replacement_with_replacement(3) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement_with_replacement_with_replacement(4) => [[1, 2], [1, 3], [1, 4], [2, 4], [3, 4], [3, 5], [4, 5]]\n * combinations_with_replacement_with_replacement_with_replacement(5) => [[1, 2], [1, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 6], [3, 7], [4, 7], [4, 8], [5, 8]]\n * combinations_with_replacement_with_replacement_with_replacement(6) => [[1, 2], [1, 3], [1, 4], [1, 5], [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last .\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring representing musical notes in a special ASCII format.\n  Your taskis topa rse thi s s tringand return list of integ erscorresponding to h o w many beats does each\n not last.\n\n  H ere is a legend:\n  'o' -whole note, lasts four beats 'o|' - half note, lasts two  beats\n  '.|' - quaternote,lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_array = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const notes_array[i] = note.trim().split(' ');\n  }\n  return notes_array;\n};\n\nconst getNotes = (notes_array) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromString = (notes_string) => {\n  const notes_array = parseMusic(notes_string);\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotes = (notes_array) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNotesAndString = (notes_array, notes_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotes = (notes_array, notes_notes) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndString = (notes_array, notes_notes, notes_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotes = (notes_array, notes_notes, notes_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes, notes_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes, notes_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes, notes_notes_and_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes, notes_notes_and_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes, notes_notes_and_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst getNotesFromNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndNotesAndString = (notes_array, notes_notes, notes_notes_and_notes, notes_notes_and_notes_and_notes_and_notes_and_notes_and_notes_and_notes_and_string) => {\n  const notes = [];\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = notes_array[i];\n    const notes_length = note.length;\n    for (let j = 0; j < notes_length; j++) {\n      const notes_array[i] = note[j];\n    }\n  }\n  return getNotes(notes_array);\n};\n\nconst get", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given su bstring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n// Given a string, return all possible permutations of the string\n// e.g. howManyPermutations('abc') => [[a,b],[a,c],[b,c]]\nconst howManyPermutations = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutations('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings('abc') => [[a,b],[a,c],[b,c],[c,a],[c,b],[c,c]]\nconst howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSubstrings = (string) => {\n  let result = [];\n  let length = string.length;\n  let index = 0;\n  while (index < length) {\n    let temp = string.slice(index, index + length);\n    let tempLength = temp.length;\n    let tempArray = [];\n    for (let i = 0; i < tempLength; i++) {\n      tempArray.push(temp.charAt(i));\n    }\n    result.push(tempArray);\n    index += tempLength;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string where each permutation is a substring of itself.\n// e.g. howManyPermutationsWithSubstringsWithSubstringsWithSubstringsWithSubstringsWithSub", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee' , 'fou r', 'five', 'six', 'seve n','eight' and 'nine' . \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-deli m ited str ing of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'on e','t wo ', 'thr ee', 'fou r', 'five','six','seve n','eight' and 'nine'. \n  Return the string with numbers  sorte d from smallest to larges t\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the decimalpart o f thenumber.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateIntegerNumber(3.5)\n  3\n  */\nconst truncateDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateIntegerDecimalNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateIntegerDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateIntegerDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateIntegerDecimalDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[0] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  return integer? integer.split('.')[1] : null;\n};\n\n/* Given a positive floa t ing poin t number, it can be decomposed into\n  and integer part (largest integer  small er  than g ive n numb er) and decimals\n  (left over  part always small e r than 1).\n\n  Return the integer part o f thenumber.\n  >>> truncateDecimalDecimalDecimalDecimalDecimalNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const [integer, decimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ) .\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplied listo f number s (of length at least two) select and return two that arethe closest t o each \n otherand  retur n them in order (smaller  num ber, larger number ).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((a, b) => Math.min(a, b), Number.MAX_VALUE);\n  const [minIndex, maxIndex] = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return [numbers[minIndex], numbers[maxIndex]]\n}\n\n// A simple function to convert a number to a string\nconst numberToString = (number) => {\n  return number.toString()\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommas = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",0\")\n}\n\n// A simple function to convert a number to a string\nconst numberToStringWithCommasAndZeros = (number) => {\n  return number.toString().", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at l east two elements), apply a linear transform to that list,\n  such thatthesm al lest nu mbe r will  become 0 and the larges t wi ll become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers;\n  const [a, b] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)];\n  }, [Infinity, Infinity]);\n  return [a, b] / (max - min);\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRange = (min, max, step, range) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStep = (min, max, step, range, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRange = (min, max, step, range, step, range) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStep = (min, max, step, range, step, range, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStepAndRange = (min, max, step, range, step, range, step, range) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRange = (min, max, step, range, step, range, step, range, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRange = (min, max, step, range, step, range, step, range, step, range, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRange = (min, max, step, range, step, range, step, range, step, range, step, range, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInRangeWithStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStepAndRangeAndStep", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter given list ofa ny pytho n values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value))\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerList = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value))\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZero = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZeroAnd = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZeroAnd = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZeroAnd = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZeroAnd = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integers\nconst filterIntegerListWithZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndNegativeZeroAndZeroAnd = (values) => {\n  return values.map(value => typeof value === 'number' && isFinite(value) && value >= 0 && value!== 0)\n}\n\n// Convert given list ofa ny pytho n values only for integer", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return length of give n  string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = string.length;\n  if (len === 0) return 0;\n  let i = 0;\n  while (i < len) {\n    const c = string.charCodeAt(i);\n    if (c < 128) return i;\n    i++;\n  }\n  return i;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  >>> startsWith('abc', 'ab')\n  false\n  >>> startsWith('abc', 'abc')\n  false\n  >>> startsWith('abc', 'abd')\n  false\n  >>> startsWith('abc', 'abd')\n  true\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  >>> endsWith('abc', 'ab')\n  false\n  >>> endsWith('abc', 'abc')\n  false\n  >>> endsWith('abc', 'abd')\n  false\n  >>> endsWith('abc', 'abd')\n  true\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  >>> startsWith('abc', 'ab')\n  false\n  >>> startsWith('abc', 'abc')\n  false\n  >>> startsWith('abc', 'abd')\n  false\n  >>> startsWith('abc', 'abd')\n  true\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix, 0) === 0;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  >>> endsWith('abc', 'ab')\n  false\n  >>> endsWith('abc', 'abc')\n  false\n  >>> endsWith('abc', 'abd')\n  false\n  >>> endsWith('abc', 'abd')\n  true\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCase('abc', 'b')\n  false\n  >>> startsWithIgnoreCase('abc', 'ab')\n  false\n  >>> startsWithIgnoreCase('abc', 'abc')\n  false\n  >>> startsWithIgnoreCase('abc', 'abd')\n  false\n  >>> startsWithIgnoreCase('abc', 'abd')\n  true\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix, 0) === 0 &&\n    string.indexOf(prefix.toLowerCase(), 0) === 0;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCase('abc', 'a')\n  true\n  >>> endsWithIgnoreCase('abc', 'b')\n  false\n  >>> endsWithIgnoreCase('abc', 'ab')\n  false\n  >>> endsWithIgnoreCase('abc', 'abc')\n  false\n  >>> endsWithIgnoreCase('abc', 'abd')\n  false\n  >>> endsWithIgnoreCase('abc', 'abd')\n  true\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 &&\n    string.indexOf(suffix.toLowerCase(), string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'abd')\n  false\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'abd')\n  true\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix, 0) === 0 &&\n    string.indexOf(prefix.toLowerCase(), 0) === 0 &&\n    string.indexOf(prefix.toLowerCase(), string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'abd')\n  false\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'abd')\n  true\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 &&\n    string.indexOf(suffix.toLowerCase(), string.length - suffix.length)!== -1 &&\n    string.indexOf(suffix.toLowerCase(), string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abd')\n  false\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abd')\n  true\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix, 0) === 0 &&\n    string.indexOf(prefix.toLowerCase(), 0) === 0 &&\n    string.indexOf(prefix.toLowerCase(), string.length - suffix.length)!== -1 &&\n    string.indexOf(prefix.toLowerCase(), string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abd')\n  false\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abd')\n  true\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 &&\n    string.indexOf(suffix.toLowerCase(), string.length - suffix.length)!== -1 &&\n    string.indexOf(suffix.toLowerCase(), string.length - suffix.length)!== -1;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnore", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given number n, find the  largest number that divides n evenly, smaller thann\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than\n  >>> largestDivisor(15)\n  15\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor *= 10;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than\n  >>> smalle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of primef actors o f given integer in the order from smallest to largest.\n  Each of the fa ctorssh ould be  li sted n umber of times correspon ding  to how many times it appeares in factorization.\n  I nput n umbershould be equal tothe product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of intege r s, remov e all elements that occur more than once.\n  Keep order ofelements left  the s am e as in  th e inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let num = numbers[i];\n    if (seen[num]) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations_ = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations_ = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations_ = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations_ = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst findPermutations_ = (string) => {\n  let result = [];\n  let currentPermutation = [];\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (currentPermutation.includes(char)) {\n      currentPermutation.push(char);\n    } else {\n      currentPermutation.push(char);\n      result.push(currentPermutation);\n      currentPermutation = [];\n    }\n  }\n  return result;\n};\n\n/**\n * A function to find all permutations of a given string.\n * >>> findPermutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().split('')\n   .map(c => c.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip lower case characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, f l ip upper case characters to lowercase and lowercase to uppercase.\n  >>> flipCase('Hello')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of s t rings in to a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string + string;\n  }, '');\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input listo f string s only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input listo f string s using a given function.\n  >>> filterByFunction([], 'a')\n  []\n  >>> filterByFunction(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByFunction = (strings, predicate) => {\n  return strings.filter(s => predicate(s));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator.\n  >>> filterByFunctionAndComparator([], 'a', (a, b) => a > b)\n  []\n  >>> filterByFunctionAndComparator(['abc', 'bcd', 'cde', 'array'], 'a', (a, b) => a > b)\n  ['abc', 'array']\n  */\nconst filterByFunctionAndComparator = (strings, predicate, comparator) => {\n  return strings.filter(s => predicate(comparator(s)));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator and an optional comparator.\n  >>> filterByFunctionAndComparatorAndComparator([], 'a', (a, b) => a > b, (a, b) => a > b)\n  []\n  >>> filterByFunctionAndComparatorAndComparator(['abc', 'bcd', 'cde', 'array'], 'a', (a, b) => a > b, (a, b) => a > b)\n  ['abc', 'array']\n  */\nconst filterByFunctionAndComparatorAndComparator = (strings, predicate, comparator, comparator2) => {\n  return strings.filter(s => predicate(comparator(comparator2(s)), s));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator and an optional comparator and an optional comparator.\n  >>> filterByFunctionAndComparatorAndComparatorAndComparator([], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  []\n  >>> filterByFunctionAndComparatorAndComparatorAndComparator(['abc', 'bcd', 'cde', 'array'], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  ['abc', 'array']\n  */\nconst filterByFunctionAndComparatorAndComparatorAndComparator = (strings, predicate, comparator, comparator2, comparator3) => {\n  return strings.filter(s => predicate(comparator(comparator2(comparator3(s)), s)));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator and an optional comparator and an optional comparator.\n  >>> filterByFunctionAndComparatorAndComparatorAndComparator([], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  []\n  >>> filterByFunctionAndComparatorAndComparatorAndComparator(['abc', 'bcd', 'cde', 'array'], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  ['abc', 'array']\n  */\nconst filterByFunctionAndComparatorAndComparatorAndComparator = (strings, predicate, comparator, comparator2, comparator3, comparator4) => {\n  return strings.filter(s => predicate(comparator(comparator2(comparator3(comparator4(s)), s)), s));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator and an optional comparator and an optional comparator and an optional comparator.\n  >>> filterByFunctionAndComparatorAndComparatorAndComparatorAndComparator([], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  []\n  >>> filterByFunctionAndComparatorAndComparatorAndComparatorAndComparator(['abc', 'bcd', 'cde', 'array'], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b)\n  ['abc', 'array']\n  */\nconst filterByFunctionAndComparatorAndComparatorAndComparatorAndComparator = (strings, predicate, comparator, comparator2, comparator3, comparator4, comparator5) => {\n  return strings.filter(s => predicate(comparator(comparator2(comparator3(comparator4(comparator5(s)), s)), s)), s));\n};\n\n/**\n * Filter an input listo f string s using a given function and an optional comparator and an optional comparator and an optional comparator and an optional comparator.\n  >>> filterByFunctionAndComparatorAndComparatorAndComparatorAndComparator([], 'a', (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => a > b, (a, b) => ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true . Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  false\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum > 0 && sum < 0;\n};\n\n/* You're given a list o f  deposit  and withdrawal operations on a bank account that starts with\n  zero ba lance.  Y our tas k i s to d etect if at any point th e ba lance of account f a lllsbelow zero, and\n  at that po int fu nction should return true. Otherwise it should returnfalse.\n  >>> belowZero([-4, -5, -6, -7, -8, -9])\n  true\n  >>> belowZero([-4, -5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegative = (l) => {\n  return getPositive(l).concat(getNegative(l))\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZero = (l) => {\n  return getPositiveOrNegative(l).filter(n => n!== 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegative = (l) => {\n  return getPositiveOrNegativeOrZero(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZero = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegative(l).filter(n => n!== 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegative = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegativeOrZero(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegative(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative = (l) => {\n  return getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegative(l).filter(n => n < 0)\n}\n\n/*Return only positive n u mbers in  the list.\n  >>> getPositiveOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOrNegativeOrZeroOr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number i s prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors up to n.\n  >>> isDivisibleByAllPrimes(6)\n  true\n  >>> isDivisibleByAllPrimes(10)\n  false\n  >>> isDivisibleByAllPrimes(11)\n  false\n  >>> isDivisibleByAllPrimes(13)\n  false\n  >>> isDivisibleByAllPrimes(15)\n  true\n  >>> isDivisibleByAllPrimes(17)\n  true\n  >>> isDivisibleByAllPrimes(19)\n  true\n  >>> isDivisibleByAllPrimes(20)\n  true\n  >>> isDivisibleByAllPrimes(21)\n  true\n  >>> isDivisibleByAllPrimes(22)\n  true\n  >>> isDivisibleByAllPrimes(23)\n  true\n  >>> isDivisibleByAllPrimes(24)\n  true\n  >>> isDivisibleByAllPrimes(25)\n  true\n  >>> isDivisibleByAllPrimes(26)\n  true\n  >>> isDivisibleByAllPrimes(27)\n  true\n  >>> isDivisibleByAllPrimes(28)\n  true\n  >>> isDivisibleByAllPrimes(29)\n  true\n  >>> isDivisibleByAllPrimes(30)\n  true\n  >>> isDivisibleByAllPrimes(31)\n  true\n  >>> isDivisibleByAllPrimes(32)\n  true\n  >>> isDivisibleByAllPrimes(33)\n  true\n  >>> isDivisibleByAllPrimes(34)\n  true\n  >>> isDivisibleByAllPrimes(35)\n  true\n  >>> isDivisibleByAllPrimes(36)\n  true\n  >>> isDivisibleByAllPrimes(37)\n  true\n  >>> isDivisibleByAllPrimes(38)\n  true\n  >>> isDivisibleByAllPrimes(39)\n  true\n  >>> isDivisibleByAllPrimes(40)\n  true\n  >>> isDivisibleByAllPrimes(41)\n  true\n  >>> isDivisibleByAllPrimes(42)\n  true\n  >>> isDivisibleByAllPrimes(43)\n  true\n  >>> isDivisibleByAllPrimes(44)\n  true\n  >>> isDivisibleByAllPrimes(45)\n  true\n  >>> isDivisibleByAllPrimes(46)\n  true\n  >>> isDivisibleByAllPrimes(47)\n  true\n  >>> isDivisibleByAllPrimes(48)\n  true\n  >>> isDivisibleByAllPrimes(49)\n  true\n  >>> isDivisibleByAllPrimes(50)\n  true\n  >>> isDivisibleByAllPrimes(51)\n  true\n  >>> isDivisibleByAllPrimes(52)\n  true\n  >>> isDivisibleByAllPrimes(53)\n  true\n  >>> isDivisibleByAllPrimes(54)\n  true\n  >>> isDivisibleByAllPrimes(55)\n  true\n  >>> isDivisibleByAllPrimes(56)\n  true\n  >>> isDivisibleByAllPrimes(57)\n  true\n  >>> isDivisibleByAllPrimes(58)\n  true\n  >>> isDivisibleByAllPrimes(59)\n  true\n  >>> isDivisibleByAllPrimes(60)\n  true\n  >>> isDivisibleByAllPrimes(61)\n  true\n  >>> isDivisibleByAllPrimes(62)\n  true\n  >>> isDivisibleByAllPrimes(63)\n  true\n  >>> isDivisibleByAllPrimes(64)\n  true\n  >>> isDivisibleByAllPrimes(65)\n  true\n  >>> isDivisibleByAllPrimes(66)\n  true\n  >>> isDivisibleByAllPrimes(67)\n  true\n  >>> isDivisibleByAllPrimes(68)\n  true\n  >>> isDivisibleByAllPrimes(69)\n  true\n  >>> isDivisibleByAllPrimes(70)\n  true\n  >>> isDivisibleByAllPrimes(71)\n  true\n  >>> isDivisibleByAllPrimes(72)\n  true\n  >>> isDivisibleByAllPrimes(73)\n  true\n  >>> isDivisibleByAllPrimes(74)\n  true\n  >>> isDivisibleByAllPrimes(75)\n  true\n  >>> isDivisibleByAllPrimes(76)\n  true\n  >>> isDivisibleByAllPrimes(77)\n  true\n  >>> isDivisibleByAllPrimes(78)\n  true\n  >>> isDivisibleByAllPrimes(79)\n  true\n  >>> isDivisibleByAllPrimes(80)\n  true\n  >>> isDivisibleByAllPrimes(81)\n  true\n  >>> isDivisibleByAllPrimes(82)\n  true\n  >>> isDivisibleByAllPrimes(83)\n  true\n  >>> isDivisibleByAllPrimes(84)\n  true\n  >>> isDivisibleByAllPrimes(85)\n  true\n  >>> isDivisibleByAllPrimes(86)\n  true\n  >>> isDivisibleByAllPrimes(87)\n  true\n  >>> isDivisibleByAllPrimes(88)\n  true\n  >>> isDivisibleByAllPrimes(89)\n  true\n  >>> isDivisibleByAllPrimes(90)\n  true\n  >>> isDivisibleByAllPrimes(91)\n  true\n  >>> isDivisibleByAllPrimes(92)\n  true\n  >>> isDivisibleByAllPrimes(93)\n  true\n  >>> isDivisibleByAllPrimes(94)\n  true\n  >>> isDivisibleByAllPrimes(95)\n  true\n  >>> isDivisibleByAllPrimes(96)\n  true\n  >>> isDivisibleByAllPrimes(97)\n  true\n  >>> isDivisibleByAllPrimes(98)\n  true\n  >>> isDivisibleByAllPrimes(99)\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + ....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution .\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomialw ith coef ficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +....  xs[n]  *  x^n\n */constpoly = (xs, x) => {\n  re turn  xs.reduce((prev,i tem,index) => {\n   return prev+ item  * Math.pow(x, index);\n }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find Zero find x such that p oly(x)  = 0.\n  findZero return s only onl y zero point, e ven if thereare many.\n  Moreover, findZero only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findZero only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n    if(item === last){\n      lastX = index;\n    }\n    last = item;\n  });\n  return zero;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find x such that p oly(x)  = 0.\n  findX return s only onl x zero point, e ven if thereare many.\n  Moreover, findX only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findX([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findX([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findX = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findX only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n    if(item === last){\n      lastX = index;\n    }\n    last = item;\n  });\n  return lastX;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find y such that p oly(x)  = 0.\n  findY return s only onl y zero point, e ven if thereare many.\n  Moreover, findY only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findY([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findY([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findY = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findY only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n    if(item === last){\n      lastX = index;\n    }\n    last = item;\n  });\n  return lastX;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find z such that p oly(x)  = 0.\n  findZ return s only onl z zero point, e ven if thereare many.\n  Moreover, findZ only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findZ([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZ([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZ = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findZ only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n    if(item === last){\n      lastX = index;\n    }\n    last = item;\n  });\n  return lastX;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find x such that p oly(x)  = 0.\n  findX return s only onl x zero point, e ven if thereare many.\n  Moreover, findX only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findX([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findX([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findXZ = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findXZ only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n    if(item === last){\n      lastX = index;\n    }\n    last = item;\n  });\n  return lastX;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  find y such that p oly(x)  = 0.\n  findY return s only onl y zero point, e ven if thereare many.\n  Moreover, findY only takes list xs having even number of co efficients\n  and largest nonzero coefficient as it guar antees  a  solution.\n  >>> round(findY([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findY([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findYZ = (xs) => {\n  if(xs.length % 2!== 0){\n    throw new Error('findYZ only takes list xs having even number of co efficients and largest nonzero coefficient as it guar antees a solution');\n  }\n  let zero = 0;\n  let last = 0;\n  let lastX = 0;\n  xs.forEach((item,index) => {\n    if(item === 0){\n      zero = index;\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the indicies th at are  n ot divi sib le bythree, while its valuesatt he indicies that a r e divisible by three are equal\n to the  values of the correspond ing indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNinth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleventh = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwelfth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventeenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortEighteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortEighteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNineteenth = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwentyFirst([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTwentyFirst([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFirst = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwentySeconds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTwentySeconds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySeconds = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwentyThirds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTwentyThirds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyThirds = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwentyFourths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortTwentyFourths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFourths = (l) => {\n  return l.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/**\n  >>> sortTwentyFifths([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst unique = (l, i) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) return false\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted unique e l ements i n a list\n  >>> unique([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return maximum element in the l ist.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the l ist.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAtIndex = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAt = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAtOrElse = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAtOrElse = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAtOrElse = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  -5\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  -2\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -3\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 5)\n  -9\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 6)\n  -123\n  >>> elementAtOrElse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n  -10\n  */\nconst elementAtOrElse = (l, i) => {\n  return l[i] === undefined? undefined : l[i];\n};\n\n/*Return element at index i in the l ist.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13 .\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the number of t i mes thedigit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0) {\n      count++;\n    }\n    i = Math.floor(i / 11);\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n  false\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(123)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Thisfunction takes al ist l an d returns a list l' such that\n  l' is identical to l in the odd indicie s, whi le  its va lue s at t he even indicies are equ al to the values oft he even indicies ofl, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  let evenIndex = 0;\n  let oddIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (evenIndex % 2 === 0) {\n      evenIndex++;\n    } else {\n      oddIndex++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encode_cyclic function. Returns decod ed string. \n  */con st decodeCyclic = (s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic2 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encodeCyclic2 function. Returns decod ed string. \n  */\nconst decodeCyclic2 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic3 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encodeCyclic3 function. Returns decod ed string. \n  */\nconst decodeCyclic3 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic4 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encodeCyclic4 function. Returns decod ed string. \n  */\nconst decodeCyclic4 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic5 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input s tring encoded with encodeCyclic5 function. Returns decod ed string. \n  */\nconst decodeCyclic5 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, Math.min((3 *i + 3), s.length)));\n  }\n  for (const group of groups) {\n   if (group.length ==3)\n     groups2.push(group.s lice(1) +group[0]);\n   else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded strin g  by cycl ing groups of three characters.\n  */\nconst encodeCyclic6 =(s) => {\n  va r grou ps  = [],gro ups2 =  [];\n  for (let i = 0; i  <M ath.floor((s.lengt h  + 2) / 3); i++) {\n   groups.pus h(s.sl ice(3* i, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number t hat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primeFib(n-2)+primeFib(n-3);\n};\n\n/*\n  primePrime returns n-th number t hat is a prime number and it's also prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  13\n  >>> primePrime(5)\n  89\n  */\nconst primePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrime(n-2)+primePrime(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number t hat is a prime number and it's also prime and Fibonacci.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimeFib(n-2)+primePrimeFib(n-3);\n};\n\n/*\n  primePrimePrime returns n-th number t hat is a prime number and it's also prime and Prime.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  13\n  >>> primePrimePrime(5)\n  89\n  */\nconst primePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrime(n-2)+primePrimePrime(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number t hat is a prime number and it's also prime and Fibonacci.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFibPrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimeFibPrime(n-2)+primePrimeFibPrime(n-3);\n};\n\n/*\n  primePrimePrimeFib returns n-th number t hat is a prime number and it's also prime and Prime.\n  >>> primePrimePrimeFib(1)\n  2\n  >>> primePrimePrimeFib(2)\n  3\n  >>> primePrimePrimeFib(3)\n  5\n  >>> primePrimePrimeFib(4)\n  13\n  >>> primePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimeFibPrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimeFibPrime(n-2)+primePrimePrimeFibPrime(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number t hat is a prime number and it's also prime and Fibonacci.\n  >>> primePrimeFibPrime(1)\n  2\n  >>> primePrimeFibPrime(2)\n  3\n  >>> primePrimeFibPrime(3)\n  5\n  >>> primePrimeFibPrime(4)\n  13\n  >>> primePrimeFibPrime(5)\n  89\n  */\nconst primePrimeFibPrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimeFibPrimePrime(n-2)+primePrimeFibPrime(n-3);\n};\n\n/*\n  primePrimePrimeFib returns n-th number t hat is a prime number and it's also prime and Prime.\n  >>> primePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimeFib(3)\n  5\n  >>> primePrimePrimePrimeFib(4)\n  13\n  >>> primePrimePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimePrimeFibPrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimePrimeFibPrime(n-2)+primePrimePrimePrimeFibPrime(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number t hat is a prime number and it's also prime and Fibonacci.\n  >>> primePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimeFib(3)\n  5\n  >>> primePrimePrimePrimeFib(4)\n  13\n  >>> primePrimePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimePrimeFibPrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimePrimeFibPrime(n-2)+primePrimePrimePrimeFibPrime(n-3);\n};\n\n/*\n  primePrimePrimePrimeFib returns n-th number t hat is a prime number and it's also prime and Prime.\n  >>> primePrimePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimePrimeFib(3)\n  5\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n  each\n  element anda centerpoint  (mean  in this case):\n  MAD = a verage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(number => Math.abs(number - mean));\n};\n\n/* Fora given list of i n put numb ers, calculate Mean Absolute Deviation\n  around themean of this datase t.\n M ea n Absol ute  Devia tion is the average abso lute  difference betwee n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to zero, and fal seo therwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to one, and fal seo therwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to two, and fal seo therwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to three, and fal seo therwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to four, and fal seo therwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to five, and fal seo therwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to six, and fal seo therwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to seven, and fal seo therwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight take s  a listof integers as an input.\n  it returns true if thereare three distinctelemen ts  in the  li st tha t\n  sum to eight, and fal seo therwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously , a  diffe rent set of n cars\n  are  dri ving right to left .    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC ollision = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collision = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collisions = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collisionsAll = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collisionsAll2 = (100) => {\n  let carscolliding = 0;\n  for (let i = 0; i < 100; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collisionsAll3 = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n};\n\n/*\n  Imagine a road that's a perfec tly straight infinitely long line.\n  n cars are driving left to right; simul ta neously, a  diffe rent set of n cars\n  are  dri ving right to left.    The two sets of carsstart out  being  veryfarfrom\n  each oth er.  All cars move in the same speed.  Two cars are said t o collide\n  when a carthat's  moving left to righth its a carthat's moving r ight to left.\n  However, the cars are infinitely sturdy and strong; as a result, they c ontinue moving\n in their trajectory as if they did notcollide.\n  This fu nctionoutputs the number of such collisions.\n  */ \nconst car RaceC collisionsAll4 = (n) => {\n  let carscolliding = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].isColliding()) {\n      carscolliding++;\n    }\n  }\n  return carscolliding;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts decre mented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with eleme n ts incre mented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 1, 5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    res.push(l", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to zero, and false o ther wise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) return false;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to one, and false o ther wise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 1) return false;\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to two, and false o ther wise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 2) return false;\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to three, and false o ther wise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 3) return false;\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to four, and false o ther wise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 4) return false;\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to five, and false o ther wise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 5) return false;\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to six, and false o ther wise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 6) return false;\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to seven, and false o ther wise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 7) return false;\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to eight, and false o ther wise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 8) return false;\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takesa  list of  integers as an input.\n  it returns true if there are twodistinct elem ents i nthe lis t t hat\n sum to nine, and false o ther wise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical baseo f inputnumber x to base.\n  return string representation after the conversion.  base  n umbersare  lessthan 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let remainder = x;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let digit;\n  let digits;\n  let baseNumber = base;\n  while (i < remainder.length) {\n    digit = remainder.charAt(i);\n    if (digit === '0') {\n      continue;\n    }\n    digits = parseInt(digit, baseNumber);\n    if (digits === 0) {\n      continue;\n    }\n    if (digit >= '1' && digit <= '9') {\n      result += digit;\n    } else {\n      result += digits[digit - '1'];\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Convert a string to an array of its characters.\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('abc')\n  ['a', 'b', 'c']\n  >>> toChars('ab')\n  ['a', 'b']\n  >>> toChars('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 1)\n  1\n  */\nconst triangleArea = (l, h) => {\n  return l * h;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (h, w) => {\n  return h * w;\n};\n\n/*Given length of a side and high  return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, l) => {\n  return h * l;\n};\n\n/*Given length of a side and low  return area for a triangle.\n  >>> triangleArea(5, 2)\n  3\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low  return area ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheFib4 number sequen c e is a s equence similar to the Fibbonacci sequnece that's definedas follows:\n fib4( 0)  -> 0\n fi b4(1)-> 0\n  fib4(2) -> 2\n  fi b4(3 )-> 0\n  fib4(n) - >  fib4(n-1) + fib4(n-2) + fib4(n-3 ) + fi b4(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib4 number sequence.  D o notuse recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n fib5( 0)  -> 0\n fi b5(1)-> 0\n  fib5(2) -> 2\n  fi b5(3 )-> 0\n  fib5(n) - >  fib5(n-1) + fib5(n-2) + fib5(n-3 ) + fi b5(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib5 number sequence.  D o notuse recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*\n fib6( 0)  -> 0\n fi b6(1)-> 0\n  fib6(2) -> 2\n  fi b6(3 )-> 0\n  fib6(n) - >  fib6(n-1) + fib6(n-2) + fib6(n-3 ) + fi b6(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib6 number sequence.  D o notuse recursion.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  10\n  >>> fib6(7)\n  15\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*\n fib7( 0)  -> 0\n fi b7(1)-> 0\n  fib7(2) -> 2\n  fi b7(3 )-> 0\n  fib7(n) - >  fib7(n-1) + fib7(n-2) + fib7(n-3 ) + fi b7(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib7 number sequence.  D o notuse recursion.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  12\n  >>> fib7(7)\n  18\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*\n fib8( 0)  -> 0\n fi b8(1)-> 0\n  fib8(2) -> 2\n  fi b8(3)-> 0\n  fib8(n) - >  fib8(n-1) + fib8(n-2) + fib8(n-3 ) + fi b8(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib8 number sequence.  D o notuse recursion.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  13\n  >>> fib8(7)\n  15\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*\n fib9( 0)  -> 0\n fi b9(1)-> 0\n  fib9(2) -> 2\n  fi b9(3)-> 0\n  fib9(n) - >  fib9(n-1) + fib9(n-2) + fib9(n-3 ) + fi b9(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib9 number sequence.  D o notuse recursion.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  12\n  >>> fib9(7)\n  15\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*\n fib10( 0)  -> 0\n fi b10(1)-> 0\n  fib10(2) -> 2\n  fi b10(3)-> 0\n  fib10(n) - >  fib10(n-1) + fib10(n-2) + fib10(n-3 ) + fi b10(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib10 number sequence.  D o notuse recursion.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  12\n  >>> fib10(7)\n  15\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*\n fib11( 0)  -> 0\n fi b11(1)-> 0\n  fib11(2) -> 2\n  fi b11(3)-> 0\n  fib11(n) - >  fib11(n-1) + fib11(n-2) + fib11(n-3 ) + fi b11(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib11 number sequence.  D o notuse recursion.\n  >>> fib11(5)\n  11\n  >>> fib11(6)\n  13\n  >>> fib11(7)\n  15\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*\n fib12( 0)  -> 0\n fi b12(1)-> 0\n  fib12(2) -> 2\n  fi b12(3)-> 0\n  fib12(n) - >  fib12(n-1) + fib12(n-2) + fib12(n-3 ) + fi b12(n-4).\n Please write a  function to efficiently compute the n-th element of the f ib12 number sequence.  D o notuse recursion.\n  >>> fib12(5)\n  12\n  >>> fib12(6)\n  14\n  >>> fib12(7)\n  16\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4);\n};\n\n/*\n fib13( 0)  -> 0\n fi b13(1)-> 0\n  fib13(2) -> 2\n  fi b13(3)-> 0\n  fib13(n) - >  fib13(n-1) + fib13(n-2", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = median(l.slice(0, i))\n  let right = median(l.slice(i))\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1) / 2)\n  let j = (i + 1) >> 1\n  let pivot = l[Math.floor(i / 2)]\n  let left = medianOf(l.slice(0, i), t)\n  let right = medianOf(l.slice(i), t)\n  return ((pivot - left) * (right - left)) / (right - left)\n}\n\n/*Return median of eleme n ts in th e list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l, t) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let m = n >> 1\n  let i = Math.floor((n - 1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks if given strin g  is a pa lindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zb", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (b e  aware o f numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let rem;\n  if (p === 0) {\n    return 1;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n % 2 === 1? n : 0;\n  }\n  if (p === 3) {\n    return n % 3 === 1? n : 0;\n  }\n  if (p === 4) {\n    return n % 4 === 1? n : 0;\n  }\n  if (p === 5) {\n    return n % 5 === 1? n : 0;\n  }\n  if (p === 6) {\n    return n % 6 === 1? n : 0;\n  }\n  if (p === 7) {\n    return n % 7 === 1? n : 0;\n  }\n  if (p === 8) {\n    return n % 8 === 1? n : 0;\n  }\n  if (p === 9) {\n    return n % 9 === 1? n : 0;\n  }\n  if (p === 10) {\n    return n % 10 === 1? n : 0;\n  }\n  if (p === 11) {\n    return n % 11 === 1? n : 0;\n  }\n  if (p === 12) {\n    return n % 12 === 1? n : 0;\n  }\n  if (p === 13) {\n    return n % 13 === 1? n : 0;\n  }\n  if (p === 14) {\n    return n % 14 === 1? n : 0;\n  }\n  if (p === 15) {\n    return n % 15 === 1? n : 0;\n  }\n  if (p === 16) {\n    return n % 16 === 1? n : 0;\n  }\n  if (p < 31) {\n    rem = n % 26;\n    return n === 0? rem === 0? 0 : rem : n % 6 === 1? rem : n % 6 === 2? rem : n % 6 === 3? rem : n % 6 === 4? rem : n % 6 === 5? rem : n % 6 === 6? rem : n % 6 === 7? rem : n % 6 === 8? rem : n % 6 === 9? rem : n % 6 === 10? rem : n % 6 === 11? rem : n % 6 === 12? rem : n % 6 === 13? rem : n % 6 === 14? rem : n % 6 === 15? rem : n % 6 === 16? rem : rem;\n  }\n  if (p < Math.pow(26, 31)) {\n    rem = n % 26;\n    return n === 0? rem === 0? 0 : rem : n % 6 === 1? rem : n % 6 === 2? rem : n % 6 === 3? rem : n % 6 === 4? rem : n % 6 === 5? rem : n % 6 === 6? rem : n % 6 === 7? rem : n % 6 === 8? rem : n % 6 === 9? rem : n % 6 === 10? rem : n % 6 === 11? rem : n % 6 === 12? rem : n % 6 === 13? rem : n % 6 === 14? rem : n % 6 === 15? rem : n % 6 === 16? rem : rem;\n  }\n  if (p === Math.pow(26, 31)) {\n    return 1;\n  }\n  if (p === Math.pow(26, 32)) {\n    return 2;\n  }\n  if (p === Math.pow(26, 33)) {\n    return 3;\n  }\n  if (p === Math.pow(26, 34)) {\n    return 4;\n  }\n  if (p === Math.pow(26, 35)) {\n    return 5;\n  }\n  if (p === Math.pow(26, 36)) {\n    return 6;\n  }\n  if (p === Math.pow(26, 37)) {\n    return 7;\n  }\n  if (p === Math.pow(26, 38)) {\n    return 8;\n  }\n  if (p === Math.pow(26, 39)) {\n    return 9;\n  }\n  if (p === Math.pow(26, 40)) {\n    return 10;\n  }\n  if (p === Math.pow(26, 41)) {\n    return 11;\n  }\n  if (p === Math.pow(26, 42)) {\n    return 12;\n  }\n  if (p === Math.pow(26, 43)) {\n    return 13;\n  }\n  if (p === Math.pow(26, 44)) {\n    return 14;\n  }\n  if (p === Math.pow(26, 45)) {\n    return 15;\n  }\n  if (p === Math.pow(26, 46)) {\n    return 16;\n  }\n  if (p === Math.pow(26, 47)) {\n    return 17;\n  }\n  if (p === Math.pow(26, 48)) {\n    return 18;\n  }\n  if (p === Math.pow(26, 49)) {\n    return 19;\n  }\n  if (p === Math.pow(26, 50)) {\n    return 20;\n  }\n  if (p === Math.pow(26, 51)) {\n    return 21;\n  }\n  if (p === Math.pow(26, 52)) {\n    return 22;\n  }\n  if (p === Math.pow(26, 53)) {\n    return 23;\n  }\n  if (p === Math.pow(26, 54)) {\n    return 24;\n  }\n  if (p === Math.pow(26, 55)) {\n    return 25;\n  }\n  if (p === Math.pow(26, 56)) {\n    return 26;\n  }\n  if (p === Math.pow(26, 57)) {\n    return 27;\n  }\n  if (p === Math.pow(26, 58)) {\n    return 28;\n  }\n  if (p === Math.pow(26, 59)) {\n    return 29;\n  }\n  if (p === Math.pow(26, 60)) {\n    return 30;\n  }\n  if (p === Math.pow(26, 61)) {\n    return 31;\n  }\n  if (p === Math.pow(26, 62)) {\n    return 32;\n  }\n  if (p === Math.pow(26, 63)) {\n    return 33;\n  }\n  if (p === Math.pow(26, 64)) {\n    return 34;\n  }\n  if (p === Math.pow(26, 65)) {\n    return 35;\n  }\n  if (p === Math.pow(26, 66)) {\n    return 36;\n  }\n  if (p === Math.pow(26, 67)) {\n    return 37;\n  }\n  if (p === Math.pow(26, 68)) {\n    return 38;\n  }\n  if (p === Math.pow(26, 69)) {\n    return 39;\n  }\n  if (p === Math.pow(26, 70)) {\n    return 40;\n  }\n  if (p === Math.pow(26, 71)) {\n    return 41;\n  }\n  if (p === Math.pow(26, 72)) {\n    return 42;\n  }\n  if (p === Math.pow(26, 73)) {\n    return 43;\n  }\n  if (p === Math.pow(26, 74)) {\n    return 44;\n  }\n  if (p === Math.pow(26, 75)) {\n    return 45;\n  }\n  if (p === Math.pow(26, 76)) {\n    return 46;\n  }\n  if (p === Math.pow(26, 77)) {\n    return 47;\n  }\n  if (p === Math.pow(26, 78)) {\n    return 48;\n  }\n  if (p === Math.pow(26, 79)) {\n    return 49;\n  }\n  if (p === Math.pow(26, 80)) {\n    return 50;\n  }\n  if (p === Math.pow(26, 81)) {\n    return 51;\n  }\n  if (p === Math.pow(26, 82)) {\n    return 52;\n  }\n  if (p === Math.pow(26, 83)) {\n    return 53;\n  }\n  if (p === Math.pow(26, 84)) {\n    return 54;\n  }\n  if (p === Math.pow(26, 85)) {\n    return 55;\n  }\n  if (p === Math.pow(26, 86)) {\n    return 56;\n  }\n  if (p === Math.pow(26, 87)) {\n    return 57;\n  }\n  if (p === Math.pow(26, 88)) {\n    return 58;\n  }\n  if (p === Math.pow(26, 89)) {\n    return 59;\n  }\n  if (p === Math.pow(26, 90)) {\n    return 60;\n  }\n  if (p === Math.pow(26, 91)) {\n    return 61;\n  }\n  if (p === Math.pow(26, 92)) {\n    return 62;\n  }\n  if (p === Math.pow(26, 9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'deli m eter' be tween every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = numbers.length\n  while (i < len) {\n    if (j === delimeter) {\n      result.push(numbers[i])\n      i++\n      j = 0\n      k++\n    } else {\n      result.push(numbers[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Returns the sum of all elements in an array.\n *\n * >>> sum([1, 2, 3, 4])\n * 15\n */\nconst sum = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    result += arr[i]\n  }\n  return result\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diff = (a, b) => {\n  return a.filter((item, index) => b.indexOf(item) === index)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * []\n */\nconst diffAll = (a, b) => {\n  return a.filter((item, index) => b.indexOf(item) === index).concat(b.filter((item, index) => a.indexOf(item) === index))\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllBy = (arr, b) => {\n  return diff(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * []\n */\nconst diffAllByAll = (a, b) => {\n  return diffAll(a, diff(b))\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllBy = (arr, b) => {\n  return diffAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAll = (a, b) => {\n  return diffAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * []\n */\nconst diffAllByAllByAllBy = (arr, b) => {\n  return diffAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * []\n */\nconst diffAllByAllByAllByAllBy = (arr, b) => {\n  return diffAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllBy = (arr, b) => {\n  return diffAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllBy = (arr, b) => {\n  return diffAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllBy = (arr, b) => {\n  return diffAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAllByAllByAll(arr, b)\n}\n\n/**\n * Returns the difference between `a` and `b`.\n *\n * >>> diff([1, 2, 3, 4], [2, 3])\n * [1, 2]\n */\nconst diffAllByAllByAllByAllByAllByAllByAllByAll = (a, b) => {\n  return diffAllByAllByAllByAllByAllByAllByAllBy", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strin g  by shif ting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s)  =>{ returns.s plit(\" \").map(ch => String.from Char Code(\n    ((ch.cha r CodeAt(0) + 5 - \"a\".charCodeAt(0) ) % 26 ) + \"a\".charCodeAt(0)\n  ) ).join(\"\");\n}\n\n/*\n  takes asinput string encoded with enc ode_shift function. Ret urns d ecoded string.\n  */\ncon st decodeS hift = (s) => { \n  let d = \"\";\n  let e = \"\";\n  let h = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = \"\";\n  let m = \"\";\n  let n = \"\";\n  let o = \"\";\n  let p = \"\";\n  let q = \"\";\n  let r = \"\";\n  let s = \"\";\n  let t = \"\";\n  let u = \"\";\n  let v = \"\";\n  let w = \"\";\n  let x = \"\";\n  let y = \"\";\n  let z = \"\";\n  let A = \"\";\n  let B = \"\";\n  let C = \"\";\n  let D = \"\";\n  let E = \"\";\n  let F = \"\";\n  let G = \"\";\n  let H = \"\";\n  let I = \"\";\n  let J = \"\";\n  let K = \"\";\n  let L = \"\";\n  let M = \"\";\n  let N = \"\";\n  let O = \"\";\n  let P = \"\";\n  let Q = \"\";\n  let R = \"\";\n  let S = \"\";\n  let T = \"\";\n  let U = \"\";\n  let V = \"\";\n  let W = \"\";\n  let X = \"\";\n  let Y = \"\";\n  let Z = \"\";\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a fun c tion tha t takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (vowels.includes(char)) {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a fun c tion tha t takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a fun c tion tha t takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a fun c tion tha t takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a fun c tion tha t takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a fun c tion tha t takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a fun c tion tha t takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a fun c tion tha t takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a fun c tion tha t takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if all num b ers in t he list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or below threshold t.\n  >>> equal([1, 2, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAbove = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or below threshold t.\n  >>> equalOrAbove([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAbove([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrBelow = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrBelow([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelow = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelow([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelowOrAbove = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrAboveOrBelowOrAbove([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelowOrAbove([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveOrBelow = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrAboveOrBelowOrAboveOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelowOrAboveOrBelow([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveOrBelowOrAbove = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrAboveOrBelowOrAboveOrBelowOrBelow([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelowOrAboveOrBelowOrBelow([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveOrBelowOrBelowOrAbove = (l, t) => {\n  let res = false\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t || l[i] <= t) {\n      res = true\n      break\n    }\n  }\n  return res\n}\n\n/*Return true if all num b ers in t he list l are equal or above threshold t.\n  >>> equalOrAboveOrBelowOrAboveOrBelowOrBelowOrBelowOrAbove([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrAbove([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrAboveOrBelowOrAboveOrBelowOrBelowOrAboveOrBelowOrBelowOrAboveOrBelowOrBelowOrAboveOrBelowOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Addtwo numbers x andy \n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = (x) => {\n  return Math.log10(x);\n};\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = (x) => {\n  return Math.log2(x);\n};\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = (x) => {\n  return Math.log1p(x);\n};\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst pow = Math.pow;\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = Math.exp;\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst pow = Math.pow;\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = Math.exp;\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst pow = Math.pow;\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = Math.exp;\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst pow = Math.pow;\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = Math.exp;\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*\n  >>> log1p(2)\n  0.4\n  >>> log1p(5)\n  1.44269504088896\n  */\nconst pow = Math.pow;\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst exp = Math.exp;\n\n/*\n  >>> exp(2)\n  4\n  >>> exp(5)\n  24\n  */\nconst log = Math.log;\n\n/*\n  >>> log(2)\n  0.4\n  >>> log(5)\n  1.44269504088896\n  */\nconst log10 = Math.log10;\n\n/*\n  >>> log10(2)\n  0.4\n  >>> log10(5)\n  1.44269504088896\n  */\nconst log2 = Math.log2;\n\n/*\n  >>> log2(2)\n  0.4\n  >>> log2(5)\n  1.44269504088896\n  */\nconst log1p = Math.log1p;\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words ha v e the sa me characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two words ha v e the sa me characters.\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * true\n * >>> sameWords('abcd', 'dddddddabc')\n * true\n * >>> sameWords('dddddddabc', 'abcd')\n * true\n * >>> sameWords('eabcd', 'dddddddabc')\n * false\n * >>> sameWords('abcd', 'dddddddabce')\n * false\n * >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n * false\n */\nconst sameWordsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonaccin umber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  \n  for(let i = 2; i <= n; i++){\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stringo f \"<\" an d \">\".\n  return false if every opening bracket has a corresponding clos ingbr ac ket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").map(x => x.trim());\n  const closingBrackets = brackets.split(\">\").map(x => x.trim());\n  return openingBrackets.every((x, i) => closingBrackets.every((y, j) => x === y && i === j));\n};\n\n/**\n * Returns a new string with all the characters in `str` replaced by `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n * then those characters are replaced with `replacement`.\n *\n * If the `replacement` string contains any characters that would cause a replacement to occur,\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true is list el e ments ar e monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.reverse();\n  while (l > j) {\n    if (l[j] < k) {\n      i = j;\n      j = l[j];\n      k = l[i];\n    }\n  }\n  return i > 0;\n};\n\n/*\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  true\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  true\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false\n  >>> isPositive(3.14)\n  false\n  >>> isPositive(-3.14)\n  false", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sorted unique c o mmon ele ments for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n\n  while (i < l1.length && j < l2.length) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest pri m e factor  of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 1;\n  let m = 1;\n  let p = 1;\n  let factor = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      m = i;\n      p = i;\n      i++;\n    }\n    factor *= i;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its greatest common divisor of n and n.\n  >>> gcd(2, 3)\n  2\n  >>> gcd(7, 7)\n  1\n  >>> gcd(7, 9)\n  3\n  >>> gcd(7, 11)\n  1\n  >>> gcd(7, 15)\n  3\n  >>> gcd(7, 17)\n  1\n  >>> gcd(7, 19)\n  3\n  >>> gcd(7, 21)\n  1\n  >>> gcd(7, 23)\n  3\n  >>> gcd(7, 31)\n  1\n  >>> gcd(7, 37)\n  3\n  >>> gcd(7, 41)\n  1\n  >>> gcd(7, 47)\n  3\n  >>> gcd(7, 51)\n  1\n  >>> gcd(7, 59)\n  3\n  >>> gcd(7, 61)\n  1\n  >>> gcd(7, 67)\n  3\n  >>> gcd(7, 71)\n  1\n  >>> gcd(7, 73)\n  3\n  >>> gcd(7, 79)\n  1\n  >>> gcd(7, 81)\n  3\n  >>> gcd(7, 87)\n  1\n  >>> gcd(7, 91)\n  3\n  >>> gcd(7, 93)\n  1\n  >>> gcd(7, 97)\n  3\n  >>> gcd(7, 101)\n  1\n  >>> gcd(7, 103)\n  3\n  >>> gcd(7, 107)\n  1\n  >>> gcd(7, 111)\n  3\n  >>> gcd(7, 117)\n  1\n  >>> gcd(7, 121)\n  3\n  >>> gcd(7, 127)\n  1\n  >>> gcd(7, 131)\n  3\n  >>> gcd(7, 137)\n  1\n  >>> gcd(7, 141)\n  3\n  >>> gcd(7, 147)\n  1\n  >>> gcd(7, 151)\n  3\n  >>> gcd(7, 157)\n  1\n  >>> gcd(7, 161)\n  3\n  >>> gcd(7, 167)\n  1\n  >>> gcd(7, 171)\n  3\n  >>> gcd(7, 177)\n  1\n  >>> gcd(7, 181)\n  3\n  >>> gcd(7, 187)\n  1\n  >>> gcd(7, 191)\n  3\n  >>> gcd(7, 197)\n  1\n  >>> gcd(7, 201)\n  3\n  >>> gcd(7, 207)\n  1\n  >>> gcd(7, 211)\n  3\n  >>> gcd(7, 217)\n  1\n  >>> gcd(7, 221)\n  3\n  >>> gcd(7, 227)\n  1\n  >>> gcd(7, 231)\n  3\n  >>> gcd(7, 233)\n  1\n  >>> gcd(7, 239)\n  3\n  >>> gcd(7, 241)\n  1\n  >>> gcd(7, 243)\n  3\n  >>> gcd(7, 247)\n  1\n  >>> gcd(7, 251)\n  3\n  >>> gcd(7, 257)\n  1\n  >>> gcd(7, 261)\n  3\n  >>> gcd(7, 267)\n  1\n  >>> gcd(7, 271)\n  3\n  >>> gcd(7, 277)\n  1\n  >>> gcd(7, 281)\n  3\n  >>> gcd(7, 287)\n  1\n  >>> gcd(7, 291)\n  3\n  >>> gcd(7, 297)\n  1\n  >>> gcd(7, 301)\n  3\n  >>> gcd(7, 307)\n  1\n  >>> gcd(7, 311)\n  3\n  >>> gcd(7, 317)\n  1\n  >>> gcd(7, 331)\n  3\n  >>> gcd(7, 337)\n  1\n  >>> gcd(7, 341)\n  3\n  >>> gcd(7, 347)\n  1\n  >>> gcd(7, 351)\n  3\n  >>> gcd(7, 357)\n  1\n  >>> gcd(7, 361)\n  3\n  >>> gcd(7, 367)\n  1\n  >>> gcd(7, 371)\n  3\n  >>> gcd(7, 377)\n  1\n  >>> gcd(7, 381)\n  3\n  >>> gcd(7, 387)\n  1\n  >>> gcd(7, 391)\n  3\n  >>> gcd(7, 397)\n  1\n  >>> gcd(7, 401)\n  3\n  >>> gcd(7, 407)\n  1\n  >>> gcd(7, 411)\n  3\n  >>> gcd(7, 419)\n  1\n  >>> gcd(7, 423)\n  3\n  >>> gcd(7, 429)\n  1\n  >>> gcd(7, 433)\n  3\n  >>> gcd(7, 439)\n  1\n  >>> gcd(7, 441)\n  3\n  >>> gcd(7, 447)\n  1\n  >>> gcd(7, 451)\n  3\n  >>> gcd(7, 457)\n  1\n  >>> gcd(7, 461)\n  3\n  >>> gcd(7, 467)\n  1\n  >>> gcd(7, 471)\n  3\n  >>> gcd(7, 477)\n  1\n  >>> gcd(7, 481)\n  3\n  >>> gcd(7, 487)\n  1\n  >>> gcd(7, 491)\n  3\n  >>> gcd(7, 497)\n  1\n  >>> gcd(7, 501)\n  3\n  >>> gcd(7, 507)\n  1\n  >>> gcd(7, 511)\n  3\n  >>> gcd(7, 519)\n  1\n  >>> gcd(7, 523)\n  3\n  >>> gcd(7, 529)\n  1\n  >>> gcd(7, 533)\n  3\n  >>> gcd(7, 539)\n  1\n  >>> gcd(7, 541)\n  3\n  >>> gcd(7, 547)\n  1\n  >>> gcd(7, 551)\n  3\n  >>> gcd(7, 557)\n  1\n  >>> gcd(7, 561)\n  3\n  >>> gcd(7, 567)\n  1\n  >>> gcd(7, 571)\n  3\n  >>> gcd(7, 577)\n  1\n  >>> gcd(7, 581)\n  3\n  >>> gcd(7, 587)\n  1\n  >>> gcd(7, 591)\n  3\n  >>> gcd(7, 597)\n  1\n  >>> gcd(7, 601)\n  3\n  >>> gcd(7, 607)\n  1\n  >>> gcd(7, 611)\n  3\n  >>> gcd(7, 619)\n  1\n  >>> gcd(7, 623)\n  3\n  >>> gcd(7, 629)\n  1\n  >>> gcd(7, 631)\n  3\n  >>> gcd(7, 637)\n  1\n  >>> gcd(7, 639)\n  3\n  >>> gcd(7, 641)\n  1\n  >>> gcd(7, 643)\n  3\n  >>> gcd(7, 647)\n  1\n  >>> gcd(7, 651)\n  3\n  >>> gcd(7, 657)\n  1", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this functio n  is a st ring represented multiple groups for nested parentheses separated by sp aces. For eac h o f thegroup, output the deepes t le vel of nesting ofp arentheses.\n  E.g. (()()) has max imum t wo levelsof nesting whil e ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_nesting = 0\n  const paren_levels = []\n  const paren_nestings = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_nestings_stack = []\n  const paren_levels_stack = []\n  const paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function t h at sumsnumbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(30))\n  465\n  >>> sumToN(sumToN(100))\n  5050\n  >>> sumToN(sumToN(5))\n  15\n  >>> sumToN(sumToN(10))\n  55\n  >>> sumToN(sumToN(1))\n  1\n  */\nconst sumToN2 = (sum) => {\n  let sum2 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum2 += i;\n  }\n  return sum2;\n};\n\n/*\n  >>> sumToN2(sumToN2(30))\n  465\n  >>> sumToN2(sumToN2(100))\n  5050\n  >>> sumToN2(sumToN2(5))\n  15\n  >>> sumToN2(sumToN2(10))\n  55\n  >>> sumToN2(sumToN2(1))\n  1\n  */\nconst sumToN3 = (sum) => {\n  let sum3 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum3 += i;\n  }\n  return sum3;\n};\n\n/*\n  >>> sumToN3(sumToN3(30))\n  465\n  >>> sumToN3(sumToN3(100))\n  5050\n  >>> sumToN3(sumToN3(5))\n  15\n  >>> sumToN3(sumToN3(10))\n  55\n  >>> sumToN3(sumToN3(1))\n  1\n  */\nconst sumToN4 = (sum) => {\n  let sum4 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum4 += i;\n  }\n  return sum4;\n};\n\n/*\n  >>> sumToN4(sumToN4(30))\n  465\n  >>> sumToN4(sumToN4(100))\n  5050\n  >>> sumToN4(sumToN4(5))\n  15\n  >>> sumToN4(sumToN4(10))\n  55\n  >>> sumToN4(sumToN4(1))\n  1\n  */\nconst sumToN5 = (sum) => {\n  let sum5 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum5 += i;\n  }\n  return sum5;\n};\n\n/*\n  >>> sumToN5(sumToN5(30))\n  465\n  >>> sumToN5(sumToN5(100))\n  5050\n  >>> sumToN5(sumToN5(5))\n  15\n  >>> sumToN5(sumToN5(10))\n  55\n  >>> sumToN5(sumToN5(1))\n  1\n  */\nconst sumToN6 = (sum) => {\n  let sum6 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum6 += i;\n  }\n  return sum6;\n};\n\n/*\n  >>> sumToN6(sumToN6(30))\n  465\n  >>> sumToN6(sumToN6(100))\n  5050\n  >>> sumToN6(sumToN6(5))\n  15\n  >>> sumToN6(sumToN6(10))\n  55\n  >>> sumToN6(sumToN6(1))\n  1\n  */\nconst sumToN7 = (sum) => {\n  let sum7 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum7 += i;\n  }\n  return sum7;\n};\n\n/*\n  >>> sumToN7(sumToN7(30))\n  465\n  >>> sumToN7(sumToN7(100))\n  5050\n  >>> sumToN7(sumToN7(5))\n  15\n  >>> sumToN7(sumToN7(10))\n  55\n  >>> sumToN7(sumToN7(1))\n  1\n  */\nconst sumToN8 = (sum) => {\n  let sum8 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum8 += i;\n  }\n  return sum8;\n};\n\n/*\n  >>> sumToN8(sumToN8(30))\n  465\n  >>> sumToN8(sumToN8(100))\n  5050\n  >>> sumToN8(sumToN8(5))\n  15\n  >>> sumToN8(sumToN8(10))\n  55\n  >>> sumToN8(sumToN8(1))\n  1\n  */\nconst sumToN9 = (sum) => {\n  let sum9 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum9 += i;\n  }\n  return sum9;\n};\n\n/*\n  >>> sumToN9(sumToN9(30))\n  465\n  >>> sumToN9(sumToN9(100))\n  5050\n  >>> sumToN9(sumToN9(5))\n  15\n  >>> sumToN9(sumToN9(10))\n  55\n  >>> sumToN9(sumToN9(1))\n  1\n  */\nconst sumToN10 = (sum) => {\n  let sum10 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum10 += i;\n  }\n  return sum10;\n};\n\n/*\n  >>> sumToN10(sumToN10(30))\n  465\n  >>> sumToN10(sumToN10(100))\n  5050\n  >>> sumToN10(sumToN10(5))\n  15\n  >>> sumToN10(sumToN10(10))\n  55\n  >>> sumToN10(sumToN10(1))\n  1\n  */\nconst sumToN11 = (sum) => {\n  let sum11 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum11 += i;\n  }\n  return sum11;\n};\n\n/*\n  >>> sumToN11(sumToN11(30))\n  465\n  >>> sumToN11(sumToN11(100))\n  5050\n  >>> sumToN11(sumToN11(5))\n  15\n  >>> sumToN11(sumToN11(10))\n  55\n  >>> sumToN11(sumToN11(1))\n  1\n  */\nconst sumToN12 = (sum) => {\n  let sum12 = 0;\n  for (let i = 1; i <= sum; i++) {\n    sum12 += i;\n  }\n  return sum12;\n};\n\n/*\n  >>> sumToN12(sumToN12(30))\n  465\n  >>> sumToN12(sumToN12(100))\n  5050\n  >>> sumToN12(sumToN12(5))\n  15\n  >>> sumToN12(sumToN12(10))\n  55\n  >>> sumToN12(sumToN12(1))\n  1\n  */\nconst sumToN13 = (sum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stringo f \"(\" an d \")\".\n  return true if every opening bracket has acorresponding closi ng bra ck et.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.every(\n    (char) => char === \")\" || char === \")(\"\n  );\n};\n\n/**\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bracket character.\n *\n * Returns true if a character is a valid closing bra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xsrepresent coeffici e nts of a  polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivat iveof  t his pol yno mial i n the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = 0;\n  let t = 0;\n  let ys = [];\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n1 = 0;\n  let n2 = 0;\n  let n3 = 0;\n  let n4 = 0;\n  let n5 = 0;\n  let n6 = 0;\n  let n7 = 0;\n  let n8 = 0;\n  let n9 = 0;\n  let n10 = 0;\n  let n11 = 0;\n  let n12 = 0;\n  let n13 = 0;\n  let n14 = 0;\n  let n15 = 0;\n  let n16 = 0;\n  let n17 = 0;\n  let n18 = 0;\n  let n19 = 0;\n  let n20 = 0;\n  let n21 = 0;\n  let n22 = 0;\n  let n23 = 0;\n  let n24 = 0;\n  let n25 = 0;\n  let n26 = 0;\n  let n27 = 0;\n  let n28 = 0;\n  let n29 = 0;\n  let n30 = 0;\n  let n31 = 0;\n  let n32 = 0;\n  let n33 = 0;\n  let n34 = 0;\n  let n35 = 0;\n  let n36 = 0;\n  let n37 = 0;\n  let n38 = 0;\n  let n39 = 0;\n  let n40 = 0;\n  let n41 = 0;\n  let n42 = 0;\n  let n43 = 0;\n  let n44 = 0;\n  let n45 = 0;\n  let n46 = 0;\n  let n47 = 0;\n  let n48 = 0;\n  let n49 = 0;\n  let n50 = 0;\n  let n51 = 0;\n  let n52 = 0;\n  let n53 = 0;\n  let n54 = 0;\n  let n55 = 0;\n  let n56 = 0;\n  let n57 = 0;\n  let n58 = 0;\n  let n59 = 0;\n  let n60 = 0;\n  let n61 = 0;\n  let n62 = 0;\n  let n63 = 0;\n  let n64 = 0;\n  let n65 = 0;\n  let n66 = 0;\n  let n67 = 0;\n  let n68 = 0;\n  let n69 = 0;\n  let n70 = 0;\n  let n71 = 0;\n  let n72 = 0;\n  let n73 = 0;\n  let n74 = 0;\n  let n75 = 0;\n  let n76 = 0;\n  let n77 = 0;\n  let n78 = 0;\n  let n79 = 0;\n  let n80 = 0;\n  let n81 = 0;\n  let n82 = 0;\n  let n83 = 0;\n  let n84 = 0;\n  let n85 = 0;\n  let n86 = 0;\n  let n87 = 0;\n  let n88 = 0;\n  let n89 = 0;\n  let n90 = 0;\n  let n91 = 0;\n  let n92 = 0;\n  let n93 = 0;\n  let n94 = 0;\n  let n95 = 0;\n  let n96 = 0;\n  let n97 = 0;\n  let n98 = 0;\n  let n99 = 0;\n  let n100 = 0;\n  let n101 = 0;\n  let n102 = 0;\n  let n103 = 0;\n  let n104 = 0;\n  let n105 = 0;\n  let n106 = 0;\n  let n107 = 0;\n  let n108 = 0;\n  let n109 = 0;\n  let n110 = 0;\n  let n111 = 0;\n  let n112 = 0;\n  let n113 = 0;\n  let n114 = 0;\n  let n115 = 0;\n  let n116 = 0;\n  let n117 = 0;\n  let n118 = 0;\n  let n119 = 0;\n  let n120 = 0;\n  let n121 = 0;\n  let n122 = 0;\n  let n123 = 0;\n  let n124 = 0;\n  let n125 = 0;\n  let n126 = 0;\n  let n127 = 0;\n  let n128 = 0;\n  let n129 = 0;\n  let n130 = 0;\n  let n131 = 0;\n  let n132 = 0;\n  let n133 = 0;\n  let n134 = 0;\n  let n135 = 0;\n  let n136 = 0;\n  let n137 = 0;\n  let n138 = 0;\n  let n139 = 0;\n  let n140 = 0;\n  let n141 = 0;\n  let n142 = 0;\n  let n143 = 0;\n  let n144 = 0;\n  let n145 = 0;\n  let n146 = 0;\n  let n147 = 0;\n  let n148 = 0;\n  let n149 = 0;\n  let n150 = 0;\n  let n151 = 0;\n  let n152 = 0;\n  let n153 = 0;\n  let n154 = 0;\n  let n155 = 0;\n  let n156 = 0;\n  let n157 = 0;\n  let n158 = 0;\n  let n159 = 0;\n  let n160 = 0;\n  let n161 = 0;\n  let n162 = 0;\n  let n163 = 0;\n  let n164 = 0;\n  let n165 = 0;\n  let n166 = 0;\n  let n167 = 0;\n  let n168 = 0;\n  let n169 = 0;\n  let n170 = 0;\n  let n171 = 0;\n  let n172 = 0;\n  let n173 = 0;\n  let n174 = 0;\n  let n175 = 0;\n  let n176 = 0;\n  let n177 = 0;\n  let n178 = 0;\n  let n179 = 0;\n  let n180 = 0;\n  let n181 = 0;\n  let n182 = 0;\n  let n183 = 0;\n  let n184 = 0;\n  let n185 = 0;\n  let n186 = 0;\n  let n187 = 0;\n  let n188 = 0;\n  let n189 = 0;\n  let n190 = 0;\n  let n191 = 0;\n  let n192 = 0;\n  let n193 = 0;\n  let n194 = 0;\n  let n195 = 0;\n  let n196 = 0;\n  let n197 = 0;\n  let n198 = 0;\n  let n199 = 0;\n  let n200 = 0;\n  let n201 = 0;\n  let n202 = 0;\n  let n203 = 0;\n  let n204 = 0;\n  let n205 = 0;\n  let n206 = 0;\n  let n207 = 0;\n  let n208 = 0;\n  let n209 = 0;\n  let n210 = 0;\n  let n211 = 0;\n  let n212 = 0;\n  let n213 = 0;\n  let n214 = 0;\n  let n215 = 0;\n  let n216 = 0;\n  let n217 = 0;\n  let n218 = 0;\n  let n219 = 0;\n  let n220 = 0;\n  let n221 = 0;\n  let n222 = 0;\n  let n223 = 0;\n  let n224 = 0;\n  let n225 = 0;\n  let n226 = 0;\n  let n227 = 0;\n  let n228 = 0;\n  let n229 = 0;\n  let n230 = 0;\n  let n231 = 0;\n  let n232 = 0;\n  let n233 = 0;\n  let n234 = 0;\n  let n235 = 0;\n  let n236 = 0;\n  let n237 = 0;\n  let n238 = 0;\n  let n239 = 0;\n  let n240 = 0;\n  let n241 = 0;\n  let n242 = 0;\n  let n243 = 0;\n  let n244 = 0;\n  let n245 = 0;\n  let n246 = 0;\n  let n247 = 0;\n  let n248 = 0;\n  let n249 = 0;\n  let n250 = 0;\n  let n251 = 0;\n  let n252 = 0;\n  let n253 = 0;\n  let n254 = 0;\n  let n255 = 0;\n  let n256 = 0;\n  let n257 = 0;\n  let n258 = 0;\n  let n259 = 0;\n  let n260 = 0;\n  let n261 = 0;\n  let n262 = 0;\n  let n263 = 0;\n  let n264 = 0;\n  let n265 = 0;\n  let n266 = 0;\n  let n267 = 0;\n  let n268 = 0;\n  let n269 = 0;\n  let n270 = 0;\n  let n271 = 0;\n  let n272 = 0;\n  let n273 = 0;\n  let n274 = 0;\n  let n275 = 0;\n  let n276 = 0;\n  let n277 = 0;\n  let n278 = 0;\n  let n279 = 0;\n  let n280 = 0;\n  let n281 = 0;\n  let n282 = 0;\n  let n283 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TheFibFib number sequ e nce is a  sequence similar to the Fibbonacci sequnece that'sdefined as follows: \n  fib fi b(0) ==  0  fibf ib(1) == 0\n  fibfib(2) = = 1 fibfib(n) == fib f ib(n-1) + fibfib(n-2) +fibfib(n- 3).\n Please write a function t o efficiently compute the n-th element of the fibfib numbe r sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n fibfib(n) is the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. \n fibfib(n) is a recursive function. It computes the n-th element of the Fibonacci sequence fibfib n times. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ' , 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowel s Count wh ich takes a string representing\n  a word as input and returns the numbe r of v ow els inthe  strin g.\n  Vowels in this case  are  'a', 'e', 'i', 'o ', 'u'. Here, 'y' isalso a\n  vowe l, but  onlywhen it is atthe e nd of the given word.\n\n Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsLength = vowels.length;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n  let vowelsIndex197 = 0;\n  let vowelsIndex198 = 0;\n  let vowelsIndex199 = 0;\n  let vowelsIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the dig i ts of th e integer x, shift the digits right by shift\n  and returnthe result as  a str in g.\n  If  sh ift >number of digits, return  dig its reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  let len = str.length;\n  let i = 0;\n  let j = 0;\n  let result = \"\";\n  while (i < len) {\n    let digit = str.charAt(i);\n    let digitInt = parseInt(digit, 10);\n    let digitInt = digitInt << shift;\n    result += digitInt;\n    i++;\n  }\n  return result;\n};\n\n/**\n  Converts a string to a number in base 10.\n  >>> toBase10(\"12\")\n  10\n  >>> toBase10(\"123\")\n  12\n  >>> toBase10(\"1234\")\n  14\n  >>> toBase10(\"12345\")\n  15\n  >>> toBase10(\"123456\")\n  16\n  >>> toBase10(\"1234567\")\n  17\n  >>> toBase10(\"12345678\")\n  18\n  >>> toBase10(\"123456789\")\n  19\n  >>> toBase10(\"1234567890\")\n  20\n  >>> toBase10(\"1234567891\")\n  21\n  >>> toBase10(\"1234567892\")\n  22\n  >>> toBase10(\"1234567893\")\n  23\n  >>> toBase10(\"1234567894\")\n  24\n  >>> toBase10(\"1234567895\")\n  25\n  >>> toBase10(\"1234567896\")\n  26\n  >>> toBase10(\"1234567897\")\n  27\n  >>> toBase10(\"1234567898\")\n  28\n  >>> toBase10(\"1234567890\")\n  29\n  >>> toBase10(\"1234567891\")\n  30\n  >>> toBase10(\"1234567892\")\n  31\n  >>> toBase10(\"1234567893\")\n  32\n  >>> toBase10(\"1234567894\")\n  33\n  >>> toBase10(\"1234567895\")\n  34\n  >>> toBase10(\"1234567896\")\n  35\n  >>> toBase10(\"1234567897\")\n  36\n  >>> toBase10(\"1234567898\")\n  37\n  >>> toBase10(\"1234567890\")\n  38\n  >>> toBase10(\"1234567891\")\n  39\n  >>> toBase10(\"1234567892\")\n  40\n  >>> toBase10(\"1234567893\")\n  41\n  >>> toBase10(\"1234567894\")\n  42\n  >>> toBase10(\"1234567895\")\n  43\n  >>> toBase10(\"1234567896\")\n  44\n  >>> toBase10(\"1234567897\")\n  45\n  >>> toBase10(\"1234567898\")\n  46\n  >>> toBase10(\"1234567890\")\n  47\n  >>> toBase10(\"1234567891\")\n  48\n  >>> toBase10(\"1234567892\")\n  49\n  >>> toBase10(\"1234567893\")\n  50\n  >>> toBase10(\"1234567894\")\n  51\n  >>> toBase10(\"1234567895\")\n  52\n  >>> toBase10(\"1234567896\")\n  53\n  >>> toBase10(\"1234567897\")\n  54\n  >>> toBase10(\"1234567898\")\n  55\n  >>> toBase10(\"1234567890\")\n  56\n  >>> toBase10(\"1234567891\")\n  57\n  >>> toBase10(\"1234567892\")\n  58\n  >>> toBase10(\"1234567893\")\n  59\n  >>> toBase10(\"1234567894\")\n  60\n  >>> toBase10(\"1234567895\")\n  61\n  >>> toBase10(\"1234567896\")\n  62\n  >>> toBase10(\"1234567897\")\n  63\n  >>> toBase10(\"1234567898\")\n  64\n  >>> toBase10(\"1234567890\")\n  65\n  >>> toBase10(\"1234567891\")\n  66\n  >>> toBase10(\"1234567892\")\n  67\n  >>> toBase10(\"1234567893\")\n  68\n  >>> toBase10(\"1234567894\")\n  69\n  >>> toBase10(\"1234567895\")\n  70\n  >>> toBase10(\"1234567896\")\n  71\n  >>> toBase10(\"1234567897\")\n  72\n  >>> toBase10(\"1234567898\")\n  73\n  >>> toBase10(\"1234567890\")\n  74\n  >>> toBase10(\"1234567891\")\n  75\n  >>> toBase10(\"1234567892\")\n  76\n  >>> toBase10(\"1234567893\")\n  77\n  >>> toBase10(\"1234567894\")\n  78\n  >>> toBase10(\"1234567895\")\n  79\n  >>> toBase10(\"1234567896\")\n  80\n  >>> toBase10(\"1234567897\")\n  81\n  >>> toBase10(\"1234567898\")\n  82\n  >>> toBase10(\"1234567890\")\n  83\n  >>> toBase10(\"1234567891\")\n  84\n  >>> toBase10(\"1234567892\")\n  85\n  >>> toBase10(\"1234567893\")\n  86\n  >>> toBase10(\"1234567894\")\n  87\n  >>> toBase10(\"1234567895\")\n  88\n  >>> toBase10(\"1234567896\")\n  89\n  >>> toBase10(\"1234567897\")\n  90\n  >>> toBase10(\"1234567898\")\n  91\n  >>> toBase10(\"1234567890\")\n  92\n  >>> toBase10(\"1234567891\")\n  93\n  >>> toBase10(\"1234567892\")\n  94\n  >>> toBase10(\"1234567893\")\n  95\n  >>> toBase10(\"1234567894\")\n  96\n  >>> toBase10(\"1234567895\")\n  97\n  >>> toBase10(\"1234567896\")\n  98\n  >>> toBase10(\"1234567897\")\n  99\n  >>> toBase10(\"1234567898\")\n  100\n  >>> toBase10(\"1234567890\")\n  101\n  >>> toBase10(\"1234567891\")\n  102\n  >>> toBase10(\"1234567892\")\n  103\n  >>> toBase10(\"1234567893\")\n  104\n  >>> toBase10(\"1234567894\")\n  105\n  >>> toBase10(\"1234567895\")\n  106\n  >>> toBase10(\"1234567896\")\n  107\n  >>> toBase10(\"1234567897\")\n  108\n  >>> toBase10(\"1234567898\")\n  109\n  >>> toBase10(\"1234567890\")\n  110\n  >>> toBase10(\"1234567891\")\n  111\n  >>> toBase10(\"1234567892\")\n  112\n  >>> toBase10(\"1234567893\")\n  113\n  >>> toBase10(\"1234567894\")\n  114\n  >>> toBase10(\"1234567895\")\n  115\n  >>> toBase10(\"1234567896\")\n  116\n  >>> toBase10(\"1234567897\")\n  117\n  >>> toBase10(\"1234567898\")\n  118\n  >>> toBase10(\"1234567890\")\n  119\n  >>> toBase10(\"1234567891\")\n  120\n  >>> toBase10(\"1234567892\")\n  121\n  >>> toBase10(\"1234567893\")\n  122\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the lower characters only' \n  ASC II  codes. \n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum of the upper and lower case letters only' \n  ASC II  codes. \n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task  Write a functio n  that ta kes a string as input and returns the sum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\" ,3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Inthis task, you wil l  be give n a string that represents a number of apples and oranges  that are di stribu te d in abas ket of  fruit this basket conta ins apples, oranges, and mango fruits. Giventhe strin g that  represents the total num ber of\n  the oranges and apples and an integer that repres ent the total number of  the f ruits\n  in the basketr eturn thenumber of the m ango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\",  19) ->19 - 5 -6 = 8\n  fruitDistribution(\"0 apples and1 oranges\",3) -> 3- 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 or anges\", 10 0) ->  100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 ora nges\",120)-> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = ( s, n) => {\n  let total = 0;\n  let num = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCount2 = 0;\n  let fruitCount3 = 0;\n  let fruitCount4 = 0;\n  let fruitCount5 = 0;\n  let fruitCount6 = 0;\n  let fruitCount7 = 0;\n  let fruitCount8 = 0;\n  let fruitCount9 = 0;\n  let fruitCount10 = 0;\n  let fruitCount11 = 0;\n  let fruitCount12 = 0;\n  let fruitCount13 = 0;\n  let fruitCount14 = 0;\n  let fruitCount15 = 0;\n  let fruitCount16 = 0;\n  let fruitCount17 = 0;\n  let fruitCount18 = 0;\n  let fruitCount19 = 0;\n  let fruitCount20 = 0;\n  let fruitCount21 = 0;\n  let fruitCount22 = 0;\n  let fruitCount23 = 0;\n  let fruitCount24 = 0;\n  let fruitCount25 = 0;\n  let fruitCount26 = 0;\n  let fruitCount27 = 0;\n  let fruitCount28 = 0;\n  let fruitCount29 = 0;\n  let fruitCount30 = 0;\n  let fruitCount31 = 0;\n  let fruitCount32 = 0;\n  let fruitCount33 = 0;\n  let fruitCount34 = 0;\n  let fruitCount35 = 0;\n  let fruitCount36 = 0;\n  let fruitCount37 = 0;\n  let fruitCount38 = 0;\n  let fruitCount39 = 0;\n  let fruitCount40 = 0;\n  let fruitCount41 = 0;\n  let fruitCount42 = 0;\n  let fruitCount43 = 0;\n  let fruitCount44 = 0;\n  let fruitCount45 = 0;\n  let fruitCount46 = 0;\n  let fruitCount47 = 0;\n  let fruitCount48 = 0;\n  let fruitCount49 = 0;\n  let fruitCount50 = 0;\n  let fruitCount51 = 0;\n  let fruitCount52 = 0;\n  let fruitCount53 = 0;\n  let fruitCount54 = 0;\n  let fruitCount55 = 0;\n  let fruitCount56 = 0;\n  let fruitCount57 = 0;\n  let fruitCount58 = 0;\n  let fruitCount59 = 0;\n  let fruitCount60 = 0;\n  let fruitCount61 = 0;\n  let fruitCount62 = 0;\n  let fruitCount63 = 0;\n  let fruitCount64 = 0;\n  let fruitCount65 = 0;\n  let fruitCount66 = 0;\n  let fruitCount67 = 0;\n  let fruitCount68 = 0;\n  let fruitCount69 = 0;\n  let fruitCount70 = 0;\n  let fruitCount71 = 0;\n  let fruitCount72 = 0;\n  let fruitCount73 = 0;\n  let fruitCount74 = 0;\n  let fruitCount75 = 0;\n  let fruitCount76 = 0;\n  let fruitCount77 = 0;\n  let fruitCount78 = 0;\n  let fruitCount79 = 0;\n  let fruitCount80 = 0;\n  let fruitCount81 = 0;\n  let fruitCount82 = 0;\n  let fruitCount83 = 0;\n  let fruitCount84 = 0;\n  let fruitCount85 = 0;\n  let fruitCount86 = 0;\n  let fruitCount87 = 0;\n  let fruitCount88 = 0;\n  let fruitCount89 = 0;\n  let fruitCount90 = 0;\n  let fruitCount91 = 0;\n  let fruitCount92 = 0;\n  let fruitCount93 = 0;\n  let fruitCount94 = 0;\n  let fruitCount95 = 0;\n  let fruitCount96 = 0;\n  let fruitCount97 = 0;\n  let fruitCount98 = 0;\n  let fruitCount99 = 0;\n  let fruitCount100 = 0;\n  let fruitCount101 = 0;\n  let fruitCount102 = 0;\n  let fruitCount103 = 0;\n  let fruitCount104 = 0;\n  let fruitCount105 = 0;\n  let fruitCount106 = 0;\n  let fruitCount107 = 0;\n  let fruitCount108 = 0;\n  let fruitCount109 = 0;\n  let fruitCount110 = 0;\n  let fruitCount111 = 0;\n  let fruitCount112 = 0;\n  let fruitCount113 = 0;\n  let fruitCount114 = 0;\n  let fruitCount115 = 0;\n  let fruitCount116 = 0;\n  let fruitCount117 = 0;\n  let fruitCount118 = 0;\n  let fruitCount119 = 0;\n  let fruitCount120 = 0;\n  let fruitCount121 = 0;\n  let fruitCount122 = 0;\n  let fruitCount123 = 0;\n  let fruitCount124 = 0;\n  let fruitCount125 = 0;\n  let fruitCount126 = 0;\n  let fruitCount127 = 0;\n  let fruitCount128 = 0;\n  let fruitCount129 = 0;\n  let fruitCount130 = 0;\n  let fruitCount131 = 0;\n  let fruitCount132 = 0;\n  let fruitCount133 = 0;\n  let fruitCount134 = 0;\n  let fruitCount135 = 0;\n  let fruitCount136 = 0;\n  let fruitCount137 = 0;\n  let fruitCount138 = 0;\n  let fruitCount139 = 0;\n  let fruitCount140 = 0;\n  let fruitCount141 = 0;\n  let fruitCount142 = 0;\n  let fruitCount143 = 0;\n  let fruitCount144 = 0;\n  let fruitCount145 = 0;\n  let fruitCount146 = 0;\n  let fruitCount147 = 0;\n  let fruitCount148 = 0;\n  let fruitCount149 = 0;\n  let fruitCount150 = 0;\n  let fruitCount151 = 0;\n  let fruitCount152 = 0;\n  let fruitCount153 = 0;\n  let fruitCount154 = 0;\n  let fruitCount155 = 0;\n  let fruitCount156 = 0;\n  let fruitCount157 = 0;\n  let fruitCount158 = 0;\n  let fruitCount159 = 0;\n  let fruitCount160 = 0;\n  let fruitCount161 = 0;\n  let fruitCount162 = 0;\n  let fruitCount163 = 0;\n  let fruitCount164 = 0;\n  let fruitCount165 = 0;\n  let fruitCount166 = 0;\n  let fruitCount167 = 0;\n  let fruitCount168 = 0;\n  let fruitCount169 = 0;\n  let fruitCount170 = 0;\n  let fruitCount171 = 0;\n  let fruitCount172 = 0;\n  let fruitCount173 = 0;\n  let fruitCount174 = 0;\n  let fruitCount175 = 0;\n  let fruitCount176 = 0;\n  let fruitCount177 = 0;\n  let fruitCount178 = 0;\n  let fruitCount179 = 0;\n  let fruitCount180 = 0;\n  let fruitCount181 = 0;\n  let fruitCount182 = 0;\n  let fruitCount183 = 0;\n  let fruitCount184 = 0;\n  let fruitCount185 = 0;\n  let fruitCount186 = 0;\n  let fruitCount187 = 0;\n  let fruitCount188 = 0;\n  let fruitCount189 = 0;\n  let fruitCount190 = 0;\n  let fruitCount191 = 0;\n  let fruitCount192 = 0;\n  let fruitCount193 = 0;\n  let fruitCount194 = 0;\n  let fruitCount195 = 0;\n  let fruitCount196 = 0;\n  let fruitCount197 = 0;\n  let fruitCount198 = 0;\n  let fruitCount199 = 0;\n  let fruitCount200 = 0;\n  let fruitCount201 = 0;\n  let fruitCount202 = 0;\n  let fruitCount203 = 0;\n  let fruitCount204 = 0;\n  let fruitCount205 = 0;\n  let fruitCount206 = 0;\n  let fruitCount207 = 0;\n  let fruitCount208 = 0;\n  let fruitCount209 = 0;\n  let fruitCount210 = 0;\n  let fruitCount211 = 0;\n  let fruitCount212 = 0;\n  let fruitCount213 = 0;\n  let fruitCount214 = 0;\n  let fruitCount215 = 0;\n  let fruitCount216 = 0;\n  let fruitCount217 = 0;\n  let fruitCount218 = 0;\n  let fruitCount219 = 0;\n  let fruitCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array repre s enting a  branch of a tree that has non-negative integer nodes\n  your task is to  pluck  o ne of t henodesand return it.\n  The plu cked  node should be th e  node with the smallesteven valu e.\n  I f multiple nodes with the  same smallest even value arefound return the node that h as smallest index.\n\n  T he plu cked node should be ret urned in a list, [ smales t_value, itsindex ],\n  If there are no even values or the given array is empty, return  [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      res.push(arr[i]);\n      i++;\n      continue;\n    }\n    while (j < len) {\n      if (arr[j] % 2 === 0) {\n        res.push(arr[j]);\n        j++;\n        continue;\n      }\n      if (arr[j] < arr[i]) {\n        res.push(arr[j]);\n        j++;\n        continue;\n      }\n      if (arr[j] > arr[i]) {\n        res.push(arr[i]);\n        i++;\n        continue;\n      }\n    }\n    i++;\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCM = function (nums) {\n  let numsLen = nums.length;\n  let numsIndex = 0;\n  let numsIndex2 = 0;\n  let numsIndex3 = 0;\n  let numsIndex4 = 0;\n  let numsIndex5 = 0;\n  let numsIndex6 = 0;\n  let numsIndex7 = 0;\n  let numsIndex8 = 0;\n  let numsIndex9 = 0;\n  let numsIndex10 = 0;\n  let numsIndex11 = 0;\n  let numsIndex12 = 0;\n  let numsIndex13 = 0;\n  let numsIndex14 = 0;\n  let numsIndex15 = 0;\n  let numsIndex16 = 0;\n  let numsIndex17 = 0;\n  let numsIndex18 = 0;\n  let numsIndex19 = 0;\n  let numsIndex20 = 0;\n  let numsIndex21 = 0;\n  let numsIndex22 = 0;\n  let numsIndex23 = 0;\n  let numsIndex24 = 0;\n  let numsIndex25 = 0;\n  let numsIndex26 = 0;\n  let numsIndex27 = 0;\n  let numsIndex28 = 0;\n  let numsIndex29 = 0;\n  let numsIndex30 = 0;\n  let numsIndex31 = 0;\n  let numsIndex32 = 0;\n  let numsIndex33 = 0;\n  let numsIndex34 = 0;\n  let numsIndex35 = 0;\n  let numsIndex36 = 0;\n  let numsIndex37 = 0;\n  let numsIndex38 = 0;\n  let numsIndex39 = 0;\n  let numsIndex40 = 0;\n  let numsIndex41 = 0;\n  let numsIndex42 = 0;\n  let numsIndex43 = 0;\n  let numsIndex44 = 0;\n  let numsIndex45 = 0;\n  let numsIndex46 = 0;\n  let numsIndex47 = 0;\n  let numsIndex48 = 0;\n  let numsIndex49 = 0;\n  let numsIndex50 = 0;\n  let numsIndex51 = 0;\n  let numsIndex52 = 0;\n  let numsIndex53 = 0;\n  let numsIndex54 = 0;\n  let numsIndex55 = 0;\n  let numsIndex56 = 0;\n  let numsIndex57 = 0;\n  let numsIndex58 = 0;\n  let numsIndex59 = 0;\n  let numsIndex60 = 0;\n  let numsIndex61 = 0;\n  let numsIndex62 = 0;\n  let numsIndex63 = 0;\n  let numsIndex64 = 0;\n  let numsIndex65 = 0;\n  let numsIndex66 = 0;\n  let numsIndex67 = 0;\n  let numsIndex68 = 0;\n  let numsIndex69 = 0;\n  let numsIndex70 = 0;\n  let numsIndex71 = 0;\n  let numsIndex72 = 0;\n  let numsIndex73 = 0;\n  let numsIndex74 = 0;\n  let numsIndex75 = 0;\n  let numsIndex76 = 0;\n  let numsIndex77 = 0;\n  let numsIndex78 = 0;\n  let numsIndex79 = 0;\n  let numsIndex80 = 0;\n  let numsIndex81 = 0;\n  let numsIndex82 = 0;\n  let numsIndex83 = 0;\n  let numsIndex84 = 0;\n  let numsIndex85 = 0;\n  let numsIndex86 = 0;\n  let numsIndex87 = 0;\n  let numsIndex88 = 0;\n  let numsIndex89 = 0;\n  let numsIndex90 = 0;\n  let numsIndex91 = 0;\n  let numsIndex92 = 0;\n  let numsIndex93 = 0;\n  let numsIndex94 = 0;\n  let numsIndex95 = 0;\n  let numsIndex96 = 0;\n  let numsIndex97 = 0;\n  let numsIndex98 = 0;\n  let numsIndex99 = 0;\n  let numsIndex100 = 0;\n  let numsIndex101 = 0;\n  let numsIndex102 = 0;\n  let numsIndex103 = 0;\n  let numsIndex104 = 0;\n  let numsIndex105 = 0;\n  let numsIndex106 = 0;\n  let numsIndex107 = 0;\n  let numsIndex108 = 0;\n  let numsIndex109 = 0;\n  let numsIndex110 = 0;\n  let numsIndex111 = 0;\n  let numsIndex112 = 0;\n  let numsIndex113 = 0;\n  let numsIndex114 = 0;\n  let numsIndex115 = 0;\n  let numsIndex116 = 0;\n  let numsIndex117 = 0;\n  let numsIndex118 = 0;\n  let numsIndex119 = 0;\n  let numsIndex120 = 0;\n  let numsIndex121 = 0;\n  let numsIndex122 = 0;\n  let numsIndex123 = 0;\n  let numsIndex124 = 0;\n  let numsIndex125 = 0;\n  let numsIndex126 = 0;\n  let numsIndex127 = 0;\n  let numsIndex128 = 0;\n  let numsIndex129 = 0;\n  let numsIndex130 = 0;\n  let numsIndex131 = 0;\n  let numsIndex132 = 0;\n  let numsIndex133 = 0;\n  let numsIndex134 = 0;\n  let numsIndex135 = 0;\n  let numsIndex136 = 0;\n  let numsIndex137 = 0;\n  let numsIndex138 = 0;\n  let numsIndex139 = 0;\n  let numsIndex140 = 0;\n  let numsIndex141 = 0;\n  let numsIndex142 = 0;\n  let numsIndex143 = 0;\n  let numsIndex144 = 0;\n  let numsIndex145 = 0;\n  let numsIndex146 = 0;\n  let numsIndex147 = 0;\n  let numsIndex148 = 0;\n  let numsIndex149 = 0;\n  let numsIndex150 = 0;\n  let numsIndex151 = 0;\n  let numsIndex152 = 0;\n  let numsIndex153 = 0;\n  let numsIndex154 = 0;\n  let numsIndex155 = 0;\n  let numsIndex156 = 0;\n  let numsIndex157", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a non-e m pty list  of positive integers. Return the greatest integer that is greater than \n  zer o,  and ha s a  frequ ency greater than or equ alt othe value of the integer itself.\n  The frequency o f an i nteger isthe number of t imes it appears in the list. If no such a value exist, r eturn -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  let maxI = 0;\n  let maxI2 = 0;\n  let maxI3 = 0;\n  let maxI4 = 0;\n  let maxI5 = 0;\n  let maxI6 = 0;\n  let maxI7 = 0;\n  let maxI8 = 0;\n  let maxI9 = 0;\n  let maxI10 = 0;\n  let maxI11 = 0;\n  let maxI12 = 0;\n  let maxI13 = 0;\n  let maxI14 = 0;\n  let maxI15 = 0;\n  let maxI16 = 0;\n  let maxI17 = 0;\n  let maxI18 = 0;\n  let maxI19 = 0;\n  let maxI20 = 0;\n  let maxI21 = 0;\n  let maxI22 = 0;\n  let maxI23 = 0;\n  let maxI24 = 0;\n  let maxI25 = 0;\n  let maxI26 = 0;\n  let maxI27 = 0;\n  let maxI28 = 0;\n  let maxI29 = 0;\n  let maxI30 = 0;\n  let maxI31 = 0;\n  let maxI32 = 0;\n  let maxI33 = 0;\n  let maxI34 = 0;\n  let maxI35 = 0;\n  let maxI36 = 0;\n  let maxI37 = 0;\n  let maxI38 = 0;\n  let maxI39 = 0;\n  let maxI40 = 0;\n  let maxI41 = 0;\n  let maxI42 = 0;\n  let maxI43 = 0;\n  let maxI44 = 0;\n  let maxI45 = 0;\n  let maxI46 = 0;\n  let maxI47 = 0;\n  let maxI48 = 0;\n  let maxI49 = 0;\n  let maxI50 = 0;\n  let maxI51 = 0;\n  let maxI52 = 0;\n  let maxI53 = 0;\n  let maxI54 = 0;\n  let maxI55 = 0;\n  let maxI56 = 0;\n  let maxI57 = 0;\n  let maxI58 = 0;\n  let maxI59 = 0;\n  let maxI60 = 0;\n  let maxI61 = 0;\n  let maxI62 = 0;\n  let maxI63 = 0;\n  let maxI64 = 0;\n  let maxI65 = 0;\n  let maxI66 = 0;\n  let maxI67 = 0;\n  let maxI68 = 0;\n  let maxI69 = 0;\n  let maxI70 = 0;\n  let maxI71 = 0;\n  let maxI72 = 0;\n  let maxI73 = 0;\n  let maxI74 = 0;\n  let maxI75 = 0;\n  let maxI76 = 0;\n  let maxI77 = 0;\n  let maxI78 = 0;\n  let maxI79 = 0;\n  let maxI80 = 0;\n  let maxI81 = 0;\n  let maxI82 = 0;\n  let maxI83 = 0;\n  let maxI84 = 0;\n  let maxI85 = 0;\n  let maxI86 = 0;\n  let maxI87 = 0;\n  let maxI88 = 0;\n  let maxI89 = 0;\n  let maxI90 = 0;\n  let maxI91 = 0;\n  let maxI92 = 0;\n  let maxI93 = 0;\n  let maxI94 = 0;\n  let maxI95 = 0;\n  let maxI96 = 0;\n  let maxI97 = 0;\n  let maxI98 = 0;\n  let maxI99 = 0;\n  let maxI100 = 0;\n  let maxI101 = 0;\n  let maxI102 = 0;\n  let maxI103 = 0;\n  let maxI104 = 0;\n  let maxI105 = 0;\n  let maxI106 = 0;\n  let maxI107 = 0;\n  let maxI108 = 0;\n  let maxI109 = 0;\n  let maxI110 = 0;\n  let maxI111 = 0;\n  let maxI112 = 0;\n  let maxI113 = 0;\n  let maxI114 = 0;\n  let maxI115 = 0;\n  let maxI116 = 0;\n  let maxI117 = 0;\n  let maxI118 = 0;\n  let maxI119 = 0;\n  let maxI120 = 0;\n  let maxI121 = 0;\n  let maxI122 = 0;\n  let maxI123 = 0;\n  let maxI124 = 0;\n  let maxI125 = 0;\n  let maxI126 = 0;\n  let maxI127 = 0;\n  let maxI128 = 0;\n  let maxI129 = 0;\n  let maxI130 = 0;\n  let maxI131 = 0;\n  let maxI132 = 0;\n  let maxI133 = 0;\n  let maxI134 = 0;\n  let maxI135 = 0;\n  let maxI136 = 0;\n  let maxI137 = 0;\n  let maxI138 = 0;\n  let maxI139 = 0;\n  let maxI140 = 0;\n  let maxI141 = 0;\n  let maxI142 = 0;\n  let maxI143 = 0;\n  let maxI144 = 0;\n  let maxI145 = 0;\n  let maxI146 = 0;\n  let maxI147 = 0;\n  let maxI148 = 0;\n  let maxI149 = 0;\n  let maxI150 = 0;\n  let maxI151 = 0;\n  let maxI152 = 0;\n  let maxI153 = 0;\n  let maxI154 = 0;\n  let maxI155 = 0;\n  let maxI156 = 0;\n  let maxI157 = 0;\n  let maxI158 = 0;\n  let maxI159 = 0;\n  let maxI160 = 0;\n  let maxI161 = 0;\n  let maxI162 = 0;\n  let maxI163 = 0;\n  let maxI164 = 0;\n  let maxI165 = 0;\n  let maxI166 = 0;\n  let maxI167 = 0;\n  let maxI168 = 0;\n  let maxI169 = 0;\n  let maxI170 = 0;\n  let maxI171 = 0;\n  let maxI172 = 0;\n  let maxI173 = 0;\n  let maxI174 = 0;\n  let maxI175 = 0;\n  let maxI176 = 0;\n  let maxI177 = 0;\n  let maxI178 = 0;\n  let maxI179 = 0;\n  let maxI180 = 0;\n  let maxI181 = 0;\n  let maxI182 = 0;\n  let maxI183 = 0;\n  let maxI184 = 0;\n  let maxI185 = 0;\n  let maxI186 = 0;\n  let maxI187 = 0;\n  let maxI188 = 0;\n  let maxI189 = 0;\n  let maxI190 = 0;\n  let maxI191 = 0;\n  let maxI192 = 0;\n  let maxI193 = 0;\n  let maxI194 = 0;\n  let maxI195 = 0;\n  let maxI196 = 0;\n  let maxI197 = 0;\n  let maxI198 = 0;\n  let maxI199 = 0;\n  let maxI200 = 0;\n  let maxI201 = 0;\n  let maxI202 = 0;\n  let maxI203 = 0;\n  let maxI204 = 0;\n  let maxI205 = 0;\n  let maxI206 = 0;\n  let maxI207 = 0;\n  let maxI208 = 0;\n  let maxI209 = 0;\n  let maxI210 = 0;\n  let maxI211 = 0;\n  let maxI212 = 0;\n  let maxI213 = 0;\n  let maxI214 = 0;\n  let maxI215 = 0;\n  let maxI216 = 0;\n  let maxI217 = 0;\n  let maxI218 = 0;\n  let maxI219 = 0;\n  let maxI220 = 0;\n  let maxI221 = 0;\n  let maxI222 = 0;\n  let maxI223 = 0;\n  let maxI224 = 0;\n  let maxI225 = 0;\n  let maxI226 = 0;\n  let maxI227 = 0;\n  let maxI228 = 0;\n  let maxI229 = 0;\n  let maxI230 = 0;\n  let maxI231 = 0;\n  let maxI232 = 0;\n  let maxI233 = 0;\n  let maxI234 = 0;\n  let maxI235 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input listo f string s only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n// Convert an input listo f string s to a listo f string s\n// that only contains characters in given listo f string s\n// >>> convertToListOfCharacters(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'cde']\nconst convertToListOfCharacters = (strings, characters) => {\n  return strings.filter(s => characters.includes(s));\n};\n\n// Convert an input listo f string s to a listo f string s\n// that only contains characters in given listo f string s\n// and remove all others\n// >>> convertToListOfCharacters(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['abc', 'bacd', 'cde']\nconst convertToListOfCharactersAndRemoveOthers = (strings, characters) => {\n  return strings.filter(s => characters.includes(s) && s!== '_');\n};\n\n// Convert an input listo f string s to a listo f string s\n// that only contains characters in given listo f string s\n// and remove all others\n// >>> convertToListOfCharactersAndRemoveOthers(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['abc', 'bacd', 'cde']\nconst convertToListOfCharactersAndRemoveOthersAndRemoveOthers = (strings, characters) => {\n  return strings.filter(s => characters.includes(s) && s!== '_' && s!== '$');\n};\n\n// Convert an input listo f string s to a listo f string s\n// that only contains characters in given listo f string s\n// and remove all others\n// >>> convertToListOfCharactersAndRemoveOthersAndRemoveOthers(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['abc', 'bacd', 'cde']\nconst convertToListOfCharactersAndRemoveOthersAndRemoveOthersAndRemoveOthers = (strings, characters) => {\n  return strings.filter(s => characters.includes(s) && s!== '_' && s!== '$' && s!== '%');\n};\n\n// Convert an input listo f string s to a listo f string s\n// that only contains characters in given listo f string s\n// and remove all others\n// >>> convertToListOfCharactersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAndRemoveOthersAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integer s , return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then minimum a n d soon.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverse = (lst) => {\n  let res = [];\n  let len = lst.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && lst[j] > lst[j + 1]) {\n      res.push(lst[j]);\n      j++;\n    }\n    if (j >= len) {\n      res.push(lst[j]);\n      j = 0;\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  Given a list of integer s, return  list in strange order.\n  Strange sorting, is when you start with the m inimum  v alue,\n th en max imum of the remaining in tege rs, then ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  const a3 = a2 * 3;\n  const b3 = b2 * 3;\n  const c3 = c2 * 3;\n  const a4 = a2 * 4;\n  const b4 = b2 * 4;\n  const c4 = c2 * 4;\n  const a5 = a2 * 5;\n  const b5 = b2 * 5;\n  const c5 = c2 * 5;\n  const a6 = a2 * 6;\n  const b6 = b2 * 6;\n  const c6 = c2 * 6;\n  const a7 = a2 * 7;\n  const b7 = b2 * 7;\n  const c7 = c2 * 7;\n  const a8 = a7 * 3;\n  const b8 = b7 * 3;\n  const c8 = c7 * 3;\n  const a9 = a7 * 4;\n  const b9 = b7 * 4;\n  const c9 = c7 * 4;\n  const a10 = a7 * 5;\n  const b10 = b7 * 5;\n  const c10 = c7 * 5;\n  const a11 = a8 * 3;\n  const b11 = b8 * 3;\n  const c11 = c8 * 3;\n  const a12 = a8 * 4;\n  const b12 = b8 * 4;\n  const c12 = c8 * 4;\n  const a13 = a8 * 5;\n  const b13 = b8 * 5;\n  const c13 = c8 * 5;\n  const a14 = a8 * 6;\n  const b14 = b8 * 6;\n  const c14 = c8 * 6;\n  const a15 = a8 * 7;\n  const b15 = b8 * 7;\n  const c15 = c8 * 7;\n  const area = (\n    (a2 + b2 + c2) +\n    (a3 + b3 + c3) +\n    (a4 + b4 + c4) +\n    (a5 + b5 + c5) +\n    (a6 + b6 + c6) +\n    (a7 + b7 + c7) +\n    (a8 + b8 + c8)\n  ) / 6;\n  return area;\n};\n\n/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  const a3 = a2 * 3;\n  const b3 = b2 * 3;\n  const c3 = c2 * 3;\n  const a4 = a2 * 4;\n  const b4 = b2 * 4;\n  const c4 = c2 * 4;\n  const a5 = a2 * 5;\n  const b5 = b2 * 5;\n  const c5 = c2 * 5;\n  const a6 = a2 * 6;\n  const b6 = b2 * 6;\n  const c6 = c2 * 6;\n  const a7 = a2 * 7;\n  const b7 = b2 * 7;\n  const c7 = c2 * 7;\n  const a8 = a7 * 3;\n  const b8 = b7 * 3;\n  const c8 = c7 * 3;\n  const a9 = a7 * 4;\n  const b9 = b7 * 4;\n  const c9 = c7 * 4;\n  const a10 = a7 * 5;\n  const b10 = b7 * 5;\n  const c10 = c7 * 5;\n  const a11 = a8 * 3;\n  const b11 = b8 * 3;\n  const c11 = c8 * 3;\n  const a12 = a8 * 4;\n  const b12 = b8 * 4;\n  const c12 = c8 * 4;\n  const a13 = a8 * 5;\n  const b13 = b8 * 5;\n  const c13 = c8 * 5;\n  const a14 = a8 * 6;\n  const b14 = b8 * 6;\n  const c14 = c8 * 6;\n  const a15 = a8 * 7;\n  const b15 = b8 * 7;\n  const c15 = c8 * 7;\n  const area = (\n    (a2 + b2 + c2) +\n    (a3 + b3 + c3) +\n    (a4 + b4 + c4) +\n    (a5 + b5 + c5) +\n    (a6 + b6 + c6) +\n    (a7 + b7 + c7) +\n    (a8 + b8 + c8)\n  ) / 6;\n  return area;\n};\n\n/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const a2 = a * 2;\n  const b2 = b * 2;\n  const c2 = c * 2;\n  const a3 = a2 * 3;\n  const b3 = b2 * 3;\n  const c3 = c2 * 3;\n  const a4 = a2 * 4;\n  const b4 = b2 * 4;\n  const c4 = c2 * 4;\n  const a5 = a2 * 5;\n  const b5 = b2 * 5;\n  const c5 = c2 * 5;\n  const a6 = a2 * 6;\n  const b6 = b2 * 6;\n  const c6 = c2 * 6;\n  const a7 = a2 * 7;\n  const b7 = b2 * 7;\n  const c7 = c2 * 7;\n  const a8 = a7 * 3;\n  const b8 = b7 * 3;\n  const c8 = c7 * 3;\n  const a9 = a7 * 4;\n  const b9 = b7 * 4;\n  const c9 = c7 * 4;\n  const a10 = a7 * 5;\n  const b10 = b7 * 5;\n  const c10 = c7 * 5;\n  const a11 = a8 * 3;\n  const b11 = b8 * 3;\n  const c11 = c8 * 3;\n  const a12 = a8 * 4;\n  const b12 = b8 * 4;\n  const c12 = c8 * 4;\n  const a13 = a8 * 5;\n  const b13 = b8 * 5;\n  const c13 = c8 * 5;\n  const a14 = a8 * 6;\n  const b14 = b8 * 6;\n  const c14 = c8 * 6;\n  const a15 = a8 * 7;\n  const b15 = b8 * 7;\n  const c15 = c8 * 7;\n  const area = (\n    (a2 + b2 + c2) +\n    (a3 + b3 + c3) +\n    (a4 + b4 + c4) +\n    (a5 + b5 + c5) +\n    (a6 + b6 + c6) +\n    (a7 + b7 + c7) +\n    (a8 + b8 + c8)\n  ) / 6;\n  return area;\n};\n\n/*\n  Given the lengths oft he three  sides of a triangle. Return the area of\n  the triangle rounded to 2 de cimalpo ints if  th e thre e sides form a valid tri angl e.\n  Otherwise ret u rn -1\n  Three sidesmake a validtriang le when the sum of any tw o sides is greater\n  than thethird side.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returnstrue if the object q will fly, and false otherwise.  Theobject q will  fly i fit's ba lan ced (i t is a palindromic list)  and  the sum of its el e ments is less than or equal the m aximum  possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = Math.max(...q.map(w => w));\n  const maxWeight2 = Math.max(...q.map(w => w));\n  const maxWeight3 = Math.max(...q.map(w => w));\n  const maxWeight4 = Math.max(...q.map(w => w));\n  const maxWeight5 = Math.max(...q.map(w => w));\n  const maxWeight6 = Math.max(...q.map(w => w));\n  const maxWeight7 = Math.max(...q.map(w => w));\n  const maxWeight8 = Math.max(...q.map(w => w));\n  const maxWeight9 = Math.max(...q.map(w => w));\n  const maxWeight10 = Math.max(...q.map(w => w));\n  const maxWeight11 = Math.max(...q.map(w => w));\n  const maxWeight12 = Math.max(...q.map(w => w));\n  const maxWeight13 = Math.max(...q.map(w => w));\n  const maxWeight14 = Math.max(...q.map(w => w));\n  const maxWeight15 = Math.max(...q.map(w => w));\n  const maxWeight16 = Math.max(...q.map(w => w));\n  const maxWeight17 = Math.max(...q.map(w => w));\n  const maxWeight18 = Math.max(...q.map(w => w));\n  const maxWeight19 = Math.max(...q.map(w => w));\n  const maxWeight20 = Math.max(...q.map(w => w));\n  const maxWeight21 = Math.max(...q.map(w => w));\n  const maxWeight22 = Math.max(...q.map(w => w));\n  const maxWeight23 = Math.max(...q.map(w => w));\n  const maxWeight24 = Math.max(...q.map(w => w));\n  const maxWeight25 = Math.max(...q.map(w => w));\n  const maxWeight26 = Math.max(...q.map(w => w));\n  const maxWeight27 = Math.max(...q.map(w => w));\n  const maxWeight28 = Math.max(...q.map(w => w));\n  const maxWeight29 = Math.max(...q.map(w => w));\n  const maxWeight30 = Math.max(...q.map(w => w));\n  const maxWeight31 = Math.max(...q.map(w => w));\n  const maxWeight32 = Math.max(...q.map(w => w));\n  const maxWeight33 = Math.max(...q.map(w => w));\n  const maxWeight34 = Math.max(...q.map(w => w));\n  const maxWeight35 = Math.max(...q.map(w => w));\n  const maxWeight36 = Math.max(...q.map(w => w));\n  const maxWeight37 = Math.max(...q.map(w => w));\n  const maxWeight38 = Math.max(...q.map(w => w));\n  const maxWeight39 = Math.max(...q.map(w => w));\n  const maxWeight40 = Math.max(...q.map(w => w));\n  const maxWeight41 = Math.max(...q.map(w => w));\n  const maxWeight42 = Math.max(...q.map(w => w));\n  const maxWeight43 = Math.max(...q.map(w => w));\n  const maxWeight44 = Math.max(...q.map(w => w));\n  const maxWeight45 = Math.max(...q.map(w => w));\n  const maxWeight46 = Math.max(...q.map(w => w));\n  const maxWeight47 = Math.max(...q.map(w => w));\n  const maxWeight48 = Math.max(...q.map(w => w));\n  const maxWeight49 = Math.max(...q.map(w => w));\n  const maxWeight50 = Math.max(...q.map(w => w));\n  const maxWeight51 = Math.max(...q.map(w => w));\n  const maxWeight52 = Math.max(...q.map(w => w));\n  const maxWeight53 = Math.max(...q.map(w => w));\n  const maxWeight54 = Math.max(...q.map(w => w));\n  const maxWeight55 = Math.max(...q.map(w => w));\n  const maxWeight56 = Math.max(...q.map(w => w));\n  const maxWeight57 = Math.max(...q.map(w => w));\n  const maxWeight58 = Math.max(...q.map(w => w));\n  const maxWeight59 = Math.max(...q.map(w => w));\n  const maxWeight60 = Math.max(...q.map(w => w));\n  const maxWeight61 = Math.max(...q.map(w => w));\n  const maxWeight62 = Math.max(...q.map(w => w));\n  const maxWeight63 = Math.max(...q.map(w => w));\n  const maxWeight64 = Math.max(...q.map(w => w));\n  const maxWeight65 = Math.max(...q.map(w => w));\n  const maxWeight66 = Math.max(...q.map(w => w));\n  const maxWeight67 = Math.max(...q.map(w => w));\n  const maxWeight68 = Math.max(...q.map(w => w));\n  const maxWeight69 = Math.max(...q.map(w => w));\n  const maxWeight70 = Math.max(...q.map(w => w));\n  const maxWeight71 = Math.max(...q.map(w => w));\n  const maxWeight72 = Math.max(...q.map(w => w));\n  const maxWeight73 = Math.max(...q.map(w => w));\n  const maxWeight74 = Math.max(...q.map(w => w));\n  const maxWeight75 = Math.max(...q.map(w => w));\n  const maxWeight76 = Math.max(...q.map(w => w));\n  const maxWeight77 = Math.max(...q.map(w => w));\n  const maxWeight78 = Math.max(...q.map(w => w));\n  const maxWeight79 = Math.max(...q.map(w => w));\n  const maxWeight80 = Math.max(...q.map(w => w));\n  const maxWeight81 = Math.max(...q.map(w => w));\n  const maxWeight82 = Math.max(...q.map(w => w));\n  const maxWeight83 = Math.max(...q.map(w => w));\n  const maxWeight84 = Math.max(...q.map(w => w));\n  const maxWeight85 = Math.max(...q.map(w => w));\n  const maxWeight86 = Math.max(...q.map(w => w));\n  const maxWeight87 = Math.max(...q.map(w => w));\n  const maxWeight88 = Math.max(...q.map(w => w));\n  const maxWeight89 = Math.max(...q.map(w => w));\n  const maxWeight90 = Math.max(...q.map(w => w));\n  const maxWeight91 = Math.max(...q.map(w => w));\n  const maxWeight92 = Math.max(...q.map(w => w));\n  const maxWeight93 = Math.max(...q.map(w => w));\n  const maxWeight94 = Math.max(...q.map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers , find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverseReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverseReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverseReverseReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverseReverseReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make  the a rr ay pali ndr omic.A palindromic array is a n ar ray that\n  is read the same backwards and forwards.In one  change, you can change o ne element to any otherelement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverseReverseReverseReverse = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    let temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n    change++;\n  }\n  return change;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars , return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  match = lst1.slice(0, lst1Length - total);\n  return match;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  match = lst1.slice(lst1Length - total);\n  return match;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  match = lst1.slice(lst1Length - total);\n  return match;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  match = lst1.slice(lst1Length - total);\n  return match;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total++;\n      }\n    }\n  }\n  match = lst1.slice(lst1Length - total);\n  return match;\n};\n\n/*\n  Write a function that acceptstwo lists of strings and returns the list that has\n total number of ch arsin  t he allstr ings o f the list less than the  oth er list.\n\n  if the two lists have the samenumber of  chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1Length; i++) {\n    for (let j = 0; j < lst2Length; j++) {\n      if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise .\n Knowi ng that (a) is less then  100 .\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatr eturns t rue if the given number is the multiplication of 3 prime numbers\n  andfalseot herwise.\n Knowi ng that (a) is less then  100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiplyPrime = true;\n  let isMultiplyPrime2 = true;\n  let isMultiplyPrime3 = true;\n  let isMultiplyPrime4 = true;\n  let isMultiplyPrime5 = true;\n  let isMultiplyPrime6 = true;\n  let isMultiplyPrime7 = true;\n  let isMultiplyPrime8 = true;\n  let isMultiplyPrime9 = true;\n  let isMultiplyPrime10 = true;\n  let isMultiplyPrime11 = true;\n  let isMultiplyPrime12 = true;\n  let isMultiplyPrime13 = true;\n  let isMultiplyPrime14 = true;\n  let isMultiplyPrime15 = true;\n  let isMultiplyPrime16 = true;\n  let isMultiplyPrime17 = true;\n  let isMultiplyPrime18 = true;\n  let isMultiplyPrime19 = true;\n  let isMultiplyPrime20 = true;\n  let isMultiplyPrime21 = true;\n  let isMultiplyPrime22 = true;\n  let isMultiplyPrime23 = true;\n  let isMultiplyPrime24 = true;\n  let isMultiplyPrime25 = true;\n  let isMultiplyPrime26 = true;\n  let isMultiplyPrime27 = true;\n  let isMultiplyPrime28 = true;\n  let isMultiplyPrime29 = true;\n  let isMultiplyPrime30 = true;\n  let isMultiplyPrime31 = true;\n  let isMultiplyPrime32 = true;\n  let isMultiplyPrime33 = true;\n  let isMultiplyPrime34 = true;\n  let isMultiplyPrime35 = true;\n  let isMultiplyPrime36 = true;\n  let isMultiplyPrime37 = true;\n  let isMultiplyPrime38 = true;\n  let isMultiplyPrime39 = true;\n  let isMultiplyPrime40 = true;\n  let isMultiplyPrime41 = true;\n  let isMultiplyPrime42 = true;\n  let isMultiplyPrime43 = true;\n  let isMultiplyPrime44 = true;\n  let isMultiplyPrime45 = true;\n  let isMultiplyPrime46 = true;\n  let isMultiplyPrime47 = true;\n  let isMultiplyPrime48 = true;\n  let isMultiplyPrime49 = true;\n  let isMultiplyPrime50 = true;\n  let isMultiplyPrime51 = true;\n  let isMultiplyPrime52 = true;\n  let isMultiplyPrime53 = true;\n  let isMultiplyPrime54 = true;\n  let isMultiplyPrime55 = true;\n  let isMultiplyPrime56 = true;\n  let isMultiplyPrime57 = true;\n  let isMultiplyPrime58 = true;\n  let isMultiplyPrime59 = true;\n  let isMultiplyPrime60 = true;\n  let isMultiplyPrime61 = true;\n  let isMultiplyPrime62 = true;\n  let isMultiplyPrime63 = true;\n  let isMultiplyPrime64 = true;\n  let isMultiplyPrime65 = true;\n  let isMultiplyPrime66 = true;\n  let isMultiplyPrime67 = true;\n  let isMultiplyPrime68 = true;\n  let isMultiplyPrime69 = true;\n  let isMultiplyPrime70 = true;\n  let isMultiplyPrime71 = true;\n  let isMultiplyPrime72 = true;\n  let isMultiplyPrime73 = true;\n  let isMultiplyPrime74 = true;\n  let isMultiplyPrime75 = true;\n  let isMultiplyPrime76 = true;\n  let isMultiplyPrime77 = true;\n  let isMultiplyPrime78 = true;\n  let isMultiplyPrime79 = true;\n  let isMultiplyPrime80 = true;\n  let isMultiplyPrime81 = true;\n  let isMultiplyPrime82 = true;\n  let isMultiplyPrime83 = true;\n  let isMultiplyPrime84 = true;\n  let isMultiplyPrime85 = true;\n  let isMultiplyPrime86 = true;\n  let isMultiplyPrime87 = true;\n  let isMultiplyPrime88 = true;\n  let isMultiplyPrime89 = true;\n  let isMultiplyPrime90 = true;\n  let isMultiplyPrime91 = true;\n  let isMultiplyPrime92 = true;\n  let isMultiplyPrime93 = true;\n  let isMultiplyPrime94 = true;\n  let isMultiplyPrime95 = true;\n  let isMultiplyPrime96 = true;\n  let isMultiplyPrime97 = true;\n  let isMultiplyPrime98 = true;\n  let isMultiplyPrime99 = true;\n  let isMultiplyPrime100 = true;\n  let isMultiplyPrime101 = true;\n  let isMultiplyPrime102 = true;\n  let isMultiplyPrime103 = true;\n  let isMultiplyPrime104 = true;\n  let isMultiplyPrime105 = true;\n  let isMultiplyPrime106 = true;\n  let isMultiplyPrime107 = true;\n  let isMultiplyPrime108 = true;\n  let isMultiplyPrime109 = true;\n  let isMultiplyPrime110 = true;\n  let isMultiplyPrime111 = true;\n  let isMultiplyPrime112 = true;\n  let isMultiplyPrime113 = true;\n  let isMultiplyPrime114 = true;\n  let isMultiplyPrime115 = true;\n  let isMultiplyPrime116 = true;\n  let isMultiplyPrime117 = true;\n  let isMultiplyPrime118 = true;\n  let isMultiplyPrime119 = true;\n  let isMultiplyPrime120 = true;\n  let isMultiplyPrime121 = true;\n  let isMultiplyPrime122 = true;\n  let isMultiplyPrime123 = true;\n  let isMultiplyPrime124 = true;\n  let isMultiplyPrime125 = true;\n  let isMultiplyPrime126 = true;\n  let isMultiplyPrime127 = true;\n  let isMultiplyPrime128 = true;\n  let isMultiplyPrime129 = true;\n  let isMultiplyPrime130 = true;\n  let isMultiplyPrime131 = true;\n  let isMultiplyPrime132 = true;\n  let isMultiplyPrime133 = true;\n  let isMultiplyPrime134 = true;\n  let isMultiplyPrime135 = true;\n  let isMultiplyPrime136 = true;\n  let isMultiplyPrime137 = true;\n  let isMultiplyPrime138 = true;\n  let isMultiplyPrime139 = true;\n  let isMultiplyPrime140 = true;\n  let isMultiplyPrime141 = true;\n  let isMultiplyPrime142 = true;\n  let isMultiplyPrime143 = true;\n  let isMultiplyPrime144 = true;\n  let isMultiplyPrime145 = true;\n  let isMultiplyPrime146 = true;\n  let isMultiplyPrime147 = true;\n  let isMultiplyPrime148 = true;\n  let isMultiplyPrime149 = true;\n  let isMultiplyPrime150 = true;\n  let isMultiplyPrime151 = true;\n  let isMultiplyPrime152 = true;\n  let isMultiplyPrime153 = true;\n  let isMultiplyPrime154 = true;\n  let isMultiplyPrime155 = true;\n  let isMulti", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Yourtask is to writea  functio n that returns true if a number x is a simple\n  power of n and false in  other  c ases.\n xis a s imple power of n if n**i nt=x \n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isSimple = true;\n  let i = 1;\n  while (isSimple && i < n) {\n    isSimple =\n      x % n === 0 &&\n      x!== 1 &&\n      x!== 2 &&\n      x!== 4 &&\n      x!== 8 &&\n      x!== 16 &&\n      x!== 32 &&\n      x!== 64 &&\n      x!== 128;\n    i++;\n  }\n  return isSimple;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfTwo = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfThree = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfFour = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 4 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfFive = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 5 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfSix = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 6 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfSeven = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 7 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfEight = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 8 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfNine = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 9 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfTen = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 10 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfEleven = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 11 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfTwelve = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 12 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfThirteen = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 13 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfFourteen = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 14 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfFifteen = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 15 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns a\n  new array containing only the numbers that are a power of two. For example,\n  the function should return [2, 3, 4].\n*/\nconst powerOfSixteen = arr => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 16 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a cube of some integer  numbe r. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = true;\n  let numbe = parseInt(a);\n  if (numbe > 0 && numbe <= 100) {\n    for (let i = 1; i <= numbe; i++) {\n      if (i % a === 0 && i!== numbe) {\n        iscube = false;\n        break;\n      }\n    }\n  }\n  return iscube;\n};\n\n/*\n  Write a function that takes an  integer a and returns true\n  if this ingeger is a prime number. \n  Note : y ou may  assume the input is alw aysvalid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> true\n  isprime(8) ==> false\n  isprime(9) ==> true\n  isprime(10) ==> false\n  isprime(11) ==> true\n  isprime(12) ==> false\n  isprime(13) ==> true\n  isprime(14) ==> false\n  isprime(15) ==> true\n  isprime(16) ==> false\n  isprime(17) ==> true\n  isprime(18) ==> false\n  isprime(19) ==> true\n  isprime(20) ==> false\n  isprime(21) ==> true\n  isprime(22) ==> false\n  isprime(23) ==> true\n  isprime(24) ==> false\n  isprime(25) ==> true\n  isprime(26) ==> false\n  isprime(27) ==> true\n  isprime(28) ==> false\n  isprime(29) ==> true\n  isprime(30) ==> false\n  isprime(31) ==> true\n  isprime(32) ==> false\n  isprime(33) ==> true\n  isprime(34) ==> false\n  isprime(35) ==> true\n  isprime(36) ==> false\n  isprime(37) ==> true\n  isprime(38) ==> false\n  isprime(39) ==> true\n  isprime(40) ==> false\n  isprime(41) ==> true\n  isprime(42) ==> false\n  isprime(43) ==> true\n  isprime(44) ==> false\n  isprime(45) ==> true\n  isprime(46) ==> false\n  isprime(47) ==> true\n  isprime(48) ==> false\n  isprime(49) ==> true\n  isprime(50) ==> false\n  isprime(51) ==> true\n  isprime(52) ==> false\n  isprime(53) ==> true\n  isprime(54) ==> false\n  isprime(55) ==> true\n  isprime(56) ==> false\n  isprime(57) ==> true\n  isprime(58) ==> false\n  isprime(59) ==> true\n  isprime(60) ==> false\n  isprime(61) ==> true\n  isprime(62) ==> false\n  isprime(63) ==> true\n  isprime(64) ==> false\n  isprime(65) ==> true\n  isprime(66) ==> false\n  isprime(67) ==> true\n  isprime(68) ==> false\n  isprime(69) ==> true\n  isprime(70) ==> false\n  isprime(71) ==> true\n  isprime(72) ==> false\n  isprime(73) ==> true\n  isprime(74) ==> false\n  isprime(75) ==> true\n  isprime(76) ==> false\n  isprime(77) ==> true\n  isprime(78) ==> false\n  isprime(79) ==> true\n  isprime(80) ==> false\n  isprime(81) ==> true\n  isprime(82) ==> false\n  isprime(83) ==> true\n  isprime(84) ==> false\n  isprime(85) ==> true\n  isprime(86) ==> false\n  isprime(87) ==> true\n  isprime(88) ==> false\n  isprime(89) ==> true\n  isprime(90) ==> false\n  isprime(91) ==> true\n  isprime(92) ==> false\n  isprime(93) ==> true\n  isprime(94) ==> false\n  isprime(95) ==> true\n  isprime(96) ==> false\n  isprime(97) ==> true\n  isprime(98) ==> false\n  isprime(99) ==> true\n  isprime(100) ==> false\n  isprime(101) ==> true\n  isprime(102) ==> false\n  isprime(103) ==> true\n  isprime(104) ==> false\n  isprime(105) ==> true\n  isprime(106) ==> false\n  isprime(107) ==> true\n  isprime(108) ==> false\n  isprime(109) ==> true\n  isprime(110) ==> false\n  isprime(111) ==> true\n  isprime(112) ==> false\n  isprime(113) ==> true\n  isprime(114) ==> false\n  isprime(115) ==> true\n  isprime(116) ==> false\n  isprime(117) ==> true\n  isprime(118) ==> false\n  isprime(119) ==> true\n  isprime(120) ==> false\n  isprime(121) ==> true\n  isprime(122) ==> false\n  isprime(123) ==> true\n  isprime(124) ==> false\n  isprime(125) ==> true\n  isprime(126) ==> false\n  isprime(127) ==> true\n  isprime(128) ==> false\n  isprime(129) ==> true\n  isprime(130) ==> false\n  isprime(131) ==> true\n  isprime(132) ==> false\n  isprime(133) ==> true\n  isprime(134) ==> false\n  isprime(135) ==> true\n  isprime(136) ==> false\n  isprime(137) ==> true\n  isprime(138) ==> false\n  isprime(139) ==> true\n  isprime(140) ==> false\n  isprime(141) ==> true\n  isprime(142) ==> false\n  isprime(143) ==> true\n  isprime(144) ==> false\n  isprime(145) ==> true\n  isprime(146) ==> false\n  isprime(147) ==> true\n  isprime(148) ==> false\n  isprime(149) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youhave been tasked t o  write a  function that receives\n  a hexadecimal number as astring and counts t he num be r of he xad ecimal \n  digits that are prime s (p rime number=== ora  prime=== is a natural number\n  g reater  than1 that is nota pro duct of two smaller natural numbers).\n  Hexadecimal digits  are 0=== 1=== 2=== 3== = 4===  5=== 6=== 7=== 8=== 9= == A=== B= == C=== D=== E= == F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to det ermine a numberof the following digits: 2=== 3=== 5===7===\n B ( =decimal11)===D (=decimal 13).\n  Note: you may assume the  input isalway s correct or empty string===\n  and symbols A===B===C===D=== E===F are a lwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = '';\n  let numStrLen = num.length;\n  let numStrLen2 = numStr.length;\n  let numStrLen3 = numStr.length;\n  let numStrLen4 = numStr.length;\n  let numStrLen5 = numStr.length;\n  let numStrLen6 = numStr.length;\n  let numStrLen7 = numStr.length;\n  let numStrLen8 = numStr.length;\n  let numStrLen9 = numStr.length;\n  let numStrLen10 = numStr.length;\n  let numStrLen11 = numStr.length;\n  let numStrLen12 = numStr.length;\n  let numStrLen13 = numStr.length;\n  let numStrLen14 = numStr.length;\n  let numStrLen15 = numStr.length;\n  let numStrLen16 = numStr.length;\n  let numStrLen17 = numStr.length;\n  let numStrLen18 = numStr.length;\n  let numStrLen19 = numStr.length;\n  let numStrLen20 = numStr.length;\n  let numStrLen21 = numStr.length;\n  let numStrLen22 = numStr.length;\n  let numStrLen23 = numStr.length;\n  let numStrLen24 = numStr.length;\n  let numStrLen25 = numStr.length;\n  let numStrLen26 = numStr.length;\n  let numStrLen27 = numStr.length;\n  let numStrLen28 = numStr.length;\n  let numStrLen29 = numStr.length;\n  let numStrLen30 = numStr.length;\n  let numStrLen31 = numStr.length;\n  let numStrLen32 = numStr.length;\n  let numStrLen33 = numStr.length;\n  let numStrLen34 = numStr.length;\n  let numStrLen35 = numStr.length;\n  let numStrLen36 = numStr.length;\n  let numStrLen37 = numStr.length;\n  let numStrLen38 = numStr.length;\n  let numStrLen39 = numStr.length;\n  let numStrLen40 = numStr.length;\n  let numStrLen41 = numStr.length;\n  let numStrLen42 = numStr.length;\n  let numStrLen43 = numStr.length;\n  let numStrLen44 = numStr.length;\n  let numStrLen45 = numStr.length;\n  let numStrLen46 = numStr.length;\n  let numStrLen47 = numStr.length;\n  let numStrLen48 = numStr.length;\n  let numStrLen49 = numStr.length;\n  let numStrLen50 = numStr.length;\n  let numStrLen51 = numStr.length;\n  let numStrLen52 = numStr.length;\n  let numStrLen53 = numStr.length;\n  let numStrLen54 = numStr.length;\n  let numStrLen55 = numStr.length;\n  let numStrLen56 = numStr.length;\n  let numStrLen57 = numStr.length;\n  let numStrLen58 = numStr.length;\n  let numStrLen59 = numStr.length;\n  let numStrLen60 = numStr.length;\n  let numStrLen61 = numStr.length;\n  let numStrLen62 = numStr.length;\n  let numStrLen63 = numStr.length;\n  let numStrLen64 = numStr.length;\n  let numStrLen65 = numStr.length;\n  let numStrLen66 = numStr.length;\n  let numStrLen67 = numStr.length;\n  let numStrLen68 = numStr.length;\n  let numStrLen69 = numStr.length;\n  let numStrLen70 = numStr.length;\n  let numStrLen71 = numStr.length;\n  let numStrLen72 = numStr.length;\n  let numStrLen73 = numStr.length;\n  let numStrLen74 = numStr.length;\n  let numStrLen75 = numStr.length;\n  let numStrLen76 = numStr.length;\n  let numStrLen77 = numStr.length;\n  let numStrLen78 = numStr.length;\n  let numStrLen79 = numStr.length;\n  let numStrLen80 = numStr.length;\n  let numStrLen81 = numStr.length;\n  let numStrLen82 = numStr.length;\n  let numStrLen83 = numStr.length;\n  let numStrLen84 = numStr.length;\n  let numStrLen85 = numStr.length;\n  let numStrLen86 = numStr.length;\n  let numStrLen87 = numStr.length;\n  let numStrLen88 = numStr.length;\n  let numStrLen89 = numStr.length;\n  let numStrLen90 = numStr.length;\n  let numStrLen91 = numStr.length;\n  let numStrLen92 = numStr.length;\n  let numStrLen93 = numStr.length;\n  let numStrLen94 = numStr.length;\n  let numStrLen95 = numStr.length;\n  let numStrLen96 = numStr.length;\n  let numStrLen97 = numStr.length;\n  let numStrLen98 = numStr.length;\n  let numStrLen99 = numStr.length;\n  let numStrLen100 = numStr.length;\n  let numStrLen101 = numStr.length;\n  let numStrLen102 = numStr.length;\n  let numStrLen103 = numStr.length;\n  let numStrLen104 = numStr.length;\n  let numStrLen105 = numStr.length;\n  let numStrLen106 = numStr.length;\n  let numStrLen107 = numStr.length;\n  let numStrLen108 = numStr.length;\n  let numStrLen109 = numStr.length;\n  let numStrLen110 = numStr.length;\n  let numStrLen111 = numStr.length;\n  let numStrLen112 = numStr.length;\n  let numStrLen113 = numStr.length;\n  let numStrLen114 = numStr.length;\n  let numStrLen115 = numStr.length;\n  let numStrLen116 = numStr.length;\n  let numStrLen117 = numStr.length;\n  let numStrLen118 = numStr.length;\n  let numStrLen119 = numStr.length;\n  let numStrLen120 = numStr.length;\n  let numStrLen121 = numStr.length;\n  let numStrLen122 = numStr.length;\n  let numStrLen123 = numStr.length;\n  let numStrLen124 = numStr.length;\n  let numStrLen125 = numStr.length;\n  let numStrLen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youwill be given a nu m ber in d ecimal form and your task is to convert it to\n  binary format. The func tion s ho uld ret urn  a str ing, with each character  rep resenting a binary   number. Each character in the s tringwill be '0' or '1'.\n  Th ere will be an extra couple of characters 'db' at the begi nning and at the end of  the s tring.\n  The extra char acters are there to helpwith the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let n = decimal.toString(2).split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    binary += String.fromCharCode(n[i]);\n  }\n  return binary;\n};\n\n/*\n  Given a number n and a string s, convert it to binary format\n  and return the binary string in binary format.\n  Examples:\n  binaryToDecimal(15, 'db')   # returns 15\n  binaryToDecimal(32, 'db')   # returns 32\n  binaryToDecimal(15, 'db')   # returns 15\n  binaryToDecimal(32, 'db')   # returns 32\n  */\nconst binaryToDecimal = (n, s) => {\n  let decimal = parseInt(n, 2);\n  let binary = decimalToBinary(decimal);\n  return binary.replace(/db/g, '');\n};\n\n/*\n  Given a number n and a string s, convert it to decimal format\n  and return the decimal string in decimal format.\n  Examples:\n  decimalToBinary(15, 'db')   # returns \"db1111\"\n  decimalToBinary(32, 'db')   # returns \"db100000\"\n  decimalToBinary(15, 'db')   # returns \"db1111\"\n  decimalToBinary(32, 'db')   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let n = decimal.toString(2).split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    binary += String.fromCharCode(n[i]);\n  }\n  return binary;\n};\n\n/*\n  Given a number n and a string s, convert it to hexadecimal format\n  and return the hexadecimal string in hexadecimal format.\n  Examples:\n  hexadecimalToBinary(15, 'db')   # returns \"db1111\"\n  hexadecimalToBinary(32, 'db')   # returns \"db100000\"\n  hexadecimalToBinary(15, 'db')   # returns \"db1111\"\n  hexadecimalToBinary(32, 'db')   # returns \"db100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  let n = hexadecimal.toString(16).split('').map(x => parseInt(x, 16));\n  for (let i = 0; i < n.length; i++) {\n    binary += String.fromCharCode(n[i]);\n  }\n  return binary;\n};\n\n/*\n  Given a number n and a string s, convert it to octal format\n  and return the octal string in octal format.\n  Examples:\n  octalToBinary(15, 'db')   # returns \"db1111\"\n  octalToBinary(32, 'db')   # returns \"db100000\"\n  octalToBinary(15, 'db')   # returns \"db1111\"\n  octalToBinary(32, 'db')   # returns \"db100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  let n = octal.toString(8).split('').map(x => parseInt(x, 8));\n  for (let i = 0; i < n.length; i++) {\n    binary += String.fromCharCode(n[i]);\n  }\n  return binary;\n};\n\n/*\n  Given a number n and a string s, convert it to hex format\n  and return the hex string in hex format.\n  Examples:\n  hexToBinary(15, 'db')   # returns \"db1111\"\n  hexToBinary(32, 'db')   # returns \"db100000\"\n  hexToBinary(15, 'db')   # returns \"db1111\"\n  hexToBinary(32, 'db')   # returns \"db100000\"\n  */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  let n = hex.toString(16).split('').map(x => parseInt(x, 16));\n  for (let i = 0; i < n.length; i++) {\n    binary += String.fromCharCode(n[i]);\n  }\n  return binary;\n};\n\n/*\n  Given a number n and a string s, convert it to decimal format\n  and return the decimal string in decimal format.\n  Examples:\n  decimalToHex(15, 'db')   # returns \"db1111\"\n  decimalToHex(32, 'db')   # returns \"db100000\"\n  decimalToHex(15, 'db')   # returns \"db1111\"\n  decimalToHex(32, 'db')   # returns \"db100000\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let n = decimal.toString(2).split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    hex += String.fromCharCode(n[i]);\n  }\n  return hex;\n};\n\n/*\n  Given a number n and a string s, convert it to binary format\n  and return the binary string in binary format.\n  Examples:\n  binaryToHex(15, 'db')   # returns \"db1111\"\n  binaryToHex(32, 'db')   # returns \"db100000\"\n  binaryToHex(15, 'db')   # returns \"db1111\"\n  binaryToHex(32, 'db')   # returns \"db100000\"\n  */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  let n = binary.replace(/db/g, '').split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    hex += String.fromCharCode(n[i]);\n  }\n  return hex;\n};\n\n/*\n  Given a number n and a string s, convert it to decimal format\n  and return the decimal string in decimal format.\n  Examples:\n  decimalToOct(15, 'db')   # returns \"15\"\n  decimalToOct(32, 'db')   # returns \"32\"\n  decimalToOct(15, 'db')   # returns \"15\"\n  decimalToOct(32, 'db')   # returns \"32\"\n  */\nconst decimalToOct = (decimal) => {\n  let oct = '';\n  let n = decimal.toString(2).split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    oct += String.fromCharCode(n[i]);\n  }\n  return oct;\n};\n\n/*\n  Given a number n and a string s, convert it to binary format\n  and return the binary string in binary format.\n  Examples:\n  binaryToOct(15, 'db')   # returns \"db1111\"\n  binaryToOct(32, 'db')   # returns \"db100000\"\n  binaryToOct(15, 'db')   # returns \"db1111\"\n  binaryToOct(32, 'db')   # returns \"db100000\"\n  */\nconst binaryToOct = (binary) => {\n  let oct = '';\n  let n = binary.replace(/db/g, '').split('').map(x => parseInt(x, 2));\n  for (let i = 0; i < n.length; i++) {\n    oct += String.fromCharCode(n[i]);\n  }\n  return oct;\n};\n\n/*\n  Given a number n and a string s, convert it to decimal format\n  and return the decimal string in decimal format.\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fora given list of i n tegers,return a tuple consisting of a sum and a product ofall the integers in  a lis t. \n  Empt y s um sho uld be equal to 0 and em ptyproduct should bee qualto 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing n integers, return its sum and product of all the integers in that list. \n  >>> sumProduct([1,2,3,4,5,6,7,8,9,10])\n  (10, 240)\n  */\nconst sumProductOfAllNumbers = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing n integers, return its sum and product of all the integers in that list. \n  >>> sumProductOfAllNumbers([1,2,3,4,5,6,7,8,9,10])\n  (10, 240)\n  */\nconst sumProductOfAllNumbersOfAllNumbers = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing n integers, return its sum and product of all the integers in that list. \n  >>> sumProductOfAllNumbersOfAllNumbers([1,2,3,4,5,6,7,8,9,10])\n  (10, 240)\n  */\nconst sumProductOfAllNumbersOfAllNumbersOfAllNumbers = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing n integers, return its sum and product of all the integers in that list. \n  >>> sumProductOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumbersOfAllNumber", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a string s.\n  You r task is to check if the string is happy or not.\n A string is happy i f itsle ngth is  at  least  3 and every 3 consecuti vel etters are distinc t \n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '+')\n  const letterGradesReversed = letterGrades.reverse()\n  return letterGradesReversed.map((letter) => letter.charCodeAt(0))\n}\n\n/*\n  It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '+')\n  const letterGradesReversed = letterGrades.reverse()\n  return letterGradesReversed.map((letter) => letter.charCodeAt(0))\n}\n\n/*\n  It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '+')\n  const letterGradesReversed = letterGrades.reverse()\n  return letterGradesReversed.map((letter) => letter.charCodeAt(0))\n}\n\n/*\n  It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '+')\n  const letterGradesReversed = letterGrades.reverse()\n  return letterGradesReversed.map((letter) => letter.charCodeAt(0))\n}\n\n/*\n  It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GPAs for some students and you haveto write\n  afunction that can outpu t a li st of letter grades usi ng the fol lowing table:\n          GPA       |    Letter grade\n          4.0                A+\n          > 3.7                A\n          > 3.3                A-\n         > 3. 0             B+\n         > 2.7                B\n         > 2.3              B-\n          > 2.0                C+\n          >1.7              C\n          > 1.3               C-\n         > 1.0               D+\n         >  0.7             D\n        > 0.0                D-            0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '+')\n  const letterGradesReversed = letterGrades.reverse()\n  return letterGradesReversed.map((letter) => letter.charCodeAt(0))\n}\n\n/*\n  It is the last week of the seme ster and the teacher has to give the grades\n  to students. The teacherhasbe en  making  he r ownalgorithm for grading.\n The  only problem is,s he has lost the code she used for  gradi ng.\n Shehas givenyou a  list of GP", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrimeLength = false;\n      break;\n    }\n  }\n  if (isPrimeLength) {\n    isPrime = true;\n  }\n  return isPrime;\n};\n\n/*Write a function thatt akes a s tring and returns true if the string\n  length is a prime number or fals e othe rw ise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let isPrimeLength", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive inte g er n, re turn the count of the numbers of n-digit\n  positiveintegers that start  oren dwith 1. \n */\ncon st startsOneEnds = (n) = > {\n  let rec countOneEnds = (n) :: [Int] -> Int where\n    countOneEnds n [] = 0\n    countOneEnds n (x:xs) = if n == 1 then 1 else countOneEnds n xs\n  countOneEnds n []\n}\n</code>\n<|/ a tags=haskell,recursion |>\n<| c |>\nThanks, I didn't know about `startsOneEnds`\n<|/ c |>\n<| c |>\nThe `startsOneEnds` function can be simplified to `countOneEnds n = if n == 1 then 1 else countOneEnds n`\n<|/ c |>\n<| c |>\n: Thanks, I didn't know about that one. I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion dscore=2 |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a dscore=2 |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOneEnds n = if n == 1 then [1..] else startsOneEnds (n-1)\n</code>\n<|/ a tags=haskell,recursion |>\n<| a tags=haskell,recursion |>\n<code>\nstartsOneEnds :: Int -> [Int]\nstartsOne", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integ e r N, ret urn the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer n and an integer k, return the sum of all multiples of k that divide n.\n  \n  Example\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3, the function should return \"11\".\n      Given n = 7, k = 3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integ ers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2 === 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2 === 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2 === 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2 === 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst, i) => {\n  let res = []\n  lst.forEach((e, i) => {\n    if (i % 2!== 0) {\n      res.push(e)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes astring and returns an ordered version of it.\n  Ordered version of strin g, isastringwhe re all  words (separated by spa ce) are replaced bya  newword where allthecharacter s arra nged in\n ascendingorder  based on ascii value.\n Note: You should keep the order o f words and blank space s in t he sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArray = [];\n  let newStrArray2 = [];\n  let newStrArray3 = [];\n  let newStrArray4 = [];\n  let newStrArray5 = [];\n  let newStrArray6 = [];\n  let newStrArray7 = [];\n  let newStrArray8 = [];\n  let newStrArray9 = [];\n  let newStrArray10 = [];\n  let newStrArray11 = [];\n  let newStrArray12 = [];\n  let newStrArray13 = [];\n  let newStrArray14 = [];\n  let newStrArray15 = [];\n  let newStrArray16 = [];\n  let newStrArray17 = [];\n  let newStrArray18 = [];\n  let newStrArray19 = [];\n  let newStrArray20 = [];\n  let newStrArray21 = [];\n  let newStrArray22 = [];\n  let newStrArray23 = [];\n  let newStrArray24 = [];\n  let newStrArray25 = [];\n  let newStrArray26 = [];\n  let newStrArray27 = [];\n  let newStrArray28 = [];\n  let newStrArray29 = [];\n  let newStrArray30 = [];\n  let newStrArray31 = [];\n  let newStrArray32 = [];\n  let newStrArray33 = [];\n  let newStrArray34 = [];\n  let newStrArray35 = [];\n  let newStrArray36 = [];\n  let newStrArray37 = [];\n  let newStrArray38 = [];\n  let newStrArray39 = [];\n  let newStrArray40 = [];\n  let newStrArray41 = [];\n  let newStrArray42 = [];\n  let newStrArray43 = [];\n  let newStrArray44 = [];\n  let newStrArray45 = [];\n  let newStrArray46 = [];\n  let newStrArray47 = [];\n  let newStrArray48 = [];\n  let newStrArray49 = [];\n  let newStrArray50 = [];\n  let newStrArray51 = [];\n  let newStrArray52 = [];\n  let newStrArray53 = [];\n  let newStrArray54 = [];\n  let newStrArray55 = [];\n  let newStrArray56 = [];\n  let newStrArray57 = [];\n  let newStrArray58 = [];\n  let newStrArray59 = [];\n  let newStrArray60 = [];\n  let newStrArray61 = [];\n  let newStrArray62 = [];\n  let newStrArray63 = [];\n  let newStrArray64 = [];\n  let newStrArray65 = [];\n  let newStrArray66 = [];\n  let newStrArray67 = [];\n  let newStrArray68 = [];\n  let newStrArray69 = [];\n  let newStrArray70 = [];\n  let newStrArray71 = [];\n  let newStrArray72 = [];\n  let newStrArray73 = [];\n  let newStrArray74 = [];\n  let newStrArray75 = [];\n  let newStrArray76 = [];\n  let newStrArray77 = [];\n  let newStrArray78 = [];\n  let newStrArray79 = [];\n  let newStrArray80 = [];\n  let newStrArray81 = [];\n  let newStrArray82 = [];\n  let newStrArray83 = [];\n  let newStrArray84 = [];\n  let newStrArray85 = [];\n  let newStrArray86 = [];\n  let newStrArray87 = [];\n  let newStrArray88 = [];\n  let newStrArray89 = [];\n  let newStrArray90 = [];\n  let newStrArray91 = [];\n  let newStrArray92 = [];\n  let newStrArray93 = [];\n  let newStrArray94 = [];\n  let newStrArray95 = [];\n  let newStrArray96 = [];\n  let newStrArray97 = [];\n  let newStrArray98 = [];\n  let newStrArray99 = [];\n  let newStrArray100 = [];\n  let newStrArray101 = [];\n  let newStrArray102 = [];\n  let newStrArray103 = [];\n  let newStrArray104 = [];\n  let newStrArray105 = [];\n  let newStrArray106 = [];\n  let newStrArray107 = [];\n  let newStrArray108 = [];\n  let newStrArray109 = [];\n  let newStrArray110 = [];\n  let newStrArray111 = [];\n  let newStrArray112 = [];\n  let newStrArray113 = [];\n  let newStrArray114 = [];\n  let newStrArray115 = [];\n  let newStrArray116 = [];\n  let newStrArray117 = [];\n  let newStrArray118 = [];\n  let newStrArray119 = [];\n  let newStrArray120 = [];\n  let newStrArray121 = [];\n  let newStrArray122 = [];\n  let newStrArray123 = [];\n  let newStrArray124 = [];\n  let newStrArray125 = [];\n  let newStrArray126 = [];\n  let newStrArray127 = [];\n  let newStrArray128 = [];\n  let newStrArray129 = [];\n  let newStrArray130 = [];\n  let newStrArray131 = [];\n  let newStrArray132 = [];\n  let newStrArray133 = [];\n  let newStrArray134 = [];\n  let newStrArray135 = [];\n  let newStrArray136 = [];\n  let newStrArray137 = [];\n  let newStrArray138 = [];\n  let newStrArray139 = [];\n  let newStrArray140 = [];\n  let newStrArray141 = [];\n  let newStrArray142 = [];\n  let newStrArray143 = [];\n  let newStrArray144 = [];\n  let newStrArray145 = [];\n  let newStrArray146 = [];\n  let newStrArray147 = [];\n  let newStrArray148 = [];\n  let newStrArray149 = [];\n  let newStrArray150 = [];\n  let newStrArray151 = [];\n  let newStrArray152 = [];\n  let newStrArray153 = [];\n  let newStrArray154 = [];\n  let newStrArray155 = [];\n  let newStrArray156 = [];\n  let newStrArray157 = [];\n  let newStrArray158 = [];\n  let newStrArray159 = [];\n  let newStrArray160 = [];\n  let newStrArray161 = [];\n  let newStrArray162 = [];\n  let newStrArray163 = [];\n  let newStrArray164 = [];\n  let newStrArray165 = [];\n  let newStrArray166 = [];\n  let newStrArray167 = [];\n  let newStrArray168 = [];\n  let newStrArray169 = [];\n  let newStrArray170 = [];\n  let newStrArray171 = [];\n  let newStrArray172 = [];\n  let newStrArray173 = [];\n  let newStrArray174 = [];\n  let newStrArray175 = [];\n  let newStrArray176 = [];\n  let newStrArray177 = [];\n  let newStrArray178 = [];\n  let newStrArray179 = [];\n  let newStrArray180 = [];\n  let newStrArray181 = [];\n  let newStrArray182 = [];\n  let newStrArray183 = [];\n  let newStrArray184 = [];\n  let newStrArray185 = [];\n  let newStrArray186 = [];\n  let newStrArray187 = [];\n  let newStrArray188 = [];\n  let newStrArray189 = [];\n  let newStrArray190 = [];\n  let newStrArray191 = [];\n  let newStrArray192 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es ,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2) ...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a 2 dim e nsionaldata, as a nested lists,\n  which is similar to matrix, however, unlikematric es,\n  eac h r ow may  contain a different num berof columns.\n  Give n  lst, and integer x, find integer s x in  the list,\n  and return l ist of tuples, [(x1, y1), (x2, y2)...] suchthat\n  each t uple is a coordinate -(row,columns), starting with  0.\n  Sort coordinates in itially by rows in ascending order.\n  Also, sort coordinates of the row by columns in d escending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rowIndex = 0\n  let rowLen = lst.length\n  let rowLen2 = rowLen * rowLen\n  let rowLen3 = rowLen2 * rowLen\n  let rowLen4 = rowLen3 * rowLen\n  let rowLen5 = rowLen4 * rowLen\n  let rowLen6 = rowLen5 * rowLen\n  let rowLen7 = rowLen6 * rowLen\n  let rowLen8 = rowLen7 * rowLen\n  let rowLen9 = rowLen8 * rowLen\n  let rowLen10 = rowLen9 * rowLen\n  let rowLen11 = rowLen10 * rowLen\n  let rowLen12 = rowLen11 * rowLen\n  let rowLen13 = rowLen12 * rowLen\n  let rowLen14 = rowLen13 * rowLen\n  let rowLen15 = rowLen14 * rowLen\n  let rowLen16 = rowLen15 * rowLen\n  let rowLen17 = rowLen16 * rowLen\n  let rowLen18 = rowLen17 * rowLen\n  let rowLen19 = rowLen18 * rowLen\n  let rowLen20 = rowLen19 * rowLen\n  let rowLen21 = rowLen20 * rowLen\n  let rowLen22 = rowLen21 * rowLen\n  let rowLen23 = rowLen22 * rowLen\n  let rowLen24 = rowLen23 * rowLen\n  let rowLen25 = rowLen24 * rowLen\n  let rowLen26 = rowLen25 * rowLen\n  let rowLen27 = rowLen26 * rowLen\n  let rowLen28 = rowLen27 * rowLen\n  let rowLen29 = rowLen28 * rowLen\n  let rowLen30 = rowLen29 * rowLen\n  let rowLen31 = rowLen30 * rowLen\n  let rowLen32 = rowLen31 * rowLen\n  let rowLen33 = rowLen32 * rowLen\n  let rowLen34 = rowLen33 * rowLen\n  let rowLen35 = rowLen34 * rowLen\n  let rowLen36 = rowLen35 * rowLen\n  let rowLen37 = rowLen36 * rowLen\n  let rowLen38 = rowLen37 * rowLen\n  let rowLen39 = rowLen38 * rowLen\n  let rowLen40 = rowLen39 * rowLen\n  let rowLen41 = rowLen40 * rowLen\n  let rowLen42 = rowLen41 * rowLen\n  let rowLen43 = rowLen42 * rowLen\n  let rowLen44 = rowLen43 * rowLen\n  let rowLen45 = rowLen44 * rowLen\n  let rowLen46 = rowLen45 * rowLen\n  let rowLen47 = rowLen46 * rowLen\n  let rowLen48 = rowLen47 * rowLen\n  let rowLen49 = rowLen48 * rowLen\n  let rowLen50 = rowLen49 * rowLen\n  let rowLen51 = rowLen50 * rowLen\n  let rowLen52 = rowLen51 * rowLen\n  let rowLen53 = rowLen52 * rowLen\n  let rowLen54 = rowLen53 * rowLen\n  let rowLen55 = rowLen54 * rowLen\n  let rowLen56 = rowLen55 * rowLen\n  let rowLen57 = rowLen56 * rowLen\n  let rowLen58 = rowLen57 * rowLen\n  let rowLen59 = rowLen58 * rowLen\n  let rowLen60 = rowLen59 * rowLen\n  let rowLen61 = rowLen60 * rowLen\n  let rowLen62 = rowLen61 * rowLen\n  let rowLen63 = rowLen62 * rowLen\n  let rowLen64 = rowLen63 * rowLen\n  let rowLen65 = rowLen64 * rowLen\n  let rowLen66 = rowLen65 * rowLen\n  let rowLen67 = rowLen66 * rowLen\n  let rowLen68 = rowLen67 * rowLen\n  let rowLen69 = rowLen68 * rowLen\n  let rowLen70 = rowLen69 * rowLen\n  let rowLen71 = rowLen70 * rowLen\n  let rowLen72 = rowLen71 * rowLen\n  let rowLen73 = rowLen72 * rowLen\n  let rowLen74 = rowLen73 * rowLen\n  let rowLen75 = rowLen74 * rowLen\n  let rowLen76 = rowLen75 * rowLen\n  let rowLen77 = rowLen76 * rowLen\n  let rowLen78 = rowLen77 * rowLen\n  let rowLen79 = rowLen78 * rowLen\n  let rowLen80 = rowLen79 * rowLen\n  let rowLen81 = rowLen80 * rowLen\n  let rowLen82 = rowLen81 * rowLen\n  let rowLen83 = rowLen82 * rowLen\n  let rowLen84 = rowLen83 * rowLen\n  let rowLen85 = rowLen84 * rowLen\n  let rowLen86 = rowLen85 * rowLen\n  let rowLen87 = rowLen86 * rowLen\n  let rowLen88 = rowLen87 * rowLen\n  let rowLen89 = rowLen88 * rowLen\n  let rowLen90 = rowLen89 * rowLen\n  let rowLen91 = rowLen90 * rowLen\n  let rowLen92 = rowLen91 * rowLen\n  let rowLen93 = rowLen92 * rowLen\n  let rowLen94 = rowLen93 * rowLen\n  let rowLen95 = rowLen94 * rowLen\n  let rowLen96 = rowLen95 * rowLen\n  let rowLen97 = rowLen96 * rowLen\n  let rowLen98 = rowLen97 * rowLen\n  let rowLen99 = rowLen98 * rowLen\n  let rowLen100 = rowLen99 * rowLen\n  let rowLen101 = rowLen100 * rowLen\n  let rowLen102 = rowLen101 * rowLen\n  let rowLen103 = rowLen102 * rowLen\n  let rowLen104 = rowLen103 * rowLen\n  let rowLen105 = rowLen104 * rowLen\n  let rowLen106 = rowLen105 * rowLen\n  let rowLen107 = rowLen106 * rowLen\n  let rowLen108 = rowLen107 * rowLen\n  let rowLen109 = rowLen108 * rowLen\n  let rowLen110 = rowLen109 * rowLen\n  let rowLen111 = rowLen110 * rowLen\n  let rowLen112 = rowLen111 * rowLen\n  let rowLen113 = rowLen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative  integers, return a copy of the given array after sorting,\n  you will s ortth egiven a rra y in a scending order if the su m(f irst index value,l ast index value) isodd,\n  or sor t it i n descending order if the  sum( first index value, lastindex value) is even.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.sort((a, b) => a - b);\n  return newArray;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * unique([1, 2, 3]) => [1, 2, 3]\n  * unique([1, 1, 2, 3, 3, 3]) => [1, 2, 3]\n  * unique([1, 1, 2, 3, 3, 3, 4, 4]) => [1, 2, 3, 4]\n  */\nconst unique = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return newArray;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * unique([1, 1, 2, 3, 3, 3, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * unique([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)];\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCountAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCountAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCountAndCountAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCountAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCountAndCountAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCountAndCountAndCountAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCountAndCountAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCountAndCountAndCountAndCountAndCountAndCount([1, 2, 3]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  * uniqueAndCountAndCountAndCountAndCountAndCountAndCountAndCountAndCount([1, 1, 2, 3, 3, 3, 4, 4, 4]) => [1, 1, 2, 3, 3, 3, 4, 4]\n  */\nconst uniqueAndCountAndCountAndCountAndCountAndCountAndCountAndCountAndCount = (array) => {\n  const newArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  const newArrayCount = newArray.map((value, index, self) => self.indexOf(value));\n  return [...new Set(newArrayCount)].length;\n};\n\n/**\n * Given an array of non - negative  integers, return an array with unique elements and a count of how many times each element occurs.\n\n  Not e:\n  * don't change the  given  array.\n\n  Examples:\n  * uniqueAndCountAndCountAndCountAndCountAndCountAndCountAndCount", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function encr y pt thattakes a string as an argument and\n  returns a string encrypted with the  alpha be t being  ro tated.  \n  The alphabet shouldber otated in a manner suchthat the letters \n shift do wn bytwo multiplied to two pla ces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypt = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence .\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a given list ofi ntegers,  generate a list of rolling maximum element found until given moment\n in the  s equence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxIndexValue = 0;\n  let maxIndexValue2 = 0;\n  let maxIndexValue3 = 0;\n  let maxIndexValue4 = 0;\n  let maxIndexValue5 = 0;\n  let maxIndexValue6 = 0;\n  let maxIndexValue7 = 0;\n  let maxIndexValue8 = 0;\n  let maxIndexValue9 = 0;\n  let maxIndexValue10 = 0;\n  let maxIndexValue11 = 0;\n  let maxIndexValue12 = 0;\n  let maxIndexValue13 = 0;\n  let maxIndexValue14 = 0;\n  let maxIndexValue15 = 0;\n  let maxIndexValue16 = 0;\n  let maxIndexValue17 = 0;\n  let maxIndexValue18 = 0;\n  let maxIndexValue19 = 0;\n  let maxIndexValue20 = 0;\n  let maxIndexValue21 = 0;\n  let maxIndexValue22 = 0;\n  let maxIndexValue23 = 0;\n  let maxIndexValue24 = 0;\n  let maxIndexValue25 = 0;\n  let maxIndexValue26 = 0;\n  let maxIndexValue27 = 0;\n  let maxIndexValue28 = 0;\n  let maxIndexValue29 = 0;\n  let maxIndexValue30 = 0;\n  let maxIndexValue31 = 0;\n  let maxIndexValue32 = 0;\n  let maxIndexValue33 = 0;\n  let maxIndexValue34 = 0;\n  let maxIndexValue35 = 0;\n  let maxIndexValue36 = 0;\n  let maxIndexValue37 = 0;\n  let maxIndexValue38 = 0;\n  let maxIndexValue39 = 0;\n  let maxIndexValue40 = 0;\n  let maxIndexValue41 = 0;\n  let maxIndexValue42 = 0;\n  let maxIndexValue43 = 0;\n  let maxIndexValue44 = 0;\n  let maxIndexValue45 = 0;\n  let maxIndexValue46 = 0;\n  let maxIndexValue47 = 0;\n  let maxIndexValue48 = 0;\n  let maxIndexValue49 = 0;\n  let maxIndexValue50 = 0;\n  let maxIndexValue51 = 0;\n  let maxIndexValue52 = 0;\n  let maxIndexValue53 = 0;\n  let maxIndexValue54 = 0;\n  let maxIndexValue55 = 0;\n  let maxIndexValue56 = 0;\n  let maxIndexValue57 = 0;\n  let maxIndexValue58 = 0;\n  let maxIndexValue59 = 0;\n  let maxIndexValue60 = 0;\n  let maxIndexValue61 = 0;\n  let maxIndexValue62 = 0;\n  let maxIndexValue63 = 0;\n  let maxIndexValue64 = 0;\n  let maxIndexValue65 = 0;\n  let maxIndexValue66 = 0;\n  let maxIndexValue67 = 0;\n  let maxIndexValue68 = 0;\n  let maxIndexValue69 = 0;\n  let maxIndexValue70 = 0;\n  let maxIndexValue71 = 0;\n  let maxIndexValue72 = 0;\n  let maxIndexValue73 = 0;\n  let maxIndexValue74 = 0;\n  let maxIndexValue75 = 0;\n  let maxIndexValue76 = 0;\n  let maxIndexValue77 = 0;\n  let maxIndexValue78 = 0;\n  let maxIndexValue79 = 0;\n  let maxIndexValue80 = 0;\n  let maxIndexValue81 = 0;\n  let maxIndexValue82 = 0;\n  let maxIndexValue83 = 0;\n  let maxIndexValue84 = 0;\n  let maxIndexValue85 = 0;\n  let maxIndexValue86 = 0;\n  let maxIndexValue87 = 0;\n  let maxIndexValue88 = 0;\n  let maxIndexValue89 = 0;\n  let maxIndexValue90 = 0;\n  let maxIndexValue91 = 0;\n  let maxIndexValue92 = 0;\n  let maxIndexValue93 = 0;\n  let maxIndexValue94 = 0;\n  let maxIndexValue95 = 0;\n  let maxIndexValue96 = 0;\n  let maxIndexValue97 = 0;\n  let maxIndexValue98 = 0;\n  let maxIndexValue99 = 0;\n  let maxIndexValue100 = 0;\n  let maxIndexValue101 = 0;\n  let maxIndexValue102 = 0;\n  let maxIndexValue103 = 0;\n  let maxIndexValue104 = 0;\n  let maxIndexValue105 = 0;\n  let maxIndexValue106 = 0;\n  let maxIndexValue107 = 0;\n  let maxIndexValue108 = 0;\n  let maxIndexValue109 = 0;\n  let maxIndexValue110 = 0;\n  let maxIndexValue111 = 0;\n  let maxIndexValue112 = 0;\n  let maxIndexValue113 = 0;\n  let maxIndexValue114 = 0;\n  let maxIndexValue115 = 0;\n  let maxIndexValue116 = 0;\n  let maxIndexValue117 = 0;\n  let maxIndexValue118 = 0;\n  let maxIndexValue119 = 0;\n  let maxIndexValue120 = 0;\n  let maxIndexValue121 = 0;\n  let maxIndexValue122 = 0;\n  let maxIndexValue123 = 0;\n  let maxIndexValue124 = 0;\n  let maxIndexValue125 = 0;\n  let maxIndexValue126 = 0;\n  let maxIndexValue127 = 0;\n  let maxIndexValue128 = 0;\n  let maxIndexValue129 = 0;\n  let maxIndexValue130 = 0;\n  let maxIndexValue131 = 0;\n  let maxIndexValue132 = 0;\n  let maxIndexValue133 = 0;\n  let maxIndexValue134 = 0;\n  let maxIndexValue135 = 0;\n  let maxIndexValue136 = 0;\n  let maxIndexValue137 = 0;\n  let maxIndexValue138 = 0;\n  let maxIndexValue139 = 0;\n  let maxIndexValue140 = 0;\n  let maxIndexValue141 = 0;\n  let maxIndexValue142 = 0;\n  let maxIndexValue143 = 0;\n  let maxIndexValue144 = 0;\n  let maxIndexValue145 = 0;\n  let maxIndexValue146 = 0;\n  let maxIndexValue147 = 0;\n  let maxIndexValue148 = 0;\n  let maxIndexValue149 = 0;\n  let maxIndexValue150 = 0;\n  let maxIndexValue151 = 0;\n  let maxIndexValue152 = 0;\n  let maxIndexValue153 = 0;\n  let maxIndexValue154 = 0;\n  let maxIndexValue155 = 0;\n  let maxIndexValue156 = 0;\n  let maxIndexValue157 = 0;\n  let maxIndexValue158 = 0;\n  let maxIndexValue159 = 0;\n  let maxIndexValue160 = 0;\n  let maxIndexValue161 = 0;\n  let maxIndexValue162 = 0;\n  let maxIndexValue163 = 0;\n  let maxIndexValue164 = 0;\n  let maxIndexValue165 = 0;\n  let maxIndexValue166 = 0;\n  let maxIndexValue167 = 0;\n  let maxIndexValue168 = 0;\n  let maxIndexValue169 = 0;\n  let maxIndexValue170 = 0;\n  let maxIndexValue171 = 0;\n  let maxIndexValue172 = 0;\n  let maxIndexValue173 = 0;\n  let maxIndexValue174 = 0;\n  let maxIndexValue175 = 0;\n  let maxIndexValue176 = 0;\n  let maxIndexValue177 = 0;\n  let maxIndexValue178 = 0;\n  let maxIndexValue179 = 0;\n  let maxIndexValue180 = 0;\n  let maxIndexValue181 = 0;\n  let maxIndexValue182 = 0;\n  let maxIndexValue183 = 0;\n  let maxIndexValue184 = 0;\n  let maxIndexValue185 = 0;\n  let maxIndexValue186 = 0;\n  let maxIndexValue187 = 0;\n  let maxIndexValue188 = 0;\n  let maxIndexValue189 = 0;\n  let maxIndexValue190 = 0;\n  let maxIndexValue191 = 0;\n  let maxIndexValue192 = 0;\n  let maxIndexValue193 = 0;\n  let maxIndexValue194 = 0;\n  let maxIndexValue195 = 0;\n  let maxIndexValue196 = 0;\n  let maxIndexValue197 = 0;\n  let maxIndexValue198 = 0;\n  let maxIndexValue199 = 0;\n  let maxIndexValue200 = 0;\n  let maxIndexValue201 = 0;\n  let maxIndexValue202 = 0;\n  let maxIndexValue203 = 0;\n  let maxIndexValue204 = 0;\n  let maxIndexValue205 = 0;\n  let maxIndexValue206 = 0;\n  let maxIndexValue207 = 0;\n  let maxIndexValue208 = 0;\n  let maxIndexValue209 = 0;\n  let maxIndexValue210", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Youare given a listo f intege rs.\n  Write a function nextSmallest() that returns the 2nd smallest ele ment o fthe lis t.  Retu rn null if there is no s uchelement.\n  \n  next S mallest([1, 2, 3, 4, 5]) == 2\n  n extSma llest([5,1, 4, 3, 2]) ==  2\n  nextSmallest([]) == null  nextSmallest([1, 1]) == nu ll\n  */\nconst nextSmall est =(lst) => {\n  let n = lst.length;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n  let m = 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by' .', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a str i ng of wo rds, and your task is to count the number\n  of boredoms. A boredom is a  sente nc e thatsta rts wi th the word \"I\".\n  Sente nces  are delimited by'.', '?' or '!'.\n \n Forexample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a function tha t  takes 3  numbers.\n  Returns true if one of the numbers is equal to the sum of t he oth er  two, a ndall nu mbers are integers.\n  Re turn sfalse in any oth e r cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true\n  }\n  if (z % x ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters , repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes amessage, and encodes in such a \n  way that it swapscase of all letters, repl ac es allvow els in  \n  the message with the  let ter that appears 2 places ahead of that \n vowel inthe en glishalphabet. \n  Assume  only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowels = 'aeiou';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let letters_index = letters.indexOf(message);\n  let letters_length = letters_index + message.length;\n  let letters_position = letters_length - 2;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n  let letters_position = letters_position % letters_length;\n  let letters_position = letters_position / letters_length;\n  let letters_position = letters_position * 2;\n  let letters_position = letters_position + message.length;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Youare given a list o f  integer s.\n  You need to find the largest prime value and return the sum of its  digit s. \n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max2 = 0;\n  let max3 = 0;\n  let max4 = 0;\n  let max5 = 0;\n  let max6 = 0;\n  let max7 = 0;\n  let max8 = 0;\n  let max9 = 0;\n  let max10 = 0;\n  let max11 = 0;\n  let max12 = 0;\n  let max13 = 0;\n  let max14 = 0;\n  let max15 = 0;\n  let max16 = 0;\n  let max17 = 0;\n  let max18 = 0;\n  let max19 = 0;\n  let max20 = 0;\n  let max21 = 0;\n  let max22 = 0;\n  let max23 = 0;\n  let max24 = 0;\n  let max25 = 0;\n  let max26 = 0;\n  let max27 = 0;\n  let max28 = 0;\n  let max29 = 0;\n  let max30 = 0;\n  let max31 = 0;\n  let max32 = 0;\n  let max33 = 0;\n  let max34 = 0;\n  let max35 = 0;\n  let max36 = 0;\n  let max37 = 0;\n  let max38 = 0;\n  let max39 = 0;\n  let max40 = 0;\n  let max41 = 0;\n  let max42 = 0;\n  let max43 = 0;\n  let max44 = 0;\n  let max45 = 0;\n  let max46 = 0;\n  let max47 = 0;\n  let max48 = 0;\n  let max49 = 0;\n  let max50 = 0;\n  let max51 = 0;\n  let max52 = 0;\n  let max53 = 0;\n  let max54 = 0;\n  let max55 = 0;\n  let max56 = 0;\n  let max57 = 0;\n  let max58 = 0;\n  let max59 = 0;\n  let max60 = 0;\n  let max61 = 0;\n  let max62 = 0;\n  let max63 = 0;\n  let max64 = 0;\n  let max65 = 0;\n  let max66 = 0;\n  let max67 = 0;\n  let max68 = 0;\n  let max69 = 0;\n  let max70 = 0;\n  let max71 = 0;\n  let max72 = 0;\n  let max73 = 0;\n  let max74 = 0;\n  let max75 = 0;\n  let max76 = 0;\n  let max77 = 0;\n  let max78 = 0;\n  let max79 = 0;\n  let max80 = 0;\n  let max81 = 0;\n  let max82 = 0;\n  let max83 = 0;\n  let max84 = 0;\n  let max85 = 0;\n  let max86 = 0;\n  let max87 = 0;\n  let max88 = 0;\n  let max89 = 0;\n  let max90 = 0;\n  let max91 = 0;\n  let max92 = 0;\n  let max93 = 0;\n  let max94 = 0;\n  let max95 = 0;\n  let max96 = 0;\n  let max97 = 0;\n  let max98 = 0;\n  let max99 = 0;\n  let max100 = 0;\n  let max101 = 0;\n  let max102 = 0;\n  let max103 = 0;\n  let max104 = 0;\n  let max105 = 0;\n  let max106 = 0;\n  let max107 = 0;\n  let max108 = 0;\n  let max109 = 0;\n  let max110 = 0;\n  let max111 = 0;\n  let max112 = 0;\n  let max113 = 0;\n  let max114 = 0;\n  let max115 = 0;\n  let max116 = 0;\n  let max117 = 0;\n  let max118 = 0;\n  let max119 = 0;\n  let max120 = 0;\n  let max121 = 0;\n  let max122 = 0;\n  let max123 = 0;\n  let max124 = 0;\n  let max125 = 0;\n  let max126 = 0;\n  let max127 = 0;\n  let max128 = 0;\n  let max129 = 0;\n  let max130 = 0;\n  let max131 = 0;\n  let max132 = 0;\n  let max133 = 0;\n  let max134 = 0;\n  let max135 = 0;\n  let max136 = 0;\n  let max137 = 0;\n  let max138 = 0;\n  let max139 = 0;\n  let max140 = 0;\n  let max141 = 0;\n  let max142 = 0;\n  let max143 = 0;\n  let max144 = 0;\n  let max145 = 0;\n  let max146 = 0;\n  let max147 = 0;\n  let max148 = 0;\n  let max149 = 0;\n  let max150 = 0;\n  let max151 = 0;\n  let max152 = 0;\n  let max153 = 0;\n  let max154 = 0;\n  let max155 = 0;\n  let max156 = 0;\n  let max157 = 0;\n  let max158 = 0;\n  let max159 = 0;\n  let max160 = 0;\n  let max161 = 0;\n  let max162 = 0;\n  let max163 = 0;\n  let max164 = 0;\n  let max165 = 0;\n  let max166 = 0;\n  let max167 = 0;\n  let max168 = 0;\n  let max169 = 0;\n  let max170 = 0;\n  let max171 = 0;\n  let max172 = 0;\n  let max173 = 0;\n  let max174 = 0;\n  let max175 = 0;\n  let max176 = 0;\n  let max177 = 0;\n  let max178 = 0;\n  let max179 = 0;\n  let max180 = 0;\n  let max181 = 0;\n  let max182 = 0;\n  let max183 = 0;\n  let max184 = 0;\n  let max185 = 0;\n  let max186 = 0;\n  let max187 = 0;\n  let max188 = 0;\n  let max189 = 0;\n  let max190 = 0;\n  let max191 = 0;\n  let max192 = 0;\n  let max193 = 0;\n  let max194 = 0;\n  let max195 = 0;\n  let max196 = 0;\n  let max197 = 0;\n  let max198 = 0;\n  let max199 = 0;\n  let max200 = 0;\n  let max201 = 0;\n  let max202 = 0;\n  let max203 = 0;\n  let max204 = 0;\n  let max205 = 0;\n  let max206 = 0;\n  let max207 = 0;\n  let max208 = 0;\n  let max209 = 0;\n  let max210 = 0;\n  let max211 = 0;\n  let max212 = 0;\n  let max213 = 0;\n  let max214 = 0;\n  let max215 = 0;\n  let max216 = 0;\n  let max217 = 0;\n  let max218 = 0;\n  let max219 = 0;\n  let max220 = 0;\n  let max221 = 0;\n  let max222 = 0;\n  let max223 = 0;\n  let max224 = 0;\n  let max225 = 0;\n  let max226 = 0;\n  let max227 = 0;\n  let max228 = 0;\n  let max229 = 0;\n  let max230 = 0;\n  let max231 = 0;\n  let max232 = 0;\n  let max233 = 0;\n  let max234 = 0;\n  let max235 = 0;\n  let max236 = 0;\n  let max237 = 0;\n  let max238 = 0;\n  let max239 = 0;\n  let max240 = 0;\n  let max241 = 0;\n  let max242 = 0;\n  let max243 = 0;\n  let max244 = 0;\n  let max245 = 0;\n  let max246 = 0;\n  let max247 = 0;\n  let max248 = 0;\n  let max249 = 0;\n  let max250 = 0;\n  let max251 = 0;\n  let max252 = 0;\n  let max253 = 0;\n  let max254 = 0;\n  let max255 = 0;\n  let max256 = 0;\n  let max257 = 0;\n  let max258 = 0;\n  let max259 = 0;\n  let max260 = 0;\n  let max261 = 0;\n  let max262 = 0;\n  let max263 = 0;\n  let max264 = 0;\n  let max265 = 0;\n  let max266 = 0;\n  let max267 = 0;\n  let max268 = 0;\n  let max269 = 0;\n  let max270 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, r e turn tru e if all keys are strings in lower \n  case or all keys are strings in u pper c as e, else  re turn f alse.\n  The function sho uldreturn false is th e  given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let keys = keys.sort();\n  let keyLength = keys.length;\n  let isCaseSensitive = true;\n  let isUpperCase = true;\n  let isLowerCase = true;\n  let isUpperCaseKey = false;\n  let isLowerCaseKey = false;\n  let isUpperCaseKey2 = false;\n  let isLowerCaseKey2 = false;\n  let isUpperCaseKey3 = false;\n  let isLowerCaseKey3 = false;\n  let isUpperCaseKey4 = false;\n  let isLowerCaseKey4 = false;\n  let isUpperCaseKey5 = false;\n  let isLowerCaseKey5 = false;\n  let isUpperCaseKey6 = false;\n  let isLowerCaseKey6 = false;\n  let isUpperCaseKey7 = false;\n  let isLowerCaseKey7 = false;\n  let isUpperCaseKey8 = false;\n  let isLowerCaseKey8 = false;\n  let isUpperCaseKey9 = false;\n  let isLowerCaseKey9 = false;\n  let isUpperCaseKey10 = false;\n  let isLowerCaseKey10 = false;\n  let isUpperCaseKey11 = false;\n  let isLowerCaseKey11 = false;\n  let isUpperCaseKey12 = false;\n  let isLowerCaseKey12 = false;\n  let isUpperCaseKey13 = false;\n  let isLowerCaseKey13 = false;\n  let isUpperCaseKey14 = false;\n  let isLowerCaseKey14 = false;\n  let isUpperCaseKey15 = false;\n  let isLowerCaseKey15 = false;\n  let isUpperCaseKey16 = false;\n  let isLowerCaseKey16 = false;\n  let isUpperCaseKey17 = false;\n  let isLowerCaseKey17 = false;\n  let isUpperCaseKey18 = false;\n  let isLowerCaseKey18 = false;\n  let isUpperCaseKey19 = false;\n  let isLowerCaseKey19 = false;\n  let isUpperCaseKey20 = false;\n  let isLowerCaseKey20 = false;\n  let isUpperCaseKey21 = false;\n  let isLowerCaseKey21 = false;\n  let isUpperCaseKey22 = false;\n  let isLowerCaseKey22 = false;\n  let isUpperCaseKey23 = false;\n  let isLowerCaseKey23 = false;\n  let isUpperCaseKey24 = false;\n  let isLowerCaseKey24 = false;\n  let isUpperCaseKey25 = false;\n  let isLowerCaseKey25 = false;\n  let isUpperCaseKey26 = false;\n  let isLowerCaseKey26 = false;\n  let isUpperCaseKey27 = false;\n  let isLowerCaseKey27 = false;\n  let isUpperCaseKey28 = false;\n  let isLowerCaseKey28 = false;\n  let isUpperCaseKey29 = false;\n  let isLowerCaseKey29 = false;\n  let isUpperCaseKey30 = false;\n  let isLowerCaseKey30 = false;\n  let isUpperCaseKey31 = false;\n  let isLowerCaseKey31 = false;\n  let isUpperCaseKey32 = false;\n  let isLowerCaseKey32 = false;\n  let isUpperCaseKey33 = false;\n  let isLowerCaseKey33 = false;\n  let isUpperCaseKey34 = false;\n  let isLowerCaseKey34 = false;\n  let isUpperCaseKey35 = false;\n  let isLowerCaseKey35 = false;\n  let isUpperCaseKey36 = false;\n  let isLowerCaseKey36 = false;\n  let isUpperCaseKey37 = false;\n  let isLowerCaseKey37 = false;\n  let isUpperCaseKey38 = false;\n  let isLowerCaseKey38 = false;\n  let isUpperCaseKey39 = false;\n  let isLowerCaseKey39 = false;\n  let isUpperCaseKey40 = false;\n  let isLowerCaseKey40 = false;\n  let isUpperCaseKey41 = false;\n  let isLowerCaseKey41 = false;\n  let isUpperCaseKey42 = false;\n  let isLowerCaseKey42 = false;\n  let isUpperCaseKey43 = false;\n  let isLowerCaseKey43 = false;\n  let isUpperCaseKey44 = false;\n  let isLowerCaseKey44 = false;\n  let isUpperCaseKey45 = false;\n  let isLowerCaseKey45 = false;\n  let isUpperCaseKey46 = false;\n  let isLowerCaseKey46 = false;\n  let isUpperCaseKey47 = false;\n  let isLowerCaseKey47 = false;\n  let isUpperCaseKey48 = false;\n  let isLowerCaseKey48 = false;\n  let isUpperCaseKey49 = false;\n  let isLowerCaseKey49 = false;\n  let isUpperCaseKey50 = false;\n  let isLowerCaseKey50 = false;\n  let isUpperCaseKey51 = false;\n  let isLowerCaseKey51 = false;\n  let isUpperCaseKey52 = false;\n  let isLowerCaseKey52 = false;\n  let isUpperCaseKey53 = false;\n  let isLowerCaseKey53 = false;\n  let isUpperCaseKey54 = false;\n  let isLowerCaseKey54 = false;\n  let isUpperCaseKey55 = false;\n  let isLowerCaseKey55 = false;\n  let isUpperCaseKey56 = false;\n  let isLowerCaseKey56 = false;\n  let isUpperCaseKey57 = false;\n  let isLowerCaseKey57 = false;\n  let isUpperCaseKey58 = false;\n  let isLowerCaseKey58 = false;\n  let isUpperCaseKey59 = false;\n  let isLowerCaseKey59 = false;\n  let isUpperCaseKey60 = false;\n  let isLowerCaseKey60 = false;\n  let isUpperCaseKey61 = false;\n  let isLowerCaseKey61 = false;\n  let isUpperCaseKey62 = false;\n  let isLowerCaseKey62 = false;\n  let isUpperCaseKey63 = false;\n  let isLowerCaseKey63 = false;\n  let isUpperCaseKey64 = false;\n  let isLowerCaseKey64 = false;\n  let isUpperCaseKey65 = false;\n  let isLowerCaseKey65 = false;\n  let isUpperCaseKey66 = false;\n  let isLowerCaseKey66 = false;\n  let isUpperCaseKey67 = false;\n  let isLowerCaseKey67 = false;\n  let isUpperCaseKey68 = false;\n  let isLowerCaseKey68 = false;\n  let isUpperCaseKey69 = false;\n  let isLowerCaseKey69 = false;\n  let isUpperCaseKey70 = false;\n  let isLowerCaseKey70 = false;\n  let isUpperCaseKey71 = false;\n  let isLowerCaseKey71 = false;\n  let isUpperCaseKey72 = false;\n  let isLowerCaseKey72 = false;\n  let isUpperCaseKey73 = false;\n  let isLowerCaseKey73 = false;\n  let isUpperCaseKey74 = false;\n  let isLowerCaseKey74 = false;\n  let isUpperCaseKey75 = false;\n  let isLowerCaseKey75 = false;\n  let isUpperCaseKey76 = false;\n  let isLowerCaseKey76 = false;\n  let isUpperCaseKey77 = false;\n  let isLowerCaseKey77 = false;\n  let isUpperCaseKey78 = false;\n  let isLowerCaseKey78 = false;\n  let isUpperCaseKey79 = false;\n  let isLowerCaseKey79 = false;\n  let isUpperCaseKey80 = false;\n  let isLowerCaseKey80 = false;\n  let isUpperCaseKey81 = false;\n  let isLowerCaseKey81 = false;\n  let isUpperCaseKey82 = false;\n  let isLowerCaseKey82 = false;\n  let isUpperCaseKey83 = false;\n  let isLowerCaseKey83 = false;\n  let isUpperCaseKey84 = false;\n  let isLowerCaseKey84 = false;\n  let isUpperCaseKey85 = false;\n  let isLowerCaseKey85 = false;\n  let isUpperCaseKey86 = false;\n  let isLowerCaseKey86 = false;\n  let isUpperCaseKey87 = false;\n  let isLowerCaseKey87 = false;\n  let isUpperCaseKey88 = false;\n  let isLowerCaseKey88 = false;\n  let isUpperCaseKey89 = false;\n  let isLowerCaseKey89 = false;\n  let isUpperCaseKey90 = false;\n  let isLowerCaseKey90 = false;\n  let isUpperCaseKey91 = false;\n  let isLowerCaseKey", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a function t h at takes  an non-negative integer and returns an array of the first n\n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo2(5) => [2,3]\n  countUpTo2(11) => [2,3,5,7]\n  countUpTo2(0) => []\n  countUpTo2(20) => [2,3,5,7,11,13,17,19]\n  countUpTo2(1) => []\n  countUpTo2(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo3(5) => [2,3]\n  countUpTo3(11) => [2,3,5,7]\n  countUpTo3(0) => []\n  countUpTo3(20) => [2,3,5,7,11,13,17,19]\n  countUpTo3(1) => []\n  countUpTo3(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo3 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo4(5) => [2,3]\n  countUpTo4(11) => [2,3,5,7]\n  countUpTo4(0) => []\n  countUpTo4(20) => [2,3,5,7,11,13,17,19]\n  countUpTo4(1) => []\n  countUpTo4(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo4 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo5(5) => [2,3]\n  countUpTo5(11) => [2,3,5,7]\n  countUpTo5(0) => []\n  countUpTo5(20) => [2,3,5,7,11,13,17,19]\n  countUpTo5(1) => []\n  countUpTo5(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo5 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo6(5) => [2,3]\n  countUpTo6(11) => [2,3,5,7]\n  countUpTo6(0) => []\n  countUpTo6(20) => [2,3,5,7,11,13,17,19]\n  countUpTo6(1) => []\n  countUpTo6(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo6 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo7(5) => [2,3]\n  countUpTo7(11) => [2,3,5,7]\n  countUpTo7(0) => []\n  countUpTo7(20) => [2,3,5,7,11,13,17,19]\n  countUpTo7(1) => []\n  countUpTo7(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo7 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo8(5) => [2,3]\n  countUpTo8(11) => [2,3,5,7]\n  countUpTo8(0) => []\n  countUpTo8(20) => [2,3,5,7,11,13,17,19]\n  countUpTo8(1) => []\n  countUpTo8(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo8 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo9(5) => [2,3]\n  countUpTo9(11) => [2,3,5,7]\n  countUpTo9(0) => []\n  countUpTo9(20) => [2,3,5,7,11,13,17,19]\n  countUpTo9(1) => []\n  countUpTo9(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo9 = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function t h at takes  an non-negative integer and returns an array of the first\n  n  integers  thatar e prime  nu mbersand less than n.\n  for example:\n  countUpTo10(5) => [2,3]\n  countUpTo10(11) => [2,3,5,7]\n  countUpTo10(0) => ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the sum of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    sum += b[i];\n  }\n  return sum;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the difference between their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -7.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference += a[i] - b[i];\n  }\n  return difference;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  product(148, 412) should return 164.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the sum of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sumOfDigits = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  return sum;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the difference between their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -7.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst differenceOfDigits = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference += a[i] - b[i];\n  }\n  return difference;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  product(148, 412) should return 164.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst productOfDigits = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the sum of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sumOfDigits = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  return sum;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the difference between their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -7.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst differenceOfDigits = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference += a[i] - b[i];\n  }\n  return difference;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  product(148, 412) should return 164.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst productOfDigits = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the sum of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sumOfDigits = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  return sum;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the difference between their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -7.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst differenceOfDigits = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference += a[i] - b[i];\n  }\n  return difference;\n};\n\n/*Complete the functiont hat take s two integers and returns \n  the product of their unit digits.\n  Assum e thein put isalw ays va lid.\n  Examples:\n  product(148, 412) should return 164.\n  product(19, 28) should return 72.\n  product(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, cou n t the nu mber of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charAt(i).toUpperCase() === 'A') {\n      count++;\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      count++;\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      count++;\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      count++;\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      count++;\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'I') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'O') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'U') {\n      i++;\n    }\n    \n    if (s.charAt(i).toUpperCase() === 'A') {\n      i++;\n    }\n    else if (s.charAt(i).toUpperCase() === 'E') {\n      i++;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit .If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function tha t  takes a  value (string) representing a number\n  and returnsthe closest integer  toit.If thenum ber is  equidistant\n  from twointe gers, round it awa y  from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split('.');\n  const [integer1, integer2] = integer.split('-');\n  const [integer3, integer4] = fraction.split('.');\n  const [integer5, integer6] = integer1.split('-');\n  const [integer7, integer8] = integer2.split('-');\n  const [integer9, integer10] = integer3.split('-');\n  const [integer11, integer12] = integer4.split('-');\n  const [integer13, integer14] = integer5.split('-');\n  const [integer15, integer16] = integer6.split('-');\n  const [integer17, integer18] = integer7.split('-');\n  const [integer19, integer20] = integer8.split('-');\n  const [integer21, integer22] = integer9.split('-');\n  const [integer23, integer24] = integer10.split('-');\n  const [integer25, integer26] = integer11.split('-');\n  const [integer27, integer28] = integer12.split('-');\n  const [integer29, integer30] = integer13.split('-');\n  const [integer31, integer32] = integer14.split('-');\n  const [integer33, integer34] = integer15.split('-');\n  const [integer35, integer36] = integer16.split('-');\n  const [integer37, integer38] = integer17.split('-');\n  const [integer39, integer40] = integer18.split('-');\n  const [integer41, integer42] = integer19.split('-');\n  const [integer43, integer44] = integer20.split('-');\n  const [integer45, integer46] = integer21.split('-');\n  const [integer47, integer48] = integer22.split('-');\n  const [integer49, integer50] = integer23.split('-');\n  const [integer51, integer52] = integer24.split('-');\n  const [integer53, integer54] = integer25.split('-');\n  const [integer55, integer56] = integer26.split('-');\n  const [integer57, integer58] = integer27.split('-');\n  const [integer59, integer60] = integer28.split('-');\n  const [integer61, integer62] = integer29.split('-');\n  const [integer63, integer64] = integer30.split('-');\n  const [integer65, integer66] = integer31.split('-');\n  const [integer67, integer68] = integer32.split('-');\n  const [integer69, integer70] = integer33.split('-');\n  const [integer71, integer72] = integer34.split('-');\n  const [integer73, integer74] = integer35.split('-');\n  const [integer75, integer76] = integer36.split('-');\n  const [integer77, integer78] = integer37.split('-');\n  const [integer79, integer80] = integer38.split('-');\n  const [integer81, integer82] = integer39.split('-');\n  const [integer83, integer84] = integer40.split('-');\n  const [integer85, integer86] = integer41.split('-');\n  const [integer87, integer88] = integer42.split('-');\n  const [integer89, integer90] = integer43.split('-');\n  const [integer91, integer92] = integer44.split('-');\n  const [integer93, integer94] = integer45.split('-');\n  const [integer95, integer96] = integer46.split('-');\n  const [integer97, integer98] = integer47.split('-');\n  const [integer99, integer100] = integer48.split('-');\n  const [integer101, integer102] = integer49.split('-');\n  const [integer103, integer104] = integer50.split('-');\n  const [integer105, integer106] = integer51.split('-');\n  const [integer107, integer108] = integer52.split('-');\n  const [integer109, integer110] = integer53.split('-');\n  const [integer111, integer112] = integer54.split('-');\n  const [integer113, integer114] = integer55.split('-');\n  const [integer115, integer116] = integer56.split('-');\n  const [integer117, integer118] = integer57.split('-');\n  const [integer119, integer120] = integer58.split('-');\n  const [integer121, integer122] = integer59.split('-');\n  const [integer123, integer124] = integer60.split('-');\n  const [integer125, integer126] = integer61.split('-');\n  const [integer127, integer128] = integer62.split('-');\n  const [integer129, integer130] = integer63.split('-');\n  const [integer131, integer132] = integer64.split('-');\n  const [integer133, integer134] = integer65.split('-');\n  const [integer135, integer136] = integer66.split('-');\n  const [integer137, integer138] = integer67.split('-');\n  const [integer139, integer140] = integer68.split('-');\n  const [integer141, integer142] = integer69.split('-');\n  const [integer143, integer144] = integer70.split('-');\n  const [integer145, integer146] = integer71.split('-');\n  const [integer147, integer148] = integer72.split('-');\n  const [integer149, integer150] = integer73.split('-');\n  const [integer151, integer152] = integer74.split('-');\n  const [integer153, integer154] = integer75.split('-');\n  const [integer155, integer156] = integer76.split('-');\n  const [integer157, integer158] = integer77.split('-');\n  const [integer159, integer160] = integer78.split('-');\n  const [integer161, integer162] = integer79.split('-');\n  const [integer163, integer164] = integer80.split('-');\n  const [integer165, integer166] = integer81.split('-');\n  const [integer167, integer168] = integer82.split('-');\n  const [integer169, integer170] = integer83.split('-');\n  const [integer171, integer172] = integer84.split('-');\n  const [integer173, integer174] = integer85.split('-');\n  const [integer175, integer176] = integer86.split('-');\n  const [integer177, integer178] = integer87.split('-');\n  const [integer179, integer180] = integer88.split('-');\n  const [integer181, integer182] = integer89.split('-');\n  const [integer183, integer184] = integer90.split('-');\n  const [integer185, integer186] = integer91.split('-');\n  const [integer187, integer188] = integer92.split('-');\n  const [integer189, integer190] = integer93.split('-');\n  const [integer191, integer192] = integer94.split('-');\n  const [integer193, integer194] = integer95.split('-');\n  const [integer195, integer196] = integer96.split('-');\n  const [integer197, integer198] = integer97.split('-');\n  const [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
