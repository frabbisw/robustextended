{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closest = Number.MAX_VALUE;\n  let closestIndex = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (Math.abs(number - closest) < threshold) {\n      closest = number;\n      closestIndex = i;\n    }\n  }\n  return closestIndex >= 0;\n};\n\n/**\n * Check if a number is close to another number.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the number closest to both numbers is returned.\n * If two numbers are close to each other, the ", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_2 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_3 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_4 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_5 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_6 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups_7 = paren_string => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/g);\n  const paren_group_array = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_array = paren_group_array.concat(paren_group.match(/\\(([^)]*)\\)/g));\n  }\n  return paren_group_array;\n};\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) ((", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n const palindrome = string.reverse ().join (\"\");\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const palindromeLength = string.length;\n const p", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [\n    [],\n    [],\n    [],\n  ];\n  for (let i = 1; i <= n; i++) {\n    levels[n % 2 === 0? i : i + 1].push(i);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve ", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of numbers. Your task is to split the\n  string into numbers and r eturn a n  arrayof the numbers. \n  \n  For example:\n  numbersString(\"123,456,789\") == [123123, 456789]\n  numbersString(\"123,456,789,987\") == [123123, 456789, 987]\n  */\nconst numbersString = (s) => {\n  let numbers = s.split(\",\").map(n => parseInt(n, 10));\n  return numbers;\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersString(\"123,456,789,987,abc\") == [123123, 456789, 987, \"abc\"]\n  numbersLettersString(\"123,456,789,987,abc,def\") == [123123, 456789, 987, \"abc\", \"def\"]\n  */\nconst numbersLettersString = (s) => {\n  let numbers = numbersString(s);\n  let letters = wordsString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersString(\"123,456,789,987,abc,def\") == [123123, 456789, 987, \"abc\", \"def\"]\n  numbersLettersString(\"123,456,789,987,abc,def,ghi\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\"]\n  */\nconst numbersLettersLettersString = (s) => {\n  let numbers = numbersLettersString(s);\n  let letters = wordsLettersString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersLettersString(\"123,456,789,987,abc,def,ghi\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\"]\n  numbersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\"]\n  */\nconst numbersLettersLettersLettersString = (s) => {\n  let numbers = numbersLettersLettersString(s);\n  let letters = wordsLettersLettersString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\"]\n  numbersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]\n  */\nconst numbersLettersLettersLettersLettersString = (s) => {\n  let numbers = numbersLettersLettersLettersString(s);\n  let letters = wordsLettersLettersLettersString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]\n  numbersLettersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno,pqr\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"]\n  */\nconst numbersLettersLettersLettersLettersLettersString = (s) => {\n  let numbers = numbersLettersLettersLettersLettersString(s);\n  let letters = wordsLettersLettersLettersLettersString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno,pqr\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"]\n  numbersLettersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno,pqr,stu\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]\n  */\nconst numbersLettersLettersLettersLettersLettersLettersString = (s) => {\n  let numbers = numbersLettersLettersLettersLettersLettersString(s);\n  let letters = wordsLettersLettersLettersLettersLettersString(s);\n  return numbers.concat(letters);\n};\n\n/*\n  You will be given a string of numbers and letters. Your task is to split the\n  string into numbers and letters and r eturn a n  arrayof the numbers and letters. \n  \n  For example:\n  numbersLettersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno,pqr,stu\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"]\n  numbersLettersLettersLettersLettersLettersLettersLettersString(\"123,456,789,987,abc,def,ghi,jkl,mno,pqr,stu,tuv\") == [123123, 456789, 987, \"abc\", \"def\", \"ghi\", \"", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let re = x;\n  let li = y;\n  let lu = x;\n  let lv = y;\n  let luv = x;\n  let rev = y;\n  let revv = y;\n  let rev = x;\n  let revv = x;\n  let rev = y;\n  let revv = y;\n  let rev = x;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n  let revv = y;\n  let rev = y;\n", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let temp = 0;\n  let count = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let sum = 0\n  let temp = 0\n  let digit = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  let temp186 = 0\n  let temp187 = 0\n  let temp188 = 0\n  let temp189 = 0\n  let temp190 = 0\n  let temp191 = 0\n  let temp192 = 0\n  let temp193 = 0\n  let temp194 = 0\n  let temp195 = 0\n  let temp196 = 0\n  let temp197 = 0\n  let temp198 = 0\n  let temp199 = 0\n  let temp200 = 0\n  let temp201 = 0\n  let temp202 = 0\n  let temp203 = 0\n  let temp204 = 0\n  let temp205 = 0\n  let temp206 = 0\n  let temp207 = 0\n  let temp208 = 0\n  let temp209 = 0\n  let temp210 = 0\n  let temp211 = 0\n  let temp212 = 0\n  let temp213 = 0\n  let temp214 = 0\n  let temp215 = 0\n  let temp216 = 0\n  let temp217 = 0\n  let temp218 = 0\n  let temp219 = 0\n  let temp220 = 0\n  let temp221 = 0\n  let temp222 = 0\n  let temp223 = 0\n  let temp224 = 0\n  let temp225 = 0\n  let temp226 = 0\n  let temp227 = 0\n  let temp228 = 0\n  let temp229 = 0\n  let temp230 = 0\n  let temp231 = 0\n  let temp232 = 0\n  let temp233 = 0\n  let temp234 = 0\n  let temp235 = 0\n  let temp236 = 0\n  let temp237 = 0\n  let temp238 = 0\n  let temp239 = 0\n  let temp240 = 0\n  let temp241 = 0\n  let temp242 = 0\n  let temp243 = 0\n  let temp244 = 0\n  let temp245 = 0\n  let temp246 = 0\n  let temp247 = 0\n  let temp248 = 0\n  let temp249 = 0\n  let temp250 = 0\n  let temp251 = 0\n  let temp252 = 0\n  let temp253 = 0\n  let temp254 = 0\n  let temp255 = 0\n  let temp256 = 0\n  let temp257 = 0\n  let temp258 = 0\n  let temp259 = 0\n  let temp260 = 0\n  let temp261 = 0\n  let temp262 = 0\n  let temp263 = 0\n  let temp264 = 0\n  let temp265 = 0\n  let temp266 = 0\n  let temp267 = 0\n  let temp268 = 0\n  let temp269 = 0\n  let temp270 = 0\n  let temp271 = 0\n  let temp272 = 0\n  let temp273 = 0\n  let temp274 = 0\n  let temp", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let num = 0\n  let name = ''\n  let arrLength = arr.length\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] < 10) {\n      sortedArr.push(arr[i])\n    } else {\n      sortedArr.push(arr[i].toString())\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] < 10) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      reversedArr.push(sortedArr[i])\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] < 10) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      num = num + 1\n      name = name + reversedArr[i]\n    }\n  }\n  return [num, name]\n}\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let num = 0\n  let name = ''\n  let arrLength = arr.length\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] < 10) {\n      sortedArr.push(arr[i])\n    } else {\n      sortedArr.push(arr[i].toString())\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] < 10) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      reversedArr.push(sortedArr[i])\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] < 10) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      num = num + 1\n      name = name + reversedArr[i]\n    }\n  }\n  return [num, name]\n}\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLength = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let num = 0\n  let name = ''\n  let arrLength = arr.length\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] < 10) {\n      sortedArr.push(arr[i])\n    } else {\n      sortedArr.push(arr[i].toString())\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] < 10) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      sortedArr[i] = sortedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] > 9) {\n      reversedArr.push(sortedArr[i])\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] < 10) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      reversedArr[i] = reversedArr[i].toString()\n    }\n  }\n  for (let i = 0; i < reversedArr.length; i++) {\n    if (reversedArr[i] > 9) {\n      num = num + 1\n      name = name + reversedArr[i]\n    }\n  }\n  return [num, name]\n}\n\n/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function g that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts g rom 1.\n  the factorialo g i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function h that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts h rom 1.\n  the factorialo h i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function i that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts i rom 1.\n  the factorialo i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function j that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts j rom 1.\n  the factorialo j is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function k that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts k rom 1.\n  the factorialo k is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function l that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts l rom 1.\n  the factorialo l is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function m that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts m rom 1.\n  the factorialo m is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function n that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts n rom 1.\n  the factorialo n is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};\n\n/* Implement the function o that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts o rom 1.\n  the factorialo o is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let i = 1;\n  let list = [];\n  while (i <= n) {\n    list.push(i);\n    i++;\n  }\n  return list;\n};", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 1;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 1;\n\n  while (evenPalindrome <= n) {\n    if (n % evenPalindrome === 0) {\n      evenPalindromeIndex++;\n    } else {\n      evenPalindromeIndex = 0;\n    }\n    if (n % oddPalindrome === 0) {\n      oddPalindromeIndex++;\n    } else {\n      oddPalindromeIndex = 0;\n    }\n    if (evenPalindromeIndex % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      evenPalindrome = 0;\n    }\n    if (oddPalindromeIndex % 2 === 0) {\n      oddPalindrome++;\n    } else {\n      oddPalindrome = 0;\n    }\n  }\n\n  evenEvenPalindromes.push(evenPalindrome);\n  oddEvenPalindromes.push(oddPalindrome);\n\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return a  tupl e that has the number of even and odd\n// integer palindromes that fall wi thinthe ran g e(1, n), exclusi ve.\n\nconst evenOddPalindromeExclusive = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 1;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 1;\n\n  while (evenPalindrome <= n) {\n    if (n % evenPalindrome === 0) {\n      evenPalindromeIndex++;\n    } else {\n      evenPalindromeIndex = 0;\n    }\n    if (n % oddPalindrome === 0) {\n      oddPalindromeIndex++;\n    } else {\n      oddPalindromeIndex = 0;\n    }\n    if (evenPalindromeIndex % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      evenPalindrome = 0;\n    }\n    if (oddPalindromeIndex % 2 === 0) {\n      oddPalindrome++;\n    } else {\n      oddPalindrome = 0;\n    }\n  }\n\n  evenEvenPalindromes.push(evenPalindrome);\n  oddEvenPalindromes.push(oddPalindrome);\n\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return a  tupl e that has the number of even and odd\n// integer palindromes that fall wi thinthe ran g e(1, n), exclusi ve.\n\nconst evenOddPalindromeExclusive2 = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 1;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 1;\n\n  while (evenPalindrome <= n) {\n    if (n % evenPalindrome === 0) {\n      evenPalindromeIndex++;\n    } else {\n      evenPalindromeIndex = 0;\n    }\n    if (n % oddPalindrome === 0) {\n      oddPalindromeIndex++;\n    } else {\n      oddPalindromeIndex = 0;\n    }\n    if (evenPalindromeIndex % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      evenPalindrome = 0;\n    }\n    if (oddPalindromeIndex % 2 === 0) {\n      oddPalindrome++;\n    } else {\n      oddPalindrome = 0;\n    }\n  }\n\n  evenEvenPalindromes.push(evenPalindrome);\n  oddEvenPalindromes.push(oddPalindrome);\n\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return a  tupl e that has the number of even and odd\n// integer palindromes that fall wi thinthe ran g e(1, n), exclusi ve.\n\nconst evenOddPalindromeExclusive3 = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 1;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 1;\n\n  while (evenPalindrome <= n) {\n    if (n % evenPalindrome === 0) {\n      evenPalindromeIndex++;\n    } else {\n      evenPalindromeIndex = 0;\n    }\n    if (n % oddPalindrome === 0) {\n      oddPalindromeIndex++;\n    } else {\n      oddPalindromeIndex = 0;\n    }\n    if (evenPalindromeIndex % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      evenPalindrome = 0;\n    }\n    if (oddPalindromeIndex % 2 === 0) {\n      oddPalindrome++;\n    } else {\n      oddPalindrome = 0;\n    }\n  }\n\n  evenEvenPalindromes.push(evenPalindrome);\n  oddEvenPalindromes.push(oddPalindrome);\n\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return a  tupl e that has the number of even and odd\n// integer palindromes that fall wi thinthe ran g e(1, n), exclusi ve.\n\nconst evenOddPalindromeExclusive4 = (n) => {\n  const oddEvenPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 1;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 1;\n\n  while (evenPalindrome <= n) {\n    if (n % evenPalindrome === 0) {\n      evenPalindromeIndex++;\n    } else {\n      evenPalindromeIndex = 0;\n    }\n    if (n % oddPalindrome === 0) {\n      oddPalindromeIndex++;\n    } else {\n      oddPalindromeIndex = 0;\n    }\n    if (evenPalindromeIndex % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      evenPalindrome = 0;\n    }\n    if (oddPalindromeIndex % 2 === 0) {\n      oddPalindrome++;\n    } else {\n      oddPalindrome = 0;\n    }\n  }\n\n  evenEvenPalindromes.push(evenPalindrome);\n  oddEvenPalindromes.push(oddPalindrome);\n\n  return evenEvenPalindromes;\n};\n\n// Given a positive integer n, return a  tupl e that has the number of even and odd\n// integer palindromes that fall wi thin", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Write a function sumDigits which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits([]) == []\n * >>> sumDigits([-1, 11, -11]) == [11, -11]\n * >>> sumDigits([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits2 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits2([]) == []\n * >>> sumDigits2([-1, 11, -11]) == [11, -11]\n * >>> sumDigits2([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits2 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits3 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits3([]) == []\n * >>> sumDigits3([-1, 11, -11]) == [11, -11]\n * >>> sumDigits3([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits3 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits4 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits4([]) == []\n * >>> sumDigits4([-1, 11, -11]) == [11, -11]\n * >>> sumDigits4([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits4 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits5 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits5([]) == []\n * >>> sumDigits5([-1, 11, -11]) == [11, -11]\n * >>> sumDigits5([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits5 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits6 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits6([]) == []\n * >>> sumDigits6([-1, 11, -11]) == [11, -11]\n * >>> sumDigits6([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits6 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits7 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits7([]) == []\n * >>> sumDigits7([-1, 11, -11]) == [11, -11]\n * >>> sumDigits7([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits7 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits8 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits8([]) == []\n * >>> sumDigits8([-1, 11, -11]) == [11, -11]\n * >>> sumDigits8([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits8 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits9 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits9([]) == []\n * >>> sumDigits9([-1, 11, -11]) == [11, -11]\n * >>> sumDigits9([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits9 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits10 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits10([]) == []\n * >>> sumDigits10([-1, 11, -11]) == [11, -11]\n * >>> sumDigits10([1, 1, 2]) == [1, 1, 2]\n */\nconst sumDigits10 = (arr) => {\n  let sumDigits = [];\n  for (let i = 0; i < arr.length; i++) {\n    sumDigits.push(arr[i].toString().split('').map(Number).reduce((a, b) => a + b));\n  }\n  return sumDigits;\n};\n\n/**\n * Write a function sumDigits11 which takes an array of integers and returns\n * an array with all the digits of all the elements in the array which \n * have a sumof di gits >0.\n * >>> sumDigits11([]) == []\n * >>> sumDig", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let ret = true;\n  let n = arr.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary OR on these inputs and return resul t als o as as tring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] | b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary OR on these inputs and return resul t als o as as tring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] | b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary OR on these inputs and return resul t als o as as tring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] | b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary OR on these inputs and return resul t als o as as tring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] | b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary OR on these inputs and return resul t als o as as tring.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] | b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] ^ b[i]).toString(2);\n  }\n  return res;\n};\n\n/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary AND on these inputs and return resul t als o as as tring.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] & ", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let isPossible = true;\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let numDiff = num1 - num2;\n  let numDiff2 = num2 - num1;\n  let numDiff3 = numDiff2 - numDiff;\n  let numDiff4 = numDiff3 - numDiff2;\n  let numDiff5 = numDiff4 - numDiff3;\n  let numDiff6 = numDiff5 - numDiff4;\n  let numDiff7 = numDiff6 - numDiff5;\n  let numDiff8 = numDiff7 - numDiff6;\n  let numDiff9 = numDiff8 - numDiff7;\n  let numDiff10 = numDiff9 - numDiff8;\n  let numDiff11 = numDiff10 - numDiff9;\n  let numDiff12 = numDiff11 - numDiff10;\n  let numDiff13 = numDiff12 - numDiff11;\n  let numDiff14 = numDiff13 - numDiff12;\n  let numDiff15 = numDiff14 - numDiff13;\n  let numDiff16 = numDiff15 - numDiff14;\n  let numDiff17 = numDiff16 - numDiff15;\n  let numDiff18 = numDiff17 - numDiff16;\n  let numDiff19 = numDiff18 - numDiff17;\n  let numDiff20 = numDiff19 - numDiff18;\n  let numDiff21 = numDiff20 - numDiff19;\n  let numDiff22 = numDiff21 - numDiff20;\n  let numDiff23 = numDiff22 - numDiff21;\n  let numDiff24 = numDiff23 - numDiff22;\n  let numDiff25 = numDiff24 - numDiff23;\n  let numDiff26 = numDiff25 - numDiff24;\n  let numDiff27 = numDiff26 - numDiff25;\n  let numDiff28 = numDiff27 - numDiff26;\n  let numDiff29 = numDiff28 - numDiff27;\n  let numDiff30 = numDiff29 - numDiff28;\n  let numDiff31 = numDiff30 - numDiff29;\n  let numDiff32 = numDiff31 - numDiff30;\n  let numDiff33 = numDiff32 - numDiff31;\n  let numDiff34 = numDiff33 - numDiff32;\n  let numDiff35 = numDiff34 - numDiff33;\n  let numDiff36 = numDiff35 - numDiff34;\n  let numDiff37 = numDiff36 - numDiff35;\n  let numDiff38 = numDiff37 - numDiff36;\n  let numDiff39 = numDiff38 - numDiff37;\n  let numDiff40 = numDiff39 - numDiff38;\n  let numDiff41 = numDiff40 - numDiff39;\n  let numDiff42 = numDiff41 - numDiff40;\n  let numDiff43 = numDiff42 - numDiff41;\n  let numDiff44 = numDiff43 - numDiff42;\n  let numDiff45 = numDiff44 - numDiff43;\n  let numDiff46 = numDiff45 - numDiff44;\n  let numDiff47 = numDiff46 - numDiff45;\n  let numDiff48 = numDiff47 - numDiff46;\n  let numDiff49 = numDiff48 - numDiff47;\n  let numDiff50 = numDiff49 - numDiff48;\n  let numDiff51 = numDiff50 - numDiff49;\n  let numDiff52 = numDiff51 - numDiff50;\n  let numDiff53 = numDiff52 - numDiff51;\n  let numDiff54 = numDiff53 - numDiff52;\n  let numDiff55 = numDiff54 - numDiff53;\n  let numDiff56 = numDiff55 - numDiff54;\n  let numDiff57 = numDiff56 - numDiff55;\n  let numDiff58 = numDiff57 - numDiff56;\n  let numDiff59 = numDiff58 - numDiff57;\n  let numDiff60 = numDiff59 - numDiff58;\n  let numDiff61 = numDiff60 - numDiff59;\n  let numDiff62 = numDiff61 - numDiff60;\n  let numDiff63 = numDiff62 - numDiff61;\n  let numDiff64 = numDiff63 - numDiff62;\n  let numDiff65 = numDiff64 - numDiff63;\n  let numDiff66 = numDiff65 - numDiff64;\n  let numDiff67 = numDiff66 - numDiff65;\n  let numDiff68 = numDiff67 - numDiff66;\n  let numDiff69 = numDiff68 - numDiff67;\n  let numDiff70 = numDiff69 - numDiff68;\n  let numDiff71 = numDiff70 - numDiff69;\n  let numDiff72 = numDiff71 - numDiff70;\n  let numDiff73 = numDiff72 - numDiff71;\n  let numDiff74 = numDiff73 - numDiff72;\n  let numDiff75 = numDiff74 - numDiff73;\n  let numDiff76 = numDiff75 - numDiff74;\n  let numDiff77 = numDiff76 - numDiff75;\n  let numDiff78 = numDiff77 - numDiff76;\n  let numDiff79 = numDiff78 - numDiff77;\n  let numDiff80 = numDiff79 - numDiff78;\n  let numDiff81 = numDiff80 - numDiff79;\n  let numDiff82 = numDiff81 - numDiff80;\n  let numDiff83 = numDiff82 - numDiff81;\n  let numDiff84 = numDiff83 - numDiff82;\n  let numDiff85 = numDiff84 - numDiff83;\n  let numDiff86 = numDiff85 - numDiff84;\n  let numDiff87 = numDiff86 - numDiff85;\n  let numDiff88 = numDiff87 - numDiff86;\n  let numDiff89 = numDiff88 - numDiff87;\n  let numDiff90 = numDiff89 - numDiff88;\n  let numDiff91 = numDiff90 - numDiff89;\n  let numDiff92 = numDiff91 - numDiff90;\n  let numDiff93 = numDiff92 - numDiff91;\n  let numDiff94 = numDiff93 - numDiff92;\n  let numDiff95 = numDiff94 - numDiff93;\n  let numDiff96 = numDiff95 - numDiff94;\n  let numDiff97 = numDiff96 - numDiff95;\n  let numDiff98 = numDiff97 - numDiff96;\n  let numDiff99 = numDiff98 - numDiff97;\n  let numDiff100", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = {};\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount = 0;\n  let letterCounts = {};\n  let letterCount", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.slice(0, s.length - 1);\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer n, return true if s and n are palindromes.\n  Example\n  s = \"abcde\", n = 5\n  result should be true\n  s = \"abcde\", n = 6\n  result should be false\n  s = \"abcde\", n = 7\n  result should be false\n  s = \"abcde\", n = 8\n  result should be false\n  s = \"abcde\", n = 9\n  result should be false\n  s = \"abcde\", n = 10\n  result should be false\n  s = \"abcde\", n = 11\n  result should be false\n  s = \"abcde\", n = 12\n  result should be false\n  s = \"abcde\", n = 13\n  result should be false\n  s = \"abcde\", n = 14\n  result should be false\n  s = \"abcde\", n = 15\n  result should be false\n  s = \"abcde\", n = 16\n  result should be false\n  s = \"abcde\", n = 17\n  result should be false\n  s = \"abcde\", n = 18\n  result should be false\n  s = \"abcde\", n = 19\n  result should be false\n  s = \"abcde\", n = 20\n  result should be false\n  s = \"abcde\", n = 21\n  result should be false\n  s = \"abcde\", n = 22\n  result should be false\n  s = \"abcde\", n = 23\n  result should be false\n  s = \"abcde\", n = 24\n  result should be false\n  s = \"abcde\", n = 25\n  result should be false\n  s = \"abcde\", n = 26\n  result should be false\n  s = \"abcde\", n = 27\n  result should be false\n  s = \"abcde\", n = 28\n  result should be false\n  s = \"abcde\", n = 29\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be false\n  s = \"abcde\", n = 33\n  result should be false\n  s = \"abcde\", n = 34\n  result should be false\n  s = \"abcde\", n = 35\n  result should be false\n  s = \"abcde\", n = 36\n  result should be false\n  s = \"abcde\", n = 37\n  result should be false\n  s = \"abcde\", n = 38\n  result should be false\n  s = \"abcde\", n = 39\n  result should be false\n  s = \"abcde\", n = 30\n  result should be false\n  s = \"abcde\", n = 31\n  result should be false\n  s = \"abcde\", n = 32\n  result should be ", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2 === 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of even digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2!== 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2 === 0 && n % 2!== 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2 === 0 && n % 2!== 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2 === 0 && n % 2!== 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((s) => {\n    let re = new RegExp(/\\d+/g)\n    let nums = re.exec(s).filter(Boolean)\n    nums.forEach((n) => {\n      if (n % 2 === 0 && n % 2!== 0) {\n        res.push(n)\n      }\n    })\n  })\n  return res\n}\n\n/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElements = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum number of distinct elements in nums.\n  Example\n  maxDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  maxDistinctElements([-1, -2, -3]) == 4\n  */\nconst maxDistinctElements = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum number of distinct elements in nums.\n  Example\n  maxDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  maxDistinctElements([-1, -2, -3]) == 4\n  */\nconst maxDistinctElementsReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  maximum number of distinct elements in nums.\n  Example\n  maxDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  maxDistinctElements([-1, -2, -3]) == 4\n  */\nconst maxDistinctElementsReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversedReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, fin d the  minimum number of distinct elements in nums.\n  Example\n  minDistinctElements([2, 3, 4, 1, 2, 4]) == 3\n  minDistinctElements([-1, -2, -3]) == 4\n  */\nconst minDistinctElementsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  let count = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums.includes(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integer", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let s = 0;\n  let t = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = 1;\n  let tt = ", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let temp = [];\n  let temp2 = [];\n  let temp3 = [];\n  let temp4 = [];\n  let temp5 = [];\n  let temp6 = [];\n  let temp7 = [];\n  let temp8 = [];\n  let temp9 = [];\n  let temp10 = [];\n  let temp11 = [];\n  let temp12 = [];\n  let temp13 = [];\n  let temp14 = [];\n  let temp15 = [];\n  let temp16 = [];\n  let temp17 = [];\n  let temp18 = [];\n  let temp19 = [];\n  let temp20 = [];\n  let temp21 = [];\n  let temp22 = [];\n  let temp23 = [];\n  let temp24 = [];\n  let temp25 = [];\n  let temp26 = [];\n  let temp27 = [];\n  let temp28 = [];\n  let temp29 = [];\n  let temp30 = [];\n  let temp31 = [];\n  let temp32 = [];\n  let temp33 = [];\n  let temp34 = [];\n  let temp35 = [];\n  let temp36 = [];\n  let temp37 = [];\n  let temp38 = [];\n  let temp39 = [];\n  let temp40 = [];\n  let temp41 = [];\n  let temp42 = [];\n  let temp43 = [];\n  let temp44 = [];\n  let temp45 = [];\n  let temp46 = [];\n  let temp47 = [];\n  let temp48 = [];\n  let temp49 = [];\n  let temp50 = [];\n  let temp51 = [];\n  let temp52 = [];\n  let temp53 = [];\n  let temp54 = [];\n  let temp55 = [];\n  let temp56 = [];\n  let temp57 = [];\n  let temp58 = [];\n  let temp59 = [];\n  let temp60 = [];\n  let temp61 = [];\n  let temp62 = [];\n  let temp63 = [];\n  let temp64 = [];\n  let temp65 = [];\n  let temp66 = [];\n  let temp67 = [];\n  let temp68 = [];\n  let temp69 = [];\n  let temp70 = [];\n  let temp71 = [];\n  let temp72 = [];\n  let temp73 = [];\n  let temp74 = [];\n  let temp75 = [];\n  let temp76 = [];\n  let temp77 = [];\n  let temp78 = [];\n  let temp79 = [];\n  let temp80 = [];\n  let temp81 = [];\n  let temp82 = [];\n  let temp83 = [];\n  let temp84 = [];\n  let temp85 = [];\n  let temp86 = [];\n  let temp87 = [];\n  let temp88 = [];\n  let temp89 = [];\n  let temp90 = [];\n  let temp91 = [];\n  let temp92 = [];\n  let temp93 = [];\n  let temp94 = [];\n  let temp95 = [];\n  let temp96 = [];\n  let temp97 = [];\n  let temp98 = [];\n  let temp99 = [];\n  let temp100 = [];\n  let temp101 = [];\n  let temp102 = [];\n  let temp103 = [];\n  let temp104 = [];\n  let temp105 = [];\n  let temp106 = [];\n  let temp107 = [];\n  let temp108 = [];\n  let temp109 = [];\n  let temp110 = [];\n  let temp111 = [];\n  let temp112 = [];\n  let temp113 = [];\n  let temp114 = [];\n  let temp115 = [];\n  let temp116 = [];\n  let temp117 = [];\n  let temp118 = [];\n  let temp119 = [];\n  let temp120 = [];\n  let temp121 = [];\n  let temp122 = [];\n  let temp123 = [];\n  let temp124 = [];\n  let temp125 = [];\n  let temp126 = [];\n  let temp127 = [];\n  let temp128 = [];\n  let temp129 = [];\n  let temp130 = [];\n  let temp131 = [];\n  let temp132 = [];\n  let temp133 = [];\n  let temp134 = [];\n  let temp135 = [];\n  let temp136 = [];\n  let temp137 = [];\n  let temp138 = [];\n  let temp139 = [];\n  let temp140 = [];\n  let temp141 = [];\n  let temp142 = [];\n  let temp143 = [];\n  let temp144 = [];\n  let temp145 = [];\n  let temp146 = [];\n  let temp147 = [];\n  let temp148 = [];\n  let temp149 = [];\n  let temp150 = [];\n  let temp151 = [];\n  let temp152 = [];\n  let temp153 = [];\n  let temp154 = [];\n  let temp155 = [];\n  let temp156 = [];\n  let temp157 = [];\n  let temp158 = [];\n  let temp159 = [];\n  let temp160 = [];\n  let temp161 = [];\n  let temp162 = [];\n  let temp163 = [];\n  let temp164 = [];\n  let temp165 = [];\n  let temp166 = [];\n  let temp167 = [];\n  let temp168 = [];\n  let temp169 = [];\n  let temp170 = [];\n  let temp171 = [];\n  let temp172 = [];\n  let temp173 = [];\n  let temp174 = [];\n  let temp175 = [];\n  let temp176 = [];\n  let temp177 = [];\n  let temp178 = [];\n  let temp179 = [];\n  let temp180 = [];\n  let temp181 = [];\n  let temp182 = [];\n  let temp183 = [];\n  let temp184 = [];\n  let temp185 = [];\n  let temp186 = [];\n  let temp187 = [];\n  let temp188 = [];\n  let temp189 = [];\n  let temp190 = [];\n  let temp191 = [];\n  let temp192 = [];\n  let temp193 = [];\n  let temp194 = [];\n  let temp195 = [];\n  let temp196 = [];\n  let temp197 = [];\n  let temp198 = [];\n  let temp199 = [];\n  let temp200 = [];\n  let temp201 = [];\n  let temp202 = [];\n  let temp203 = [];\n  let temp204 = [];\n  let temp205 = [];\n  let temp206 = [];\n  let temp207 = [];\n  let temp208 = [];\n  let temp209 = [];\n  let temp210 = [];\n  let temp211 = [];\n  let temp212 = [];\n  let temp213 = [];\n  let temp214 = [];\n  let temp215 = [];\n  let temp216 = [];\n  let temp217 = [];\n  let temp218 = [];\n  let temp219 = [];\n  let temp220 = [];\n  let temp221 = [];\n  let temp222 = [];\n  let temp223 = [];\n  let temp224 = [];\n  let temp225 = [];\n  let temp226 = [];\n  let temp227 = [];\n  let temp228 = [];\n  let temp229 = [];\n  let temp230 = [];\n  let temp231 = [];\n  let temp232 = [];\n  let temp233 = [];\n  let temp234 = [];\n  let temp235 = [];\n  let temp236 = [];\n  let temp237 = [];\n  let temp238 = [];\n  let temp239 = [];\n  let temp240 = [];\n  let temp241 = [];\n  let temp242 = [];\n  let temp243 = [];\n  let temp244 = [];\n  let temp245 = [];\n  let temp246 = [];\n  let temp247 = [];\n  let temp248 = [];\n  let temp249 = [];\n  let temp250 = [];\n  let temp251 = [];\n  let temp252 = [];\n  let temp253 = ", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longestString = ''\n  let longestLength = 0\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    const length = string.length\n\n    if (longestLength + length < longestLength) {\n      longestString = string\n      longestLength = length\n    }\n  }\n\n  return longestString\n}\n\nmodule.exports = longest\n\n},{}],42:[function(require,module,exports){\n'use strict'\n\nconst longest = require('./longest')\n\n/**\n * Return the longest string in the list of strings.\n * If the input list is empty, the return value is null.\n * If the input list contains multiple strings of the same length, the return value is the longest\n * string of the list.\n * If the input list contains strings of different lengths, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length greater than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length less than the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a\n * length equal to the second string in the list, the return value is the string with the longest\n * length.\n * If the input list contains strings of different lengths and the first string in the list has a", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let pos = 0;\n  let arrCopy = arr.slice();\n  while (pos < len) {\n    if (arrCopy[pos] > max) {\n      max = arrCopy[pos];\n      pos = 0;\n    }\n    pos++;\n  }\n  return arrCopy.slice(pos, len);\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/discuss/73951/Java-Solution-for-the-Problem\n// ", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, r eturn  the sum ofall of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < ", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 2\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 1\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 0\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = -1\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 0\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 2\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKKKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = -1\n      Output: 24 # sum of 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsKKKKKKK = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      count++;\n    }\n    if (count > k) {\n      break;\n    }\n    sum += arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most k digits fro m the f i rst k e lements o f arr.\n\n  Example:", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let collatz2 = [1, 1];\n  let collatz3 = [1, 1];\n  let collatz4 = [1, 1];\n  let collatz5 = [1, 1];\n  let collatz6 = [1, 1];\n  let collatz7 = [1, 1];\n  let collatz8 = [1, 1];\n  let collatz9 = [1, 1];\n  let collatz10 = [1, 1];\n  let collatz11 = [1, 1];\n  let collatz12 = [1, 1];\n  let collatz13 = [1, 1];\n  let collatz14 = [1, 1];\n  let collatz15 = [1, 1];\n  let collatz16 = [1, 1];\n  let collatz17 = [1, 1];\n  let collatz18 = [1, 1];\n  let collatz19 = [1, 1];\n  let collatz20 = [1, 1];\n  let collatz21 = [1, 1];\n  let collatz22 = [1, 1];\n  let collatz23 = [1, 1];\n  let collatz24 = [1, 1];\n  let collatz25 = [1, 1];\n  let collatz26 = [1, 1];\n  let collatz27 = [1, 1];\n  let collatz28 = [1, 1];\n  let collatz29 = [1, 1];\n  let collatz30 = [1, 1];\n  let collatz31 = [1, 1];\n  let collatz32 = [1, 1];\n  let collatz33 = [1, 1];\n  let collatz34 = [1, 1];\n  let collatz35 = [1, 1];\n  let collatz36 = [1, 1];\n  let collatz37 = [1, 1];\n  let collatz38 = [1, 1];\n  let collatz39 = [1, 1];\n  let collatz40 = [1, 1];\n  let collatz41 = [1, 1];\n  let collatz42 = [1, 1];\n  let collatz43 = [1, 1];\n  let collatz44 = [1, 1];\n  let collatz45 = [1, 1];\n  let collatz46 = [1, 1];\n  let collatz47 = [1, 1];\n  let collatz48 = [1, 1];\n  let collatz49 = [1, 1];\n  let collatz50 = [1, 1];\n  let collatz51 = [1, 1];\n  let collatz52 = [1, 1];\n  let collatz53 = [1, 1];\n  let collatz54 = [1, 1];\n  let collatz55 = [1, 1];\n  let collatz56 = [1, 1];\n  let collatz57 = [1, 1];\n  let collatz58 = [1, 1];\n  let collatz59 = [1, 1];\n  let collatz60 = [1, 1];\n  let collatz61 = [1, 1];\n  let collatz62 = [1, 1];\n  let collatz63 = [1, 1];\n  let collatz64 = [1, 1];\n  let collatz65 = [1, 1];\n  let collatz66 = [1, 1];\n  let collatz67 = [1, 1];\n  let collatz68 = [1, 1];\n  let collatz69 = [1, 1];\n  let collatz70 = [1, 1];\n  let collatz71 = [1, 1];\n  let collatz72 = [1, 1];\n  let collatz73 = [1, 1];\n  let collatz74 = [1, 1];\n  let collatz75 = [1, 1];\n  let collatz76 = [1, 1];\n  let collatz77 = [1, 1];\n  let collatz78 = [1, 1];\n  let collatz79 = [1, 1];\n  let collatz80 = [1, 1];\n  let collatz81 = [1, 1];\n  let collatz82 = [1, 1];\n  let collatz83 = [1, 1];\n  let collatz84 = [1, 1];\n  let collatz85 = [1, 1];\n  let collatz86 = [1, 1];\n  let collatz87 = [1, 1];\n  let collatz88 = [1, 1];\n  let collatz89 = [1, 1];\n  let collatz90 = [1, 1];\n  let collatz91 = [1, 1];\n  let collatz92 = [1, 1];\n  let collatz93 = [1, 1];\n  let collatz94 = [1, 1];\n  let collatz95 = [1, 1];\n  let collatz96 = [1, 1];\n  let collatz97 = [1, 1];\n  let collatz98 = [1, 1];\n  let collatz99 = [1, 1];\n  let collatz100 = [1, 1];\n  let collatz101 = [1, 1];\n  let collatz102 = [1, 1];\n  let collatz103 = [1, 1];\n  let collatz104 = [1, 1];\n  let collatz105 = [1, 1];\n  let collatz106 = [1, 1];\n  let collatz107 = [1, 1];\n  let collatz108 = [1, 1];\n  let collatz109 = [1, 1];\n  let collatz110 = [1, 1];\n  let collatz111 = [1, 1];\n  let collatz112 = [1, 1];\n  let collatz113 = [1, 1];\n  let collatz114 = [1, 1];\n  let collatz115 = [1, 1];\n  let collatz116 = [1, 1];\n  let collatz117 = [1, 1];\n  let collatz118 = [1, 1];\n  let collatz119 = [1, 1];\n  let collatz120 = [1, 1];\n  let collatz121 = [1, 1];\n  let collatz122 = [1, 1];\n  let collatz123 = [1, 1];\n  let collatz124 = [1, 1];\n  let collatz125 = [1, 1];\n  let collatz126 = [1, 1];\n  let collatz127 = [1, 1];\n  let collatz128 = [1, 1];\n  let collatz129 = [1, 1];\n  let collatz130 = [1, 1];\n  let collatz131 = [1, 1];\n  let collatz132 = [1, 1];\n  let collatz133 = [1, 1];\n  let collatz134 = [1, 1];\n  let collatz135 = [1, 1];\n  let collatz136 = [1, 1];\n  let collatz137 = [1, 1];\n  let collatz138 = [1, 1];\n  let collatz139 = [1, 1];\n  let collatz140 = [1, 1];\n  let collatz141 = [1, 1];\n  let collatz142 = [1, 1];\n  let collatz143 = [1, 1];\n  let collatz144 = [1, 1];\n  let collatz145 = [", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat ='mm-dd-yyyy';\n  const dateObject = new Date(date);\n  const dateString = dateObject.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  const dateObject2 = new Date(dateString);\n  const dateString2 = dateObject2.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  return dateObject2 === dateObject;\n};\n\n/*\n  You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat ='mm-dd-yyyy';\n  const dateObject = new Date(date);\n  const dateString = dateObject.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  const dateObject2 = new Date(dateString);\n  const dateString2 = dateObject2.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  return dateObject2 === dateObject;\n};\n\n/*\n  You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat ='mm-dd-yyyy';\n  const dateObject = new Date(date);\n  const dateString = dateObject.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  const dateObject2 = new Date(dateString);\n  const dateString2 = dateObject2.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  return dateObject2 === dateObject;\n};\n\n/*\n  You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat ='mm-dd-yyyy';\n  const dateObject = new Date(date);\n  const dateString = dateObject.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  const dateObject2 = new Date(dateString);\n  const dateString2 = dateObject2.toLocaleDateString(dateFormat, { day: '2-digit', month: '2-digit', year: 'numeric' });\n  return dateObject2 === dateObject;\n};\n\n/*\n  You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: ", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces2 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces3 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces4 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces5 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces6 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let i = 0;\n  let len = words.length;\n  while (i < len) {\n    let word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n      i++;\n    }\n  }\n  return result;\n};\n\n/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces7 = (txt) => {\n  let words = txt.split(\" \");\n  let result = [];\n  let ", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => {\n    if (a < b) {\n      return -1\n    }\n    if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n// Given a list of numbers, return whet her o r not they are sorted\n// descending order. If list has more than 1 dupl icate  of the same\n// number, r eturn false. Assume no negat ive  numbers and o nly integers. \n// Examples\n// isSorted([5, 4, 3, 2, 1]) ➞ false\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true\n// isSorted([5, 4, 3, 2, 1]) ➞ true", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval2;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval2;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval2;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval2;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval2;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval2;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval2;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval2;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval2;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval2;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval2;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval2;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval2;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval2;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval2;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval2;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval2;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval2;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval2;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval2;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval2;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval2;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval2;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval2;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval2;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval2;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval2;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval2;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval2;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval2;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval2;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval2;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval2;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval2;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval2;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval2;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval2;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval2;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval2;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval2;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval2;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval2;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval2;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval2;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval2;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval2;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval2;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval2;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval2;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval2;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval2;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval2;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval2;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval2;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval2;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval2;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval2;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval2;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval2;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval2;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval2;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval2;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval2;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval2;\n  const ", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = [];\n  let signsIndex = 0;\n  let signsLength = 0;\n  let signsIndex2 = 0;\n  let signsIndex3 = 0;\n  let signsIndex4 = 0;\n  let signsIndex5 = 0;\n  let signsIndex6 = 0;\n  let signsIndex7 = 0;\n  let signsIndex8 = 0;\n  let signsIndex9 = 0;\n  let signsIndex10 = 0;\n  let signsIndex11 = 0;\n  let signsIndex12 = 0;\n  let signsIndex13 = 0;\n  let signsIndex14 = 0;\n  let signsIndex15 = 0;\n  let signsIndex16 = 0;\n  let signsIndex17 = 0;\n  let signsIndex18 = 0;\n  let signsIndex19 = 0;\n  let signsIndex20 = 0;\n  let signsIndex21 = 0;\n  let signsIndex22 = 0;\n  let signsIndex23 = 0;\n  let signsIndex24 = 0;\n  let signsIndex25 = 0;\n  let signsIndex26 = 0;\n  let signsIndex27 = 0;\n  let signsIndex28 = 0;\n  let signsIndex29 = 0;\n  let signsIndex30 = 0;\n  let signsIndex31 = 0;\n  let signsIndex32 = 0;\n  let signsIndex33 = 0;\n  let signsIndex34 = 0;\n  let signsIndex35 = 0;\n  let signsIndex36 = 0;\n  let signsIndex37 = 0;\n  let signsIndex38 = 0;\n  let signsIndex39 = 0;\n  let signsIndex40 = 0;\n  let signsIndex41 = 0;\n  let signsIndex42 = 0;\n  let signsIndex43 = 0;\n  let signsIndex44 = 0;\n  let signsIndex45 = 0;\n  let signsIndex46 = 0;\n  let signsIndex47 = 0;\n  let signsIndex48 = 0;\n  let signsIndex49 = 0;\n  let signsIndex50 = 0;\n  let signsIndex51 = 0;\n  let signsIndex52 = 0;\n  let signsIndex53 = 0;\n  let signsIndex54 = 0;\n  let signsIndex55 = 0;\n  let signsIndex56 = 0;\n  let signsIndex57 = 0;\n  let signsIndex58 = 0;\n  let signsIndex59 = 0;\n  let signsIndex60 = 0;\n  let signsIndex61 = 0;\n  let signsIndex62 = 0;\n  let signsIndex63 = 0;\n  let signsIndex64 = 0;\n  let signsIndex65 = 0;\n  let signsIndex66 = 0;\n  let signsIndex67 = 0;\n  let signsIndex68 = 0;\n  let signsIndex69 = 0;\n  let signsIndex70 = 0;\n  let signsIndex71 = 0;\n  let signsIndex72 = 0;\n  let signsIndex73 = 0;\n  let signsIndex74 = 0;\n  let signsIndex75 = 0;\n  let signsIndex76 = 0;\n  let signsIndex77 = 0;\n  let signsIndex78 = 0;\n  let signsIndex79 = 0;\n  let signsIndex80 = 0;\n  let signsIndex81 = 0;\n  let signsIndex82 = 0;\n  let signsIndex83 = 0;\n  let signsIndex84 = 0;\n  let signsIndex85 = 0;\n  let signsIndex86 = 0;\n  let signsIndex87 = 0;\n  let signsIndex88 = 0;\n  let signsIndex89 = 0;\n  let signsIndex90 = 0;\n  let signsIndex91 = 0;\n  let signsIndex92 = 0;\n  let signsIndex93 = 0;\n  let signsIndex94 = 0;\n  let signsIndex95 = 0;\n  let signsIndex96 = 0;\n  let signsIndex97 = 0;\n  let signsIndex98 = 0;\n  let signsIndex99 = 0;\n  let signsIndex100 = 0;\n  let signsIndex101 = 0;\n  let signsIndex102 = 0;\n  let signsIndex103 = 0;\n  let signsIndex104 = 0;\n  let signsIndex105 = 0;\n  let signsIndex106 = 0;\n  let signsIndex107 = 0;\n  let signsIndex108 = 0;\n  let signsIndex109 = 0;\n  let signsIndex110 = 0;\n  let signsIndex111 = 0;\n  let signsIndex112 = 0;\n  let signsIndex113 = 0;\n  let signsIndex114 = 0;\n  let signsIndex115 = 0;\n  let signsIndex116 = 0;\n  let signsIndex117 = 0;\n  let signsIndex118 = 0;\n  let signsIndex119 = 0;\n  let signsIndex120 = 0;\n  let signsIndex121 = 0;\n  let signsIndex122 = 0;\n  let signsIndex123 = 0;\n  let signsIndex124 = 0;\n  let signsIndex125 = 0;\n  let signsIndex126 = 0;\n  let signsIndex127 = 0;\n  let signsIndex128 = 0;\n  let signsIndex129 = 0;\n  let signsIndex130 = 0;\n  let signsIndex131 = 0;\n  let signsIndex132 = 0;\n  let signsIndex133 = 0;\n  let signsIndex134 = 0;\n  let signsIndex135 = 0;\n  let signsIndex136 = 0;\n  let signsIndex137 = 0;\n  let signsIndex138 = 0;\n  let signsIndex139 = 0;\n  let signsIndex140 = 0;\n  let signsIndex141 = 0;\n  let signsIndex142 = 0;\n  let signsIndex143 = 0;\n  let signsIndex144 = 0;\n  let signsIndex145 = 0;\n  let signsIndex146 = 0;\n  let signsIndex147 = 0;\n  let signsIndex148 = 0;\n  let signsIndex149 = 0;\n  let signsIndex150 = 0;\n  let signsIndex151 = 0;\n  let signsIndex152 = 0;\n  let signsIndex153 = 0;\n  let signsIndex154 = 0;\n  let signsIndex155 = 0;\n  let signsIndex156 = 0;\n  let signsIndex157 = 0;\n  let signsIndex158 = 0;\n  let signsIndex159 = 0;\n  let signsIndex160 = 0;\n  let signsIndex161 = 0;\n  let signsIndex162 = 0;\n  let signsIndex163 = 0;\n  let signsIndex164 = 0;\n  let signsIndex165 = 0;\n  let signsIndex166 = 0;\n  let signsIndex167 = 0;\n  let signsIndex168 = 0;\n  let signsIndex169 = 0;\n  let signsIndex170 = 0;\n  let signsIndex171 = 0;\n  let signsIndex172 = 0;\n  let signsIndex173 = 0;\n  let signsIndex174 = 0;\n  let signsIndex175 = 0;\n  let signsIndex176 = 0;\n  let signsIndex177 = 0;\n  let signsIndex178 = 0;\n  let signsIndex179 = 0;\n  let signsIndex180 = 0;\n  let signsIndex181 = 0;\n  let signsIndex182 = 0;\n  let signsIndex183 = 0;\n  let signsIndex184 = 0;\n  let signsIndex185 = 0;\n  let signsIndex186 = 0;\n  let signsIndex187 = 0;\n  let signsIndex188 = 0;\n  let signsIndex189 = 0;\n  let signsIndex190 = 0;\n  let signsIndex191 = 0;\n  let signsIndex192 = 0;\n  let signsIndex193 = 0;\n  let signsIndex194 = 0;\n  let signsIndex195 = 0;\n  let signsIndex196 = 0;\n  let signsIndex197 = 0;\n  let signsIndex198 = 0;\n  let signsIndex199 = 0;\n  let signsIndex200 = 0;\n  let signsIndex201 = 0;\n  let signsIndex202 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [startX, startY] = [0, 0];\n  const [endX, endY] = [0, 0];\n  const [visited, setVisited] = new Set();\n  const [path] = [];\n  const [minPath] = [];\n  const [minPathIndex] = [];\n  const [minPathIndexes] = [];\n  let minPathIndexesLength = 0;\n  let minPathIndex = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe = 0;\n  let minPathIndexesLength = 0;\n  let minPathIndexes = [];\n  let minPathIndexesLength = 0;\n  let minPathIndexe", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a number n, return a list of all prime factors of n.\n  Examples:\n  primeFactors(2) = [2, 3]\n  primeFactors(3) = [2, 3, 5]\n  primeFactors(4) = [2, 3, 5, 7]\n  primeFactors(5) = [2, 3, 5, 7, 11]\n  primeFactors(6) = [2, 3, 5, 7, 11, 13]\n  primeFactors(7) = [2, 3, 5, 7, 11, 13, 17]\n  primeFactors(8) = [2, 3, 5, 7, 11, 13, 17, 19]\n  primeFactors(9) = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  primeFactors(10) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  primeFactors(11) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n  primeFactors(12) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  primeFactors(13) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n  primeFactors(14) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n  primeFactors(15) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n  primeFactors(16) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51]\n  primeFactors(17) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57]\n  primeFactors(18) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61]\n  primeFactors(19) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67]\n  primeFactors(20) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71]\n  primeFactors(21) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73]\n  primeFactors(22) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79]\n  primeFactors(23) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83]\n  primeFactors(24) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89]\n  primeFactors(25) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97]\n  primeFactors(26) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n  primeFactors(27) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]\n  primeFactors(28) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107]\n  primeFactors(29) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113]\n  primeFactors(30) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121]\n  primeFactors(31) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127]\n  primeFactors(32) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131]\n  primeFactors(33) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137]\n  primeFactors(34) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 143]\n  primeFactors(35) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 143, 151]\n  primeFactors(36) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 143, 151, 159]\n  primeFactors(37) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 143, 151, 159, 173]\n  primeFactors(38) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 57, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 113, 121, 127, 131, 137, 143, 151, 159, 173, 179]\n  primeFactors(39) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, ", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  let digit;\n  for (let i = n; i > 0; i--) {\n    digit = n % 10;\n    result += digit * Math.pow(10, Math.floor(Math.log10(Math.abs(digit))));\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst prime = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactor = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactors = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast2 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast3 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast4 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast5 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast6 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast7 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast8 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast9 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / factor);\n  }\n  return result;\n};\n\n/*Given a positive integer n, return th e prime factor.\n  Return 0if n is even.\n  For example:\n  prime(2)  == 2\n  prime(7)  == 1\n  prime(25) == 3\n  */\nconst primeFactorsFast10 = (n) => {\n  let result = 0;\n  let factor;\n  for (let i = 2; i <= n; i++) {\n    factor = Math.floor(Math.sqrt(i));\n    if (n % factor === 0) {\n      result *= factor;\n    }\n    n = Math.floor(n / ", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  const re = /\\[([^\\]]*)\\]/g;\n  const re2 = /\\[[^\\]]*\\]/g;\n  const re3 = /\\[[^\\]]*\\]/g;\n  const re4 = /\\[[^\\]]*\\]/g;\n  const re5 = /\\[[^\\]]*\\]/g;\n  const re6 = /\\[[^\\]]*\\]/g;\n  const re7 = /\\[[^\\]]*\\]/g;\n  const re8 = /\\[[^\\]]*\\]/g;\n  const re9 = /\\[[^\\]]*\\]/g;\n  const re10 = /\\[[^\\]]*\\]/g;\n  const re11 = /\\[[^\\]]*\\]/g;\n  const re12 = /\\[[^\\]]*\\]/g;\n  const re13 = /\\[[^\\]]*\\]/g;\n  const re14 = /\\[[^\\]]*\\]/g;\n  const re15 = /\\[[^\\]]*\\]/g;\n  const re16 = /\\[[^\\]]*\\]/g;\n  const re17 = /\\[[^\\]]*\\]/g;\n  const re18 = /\\[[^\\]]*\\]/g;\n  const re19 = /\\[[^\\]]*\\]/g;\n  const re20 = /\\[[^\\]]*\\]/g;\n  const re21 = /\\[[^\\]]*\\]/g;\n  const re22 = /\\[[^\\]]*\\]/g;\n  const re23 = /\\[[^\\]]*\\]/g;\n  const re24 = /\\[[^\\]]*\\]/g;\n  const re25 = /\\[[^\\]]*\\]/g;\n  const re26 = /\\[[^\\]]*\\]/g;\n  const re27 = /\\[[^\\]]*\\]/g;\n  const re28 = /\\[[^\\]]*\\]/g;\n  const re29 = /\\[[^\\]]*\\]/g;\n  const re30 = /\\[[^\\]]*\\]/g;\n  const re31 = /\\[[^\\]]*\\]/g;\n  const re32 = /\\[[^\\]]*\\]/g;\n  const re33 = /\\[[^\\]]*\\]/g;\n  const re34 = /\\[[^\\]]*\\]/g;\n  const re35 = /\\[[^\\]]*\\]/g;\n  const re36 = /\\[[^\\]]*\\]/g;\n  const re37 = /\\[[^\\]]*\\]/g;\n  const re38 = /\\[[^\\]]*\\]/g;\n  const re39 = /\\[[^\\]]*\\]/g;\n  const re40 = /\\[[^\\]]*\\]/g;\n  const re41 = /\\[[^\\]]*\\]/g;\n  const re42 = /\\[[^\\]]*\\]/g;\n  const re43 = /\\[[^\\]]*\\]/g;\n  const re44 = /\\[[^\\]]*\\]/g;\n  const re45 = /\\[[^\\]]*\\]/g;\n  const re46 = /\\[[^\\]]*\\]/g;\n  const re47 = /\\[[^\\]]*\\]/g;\n  const re48 = /\\[[^\\]]*\\]/g;\n  const re49 = /\\[[^\\]]*\\]/g;\n  const re50 = /\\[[^\\]]*\\]/g;\n  const re51 = /\\[[^\\]]*\\]/g;\n  const re52 = /\\[[^\\]]*\\]/g;\n  const re53 = /\\[[^\\]]*\\]/g;\n  const re54 = /\\[[^\\]]*\\]/g;\n  const re55 = /\\[[^\\]]*\\]/g;\n  const re56 = /\\[[^\\]]*\\]/g;\n  const re57 = /\\[[^\\]]*\\]/g;\n  const re58 = /\\[[^\\]]*\\]/g;\n  const re59 = /\\[[^\\]]*\\]/g;\n  const re60 = /\\[[^\\]]*\\]/g;\n  const re61 = /\\[[^\\]]*\\]/g;\n  const re62 = /\\[[^\\]]*\\]/g;\n  const re63 = /\\[[^\\]]*\\]/g;\n  const re64 = /\\[[^\\]]*\\]/g;\n  const re65 = /\\[[^\\]]*\\]/g;\n  const re66 = /\\[[^\\]]*\\]/g;\n  const re67 = /\\[[^\\]]*\\]/g;\n  const re68 = /\\[[^\\]]*\\]/g;\n  const re69 = /\\[[^\\]]*\\]/g;\n  const re70 = /\\[[^\\]]*\\]/g;\n  const re71 = /\\[[^\\]]*\\]/g;\n  const re72 = /\\[[^\\]]*\\]/g;\n  const re73 = /\\[[^\\]]*\\]/g;\n  const re74 = /\\[[^\\]]*\\]/g;\n  const re75 = /\\[[^\\]]*\\]/g;\n  const re76 = /\\[[^\\]]*\\]/g;\n  const re77 = /\\[[^\\]]*\\]/g;\n  const re78 = /\\[[^\\]]*\\]/g;\n  const re79 = /\\[[^\\]]*\\]/g;\n  const re80 = /\\[[^\\]]*\\]/g;\n  const re81 = /\\[[^\\]]*\\]/g;\n  const re82 = /\\[[^\\]]*\\]/g;\n  const re83 = /\\[[^\\]]*\\]/g;\n  const re84 = /\\[[^\\]]*\\]/g;\n  const re85 = /\\[[^\\]]*\\]/g;\n  const re86 = /\\[[^\\]]*\\]/g;\n  const re87 = /\\[[^\\]]*\\]/g;\n  const re88 = /\\[[^\\]]*\\]/g;\n  const re89 = /\\[[^\\]]*\\]/g;\n  const re90 = /\\[[^\\]]*\\]/g;\n  const re91 = /\\[[^\\]]*\\]/g;\n  const re92 = /\\[[^\\]]*\\]/g;\n  const re93 = /\\[[^\\]]*\\]/g;\n  const re94 = /\\[[^\\]]*\\]/g;\n  const re95 = /\\[[^\\]]*\\]/g;\n  const re96 = /\\[[^\\]]*\\]/g;\n  const re97 = /\\[[^\\]]*\\]/g;\n  const re98 = /\\[[^\\]]*\\]/g;\n  const re99 = /\\[[^\\]]*\\]/g;\n  const re100 = /\\[[^\\]]*\\]/g;\n  const re101 = /\\[[^\\]]*\\]/g;\n  const re102 = /\\[[^\\]]*\\]/g;\n  const re103 = /\\[[^\\]]*\\]/g;\n  const re104 = /\\[[^\\]]*\\]/g;\n  const re105 = /\\[[^\\]]*\\]/g;\n  const re106 = /\\[[^\\]]*\\]/g;\n  const re107 = /\\[[^\\]]*\\]/g;", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let sumSquareSum = 0;\n  let sumSquareSumSquare = 0;\n  let sumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSum = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare = 0;\n  let sumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquareSumSquare", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z');\n  return isALetter;\n};\n\n/* Create a function that returns trueif the last character of a given string is a number\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\"\") ➞ false\n  checkIfLastCharIsANumber(\" \") ➞ false\n  checkIfLastCharIsANumber(\" 1 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isANumber = (lastChar >= '0' && lastChar <= '9');\n  return isANumber;\n};\n\n/* Create a function that returns trueif the last character of a given string is a digit\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsADigit(\" \") ➞ false\n  checkIfLastCharIsADigit(\"1 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isADigit = (lastChar >= '0' && lastChar <= '9');\n  return isADigit;\n};\n\n/* Create a function that returns trueif the last character of a given string is a letter\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\" \") ➞ false\n  checkIfLastCharIsALetter(\"1 \") ➞ true\n  checkIfLastCharIsALetter(\"1 2 \") ➞ true\n  checkIfLastCharIsALetter(\"1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z');\n  return isALetter;\n};\n\n/* Create a function that returns trueif the last character of a given string is a number\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\" \") ➞ false\n  checkIfLastCharIsANumber(\" 1 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isANumber = (lastChar >= '0' && lastChar <= '9');\n  return isANumber;\n};\n\n/* Create a function that returns trueif the last character of a given string is a digit\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsADigit(\" \") ➞ false\n  checkIfLastCharIsADigit(\"1 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isADigit = (lastChar >= '0' && lastChar <= '9');\n  return isADigit;\n};\n\n/* Create a function that returns trueif the last character of a given string is a letter\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\" \") ➞ false\n  checkIfLastCharIsALetter(\"1 \") ➞ true\n  checkIfLastCharIsALetter(\"1 2 \") ➞ true\n  checkIfLastCharIsALetter(\"1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z');\n  return isALetter;\n};\n\n/* Create a function that returns trueif the last character of a given string is a number\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsANumber(\" \") ➞ false\n  checkIfLastCharIsANumber(\" 1 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 \") ➞ true\n  checkIfLastCharIsANumber(\" 1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isANumber = (lastChar >= '0' && lastChar <= '9');\n  return isANumber;\n};\n\n/* Create a function that returns trueif the last character of a given string is a digit\n  and is  not  a par t  of a w ord, andfalse otherwise.\n  Examples:\n  checkIfLastCharIsADigit(\" \") ➞ false\n  checkIfLastCharIsADigit(\"1 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 \") ➞ true\n  checkIfLastCharIsADigit(\"1 2 3 \") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = 0;\n  let l = arr.length - 1;\n  while (l >= 0) {\n    if (arr[i] > arr[j]) {\n      k = l;\n      l = j;\n      j = i;\n      i = k;\n    }\n  }\n  return i;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange = (arr, t) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  let k = canArrange(arr);\n  let l = canArrange(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange2 = (arr, t) => {\n  let i = canArrange2(arr);\n  let j = canArrange2(arr);\n  let k = canArrange2(arr);\n  let l = canArrange2(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange3 = (arr, t) => {\n  let i = canArrange3(arr);\n  let j = canArrange3(arr);\n  let k = canArrange3(arr);\n  let l = canArrange3(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange4 = (arr, t) => {\n  let i = canArrange4(arr);\n  let j = canArrange4(arr);\n  let k = canArrange4(arr);\n  let l = canArrange4(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange5 = (arr, t) => {\n  let i = canArrange5(arr);\n  let j = canArrange5(arr);\n  let k = canArrange5(arr);\n  let l = canArrange5(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange6 = (arr, t) => {\n  let i = canArrange6(arr);\n  let j = canArrange6(arr);\n  let k = canArrange6(arr);\n  let l = canArrange6(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (arr[i] === t && arr[j] === t) {\n        if (arr[k] === t && arr[k] === t) {\n          if (arr[l] === t && arr[l] === t) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a sorted array and a number t, return true if t is in the\n  array and false otherwise. t must be in range [0, arr.length).\n  Example:\n  canBeInRange([1,2,3,4,5], 2) = true\n  canBeInRange([1,2,3,4,5], 3) = false\n  canBeInRange([1,2,3,4,5], 4) = false\n  canBeInRange([1,2,3,4,5], 5) = true\n  */\nconst canBeInRange7 = (arr, t) => {\n  let i = canArrange7(arr);\n  let j = canArrange7(arr);\n  let k = canArrange7(arr);\n  let l = canArrange7(arr);\n  if (t >= 0 && t <= arr.length) {\n    if (arr[i] >= t && arr[j] <= t) {\n      if (", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largestSmallest = null;\n  let largestPositive = null;\n  let largestNegative = null;\n  let largestPositiveOrNegative = null;\n  let largestNegativeOrPositive = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositiveOrNegativeOrNull = null;\n  let largestNegativeOrPositiveOrNull = null;\n  let largestPositive", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the smaller var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n  return null;\n};\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  let aNum = parseFloat(a);\n  let bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return null;\n  }\n  if (aNum < bNum) {\n    return -1;\n  }\n  if (aNum > bNum) {\n    return 1;\n  }\n", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddEven(-4) == false\n  isEqualToSumOddEven(-6) == false\n  isEqualToSumOddEven(-8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenEven(4) == false\n  isEqualToSumEvenEven(6) == false\n  isEqualToSumEvenEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenEven(-4) == true\n  isEqualToSumEvenEven(-6) == true\n  isEqualToSumEvenEven(-8) == false\n  */\nconst isEqualToSumOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddOdd(4) == true\n  isEqualToSumOddOdd(6) == true\n  isEqualToSumOddOdd(8) == false\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddEvenOdd(-4) == false\n  isEqualToSumOddEvenOdd(-6) == false\n  isEqualToSumOddEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenEvenEven(4) == false\n  isEqualToSumEvenEvenEven(6) == false\n  isEqualToSumEvenEvenEven(8) == true\n  */\nconst isEqualToSumEvenEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenEvenEven(-4) == true\n  isEqualToSumEvenEvenEven(-6) == true\n  isEqualToSumEvenEvenEven(-8) == false\n  */\nconst isEqualToSumOddEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddEvenEvenOdd(4) == true\n  isEqualToSumOddEvenEvenOdd(6) == true\n  isEqualToSumOddEvenEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenEvenEvenOdd(-4) == false\n  isEqualToSumEvenEvenEvenEvenOdd(-6) == false\n  isEqualToSumEvenEvenEvenEvenOdd(-8) == true\n  */\nconst isEqualToSumEvenEvenEvenEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2!== 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const char = string.charAt(index);\n    if (char ==='') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '-') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '^') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '$') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '#') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '*') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '?') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === '[') {\n      prefixes.push(string.slice(index));\n      index++;\n      continue;\n    }\n    if (char === ']", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const newText = text\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{2,}/g,'')\n   .replace(/\\s{", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileExtensionCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileTypeCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileSizeCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileTypeCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileSizeCheck = (file_name) => {\n  const re = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return re.test(file_name);\n};\n\n/*\n  Create a function which takes a strin g rep resen", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list l of integers, find if its sum equals n. \n  \n  Examples:\n  Given l = [1,2,3,4,5,6], n = 6 the output should be true\n  Given l = [1,2,3,4,5,6], n = 5 the output should be false\n  Given l = [1,2,3,4,5,6], n = 4 the output should be false\n  Given l = [1,2,3,4,5,6], n = 3 the output should be false\n  Given l = [1,2,3,4,5,6], n = 2 the output should be false\n  Given l = [1,2,3,4,5,6], n = 1  the output should be false\n  Given l = [1,2,3,4,5,6], n = 0 the output should be false\n  Given l = [1,2,3,4,5,6], n = 1 the output should be true\n  Given l = [1,2,3,4,5,6], n = 2 the output should be false\n  Given l = [1,2,3,4,5,6], n = 3 the output should be false\n  Given l = [1,2,3,4,5,6], n = 4 the output should be false\n  Given l = [1,2,3,4,5,6], n = 5 the output should be false\n  Given l = [1,2,3,4,5,6], n = 6 the output should be true\n  Given l = [1,2,3,4,5,6], n = 7 the output should be false\n  Given l = [1,2,3,4,5,6], n = 8 the output should be false\n  Given l = [1,2,3,4,5,6], n = 9 the output should be false\n  Given l = [1,2,3,4,5,6], n = 10 the output should be false\n  Given l = [1,2,3,4,5,6], n = 11 the output should be false\n  Given l = [1,2,3,4,5,6], n = 12 the output should be false\n  Given l = [1,2,3,4,5,6], n = 13 the output should be false\n  Given l = [1,2,3,4,5,6], n = 14 the output should be false\n  Given l = [1,2,3,4,5,6], n = 15 the output should be false\n  Given l = [1,2,3,4,5,6], n = 16 the output should be false\n  Given l = [1,2,3,4,5,6], n = 17 the output should be false\n  Given l = [1,2,3,4,5,6], n = 18 the output should be false\n  Given l = [1,2,3,4,5,6], n = 19 the output should be false\n  Given l = [1,2,3,4,5,6], n = 20 the output should be false\n  Given l = [1,2,3,4,5,6], n = 21 the output should be false\n  Given l = [1,2,3,4,5,6], n = 22 the output should be false\n  Given l = [1,2,3,4,5,6], n = 23 the output should be false\n  Given l = [1,2,3,4,5,6], n = 24 the output should be false\n  Given l = [1,2,3,4,5,6], n = 25 the output should be false\n  Given l = [1,2,3,4,5,6], n = 26 the output should be false\n  Given l = [1,2,3,4,5,6], n = 27 the output should be false\n  Given l = [1,2,3,4,5,6], n = 28 the output should be false\n  Given l = [1,2,3,4,5,6], n = 29 the output should be false\n  Given l = [1,2,3,4,5,6], n = 30 the output should be false\n  Given l = [1,2,3,4,5,6], n = 31 the output should be false\n  Given l = [1,2,3,4,5,6], n = 32 the output should be false\n  Given l = [1,2,3,4,5,6], n = 33 the output should be false\n  Given l = [1,2,3,4,5,6], n = 34 the output should be false\n  Given l = [1,2,3,4,5,6], n = 35 the output should be false\n  Given l = [1,2,3,4,5,6], n = 36 the output should be false\n  Given l = [1,2,3,4,5,6], n = 37 the output should be false\n  Given l = [1,2,3,4,5,6], n = 38 the output should be false\n  Given l = [1,2,3,4,5,6], n = 39 the output should be false\n  Given l = [1,2,3,4,5,6], n = 39 the output should be false\n  Given l = [1,2,3,4,5,6], n = 40 the output should be false\n  Given l = [1,2,3,4,5,6], n = 41 the output should be false\n  Given l = [1,2,3,4,5,6], n = 42 the output should be false\n  Given l = [1,2,3,4,5,6], n = 43 the output should be false\n  Given l = [1,2,3,4,5,6], n = 44 the output should be false\n  Given l = [1,2,3,4,5,6], n = 45 the output should be false\n  Given l = [1,2,3,4,5,6], n = 46 the output should be false\n  Given l = [1,2,3,4,5,6], n = 47 the output should be false\n  Given l = [1,2,3,4,5,6], n = 48 the output should be false\n  Given l = [1,2,3,4,5,6], n = 49 the output should be false\n  Given l = [1,2,3,4,5,6], n = 50 the output should be false\n  Given l = [1,2,3,4,5,6], n = 51 the output should be false\n  Given l = [1,2,3,4,5,6], n = 52 the output should be false\n  Given l = [1,2,3,4,5,6], n = 53 the output should be false\n  Given l = [1,2,3,4,5,6], n = 54 the output should be false\n  Given l = [1,2,3,4,5,6], n = 55 the output should be false\n  Given l = [1,2,3,4,5,6], n = 56 the output should be false\n  Given l = [1,2,3,4,5,6], n = 57 the output should be false\n  Given l = [1,2,3,4,5,6], n = 58 the output should be false\n  Given l = [1,2,3,4,5,6], n = 59 the output should be false\n  Given l = [1,2,3,4,5,6], n = 60 the output should be false\n  Given l = [1,2,3,4,5,6], n = 61 the output should be false\n  Given l = [1,2,3,4,5,6], n = 62 the output should be false\n  Given l = [1,2,3,4,5,6], n = 63 the output should be false\n  Given l = [1,2,3,4,5,6], n = 64 the output should be false\n  Given l = [1,2,3,4,5,6], n = 65 the output should be false\n  Given l = [1,2,3,4,5,6], n = 66 the output should be false\n  Given l = [1,2,3,4,5,6], n = 67 the output should be false\n  Given l = [1,2,3,4,5,6], n = 68 the output should be false\n  Given l = [1,2,3,4,5,6], n = 69 the output should be false\n  Given l = [1,2,3,4,5,6], n = 70 the output should be false\n  Given l = [1,2,3,4,5,6], n = 71 the output should be false\n  Given l = [1,2,3,4,5,6], n = 72 the output should be false\n  Given l = [1,2,3,4,5,6], n = 73 the output should be false\n  Given l = [1,2,3,4,5,6], n = 74 the output should be ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let currentWord = \"\";\n  let currentWordLength = 0;\n  let currentWordIndex = 0;\n  let currentWordLengthIndex = 0;\n  let currentWordIndex2 = 0;\n  let currentWordLengthIndex2 = 0;\n  let currentWordIndex3 = 0;\n  let currentWordLengthIndex3 = 0;\n  let currentWordIndex4 = 0;\n  let currentWordLengthIndex4 = 0;\n  let currentWordIndex5 = 0;\n  let currentWordLengthIndex5 = 0;\n  let currentWordIndex6 = 0;\n  let currentWordLengthIndex6 = 0;\n  let currentWordIndex7 = 0;\n  let currentWordLengthIndex7 = 0;\n  let currentWordIndex8 = 0;\n  let currentWordLengthIndex8 = 0;\n  let currentWordIndex9 = 0;\n  let currentWordLengthIndex9 = 0;\n  let currentWordIndex10 = 0;\n  let currentWordLengthIndex10 = 0;\n  let currentWordIndex11 = 0;\n  let currentWordLengthIndex11 = 0;\n  let currentWordIndex12 = 0;\n  let currentWordLengthIndex12 = 0;\n  let currentWordIndex13 = 0;\n  let currentWordLengthIndex13 = 0;\n  let currentWordIndex14 = 0;\n  let currentWordLengthIndex14 = 0;\n  let currentWordIndex15 = 0;\n  let currentWordLengthIndex15 = 0;\n  let currentWordIndex16 = 0;\n  let currentWordLengthIndex16 = 0;\n  let currentWordIndex17 = 0;\n  let currentWordLengthIndex17 = 0;\n  let currentWordIndex18 = 0;\n  let currentWordLengthIndex18 = 0;\n  let currentWordIndex19 = 0;\n  let currentWordLengthIndex19 = 0;\n  let currentWordIndex20 = 0;\n  let currentWordLengthIndex20 = 0;\n  let currentWordIndex21 = 0;\n  let currentWordLengthIndex21 = 0;\n  let currentWordIndex22 = 0;\n  let currentWordLengthIndex22 = 0;\n  let currentWordIndex23 = 0;\n  let currentWordLengthIndex23 = 0;\n  let currentWordIndex24 = 0;\n  let currentWordLengthIndex24 = 0;\n  let currentWordIndex25 = 0;\n  let currentWordLengthIndex25 = 0;\n  let currentWordIndex26 = 0;\n  let currentWordLengthIndex26 = 0;\n  let currentWordIndex27 = 0;\n  let currentWordLengthIndex27 = 0;\n  let currentWordIndex28 = 0;\n  let currentWordLengthIndex28 = 0;\n  let currentWordIndex29 = 0;\n  let currentWordLengthIndex29 = 0;\n  let currentWordIndex30 = 0;\n  let currentWordLengthIndex30 = 0;\n  let currentWordIndex31 = 0;\n  let currentWordLengthIndex31 = 0;\n  let currentWordIndex32 = 0;\n  let currentWordLengthIndex32 = 0;\n  let currentWordIndex33 = 0;\n  let currentWordLengthIndex33 = 0;\n  let currentWordIndex34 = 0;\n  let currentWordLengthIndex34 = 0;\n  let currentWordIndex35 = 0;\n  let currentWordLengthIndex35 = 0;\n  let currentWordIndex36 = 0;\n  let currentWordLengthIndex36 = 0;\n  let currentWordIndex37 = 0;\n  let currentWordLengthIndex37 = 0;\n  let currentWordIndex38 = 0;\n  let currentWordLengthIndex38 = 0;\n  let currentWordIndex39 = 0;\n  let currentWordLengthIndex39 = 0;\n  let currentWordIndex40 = 0;\n  let currentWordLengthIndex40 = 0;\n  let currentWordIndex41 = 0;\n  let currentWordLengthIndex41 = 0;\n  let currentWordIndex42 = 0;\n  let currentWordLengthIndex42 = 0;\n  let currentWordIndex43 = 0;\n  let currentWordLengthIndex43 = 0;\n  let currentWordIndex44 = 0;\n  let currentWordLengthIndex44 = 0;\n  let currentWordIndex45 = 0;\n  let currentWordLengthIndex45 = 0;\n  let currentWordIndex46 = 0;\n  let currentWordLengthIndex46 = 0;\n  let currentWordIndex47 = 0;\n  let currentWordLengthIndex47 = 0;\n  let currentWordIndex48 = 0;\n  let currentWordLengthIndex48 = 0;\n  let currentWordIndex49 = 0;\n  let currentWordLengthIndex49 = 0;\n  let currentWordIndex50 = 0;\n  let currentWordLengthIndex50 = 0;\n  let currentWordIndex51 = 0;\n  let currentWordLengthIndex51 = 0;\n  let currentWordIndex52 = 0;\n  let currentWordLengthIndex52 = 0;\n  let currentWordIndex53 = 0;\n  let currentWordLengthIndex53 = 0;\n  let currentWordIndex54 = 0;\n  let currentWordLengthIndex54 = 0;\n  let currentWordIndex55 = 0;\n  let currentWordLengthIndex55 = 0;\n  let currentWordIndex56 = 0;\n  let currentWordLengthIndex56 = 0;\n  let currentWordIndex57 = 0;\n  let currentWordLengthIndex57 = 0;\n  let currentWordIndex58 = 0;\n  let currentWordLengthIndex58 = 0;\n  let currentWordIndex59 = 0;\n  let currentWordLengthIndex59 = 0;\n  let currentWordIndex60 = 0;\n  let currentWordLengthIndex60 = 0;\n  let currentWordIndex61 = 0;\n  let currentWordLengthIndex61 = 0;\n  let currentWordIndex62 = 0;\n  let currentWordLengthIndex62 = 0;\n  let currentWordIndex63 = 0;\n  let currentWordLengthIndex63 = 0;\n  let currentWordIndex64 = 0;\n  let currentWordLengthIndex64 = 0;\n  let currentWordIndex65 = 0;\n  let currentWordLengthIndex65 = 0;\n  let currentWordIndex66 = 0;\n  let currentWordLengthIndex66 = 0;\n  let currentWordIndex67 = 0;\n  let currentWordLengthIndex67 = 0;\n  let currentWordIndex68 = 0;\n  let currentWordLengthIndex68 = 0;\n  let currentWordIndex69 = 0;\n  let currentWordLengthIndex69 = 0;\n  let currentWordIndex70 = 0;\n  let currentWordLengthIndex70 = 0;\n  let currentWordIndex71 = 0;\n  let currentWordLengthIndex71 = 0;\n  let currentWordIndex72 = 0;\n  let currentWordLengthIndex72 = 0;\n  let currentWordIndex73 = 0;\n  let currentWordLengthIndex73 = 0;\n  let currentWordIndex74 = 0;\n  let currentWordLengthIndex74 = 0;\n  let currentWordIndex75 = 0;\n  let currentWordLengthIndex75 = 0;\n  let currentWordIndex76 = 0;\n  let currentWordLengthIndex76 = 0;\n  let currentWordIndex77 = 0;\n  let currentWordLengthIndex77 = 0;\n  let currentWordIndex78 = 0;\n  let currentWordLengthIndex78 = 0;\n  let currentWordIndex79 = 0;\n  let currentWordLengthIndex79 = 0;\n  let currentWordIndex80 = 0;\n  let currentWordLengthIndex80 = 0;\n  let currentWordIndex81 = 0;\n  let currentWordLengthIndex81 = 0;\n  let currentWordIndex82 = 0;\n  let currentWordLengthIndex82 = 0;\n  let currentWordIndex83 = 0;\n  let currentWordLengthIndex83 = 0;\n  let currentWordIndex84 = 0;\n  let currentWordLengthIndex84 = 0;\n  let currentWordIndex85 = 0;\n  let currentWordLengthIndex85 = 0;\n  let currentWordIndex86 = 0;\n  let currentWordLengthIndex86 = 0;\n  let currentWordIndex87 = 0;\n  let currentWordLengthIndex87 = 0;\n  let currentWordIndex88 = 0;\n  let currentWordLengthIndex88 = 0;\n  let currentWordIndex89 = 0;\n  let currentWordLengthIndex89 = 0;\n  let currentWordIndex90 = 0;\n  let currentWordLengthIndex90 = 0;\n  let currentWordIndex91 = 0;\n", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n  let re = /(\\d+)\\/(\\d+)/;\n  let m = re.exec(x);\n  let d = re.exec(n);\n  let re2 = /\\d+/;\n  let re3 = /\\d+/;\n  let re4 = /\\d+/;\n  let re5 = /\\d+/;\n  let re6 = /\\d+/;\n  let re7 = /\\d+/;\n  let re8 = /\\d+/;\n  let re9 = /\\d+/;\n  let re10 = /\\d+/;\n  let re11 = /\\d+/;\n  let re12 = /\\d+/;\n  let re13 = /\\d+/;\n  let re14 = /\\d+/;\n  let re15 = /\\d+/;\n  let re16 = /\\d+/;\n  let re17 = /\\d+/;\n  let re18 = /\\d+/;\n  let re19 = /\\d+/;\n  let re20 = /\\d+/;\n  let re21 = /\\d+/;\n  let re22 = /\\d+/;\n  let re23 = /\\d+/;\n  let re24 = /\\d+/;\n  let re25 = /\\d+/;\n  let re26 = /\\d+/;\n  let re27 = /\\d+/;\n  let re28 = /\\d+/;\n  let re29 = /\\d+/;\n  let re30 = /\\d+/;\n  let re31 = /\\d+/;\n  let re32 = /\\d+/;\n  let re33 = /\\d+/;\n  let re34 = /\\d+/;\n  let re35 = /\\d+/;\n  let re36 = /\\d+/;\n  let re37 = /\\d+/;\n  let re38 = /\\d+/;\n  let re39 = /\\d+/;\n  let re40 = /\\d+/;\n  let re41 = /\\d+/;\n  let re42 = /\\d+/;\n  let re43 = /\\d+/;\n  let re44 = /\\d+/;\n  let re45 = /\\d+/;\n  let re46 = /\\d+/;\n  let re47 = /\\d+/;\n  let re48 = /\\d+/;\n  let re49 = /\\d+/;\n  let re50 = /\\d+/;\n  let re51 = /\\d+/;\n  let re52 = /\\d+/;\n  let re53 = /\\d+/;\n  let re54 = /\\d+/;\n  let re55 = /\\d+/;\n  let re56 = /\\d+/;\n  let re57 = /\\d+/;\n  let re58 = /\\d+/;\n  let re59 = /\\d+/;\n  let re60 = /\\d+/;\n  let re61 = /\\d+/;\n  let re62 = /\\d+/;\n  let re63 = /\\d+/;\n  let re64 = /\\d+/;\n  let re65 = /\\d+/;\n  let re66 = /\\d+/;\n  let re67 = /\\d+/;\n  let re68 = /\\d+/;\n  let re69 = /\\d+/;\n  let re70 = /\\d+/;\n  let re71 = /\\d+/;\n  let re72 = /\\d+/;\n  let re73 = /\\d+/;\n  let re74 = /\\d+/;\n  let re75 = /\\d+/;\n  let re76 = /\\d+/;\n  let re77 = /\\d+/;\n  let re78 = /\\d+/;\n  let re79 = /\\d+/;\n  let re80 = /\\d+/;\n  let re81 = /\\d+/;\n  let re82 = /\\d+/;\n  let re83 = /\\d+/;\n  let re84 = /\\d+/;\n  let re85 = /\\d+/;\n  let re86 = /\\d+/;\n  let re87 = /\\d+/;\n  let re88 = /\\d+/;\n  let re89 = /\\d+/;\n  let re90 = /\\d+/;\n  let re91 = /\\d+/;\n  let re92 = /\\d+/;\n  let re93 = /\\d+/;\n  let re94 = /\\d+/;\n  let re95 = /\\d+/;\n  let re96 = /\\d+/;\n  let re97 = /\\d+/;\n  let re98 = /\\d+/;\n  let re99 = /\\d+/;\n  let re100 = /\\d+/;\n  let re101 = /\\d+/;\n  let re102 = /\\d+/;\n  let re103 = /\\d+/;\n  let re104 = /\\d+/;\n  let re105 = /\\d+/;\n  let re106 = /\\d+/;\n  let re107 = /\\d+/;\n  let re108 = /\\d+/;\n  let re109 = /\\d+/;\n  let re110 = /\\d+/;\n  let re111 = /\\d+/;\n  let re112 = /\\d+/;\n  let re113 = /\\d+/;\n  let re114 = /\\d+/;\n  let re115 = /\\d+/;\n  let re116 = /\\d+/;\n  let re117 = /\\d+/;\n  let re118 = /\\d+/;\n  let re119 = /\\d+/;\n  let re120 = /\\d+/;\n  let re121 = /\\d+/;\n  let re122 = /\\d+/;\n  let re123 = /\\d+/;\n  let re124 = /\\d+/;\n  let re125 = /\\d+/;\n  let re126 = /\\d+/;\n  let re127 = /\\d+/;\n  let re128 = /\\d+/;\n  let re129 = /\\d+/;\n  let re130 = /\\d+/;\n  let re131 = /\\d+/;\n  let re132 = /\\d+/;\n  let re133 = /\\d+/;\n  let re134 = /\\d+/;\n  let re135 = /\\d+/;\n  let re136 = /\\d+/;\n  let re137 = /\\d+/;\n  let re138 = /\\d+/;\n  let re139 = /\\d+/;\n  let re140 = /\\d+/;\n  let re141 = /\\d+/;\n  let re142 = /\\d+/;\n  let re143 = /\\d+/;\n  let re144 = /\\d+/;\n  let re145 = /\\d+/;\n  let re146 = /\\d+/;\n  let re147 = /\\d+/;\n  let re148 = /\\d+/;\n  let re149 = /\\d+/;\n  let re150 = /\\d+/;\n  let re151 = /\\d+/;\n  let re152 = /\\d+/;\n", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sortedNums = nums.sort((a, b) => a - b)\n  const sortedNumsArray = sortedNums.map((num) => parseInt(num))\n  const sortedNumsArrayWithDigitsArray = sortedNumsArray.map((num) => {\n    const numArray = num.toString().split('')\n    const numArrayWithDigitsArray = numArray.map((digit) => parseInt(digit))\n    return numArrayWithDigitsArray\n  })\n  const sortedNumsArrayWithDigitsArrayWithIndexArray = sortedNumsArrayWithDigitsArray.map((numArrayWithDigitsArray) => {\n    const numArrayWithDigitsArrayWithIndexArray = numArrayWithDigitsArray.map((numArrayWithDigitsArrayItem) => {\n      const numArrayWithDigitsArrayItemWithIndexArray = numArrayWithDigitsArrayItem.map((numArrayWithDigitsArrayItemItem) => {\n        return numArrayWithDigitsArrayItemItem\n      })\n      return numArrayWithDigitsArrayItemWithIndexArray\n    })\n    return numArrayWithDigitsArrayWithIndexArray\n  })\n  return sortedNumsArrayWithDigitsArrayWithIndexArray\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sortedNums = nums.sort((a, b) => b - a)\n  const sortedNumsArray = sortedNums.map((num) => parseInt(num))\n  const sortedNumsArrayWithDigitsArray = sortedNumsArray.map((num) => {\n    const numArray = num.toString().split('')\n    const numArrayWithDigitsArray = numArray.map((digit) => parseInt(digit))\n    return numArrayWithDigitsArray\n  })\n  const sortedNumsArrayWithDigitsArrayWithIndexArray = sortedNumsArrayWithDigitsArray.map((numArrayWithDigitsArray) => {\n    const numArrayWithDigitsArrayWithIndexArray = numArrayWithDigitsArray.map((numArrayWithDigitsArrayItem) => {\n      const numArrayWithDigitsArrayItemWithIndexArray = numArrayWithDigitsArrayItem.map((numArrayWithDigitsArrayItemItem) => {\n        return numArrayWithDigitsArrayItemItem\n      })\n      return numArrayWithDigitsArrayItemWithIndexArray\n    })\n    return numArrayWithDigitsArrayWithIndexArray\n  })\n  return sortedNumsArrayWithDigitsArrayWithIndexArray\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDesc = (nums) => {\n  const sortedNums = nums.sort((a, b) => b - a)\n  const sortedNumsArray = sortedNums.map((num) => parseInt(num))\n  const sortedNumsArrayWithDigitsArray = sortedNumsArray.map((num) => {\n    const numArray = num.toString().split('')\n    const numArrayWithDigitsArray = numArray.map((digit) => parseInt(digit))\n    return numArrayWithDigitsArray\n  })\n  const sortedNumsArrayWithDigitsArrayWithIndexArray = sortedNumsArrayWithDigitsArray.map((numArrayWithDigitsArray) => {\n    const numArrayWithDigitsArrayWithIndexArray = numArrayWithDigitsArray.map((numArrayWithDigitsArrayItem) => {\n      const numArrayWithDigitsArrayItemWithIndexArray = numArrayWithDigitsArrayItem.map((numArrayWithDigitsArrayItemItem) => {\n        return numArrayWithDigitsArrayItemItem\n      })\n      return numArrayWithDigitsArrayItemWithIndexArray\n    })\n    return numArrayWithDigitsArrayWithIndexArray\n  })\n  return sortedNumsArrayWithDigitsArrayWithIndexArray\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n  const sortedNums = nums.sort((a, b) => b - a)\n  const sortedNumsArray = sortedNums.map((num) => parseInt(num))\n  const sortedNumsArrayWithDigitsArray = sortedNumsArray.map((num) => {\n    const numArray = num.toString().split('')\n    const numArrayWithDigitsArray = numArray.map((digit) => parseInt(digit))\n    return numArrayWithDigitsArray\n  })\n  const sortedNumsArrayWithDigitsArrayWithIndexArray = sortedNumsArrayWithDigitsArray.map((numArrayWithDigitsArray) => {\n    const numArrayWithDigitsArrayWithIndexArray = numArrayWithDigitsArray.map((numArrayWithDigitsArrayItem) => {\n      const numArrayWithDigitsArrayItemWithIndexArray = numArrayWithDigitsArrayItem.map((numArrayWithDigitsArrayItemItem) => {\n        return numArrayWithDigitsArrayItemItem\n      })\n      return numArrayWithDigitsArrayItemWithIndexArray\n    })\n    return numArrayWithDigitsArrayWithIndexArray\n  })\n  return sortedNumsArrayWithDigitsArrayWithIndexArray\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an arrayof nu mber", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          count++;\n          if (count > max) {\n            max = count;\n          }\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const sun = sun();\n  const sun_planet = sun_planet(planet1);\n  const sun_planet_planet = sun_planet_planet(planet2);\n  const sun_planet_planet_sun = sun_planet_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet = sun_planet_planet_sun_planet(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet = sun_planet_planet_sun_planet_sun_planet(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet = sun_planet_planet_sun_planet_sun_planet_sun_planet(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun(planet1, planet2);\n  const sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun_planet_sun = sun_planet_planet_sun_planet_sun_planet_sun_planet_sun_", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListProduct = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDivide = (lst) => {\n  let divide = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      divide /= lst[i];\n    }\n  }\n  return divide;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMod = (lst) => {\n  let mod = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      mod += lst[i];\n    }\n  }\n  return mod;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListPow = (lst) => {\n  let pow = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      pow *= lst[i];\n    }\n  }\n  return pow;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListExp = (lst) => {\n  let exp = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      exp *= lst[i];\n    }\n  }\n  return exp;\n};\n\n/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFrom(0)\n  '0'\n  >>> stringSequenceFrom(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZero(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZero(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroToZero = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroToZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroToZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroToZeroToZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroToZeroToZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroToZeroToZeroToZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroToZeroToZeroToZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroToZeroToZeroToZeroToZeroToZeroTo(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFromZeroToZeroToZeroToZeroToZeroToZeroToZeroTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-del imite d numbers starting from n inclusive.\n  >>> stringSequenceFromZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroToZeroTo", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xOrY(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModY(7, 34, 12) == 12\n  for xModY(15, 8, 5) == 5\n  \n  */\nconst xModY = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModY(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModY(7, 34, 12) == 12\n  for xModY(15, 8, 5) == 5\n  \n  */\nconst xPowY = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xPowY(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xPowY(7, 34, 12) == 12\n  for xPowY(15, 8, 5) == 5\n  \n  */\nconst xPowX = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xPowX(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xPowX(7, 34, 12) == 12\n  for xPowX(15, 8, 5) == 5\n  \n  */\nconst xModPowX = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPowX(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPowX(7, 34, 12) == 12\n  for xModPowX(15, 8, 5) == 5\n  \n  */\nconst xModPowY = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPowY(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPowY(7, 34, 12) == 12\n  for xModPowY(15, 8, 5) == 5\n  \n  */\nconst xModPowZ = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPowZ(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPowZ(7, 34, 12) == 12\n  for xModPowZ(15, 8, 5) == 5\n  \n  */\nconst xModPow = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPow(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPow(7, 34, 12) == 12\n  for xModPow(15, 8, 5) == 5\n  \n  */\nconst xModPowZ = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPowZ(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPow(7, 34, 12) == 12\n  for xModPow(15, 8, 5) == 5\n  \n  */\nconst xModPow = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPow(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for xModPow(7, 34, 12) == 12\n  for xModPow(15, 8, 5) == 5\n  \n  */\nconst xModPow = (n, x, y) => {\n  if (n < 0 || x > 1 || y < 0) return 0;\n  if (n == 0 || y == 0) return y;\n  if (n % x == 0 || n % y == 0) return 0;\n  if (n % x == 0 || n % y == 1) return 1;\n  return xModPow(n/x, y/x, y);\n}\n\n/*\n  A simple program which should return t he va lue of x if \n  a prime number and a multiple of y are both divisible by \n  the number n and should return the value of y othe rwise.\n\n  Examples:\n  for ", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2 === 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheE if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheF if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheG if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheH if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheI if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheJ if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheK if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheL if f erence = (lst) => {\n  let sum = 0;\n  let isOdd = false\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n * n\n      isOdd = true\n    }\n  })\n  return isOdd? sum : 0\n}\n\n/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are even. Ignore numbers that", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...Array(game.length).keys()].map(i => game[i]);\n  const guesses = [...Array(guess.length).keys()].map(i => guess[i]);\n  const diffs = scores.length - guesses.length;\n  const diffsArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = Array.from(Array(diffs).keys()).map(i => diffs[i]);\n  const diffsArrArr", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name + extension_strength_str;\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension_noCase(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension_noCase_noCase_noCase(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase_noCase_noCase_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase_noCase_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension_noCase_noCase_noCase_noCase_noCase(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (extensions[i].includes(extension_strength_str)) {\n      extension_strength = i;\n      extension_strength_str = extensions[i];\n    }\n  }\n  return class_name.includes(extension_strength_str)? class_name : strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase(class_name, extensions);\n};\n\n/*\n Given a class name and a list of extensions, return the class name with the strongest extension.\n Example:\n strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n */\nconst strongestExtension_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase_noCase = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_str = extensions[0];\n  for (let i = 0; i < extensions.length; i++) {\n    if (", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.map((v, i) => v + i);\n  let b2 = b1.map((v, i) => v + i);\n  let a3 = a2.filter((v, i) => v === b2.shift());\n  let b3 = b2.filter((v, i) => v === b2.shift());\n  let a4 = a3.map((v, i) => v + i);\n  let b4 = b3.map((v, i) => v + i);\n  let a5 = a4.filter((v, i) => v === b4.shift());\n  let b5 = b4.filter((v, i) => v === b4.shift());\n  let a6 = a5.map((v, i) => v + i);\n  let b6 = b5.map((v, i) => v + i);\n  let a7 = a6.filter((v, i) => v === b6.shift());\n  let b7 = b6.filter((v, i) => v === b6.shift());\n  let a8 = a7.map((v, i) => v + i);\n  let b8 = b7.map((v, i) => v + i);\n  let a9 = a8.filter((v, i) => v === b8.shift());\n  let b9 = b8.filter((v, i) => v === b8.shift());\n  let a10 = a9.map((v, i) => v + i);\n  let b10 = b9.map((v, i) => v + i);\n  let a11 = a10.filter((v, i) => v === b10.shift());\n  let b11 = b10.filter((v, i) => v === b10.shift());\n  let a12 = a11.map((v, i) => v + i);\n  let b12 = b11.map((v, i) => v + i);\n  let a13 = a12.filter((v, i) => v === b12.shift());\n  let b13 = b12.filter((v, i) => v === b12.shift());\n  let a14 = a13.map((v, i) => v + i);\n  let b14 = b13.map((v, i) => v + i);\n  let a15 = a14.filter((v, i) => v === b14.shift());\n  let b15 = b14.filter((v, i) => v === b14.shift());\n  let a16 = a15.map((v, i) => v + i);\n  let b16 = b15.map((v, i) => v + i);\n  let a17 = a16.filter((v, i) => v === b16.shift());\n  let b17 = b16.filter((v, i) => v === b16.shift());\n  let a18 = a17.map((v, i) => v + i);\n  let b18 = b17.map((v, i) => v + i);\n  let a19 = a18.filter((v, i) => v === b18.shift());\n  let b19 = b18.filter((v, i) => v === b18.shift());\n  let a20 = a19.map((v, i) => v + i);\n  let b20 = b19.map((v, i) => v + i);\n  let a21 = a20.filter((v, i) => v === b20.shift());\n  let b22 = b20.filter((v, i) => v === b20.shift());\n  let a22 = a22.map((v, i) => v + i);\n  let b23 = b22.map((v, i) => v + i);\n  let a23 = a23.filter((v, i) => v === b23.shift());\n  let b24 = b23.filter((v, i) => v === b23.shift());\n  let a24 = a24.map((v, i) => v + i);\n  let b25 = b24.map((v, i) => v + i);\n  let a25 = a25.filter((v, i) => v === b25.shift());\n  let b26 = b25.filter((v, i) => v === b25.shift());\n  let a26 = a26.map((v, i) => v + i);\n  let b27 = b26.map((v, i) => v + i);\n  let a27 = a27.filter((v, i) => v === b27.shift());\n  let b28 = b27.filter((v, i) => v === b27.shift());\n  let a28 = a28.map((v, i) => v + i);\n  let b29 = b28.map((v, i) => v + i);\n  let a29 = a29.filter((v, i) => v === b29.shift());\n  let b30 = b29.filter((v, i) => v === b29.shift());\n  let a30 = a30.map((v, i) => v + i);\n  let b31 = b30.map((v, i) => v + i);\n  let a32 = a31.filter((v, i) => v === b31.shift());\n  let b32 = b31.filter((v, i) => v === b31.shift());\n  let a33 = a32.map((v, i) => v + i);\n  let b33 = b32.map((v, i) => v + i);\n  let a34 = a33.filter((v, i) => v === b33.shift());\n  let b34 = b33.filter((v, i) => v === b33.shift());\n  let a35 = a34.map((v, i) => v + i);\n  let b35 = b34.map((v, i) => v + i);\n  let a36 = a35.filter((v, i) => v === b35.shift());\n  let b36 = b35.filter((v, i) => v === b35.shift());\n  let a37 = a36.map((v, i) => v + i);\n  let b37 = b36.map((v, i) => v + i);\n  let a38 = a37.filter((v, i) => v === b37.shift());\n  let b38 = b37.filter((v, i) => v === b37.shift());\n  let a39 = a38.map((v, i) => v + i);\n  let b39 = b38.map((v, i) => v + i);\n  let a40 = a39.filter((v, i) => v === b39.shift());\n  let b40 = b39.filter((v, i) => v === b39.shift());\n  let a41 = a40.map((v, i) => v + i);\n  let b41 = b40.map((v, i) => v + i);\n  let a42 = a41.filter((v, i) => v === b41.shift());\n  let b42 = b41.filter((v, i) => v === b41.shift());\n  let a43 = a42.map((v, i) => v + i);\n  let b43 = b42.map((v, i) => v + i);\n  let a44 = a43.filter((v, i) => v === b43.shift());\n  let b44 = b43.filter((v, i) => v === b43.shift());\n  let a45 = a44.map((v, i) => v + i);\n  let b46 = b40.map((v, i) => v + i);\n  let a47 = a45.filter((v, i) => v === b46.shift());\n  let b47 = b46.filter((v, i) => v === b46.shift());\n  let a48 = a47.map", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let digits = num.toString().split('');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => digit!== '2');\n  digits = digits.filter(digit => digit!== '3');\n  digits = digits.filter(digit => digit!== '4');\n  digits = digits.filter(digit => digit!== '5');\n  digits = digits.filter(digit => digit!== '6');\n  digits = digits.filter(digit => digit!== '7');\n  digits = digits.filter(digit => digit!== '8');\n  digits = digits.filter(digit => digit!== '9');\n  digits = digits.filter(digit => digit!== '0');\n  digits = digits.filter(digit => digit!== '1');\n  digits = digits.filter(digit => ", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanNumeralMap = {\n    1: 0,\n    2: 1,\n    3: 2,\n    4: 3,\n    5: 4,\n    6: 5,\n    7: 6,\n    8: 7,\n    9: 8,\n    10: 9,\n    11: 10,\n    12: 11,\n    13: 12,\n    14: 13,\n    15: 14,\n    16: 15,\n    17: 16,\n    18: 17,\n    19: 18,\n    20: 19,\n    21: 20,\n    22: 21,\n    23: 22,\n    24: 23,\n    25: 24,\n    26: 25,\n    27: 26,\n    28: 27,\n    29: 28,\n    30: 29,\n    31: 30,\n    32: 31,\n    33: 32,\n    34: 33,\n    35: 34,\n    36: 35,\n    37: 36,\n    38: 37,\n    39: 38,\n    40: 39,\n    41: 40,\n    42: 41,\n    43: 42,\n    44: 43,\n    45: 44,\n    46: 45,\n    47: 46,\n    48: 47,\n    49: 48,\n    50: 49,\n    51: 50,\n    52: 51,\n    53: 52,\n    54: 53,\n    55: 54,\n    56: 55,\n    57: 56,\n    58: 57,\n    59: 58,\n    60: 59,\n    61: 60,\n    62: 61,\n    63: 62,\n    64: 63,\n    65: 64,\n    66: 65,\n    67: 66,\n    68: 67,\n    69: 68,\n    70: 69,\n    71: 70,\n    72: 71,\n    73: 72,\n    74: 73,\n    75: 74,\n    76: 75,\n    77: 76,\n    78: 77,\n    79: 78,\n    80: 79,\n    81: 80,\n    82: 81,\n    83: 82,\n    84: 83,\n    85: 84,\n    86: 85,\n    87: 86,\n    88: 87,\n    89: 88,\n    90: 89,\n    91: 90,\n    92: 91,\n    93: 92,\n    94: 93,\n    95: 94,\n    96: 95,\n    97: 96,\n    98: 97,\n    99: 98,\n    100: 99,\n    101: 100,\n    102: 101,\n    103: 102,\n    104: 103,\n    105: 104,\n    106: 105,\n    107: 106,\n    108: 107,\n    109: 108,\n    110: 109,\n    111: 110,\n    112: 111,\n    113: 112,\n    114: 113,\n    115: 114,\n    116: 115,\n    117: 116,\n    118: 117,\n    119: 118,\n    120: 119,\n    121: 120,\n    122: 121,\n    123: 122,\n    124: 123,\n    125: 124,\n    126: 125,\n    127: 126,\n    128: 127,\n    129: 128,\n    130: 129,\n    131: 130,\n    132: 131,\n    133: 132,\n    134: 133,\n    135: 134,\n    136: 135,\n    137: 136,\n    138: 137,\n    139: 138,\n    140: 139,\n    141: 140,\n    142: 141,\n    143: 142,\n    144: 143,\n    145: 144,\n    146: 145,\n    147: 146,\n    148: 147,\n    149: 148,\n    150: 149,\n    151: 150,\n    152: 151,\n    153: 152,\n    154: 153,\n    155: 154,\n    156: 155,\n    157: 156,\n    158: 157,\n    159: 158,\n    160: 159,\n    161: 160,\n    162: 161,\n    163: 162,\n    164: 163,\n    165: 164,\n    166: 165,\n    167: 166,\n    168: 167,\n    169: 168,\n    170: 169,\n    171: 170,\n    172: 171,\n    173: 172,\n    174: 173,\n    175: 174,\n    176: 175,\n    177: 176,\n    178: 177,\n    179: 178,\n    180: 179,\n    181: 180,\n    182: 181,\n    183: 182,\n    184: 183,\n    185: 184,\n    186: 185,\n    187: 186,\n    188: 187,\n    189: 188,\n    190: 189,\n    191: 190,\n    192: 191,\n    193: 192,\n    194: 193,\n    195: 194,\n    196: 195,\n    197: 196,\n    198: 197,\n    199: 198,\n    200: 199,\n    201: 200,\n    202: 201,\n    203: 202,\n    204: 203,\n    205: 204,\n    206: 205,\n    207: 206,\n    208: 207,\n    209: 208,\n    210: 210,\n    211: 211,\n    212: 212,\n    213: 213,\n    214: 214,\n    215: 215,\n    216: 216,\n    217: 217,\n    218: 218,\n    219: 219,\n    220: 220,\n    221: 221,\n    222: 222,\n    223: 223,\n    224: 224,\n    225: 225,\n    226: 226,\n    227: 227,\n    228: 228,\n    229: 229,\n    230: 230,\n    231: 231,\n    232: 232,\n    233: 233,\n    234: 234,\n    235: 235,\n    236: 236,\n    237: 237,\n    238: 238,\n    239: 239,\n    240: 240,\n    241: 241,\n    242: 242,\n    243: 243,\n    244: 244,\n    245: 245,\n    246: 246,\n    247: 247,\n    248: 248,\n    249: 249", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\nconst leftAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && ab >= bc;\n};\n\nconst rightAngleTriangleTriangleTriangleTriangleTriangleTriangleTriangleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumNumWord = \"\";\n  let maxNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumWord = \"\";\n  let maxNumNumWord = \"\";\n  let maxNumWord = \"\";\n  let maxWord = \"\";\n  let maxNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const carrotLeft = number - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * need;\n  const carrotsLeft = carrotLeft - carrots * ", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doExpresion = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doOperand = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doOperator = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doOperatorList = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doOperatorList2 = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n        operandLength = 0;\n      }\n      else {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n      }\n    }\n\n    operandIndex++;\n    operandLength = 0;\n    operatorIndex++;\n    operatorLength = 0;\n  }\n\n  return result;\n};\n\nconst doOperatorList3 = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n\n  let result = 0;\n  let index = 0;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = 0;\n  let operandLength = 0;\n\n  while (index < operatorList.length) {\n    operatorLength = operatorList[operatorIndex].length;\n    operandLength = operandList[operandIndex].length;\n\n    if (operatorLength > operandLength) {\n      result = result * operandList[operandIndex];\n      operandIndex++;\n      operandLength = 0;\n    }\n\n    while (operandIndex < operandList.length) {\n      if (operandList[operandIndex].length < operatorLength) {\n        result = result + operandList[operandIndex];\n        operandIndex++;\n", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let st;\n  let tr;\n  let tr2;\n  let tr3;\n  let tr4;\n  let tr5;\n  let tr6;\n  let tr7;\n  let tr8;\n  let tr9;\n  let tr10;\n  let tr11;\n  let tr12;\n  let tr13;\n  let tr14;\n  let tr15;\n  let tr16;\n  let tr17;\n  let tr18;\n  let tr19;\n  let tr20;\n  let tr21;\n  let tr22;\n  let tr23;\n  let tr24;\n  let tr25;\n  let tr26;\n  let tr27;\n  let tr28;\n  let tr29;\n  let tr30;\n  let tr31;\n  let tr32;\n  let tr33;\n  let tr34;\n  let tr35;\n  let tr36;\n  let tr37;\n  let tr38;\n  let tr39;\n  let tr40;\n  let tr41;\n  let tr42;\n  let tr43;\n  let tr44;\n  let tr45;\n  let tr46;\n  let tr47;\n  let tr48;\n  let tr49;\n  let tr50;\n  let tr51;\n  let tr52;\n  let tr53;\n  let tr54;\n  let tr55;\n  let tr56;\n  let tr57;\n  let tr58;\n  let tr59;\n  let tr60;\n  let tr61;\n  let tr62;\n  let tr63;\n  let tr64;\n  let tr65;\n  let tr66;\n  let tr67;\n  let tr68;\n  let tr69;\n  let tr70;\n  let tr71;\n  let tr72;\n  let tr73;\n  let tr74;\n  let tr75;\n  let tr76;\n  let tr77;\n  let tr78;\n  let tr79;\n  let tr80;\n  let tr81;\n  let tr82;\n  let tr83;\n  let tr84;\n  let tr85;\n  let tr86;\n  let tr87;\n  let tr88;\n  let tr89;\n  let tr90;\n  let tr91;\n  let tr92;\n  let tr93;\n  let tr94;\n  let tr95;\n  let tr96;\n  let tr97;\n  let tr98;\n  let tr99;\n  let tr100;\n  let tr101;\n  let tr102;\n  let tr103;\n  let tr104;\n  let tr105;\n  let tr106;\n  let tr107;\n  let tr108;\n  let tr109;\n  let tr110;\n  let tr111;\n  let tr112;\n  let tr113;\n  let tr114;\n  let tr115;\n  let tr116;\n  let tr117;\n  let tr118;\n  let tr119;\n  let tr120;\n  let tr121;\n  let tr122;\n  let tr123;\n  let tr124;\n  let tr125;\n  let tr126;\n  let tr127;\n  let tr128;\n  let tr129;\n  let tr130;\n  let tr131;\n  let tr132;\n  let tr133;\n  let tr134;\n  let tr135;\n  let tr136;\n  let tr137;\n  let tr138;\n  let tr139;\n  let tr140;\n  let tr141;\n  let tr142;\n  let tr143;\n  let tr144;\n  let tr145;\n  let tr146;\n  let tr147;\n  let tr148;\n  let tr149;\n  let tr150;\n  let tr151;\n  let tr152;\n  let tr153;\n  let tr154;\n  let tr155;\n  let tr156;\n  let tr157;\n  let tr158;\n  let tr159;\n  let tr160;\n  let tr161;\n  let tr162;\n  let tr163;\n  let tr164;\n  let tr165;\n  let tr166;\n  let tr167;\n  let tr168;\n  let tr169;\n  let tr170;\n  let tr171;\n  let tr172;\n  let tr173;\n  let tr174;\n  let tr175;\n  let tr176;\n  let tr177;\n  let tr178;\n  let tr179;\n  let tr180;\n  let tr181;\n  let tr182;\n  let tr183;\n  let tr184;\n  let tr185;\n  let tr186;\n  let tr187;\n  let tr188;\n  let tr189;\n  let tr190;\n  let tr191;\n  let tr192;\n  let tr193;\n  let tr194;\n  let tr195;\n  let tr196;\n  let tr197;\n  let tr198;\n  let tr199;\n  let tr200;\n  let tr201;\n  let tr202;\n  let tr203;\n  let tr204;\n  let tr205;\n  let tr206;\n  let tr207;\n  let tr208;\n  let tr209;\n  let tr210;\n  let tr211;\n  let tr212;\n  let tr213;\n  let tr214;\n  let tr215;\n  let tr216;\n  let tr217;\n  let tr218;\n  let tr219;\n  let tr220;\n  let tr221;\n  let tr222;\n  let tr223;\n  let tr224;\n  let tr225;\n  let tr226;\n  let tr227;\n  let tr228;\n  let tr229;\n  let tr230;\n  let tr231;\n  let tr232;\n  let tr233;\n  let tr234;\n  let tr235;\n  let tr236;\n  let tr237;\n  let tr238;\n  let tr239;\n  let tr240;\n  let tr241;\n  let tr242;\n  let tr243;\n  let tr244;\n  let tr245;\n  let tr246;\n  let tr247;\n  let tr248;\n  let tr249;\n  let tr250;\n  let tr251;\n  let tr252;\n  let tr253;\n  let tr254;\n  let tr255;\n  let tr256;\n  let tr257;\n  let tr258;\n  let tr259;\n  let tr260;\n  let tr261;\n  let tr262;\n  let tr263;\n  let tr264;\n  let tr265;\n  let tr266;\n  let tr267;\n  let tr268;\n  let tr269;\n  let tr270;\n  let tr271;\n  let tr272;\n  let tr273;\n  let tr274;\n  let tr275;\n  let tr276;\n  let tr277;\n  let tr278;\n  let tr279;\n  let tr280;\n  let tr281;\n  let tr282;\n  let tr283;\n  let tr284;\n  let tr285;", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHashAndHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHashAndHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHashAndHashAndHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHashAndHashAndHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHashAndHashAndHashAndHashAndHash('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5WithHashAndHashAndHashAndHashAndHashAndHash = (text) => {\n  if (!text) {\n    return null;\n  }\n  const hash = 5381;\n  let i = 0;\n  let len = text.length;\n  let md5 = text;\n  while (i < len) {\n    const c = text.charCodeAt(i++);\n    md5 = ((md5 << 5) + md5) + c;\n    hash = (((hash << 5) + hash) + c) % 5381;\n  }\n  return md5;\n};\n\n/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5WithHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHashAndHash", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i!== j) {\n    result.push(i);\n    i = Math.floor(i / 2);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return an array containing all possible ways to divide\n  n into two halves.\n\n  For example:\n  divideInto(2, 5) => [[2, 2], [2, 3], [2, 4], [2, 5], [3, 2], [3, 3], [3, 4], [3, 5], [4, 2], [4, 3], [4, 4], [4, 5], [5, 2], [5, 3], [5, 4], [5, 5]]\n  divideInto(2, 4) => [[2, 2], [2, 3], [2, 4]]\n  divideInto(2, 3) => [[2, 2], [2, 3]]\n  divideInto(2, 2) => [[2, 2]]\n  divideInto(2, 1) => []\n  divideInto(1, 2) => [[1, 2]]\n  divideInto(1, 3) => []\n  divideInto(1, 4) => []\n  divideInto(1, 5) => []\n  divideInto(2, 1) => [[1, 2]]\n  divideInto(2, 2) => [[2, 2]]\n  divideInto(2, 3) => [[2, 2], [2, 3]]\n  divideInto(2, 4) => [[2, 2], [2, 4]]\n  divideInto(2, 5) => [[2, 2], [2, 5]]\n  divideInto(2, 6) => [[2, 2], [2, 6]]\n  divideInto(2, 7) => [[2, 2], [2, 7]]\n  divideInto(2, 8) => [[2, 2], [2, 8]]\n  divideInto(2, 9) => [[2, 2], [2, 9]]\n  divideInto(2, 10) => [[2, 2], [2, 10]]\n  divideInto(2, 11) => [[2, 2], [2, 11]]\n  divideInto(2, 12) => [[2, 2], [2, 12]]\n  divideInto(2, 13) => [[2, 2], [2, 13]]\n  divideInto(2, 14) => [[2, 2], [2, 14]]\n  divideInto(2, 15) => [[2, 2], [2, 15]]\n  divideInto(2, 16) => [[2, 2], [2, 16]]\n  divideInto(2, 17) => [[2, 2], [2, 17]]\n  divideInto(2, 18) => [[2, 2], [2, 18]]\n  divideInto(2, 19) => [[2, 2], [2, 19]]\n  divideInto(2, 20) => [[2, 2], [2, 20]]\n  divideInto(2, 21) => [[2, 2], [2, 21]]\n  divideInto(2, 22) => [[2, 2], [2, 22]]\n  divideInto(2, 23) => [[2, 2], [2, 23]]\n  divideInto(2, 24) => [[2, 2], [2, 24]]\n  divideInto(2, 25) => [[2, 2], [2, 25]]\n  divideInto(2, 26) => [[2, 2], [2, 26]]\n  divideInto(2, 27) => [[2, 2], [2, 27]]\n  divideInto(2, 28) => [[2, 2], [2, 28]]\n  divideInto(2, 29) => [[2, 2], [2, 29]]\n  divideInto(2, 30) => [[2, 2], [2, 30]]\n  divideInto(2, 31) => [[2, 2], [2, 31]]\n  divideInto(2, 32) => [[2, 2], [2, 32]]\n  divideInto(2, 33) => [[2, 2], [2, 33]]\n  divideInto(2, 34) => [[2, 2], [2, 34]]\n  divideInto(2, 35) => [[2, 2], [2, 35]]\n  divideInto(2, 36) => [[2, 2], [2, 36]]\n  divideInto(2, 37) => [[2, 2], [2, 37]]\n  divideInto(2, 38) => [[2, 2], [2, 38]]\n  divideInto(2, 39) => [[2, 2], [2, 39]]\n  divideInto(2, 40) => [[2, 2], [2, 40]]\n  divideInto(2, 41) => [[2, 2], [2, 41]]\n  divideInto(2, 42) => [[2, 2], [2, 42]]\n  divideInto(2, 43) => [[2, 2], [2, 43]]\n  divideInto(2, 44) => [[2, 2], [2, 44]]\n  divideInto(2, 45) => [[2, 2], [2, 45]]\n  divideInto(2, 46) => [[2, 2], [2, 46]]\n  divideInto(2, 47) => [[2, 2], [2, 47]]\n  divideInto(2, 48) => [[2, 2], [2, 48]]\n  divideInto(2, 49) => [[2, 2], [2, 49]]\n  divideInto(2, 50) => [[2, 2], [2, 50]]\n  divideInto(2, 51) => [[2, 2], [2, 51]]\n  divideInto(2, 52) => [[2, 2], [2, 52]]\n  divideInto(2, 53) => [[2, 2], [2, 53]]\n  divideInto(2, 54) => [[2, 2], [2, 54]]\n  divideInto(2, 55) => [[2, 2], [2, 55]]\n  divideInto(2, 56) => [[2, 2], [2, 56]]\n  divideInto(2, 57) => [[2, 2], [2, 57]]\n  divideInto(2, 58) => [[2, 2], [2, 58]]\n  divideInto(2, 59) => [[2, 2], [2, 59]]\n  divideInto(2, 60) => [[2, 2], [2, 60]]\n  divideInto(2, 61) => [[2, 2], [2, 61]]\n  divideInto(2, 62) => [[2, 2], [2, 62]]\n  divideInto(2, 63) => [[2, 2], [2, 63]]\n  divideInto(2, 64) => [[2, 2], [2, 64]]\n  divideInto(2, 65) => [[2, 2], [2, 65]]\n  divideInto(2, 66) => [[2, 2], [2, 66]]\n  divideInto(2, 67) => [[2, 2], [2, 67]]\n  divideInto(2, 68) => [[2, 2], [2, 68]]\n  divideInto(2, 69) => [[2, 2], [2, 69]]\n  divideInto(2, 70) => [[2, 2], [2, 70]]\n  divideInto(2, 71) => [[2, 2], [2, 71]]\n  divideInto(2, 72) => [[2, 2], [2, 72]]\n  divideInto(2, 73) => [[2, 2], [2, 73]]\n  divideInto(2, 74) => [[2, 2], [2, 74]]\n  divideInto(2, 75) => [[2, 2], [2, 75]]\n  divideInto(2, 76) => [[2, 2], [2, 76]]\n  divideInto(2, 77) => [[2, 2], [2, 77]]\n  divideInto(2, 78) => [[2, 2], [2, 78]]\n  divideInto(2, 79) => [[2, 2], [2, 79]]\n  divideInto(2, 80) => [[2, 2], [2, 80]]\n  divideInto(2, 81) => [[2, 2], [2, 81]]\n  divideInto(2, 82) => [[2, 2], [2, 82]]\n  divideInto(2, 83) => [[2, 2], [2, 83]]\n  divideInto(2, 84) => [[2, 2], [2, 84]]\n  divideInto(2, 85) => [[2, 2], [2, 85]]\n  divideInto(2, 86) => [[2, 2], [2, 86]]\n  divideInto(2, 87) => [[2, 2], [2, 87]]\n  divideInto(2, 88) => [[2, 2], [2, 88]]\n  divideInto(2, 89) => [[2, 2], [2, 89]]\n  divideInto(2, 90) => [[2, 2], [2, 90]]\n  divideInto(2, 91) => [[2, 2], [2, 91]]\n  divideInto(2, 92) => [[2, 2], [2, 92]]\n  divideInto(2, 93) => [[2, 2], [2, 93]]\n  divideInto(2, 94) => [[2, 2], [2, 94]]\n  divideInto(2, 95) => [[2, 2], [2, 95]]\n", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  let beats = 0;\n  let note = '';\n  let note_index = 0;\n  let note_index2 = 0;\n  let note_index3 = 0;\n  let note_index4 = 0;\n  let note_index5 = 0;\n  let note_index6 = 0;\n  let note_index7 = 0;\n  let note_index8 = 0;\n  let note_index9 = 0;\n  let note_index10 = 0;\n  let note_index11 = 0;\n  let note_index12 = 0;\n  let note_index13 = 0;\n  let note_index14 = 0;\n  let note_index15 = 0;\n  let note_index16 = 0;\n  let note_index17 = 0;\n  let note_index18 = 0;\n  let note_index19 = 0;\n  let note_index20 = 0;\n  let note_index21 = 0;\n  let note_index22 = 0;\n  let note_index23 = 0;\n  let note_index24 = 0;\n  let note_index25 = 0;\n  let note_index26 = 0;\n  let note_index27 = 0;\n  let note_index28 = 0;\n  let note_index29 = 0;\n  let note_index30 = 0;\n  let note_index31 = 0;\n  let note_index32 = 0;\n  let note_index33 = 0;\n  let note_index34 = 0;\n  let note_index35 = 0;\n  let note_index36 = 0;\n  let note_index37 = 0;\n  let note_index38 = 0;\n  let note_index39 = 0;\n  let note_index40 = 0;\n  let note_index41 = 0;\n  let note_index42 = 0;\n  let note_index43 = 0;\n  let note_index44 = 0;\n  let note_index45 = 0;\n  let note_index46 = 0;\n  let note_index47 = 0;\n  let note_index48 = 0;\n  let note_index49 = 0;\n  let note_index50 = 0;\n  let note_index51 = 0;\n  let note_index52 = 0;\n  let note_index53 = 0;\n  let note_index54 = 0;\n  let note_index55 = 0;\n  let note_index56 = 0;\n  let note_index57 = 0;\n  let note_index58 = 0;\n  let note_index59 = 0;\n  let note_index60 = 0;\n  let note_index61 = 0;\n  let note_index62 = 0;\n  let note_index63 = 0;\n  let note_index64 = 0;\n  let note_index65 = 0;\n  let note_index66 = 0;\n  let note_index67 = 0;\n  let note_index68 = 0;\n  let note_index69 = 0;\n  let note_index70 = 0;\n  let note_index71 = 0;\n  let note_index72 = 0;\n  let note_index73 = 0;\n  let note_index74 = 0;\n  let note_index75 = 0;\n  let note_index76 = 0;\n  let note_index77 = 0;\n  let note_index78 = 0;\n  let note_index79 = 0;\n  let note_index80 = 0;\n  let note_index81 = 0;\n  let note_index82 = 0;\n  let note_index83 = 0;\n  let note_index84 = 0;\n  let note_index85 = 0;\n  let note_index86 = 0;\n  let note_index87 = 0;\n  let note_index88 = 0;\n  let note_index89 = 0;\n  let note_index90 = 0;\n  let note_index91 = 0;\n  let note_index92 = 0;\n  let note_index93 = 0;\n  let note_index94 = 0;\n  let note_index95 = 0;\n  let note_index96 = 0;\n  let note_index97 = 0;\n  let note_index98 = 0;\n  let note_index99 = 0;\n  let note_index100 = 0;\n  let note_index101 = 0;\n  let note_index102 = 0;\n  let note_index103 = 0;\n  let note_index104 = 0;\n  let note_index105 = 0;\n  let note_index106 = 0;\n  let note_index107 = 0;\n  let note_index108 = 0;\n  let note_index109 = 0;\n  let note_index110 = 0;\n  let note_index111 = 0;\n  let note_index112 = 0;\n  let note_index113 = 0;\n  let note_index114 = 0;\n  let note_index115 = 0;\n  let note_index116 = 0;\n  let note_index117 = 0;\n  let note_index118 = 0;\n  let note_index119 = 0;\n  let note_index120 = 0;\n  let note_index121 = 0;\n  let note_index122 = 0;\n  let note_index123 = 0;\n  let note_index124 = 0;\n  let note_index125 = 0;\n  let note_index126 = 0;\n  let note_index127 = 0;\n  let note_index128 = 0;\n  let note_index129 = 0;\n  let note_index130 = 0;\n  let note_index131 = 0;\n  let note_index132 = 0;\n  let note_index133 = 0;\n  let note_index134 = 0;\n  let note_index135 = 0;\n  let note_index136 = 0;\n  let note_index137 = 0;\n  let note_index138 = 0;\n  let note_index139 = 0;\n  let note_index140 = 0;\n  let note_index141 = 0;\n  let note_index142 = 0;\n  let note_index143 = 0;\n  let note_index144 = 0;\n  let note_index145 = 0;\n  let note_index146 = 0;\n  let note_index147 = 0;\n  let note_index148 = 0;\n  let note_index149 = 0;\n  let note_index150 = 0;\n  let note_index151 = 0;\n  let note_index152 = 0;\n  let note_index153 = 0;\n  let note_index154 = 0;\n  let note_index155 = 0;\n  let note_index156 = 0;\n  let note_index157 = 0;\n  let note_index158 = 0;\n  let note_index159 = 0;\n  let note_index160 = 0;\n  let note_index161 = 0;\n  let note_index162 = 0;\n  let note_index163 = 0;\n  let note_index164 = 0;\n  let note_index165 = 0;\n  let note_index166 = 0;\n  let note_index167 = 0;\n  let note_index168 = 0;\n  let note_index169 = 0;\n  let note_index170 = 0;\n  let note_index171 = 0;\n  let note_index172 = 0;\n  let note_index173 = 0;\n  let note_index174 = 0;\n  let note_index175 = 0;\n  let note_index176 = 0;\n  let note_index177 = 0;\n  let note_index178 = 0;\n  let note_index179 = 0;\n  let note_index180 = 0;\n  let note_index181 = 0;\n  let note_index182 = 0;\n  let note_index183 = 0;\n  let note_index184 = 0;\n  let note_index185 = 0;\n  let note_index186 = 0;\n  let note_index187 = 0;\n  let note_index188 = 0;\n  let note_index189 = 0;\n  let note_index190 = 0;\n  let note_index191 = 0;\n  let note_index192 = 0;\n  let note_index193 = 0;\n  let note_index194 = 0;\n  let note_index195 = 0;\n  let note_index196 = 0;\n  let note_index197 = 0;\n  let note_index198 = 0;\n  let note_index199 = 0;\n  let note_index200 = 0;\n  let note_index201 = 0;\n  let note_index202 = 0;\n  let note_index203 = 0;\n  let note_index204 = 0;\n  let note_index205 = 0;\n  let note_index206 = 0;\n  let note_index207 = 0;\n  let note_index208 = 0;\n  let note_index209 = 0;\n  let note_index210 = 0;\n  let note_index211 = 0;\n  let note_index212 = 0;\n  let note_index213 = 0;\n  let note_index214 = 0;\n  let note_index215 = 0;\n  let note_index216 = 0;\n  let note_index217 = 0;\n  let note_index218 = 0;\n  let note_index219 = 0;\n  let note_index220 = 0;\n  let note_index221 = 0;\n  let note_index222 = 0;\n  let note_index223 = 0;\n  let note_index224 = 0;\n  let note_index225 = 0;\n  let note_index226 = 0;\n  let note_index", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let match;\n  let matchIndex;\n  while (index < string.length) {\n    match = string.substring(index, index + substring.length);\n    matchIndex = string.indexOf(match, index);\n    if (matchIndex > -1) {\n      count += 1;\n      index = matchIndex + substring.length;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are repeated characters, return the unique permutation.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are repeated characters and a character appears more than once, return only the first.\n * If there are ", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou ", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimals = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimals(3.5)\n  3\n  */\nconst truncateDecimalsIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeededIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeededIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');\n  return parseInt(integer, 10) * Math.pow(10, decimals) / Math.pow(10, decimals);\n};\n\n/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeededIfNeededIfNeeded(3.5)\n  3\n  */\nconst truncateDecimalsIfNeededIfNeededIfNeededIfNeededIfNeededIfNeeded = (number) => {\n  const [integer, decimals] = number.toString().split('.');\n  const [integer, decimals] = integer.split('.');", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - minElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = number;\n      minElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsBetween = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = undefined;\n  let minElement2 = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - minElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = number;\n      minElement = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement2 = number;\n    }\n  });\n  return [minIndex, minDistance, minElement2, minElement];\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsBetweenTwo = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = undefined;\n  let minElement2 = undefined;\n  let minElement3 = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - minElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = number;\n      minElement = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement2 = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement3 = number;\n    }\n  });\n  return [minIndex, minDistance, minElement2, minElement3];\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsBetweenThree = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = undefined;\n  let minElement2 = undefined;\n  let minElement3 = undefined;\n  let minElement4 = undefined;\n  let minElement5 = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - minElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = number;\n      minElement = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement2 = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement3 = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement4 = number;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement5 = number;\n    }\n  });\n  return [minIndex, minDistance, minElement2, minElement3, minElement4, minElement5];\n};\n\n/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsBetweenFour = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minElement = undefined;\n  let minElement2 = undefined;\n  let minElement3 = undefined;\n  let minElement4 = undefined;\n  let minElement5 = undefined;\n  let minElement6 = undefined;\n  let minElement7 = undefined;\n  let minElement8 = undefined;\n  let minElement9 = undefined;\n  let minElement10 = undefined;\n  let minElement11 = undefined;\n  let minElement12 = undefined;\n  let minElement13 = undefined;\n  let minElement14 = undefined;\n  let minElement15 = undefined;\n  let minElement16 = undefined;\n  let minElement17 = undefined;\n  let minElement18 = undefined;\n  let minElement19 = undefined;\n  let minElement20 = undefined;\n  let minElement21 = undefined;\n  let minElement22 = undefined;\n  let minElement23 = undefined;\n  let minElement24 = undefined;\n  let minElement25 = undefined;\n  let minElement26 = undefined;\n  let minElement27 = undefined;\n  let minElement28 = undefined;\n  let minElement29 = undefined;\n  let minElement30 = undefined;\n  let minElement31 = undefined;\n  let minElement32 = undefined;\n  let minElement33 = undefined;\n  let minElement34 = undefined;\n  let minElement35 = undefined;\n  let minElement36 = undefined;\n  let minElement37 = undefined;\n  let minElement38 = undefined;\n  let minElement39 = undefined;\n  let minElement40 = undefined;\n  let minElement41 = undefined;\n  let minElement42 = undefined;\n  let minElement43 = undefined;\n  let minElement44 = undefined;\n  let minElement45 = undefined;\n  let minElement46 = undefined;\n  let minElement47 = undefined;\n  let minElement48 = undefined;\n  let minElement49 = undefined;\n  let minElement50 = undefined;\n  let minElement51 = undefined;\n  let minElement52 = undefined;\n  let minElement53 = undefined;\n  let minElement54 = undefined;\n  let minElement55 = undefined;\n  let minElement56 = undefined;\n  let minElement57 = undefined;\n  let minElement58 = undefined;\n  let minElement59 = undefined;\n  let minElement60 = undefined;\n  let minElement61 = undefined;\n  let minElement62 = undefined;\n  let minElement63 = undefined;\n  let minElement64 = undefined;\n  let minElement65 = undefined;\n  let minElement66 = undefined;\n  let minElement67 = undefined;\n  let minElement68 = undefined;\n  let minElement69 = undefined;\n  let minElement70 = undefined;\n  let minElement71 = undefined;\n  let minElement7", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const minNum = Math.min(...numbers);\n  const maxNum = Math.max(...numbers);\n  const numDiff = maxNum - minNum;\n  const numToRescale = Math.floor(numDiff / 2);\n  const numToRescaleUnit = numDiff % 2;\n  const numToRescaleUnitToRescale = numToRescaleUnit * 2;\n  const numToRescaleUnitToRescaleToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMax = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMin = numToRescaleUnitToRescale * 2;\n  const numToRescaleUnitToRescaleToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxToMinToMaxTo", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(val => typeof val === 'number')\n}\n\n/**\n * Filter given list of any python valu es on ly for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(val => typeof val === 'number' && isFinite(val))\n}\n\n/**\n * Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(val => typeof val ==='string')\n}\n\n/**\n * Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(val => typeof val === 'boolean')\n}\n\n/**\n * Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(val => typeof val === 'object')\n}\n\n/**\n * Filter given list of any python valu es on ly for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(val => Array.isArray(val))\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [5]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(val => typeof val === 'object' && val!== null)\n}\n\n/**\n * Filter given list of any python valu es on ly for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(val => Array.isArray(val))\n}\n\n/**\n * Filter given list of any python valu es on ly for tuples (tuples are immutable)\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for sets of tuples\n  >>> filterSetsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterSetsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSetsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of tuples\n  >>> filterDictsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for sets of dicts\n  >>> filterSetsDictsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterSetsDictsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSetsDictsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of lists\n  >>> filterDictsListsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsListsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsListsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of dicts\n  >>> filterDictsDictsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of sets\n  >>> filterDictsDictsSetsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsSetsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsSetsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of dicts\n  >>> filterDictsDictsDictsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsDictsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsDictsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of dicts\n  >>> filterDictsDictsDictsSetsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsDictsSetsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsDictsSetsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of dicts\n  >>> filterDictsDictsDictsDictsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsDictsDictsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsDictsDictsTuples = (values) => {\n  return values.filter(val => Array.isArray(val) && val.length!== 0)\n}\n\n/**\n * Filter given list of any python valu es on ly for dicts of dicts\n  >>> filterDictsDictsDictsDictsSetsTuples(['a', 3.14, 5])\n  [5]\n  >>> filterDictsDictsDictsDictsSetsTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDictsDictsDictsDictsSetsTuples = (values) ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'a')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWith('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWith = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === 0 && endsWith(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWith('abc', 'a', 'c')\n  false\n  */\nconst endsWithEndsWith = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWith(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWith('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === 0 && endsWithIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst endsWithEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWithIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === 0 && endsWithIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst endsWithEndsWithIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst endsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst endsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return string.indexOf(prefix) === string.length - suffix.length &&\n    startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleBy = (n) => {\n  return n % 1 === 0;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByZero = (n) => {\n  return n % 1 === 0;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByOne = (n) => {\n  return n % 1 === 1;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByTwo = (n) => {\n  return n % 1 === 2;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByThree = (n) => {\n  return n % 1 === 3;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByFour = (n) => {\n  return n % 1 === 4;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByFive = (n) => {\n  return n % 1 === 5;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleBySix = (n) => {\n  return n % 1 === 6;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleBySeven = (n) => {\n  return n % 1 === 7;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByEight = (n) => {\n  return n % 1 === 8;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByNine = (n) => {\n  return n % 1 === 9;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByTen = (n) => {\n  return n % 1 === 10;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByEleven = (n) => {\n  return n % 1 === 11;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByTwelve = (n) => {\n  return n % 1 === 12;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByThirteen = (n) => {\n  return n % 1 === 13;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByFourteen = (n) => {\n  return n % 1 === 14;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByFifteen = (n) => {\n  return n % 1 === 15;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleBySixteen = (n) => {\n  return n % 1 === 16;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleBySeventeen = (n) => {\n  return n % 1 === 17;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByEighteen = (n) => {\n  return n % 1 === 18;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByNineteen = (n) => {\n  return n % 1 === 19;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByTwenty = (n) => {\n  return n % 1 === 20;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByThirty = (n) => {\n  return n % 1 === 21;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByForty = (n) => {\n  return n % 1 === 22;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByFifty = (n) => {\n  return n % 1 === 23;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleBySixty = (n) => {\n  return n % 1 === 24;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleBySeventy = (n) => {\n  return n % 1 === 25;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByEighty = (n) => {\n  return n % 1 === 26;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * true\n */\nconst isDivisibleByNinety = (n) => {\n  return n % 1 === 27;\n};\n\n/**\n * Given a number n, return true if the number is divisible by n\n * >>> isDivisibleBy(15)\n * false\n */\nconst isDivisibleByTwentyOne = (n) => {\n  return n % 1 === 28;\n};\n\n/**\n * Given a number n, return true if the number is di", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factor", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      result.push(number);\n    } else {\n      seen[number] = true;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations = (arr, target) => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_ = (arr, target) => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_2 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_3 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_4 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_5 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_6 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_7 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a target number, return all possible combinations of numbers that sum to target.\n * If target is 0, return all possible combinations of numbers that sum to 0.\n * If target is negative, return all combinations of numbers that sum to -target.\n * If target is positive, return all combinations of numbers that sum to target.\n * If target is NaN or Infinity or undefined, return all combinations of numbers that sum to NaN.\n */\nconst combinations_8 = arr => {\n  let result = [];\n  let i = arr.length;\n  let j = 0;\n  while (i < target) {\n    result.push(arr[j]);\n    i++;\n    j++;\n  }\n  while (j > target) {\n    result.push(arr[j]);\n    j--;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a ", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return the first character that is not a letter, digit, underscore, or hyphen.\n * For a given string, return ", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\n/* Convert string to number\n  >>> convert('abc')\n  123\n  >>> convert('123')\n  123\n  >>> convert('abc', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('abc', 3)\n  NaN\n  >>> convert('123', 3)\n  NaN\n  >>> convert('abc', 4)\n  NaN\n  >>> convert('123', 4)\n  NaN\n  */\nconst convert = (value, precision) => {\n  const num = parseFloat(value);\n  return isNaN(num)? NaN : num.toFixed(precision);\n};\n\n/* Convert string to boolean\n  >>> convert('abc', true)\n  true\n  >>> convert('abc', false)\n  false\n  >>> convert('abc', null)\n  false\n  >>> convert('abc', undefined)\n  false\n  */\nconst convertToBoolean = (value, defaultValue) => {\n  return convertToNumber(value, defaultValue)? true : false;\n};\n\n/* Convert string to number\n  >>> convertToNumber('abc', 2)\n  2\n  >>> convertToNumber('123', 2)\n  123\n  >>> convertToNumber('abc', 3)\n  NaN\n  >>> convertToNumber('123', 3)\n  NaN\n  >>> convertToNumber('abc', 4)\n  NaN\n  >>> convertToNumber('123', 4)\n  NaN\n  */\nconst convertToNumber = (value, defaultValue) => {\n  if (value === undefined || value === null) {\n    return defaultValue;\n  }\n  if (typeof value ==='string') {\n    return parseFloat(value);\n  }\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('abc', 2)\n  2\n  >>> convertToNumber('123', 2)\n  123\n  >>> convertToNumber('abc', 3)\n  NaN\n  >>> convertToNumber('123', 3)\n  NaN\n  >>> convertToNumber('abc', 4)\n  NaN\n  >>> convertToNumber('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaN = (value, defaultValue) => {\n  return convertToNumber(value, defaultValue) || NaN;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaN('abc', 2)\n  2\n  >>> convertToNumberOrNaN('123', 2)\n  123\n  >>> convertToNumberOrNaN('abc', 3)\n  NaN\n  >>> convertToNumberOrNaN('123', 3)\n  NaN\n  >>> convertToNumberOrNaN('abc', 4)\n  NaN\n  >>> convertToNumberOrNaN('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZero = (value, defaultValue) => {\n  return convertToNumberOrNaN(value, defaultValue) || 0;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZero('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZero('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZero('abc', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZero('123', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZero('abc', 4)\n  NaN\n  >>> convertToNumberOrNaNOrZero('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZeroOrNaN = (value, defaultValue) => {\n  return convertToNumberOrNaNOrZero(value, defaultValue) || NaN;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZeroOrNaN('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZeroOrNaN('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZeroOrNaN('abc', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaN('123', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaN('abc', 4)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaN('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZeroOrNaNOrZero = (value, defaultValue) => {\n  return convertToNumberOrNaNOrZeroOrNaN(value, defaultValue) || 0;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 4)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaN = (value, defaultValue) => {\n  return convertToNumberOrNaNOrZeroOrNaNOrZero(value, defaultValue) || NaN;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('abc', 4)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZero('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero = (value, defaultValue) => {\n  return convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaN(value, defaultValue) || 0;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('abc', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('123', 3)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('abc', 4)\n  NaN\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('123', 4)\n  NaN\n  */\nconst convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZeroOrNaN = (value, defaultValue) => {\n  return convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero(value, defaultValue) || NaN;\n};\n\n/* Convert string to number\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('abc', 2)\n  2\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('123', 2)\n  123\n  >>> convertToNumberOrNaNOrZeroOrNaNOrZeroOrNaNOrZero('abc', 3)\n  NaN\n  >>> convert", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only  forones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix and end with a given suffix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNot('abc', 'bcd')\n  []\n  >>> filterBySuffixNot('abc', 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotEnd = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given prefix and end with a given suffix.\n  >>> filterBySuffixNot('abc', 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNot('abc', 'bcd')\n  []\n  */\nconst filterBySuffixNotEnd = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNotEnd('abc', 'a')\n  []\n  >>> filterByPrefixNotEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNotEnd('abc', 'bcd')\n  []\n  >>> filterBySuffixNotEnd('abc', 'a')\n  []\n  >>> filterBySuffixNotEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotEndNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNotEnd('abc', 'a')\n  []\n  >>> filterBySuffixNotEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNotEnd('abc', 'bcd')\n  []\n  */\nconst filterBySuffixNotEndNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix and end with a given suffix.\n  >>> filterByPrefixNotEndNot('abc', 'a')\n  []\n  >>> filterByPrefixNotEndNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNotEndNot('abc', 'bcd')\n  []\n  */\nconst filterByPrefixNotEndEnd = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given prefix and end with a given suffix.\n  >>> filterBySuffixNotEndEnd('abc', 'a')\n  []\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  []\n  */\nconst filterBySuffixNotEndEnd = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNotEndEnd('abc', 'a')\n  []\n  >>> filterByPrefixNotEndEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNotEndEnd('abc', 'bcd')\n  []\n  */\nconst filterByPrefixNotEndEndNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNotEndEnd('abc', 'a')\n  []\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  []\n  */\nconst filterBySuffixNotEndEndNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNotEndEndNot('abc', 'a')\n  []\n  >>> filterByPrefixNotEndEndNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNotEndEndNot('abc', 'bcd')\n  []\n  */\nconst filterByPrefixNotEndEndEnd = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forones that do not end with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNotEndEnd('abc', 'a')\n  []\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNotEndEnd('abc', 'bcd')\n  []\n  */\nconst filterBySuffixNotEndEndEnd = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only  forone", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let total = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n    total += operations[i][1];\n  }\n  return total <= 0;\n};\n\n/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point function", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  return l.filter(n => n === 0)\n}\n\n/*\n  >>> getZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOne = (l) => {\n  return l.filter(n => n === 1)\n}\n\n/*\n  >>> getOne([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOne([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwo = (l) => {\n  return l.filter(n => n === 2)\n}\n\n/*\n  >>> getTwo([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThree = (l) => {\n  return l.filter(n => n === 3)\n}\n\n/*\n  >>> getThree([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThree([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFour = (l) => {\n  return l.filter(n => n === 4)\n}\n\n/*\n  >>> getFour([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFour([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFive = (l) => {\n  return l.filter(n => n === 5)\n}\n\n/*\n  >>> getFive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSix = (l) => {\n  return l.filter(n => n === 6)\n}\n\n/*\n  >>> getSix([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSix([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeven = (l) => {\n  return l.filter(n => n === 7)\n}\n\n/*\n  >>> getSeven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEight = (l) => {\n  return l.filter(n => n === 8)\n}\n\n/*\n  >>> getEight([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEight([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNine = (l) => {\n  return l.filter(n => n === 9)\n}\n\n/*\n  >>> getNine([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNine([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTen = (l) => {\n  return l.filter(n => n === 10)\n}\n\n/*\n  >>> getTen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEleven = (l) => {\n  return l.filter(n => n === 11)\n}\n\n/*\n  >>> getEleven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwelve = (l) => {\n  return l.filter(n => n === 12)\n}\n\n/*\n  >>> getTwelve([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwelve([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThirteen = (l) => {\n  return l.filter(n => n === 13)\n}\n\n/*\n  >>> getThirteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFourteen = (l) => {\n  return l.filter(n => n === 14)\n}\n\n/*\n  >>> getFourteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFourteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFifteen = (l) => {\n  return l.filter(n => n === 15)\n}\n\n/*\n  >>> getFifteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFifteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSixteen = (l) => {\n  return l.filter(n => n === 16)\n}\n\n/*\n  >>> getSixteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSixteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeventeen = (l) => {\n  return l.filter(n => n === 17)\n}\n\n/*\n  >>> getSeventeen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEighteen = (l) => {\n  return l.filter(n => n === 18)\n}\n\n/*\n  >>> getEighteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEighteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNineteen = (l) => {\n  return l.filter(n => n === 19)\n}\n\n/*\n  >>> getNineteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a prime number, false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let ntees = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  let zer = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  if(ntees % 2 === 0){\n    return zer;\n  }\n  if(ntees > 1){\n    return findZero(xs.slice(0, ntees / 2));\n  }\n  return zer;\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findOne find x suchthat poly(x) = 1.\n  fin dOne returns only zer o point,ev en if there are many.\n  Moreove r, findOne only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  let ntees = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  let zer = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  if(ntees % 2 === 0){\n    return zer;\n  }\n  if(ntees > 1){\n    return findOne(xs.slice(0, ntees / 2));\n  }\n  return zer;\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findTwo find x suchthat poly(x) = 2.\n  fin dTwo returns only zer o point,ev en if there are many.\n  Moreove r, findTwo only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findTwo([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findTwo([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  2.0\n  */\nconst findTwo = (xs) => {\n  let ntees = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  let zer = xs.reduce((prev, it, index) =>{\n    if(it % 2 === 0){\n      return prev + it;\n    }\n    return prev;\n  }, 0);\n  if(ntees % 2 === 0){\n    return zer;\n  }\n  if(ntees > 1){\n    return findTwo(xs.slice(0, ntees / 2));\n  }\n  return zer;\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findNth find x suchthat poly(x) = n.\n  fin dNth returns only zer o point,ev en if there are many.\n  Moreove r, findNth only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findNth([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 2), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 3), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 4), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 5), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 6), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 7), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 8), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 9), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 10), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 11), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 12), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 13), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 14), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 15), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 16), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 17), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 18), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 19), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([-6, 11, -6, 1], 20), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findNth([", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l = l.sort((a, b) => a - b);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l = l.sort((a, b) => b - a);\n  const l2 = l.filter((v, i, a) => a.indexOf(v) === i);\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, ", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique9([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique10([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique11([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique12([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique13([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique14([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique15([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique16([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique17([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique18([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique19([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique20 = (arr) => {\n  const seen = new Set()\n  return arr.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a li st\n  >>> unique20([5, 3, 5, 2, 3, 3, 9, ", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l[l.length - 1] : null;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l[0] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAt([1, 2, 3], 1)\n  3\n  >>> getElementAt([1, 2, 3], 2)\n  2\n  >>> getElementAt([1, 2, 3], 3)\n  null\n  */\nconst getElementAt = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNull([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNull([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmpty([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmpty = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNull([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNull([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmpty = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull([1, 2, 3], 1)\n  3\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 2)\n  2\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty([1, 2, 3], 3)\n  null\n  */\nconst getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return i < 0? l.length + i : i < l.length? l[i] : null;\n};\n\n/*Return element at specified index.\n  >>> getElementAtOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (l, i) => {\n  return ", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit7 = n % 11;\n  let digit8 = n % 13;\n  if (digit7 === 0 && digit8 === 0) {\n    count++;\n  }\n  if (digit7!== 0 || digit8!== 0) {\n    count++;\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  0\n  >>> fizzBuzz(102)\n  0\n  >>> fizzBuzz(103)\n  0\n  >>> fizzBuzz(104)\n  0\n  >>> fizzBuzz(105)\n  0\n  >>> fizzBuzz(106)\n  0\n  >>> fizzBuzz(107)\n  0\n  >>> fizzBuzz(108)\n  0\n  >>> fizzBuzz(109)\n  0\n  >>> fizzBuzz(110)\n  0\n  >>> fizzBuzz(111)\n  0\n  >>> fizzBuzz(112)\n  0\n  >>> fizzBuzz(113)\n  0\n  >>> fizzBuzz(114)\n  0\n  >>> fizzBuzz(115)\n  0\n  >>> fizzBuzz(116)\n  0\n  >>> fizzBuzz(117)\n  0\n  >>> fizzBuzz(118)\n  0\n  >>> fizzBuzz(119)\n  0\n  >>> fizzBuzz(120)\n  0\n  >>> fizzBuzz(121)\n  0\n  >>> fizzBuzz(122)\n  0\n  >>> fizzBuzz(123)\n  0\n  >>> fizzBuzz(124)\n  0\n  >>> fizzBuzz(125)\n  0\n  >>> fizzBuzz(126)\n  0\n  >>> fizzBuzz(127)\n  0\n  >>> fizzBuzz(128)\n  0\n  >>> fizzBuzz(129)\n  0\n  >>> fizzBuzz(130)\n  0\n  >>> fizzBuzz(131)\n  0\n  >>> fizzBuzz(132)\n  0\n  >>> fizzBuzz(133)\n  0\n  >>> fizzBuzz(134)\n  0\n  >>> fizzBuzz(135)\n  0\n  >>> fizzBuzz(136)\n  0\n  >>> fizzBuzz(137)\n  0\n  >>> fizzBuzz(138)\n  0\n  >>> fizzBuzz(139)\n  0\n  >>> fizzBuzz(140)\n  0\n  >>> fizzBuzz(141)\n  0\n  >>> fizzBuzz(142)\n  0\n  >>> fizzBuzz(143)\n  0\n  >>> fizzBuzz(144)\n  0\n  >>> fizzBuzz(145)\n  0\n  >>> fizzBuzz(146)\n  0\n  >>> fizzBuzz(147)\n  0\n  >>> fizzBuzz(148)\n  0\n  >>> fizzBuzz(149)\n  0\n  >>> fizzBuzz(150)\n  0\n  >>> fizzBuzz(151)\n  0\n  >>> fizzBuzz(152)\n  0\n  >>> fizzBuzz(153)\n  0\n  >>> fizzBuzz(154)\n  0\n  >>> fizzBuzz(155)\n  0\n  >>> fizzBuzz(156)\n  0\n  >>> fizzBuzz(157)\n  0\n  >>> fizzBuzz(158)\n  0\n  >>> fizzBuzz(159)\n  0\n  >>> fizzBuzz(160)\n  0\n  >>> fizzBuzz(161)\n  0\n  >>> fizzBuzz(162)\n  0\n  >>> fizzBuzz(163)\n  0\n  >>> fizzBuzz(164)\n  0\n  >>> fizzBuzz(165)\n  0\n  >>> fizzBuzz(166)\n  0\n  >>> fizzBuzz(167)\n  0\n  >>> fizzBuzz(168)\n  0\n  >>> fizzBuzz(169)\n  0\n  >>> fizzBuzz(170)\n  0\n  >>> fizzBuzz(171)\n  0\n  >>> fizzBuzz(172)\n  0\n  >>> fizzBuzz(173)\n  0\n  >>> fizzBuzz(174)\n  0\n  >>> fizzBuzz(175)\n  0\n  >>> fizzBuzz(176)\n  0\n  >>> fizzBuzz(177)\n  0\n  >>> fizzBuzz(178)\n  0\n  >>> fizzBuzz(179)\n  0\n  >>> fizzBuzz(180)\n  0\n  >>> fizzBuzz(181)\n  0\n  >>> fizzBuzz(182)\n  0\n  >>> fizzBuzz(183)\n  0\n  >>> fizzBuzz(184)\n  0\n  >>> fizzBuzz(185)\n  0\n  >>> fizzBuzz(186)\n  0\n  >>> fizzBuzz(187)\n  0\n  >>> fizzBuzz(188)\n  0\n  >>> fizzBuzz(189)\n  0\n  >>> fizzBuzz(190)\n  0\n  >>> fizzBuzz(191)\n  0\n  >>> fizzBuzz(192)\n  0\n  >>> fizzBuzz(193)\n  0\n  >>> fizzBuzz(194)\n  0\n  >>> fizzBuzz(195)\n  0\n  >>> fizzBuzz(196)\n  0\n  >>> fizzBuzz(197)\n  0\n  >>> fizzBuzz(198)\n  0\n  >>> fizzBuzz(199)\n  0\n  >>> fizzBuzz(200)\n  0\n  >>> fizzBuzz(201)\n  0\n  >>> fizzBuzz(202)\n  0\n  >>> fizzBuzz(203)\n  0\n  >>> fizzBuzz(204)\n  0\n  >>> fizzBuzz(205)\n  0\n  >>> fizzBuzz(206)\n  0\n  >>> fizzBuzz(207)\n  0\n  >>> fizzBuzz(208)\n  ", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  let evenIndex = 0\n  let oddIndex = 0\n  let evenVal = 0\n  let oddVal = 0\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndexe = []\n  let oddIndexe = []\n  let evenVale = []\n  let oddVale = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndexe = []\n  let oddIndexe = []\n  let evenVale = []\n  let oddVale = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let evenVal = []\n  let oddVal = []\n  let evenIndexes = []\n  let oddIndexes = []\n  let evenVales = []\n  let oddVales = []\n  let evenIndex = []\n  let oddIndex = []\n  let even", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun2 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun3 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun4 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun5 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun6 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun7 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclicFun8 = (s) => {\n  var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFib = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFib = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFib;\n};\n\n/*\n  primeFib returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibonacci = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFibonacci = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFibonacci = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFibonacci;\n};\n\n/*\n  primeFibonacci returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFibonacci(1)\n  2\n  >>> primeFibonacci(2)\n  3\n  >>> primeFibonacci(3)\n  5\n  >>> primeFibonacci(4)\n  13\n  >>> primeFibonacci(5)\n  89\n  */\nconst primeFibonacciPrime = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFibonacciPrime = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFibonacciPrime = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFibonacciPrime;\n};\n\n/*\n  primeFibonacciPrime returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrime(1)\n  2\n  >>> primeFibonacciPrime(2)\n  3\n  >>> primeFibonacciPrime(3)\n  5\n  >>> primeFibonacciPrime(4)\n  13\n  >>> primeFibonacciPrime(5)\n  89\n  */\nconst primeFibonacciPrimePrime = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFibonacciPrimePrime = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFibonacciPrimePrime = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFibonacciPrimePrime;\n};\n\n/*\n  primeFibonacciPrimePrime returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimePrime(1)\n  2\n  >>> primeFibonacciPrimePrime(2)\n  3\n  >>> primeFibonacciPrimePrime(3)\n  5\n  >>> primeFibonacciPrimePrime(4)\n  13\n  >>> primeFibonacciPrimePrime(5)\n  89\n  */\nconst primeFibonacciPrimePrimePrime = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFibonacciPrimePrime = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFibonacciPrimePrime = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFibonacciPrimePrime;\n};\n\n/*\n  primeFibonacciPrimePrime returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimePrimePrime(1)\n  2\n  >>> primeFibonacciPrimePrimePrime(2)\n  3\n  >>> primeFibonacciPrimePrimePrime(3)\n  5\n  >>> primeFibonacciPrimePrimePrime(4)\n  13\n  >>> primeFibonacciPrimePrimePrime(5)\n  89\n  */\nconst primeFibonacciPrimePrimePrimePrime = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;\n  let j = 1;\n  let k = 1;\n  let primeFibonacciPrimePrimePrime = 1;\n  while (n) {\n    prime = prime * a + b;\n    if (n % prime === 0) {\n      primeFibonacciPrimePrimePrime = prime;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    b = b + c;\n    c = c + d;\n    d = d + a;\n    a = a + n;\n  }\n  return primeFibonacciPrimePrimePrime;\n};\n\n/*\n  primeFibonacciPrimePrime returns n-th number that is  a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimePrimePrimePrime(1)\n  2\n  >>> primeFibonacciPrimePrimePrimePrime(2)\n  3\n  >>> primeFibonacciPrimePrimePrimePrime(3)\n  5\n  >>> primeFibonacciPrimePrimePrimePrime(4)\n  13\n  >>> primeFibonacciPrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibonacciPrimePrimePrimePrime = (n) => {\n  let a = 1;\n  let b = 2;\n  let c = 2;\n  let d = 2;\n  let prime = 1;\n  let i = 2;", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return Math.sqrt(deviations.reduce((a, b) => a + b));\n};\n\n/* For a given list of input numbers, c alcul ate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Sq d e v iable t he avera ge squared difference betwe eneach\n  element  and a center point (mean in this case): \n MSD = average | x -x _mean|\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b);\n};\n\n/* For a given list of input numbers, c alcul ate Mean Relative Deviation\n  around the mean of this dataset.\n  Mean Rel d e v iable t he avera ge relative difference betwe eneach\n  element  and a center point (mean in this case): \n MRD = average | x -x _mean|\n  >>> meanRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanRelativeDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b);\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Percentage Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute percentage difference betwe eneach\n  element  and a center point (mean in this case): \n MADP = average | x -x _mean|\n  >>> meanAbsolutePercentageDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsolutePercentageDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Squared Percentage Deviation\n  around the mean of this dataset.\n  Mean Sq d e v iable t he avera ge squared percentage difference betwe eneach\n  element  and a center point (mean in this case): \n MSDP = average | x -x _mean|\n  >>> meanSquaredPercentageDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredPercentageDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Relative Percentage Deviation\n  around the mean of this dataset.\n  Mean Rel d e v iable t he avera ge relative percentage difference betwe eneach\n  element  and a center point (mean in this case): \n MRDP = average | x -x _mean|\n  >>> meanRelativePercentageDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanRelativePercentageDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Deviation around the\n  mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute deviation betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Squared Deviation around the\n  mean of this dataset.\n  Mean Sq d e v iable t he avera ge squared deviation betwe eneach\n  element  and a center point (mean in this case): \n MSD = average | x -x _mean|\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Relative Deviation around the\n  mean of this dataset.\n  Mean Rel d e v iable t he avera ge relative deviation betwe eneach\n  element  and a center point (mean in this case): \n MRD = average | x -x _mean|\n  >>> meanRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanRelativeDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Absolute Percentage Deviation\n  around the  mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute percentage deviation betwe eneach\n  element  and a center point (mean in this case): \n MADP = average | x -x _mean|\n  >>> meanAbsolutePercentageDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsolutePercentageDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + b) / numbers.length;\n};\n\n/* For a given list of input numbers, c alcul ate Mean Squared Percentage Deviation\n  around the  mean of this dataset.\n  Mean Sq d e v iable t he avera ge squared percentage deviation betwe eneach\n  element  and a center point (mean in this case): \n MSDP = average | x -x _mean|\n  >>> meanSquaredPercentageDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredPercentageDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map((x) => x - mean);\n  return deviations.reduce((a, b) => a + ", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  triplesSumToOne takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto one,and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  triplesSumToTwo takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto two,and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  triplesSumToThree takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto three,and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  triplesSumToFour takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto four,and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  triplesSumToFive takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto five,and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  triplesSumToSix takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto six,and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  triplesSumToSeven takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto seven,and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n    if (count === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  triplesSumToEight takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto eight,and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n  n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars n cars ", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented.\n * >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrDecrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrDecrDecrDecrDecrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (i > 0) {\n    ret[j++] = l[--i];\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented and decremented.\n * >>> incrDecrDecrDecrList([1, 2, 3])\n", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to one ero, andfalse otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to two ero, andfalse otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to three ero, andfalse otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to four ero, andfalse otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to five ero, andfalse otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to six ero, andfalse otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to seven ero, andfalse otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to eight ero, andfalse otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to nine ero, andfalse otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen takes a list of integ ers an input.  it returns true if there are two distinct elements in thelistthat\n s um to ten ero, andfalse otherwise.\n  >>> pairsSumToTen([1, 3, 5, 0])\n  false\n  >>> pairsSumToTen([1, 3, -2, 1])\n  false\n  >>> pairsSumToTen([1, 2, 3, 7])\n  false\n  >>> pairsSumToTen([2, 4, -5, 3, 5, ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  let res = '';\n  let n = parseInt(x, base);\n  while (n >= 10) {\n    res += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToNumber(22)\n  22\n  >>> convertToNumber('22')\n  22\n  >>> convertToNumber('1000')\n  1000\n  >>> convertToNumber('111')\n  111\n  */\nconst convertToNumber = (number) => {\n  let res = 0;\n  let n = parseInt(number, 10);\n  while (n >= 10) {\n    res += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToNumber(22)\n  22\n  >>> convertToNumber('22')\n  22\n  >>> convertToNumber('1000')\n  1000\n  >>> convertToNumber('111')\n  111\n  */\nconst convertToDecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 10);\n  while (n >= 10) {\n    res += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToDecimal(22)\n  22\n  >>> convertToDecimal('22')\n  22\n  >>> convertToDecimal('1000')\n  1000\n  >>> convertToDecimal('111')\n  111\n  */\nconst convertToHex = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToHex(22)\n  22\n  >>> convertToHex('22')\n  22\n  >>> convertToHex('1000')\n  1000\n  >>> convertToHex('111')\n  111\n  */\nconst convertToBin = (number) => {\n  let res = 0;\n  let n = parseInt(number, 2);\n  while (n >= 2) {\n    res += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToBin(22)\n  22\n  >>> convertToBin('22')\n  22\n  >>> convertToBin('1000')\n  1000\n  >>> convertToBin('111')\n  111\n  */\nconst convertToOct = (number) => {\n  let res = 0;\n  let n = parseInt(number, 8);\n  while (n >= 8) {\n    res += n % 8;\n    n = Math.floor(n / 8);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToOct('22')\n  22\n  >>> convertToOct('22')\n  22\n  >>> convertToOct('1000')\n  1000\n  >>> convertToOct('111')\n  111\n  */\nconst convertToHexadecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToHexadecimal(22)\n  22\n  >>> convertToHexadecimal('22')\n  22\n  >>> convertToHexadecimal('1000')\n  1000\n  >>> convertToHexadecimal('111')\n  111\n  */\nconst convertToDecimalHexadecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToDecimalHexadecimal(22)\n  22\n  >>> convertToDecimalHexadecimal('22')\n  22\n  >>> convertToDecimalHexadecimal('1000')\n  1000\n  >>> convertToDecimalHexadecimal('111')\n  111\n  */\nconst convertToHexadecimalDecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToHexadecimalDecimal(22)\n  22\n  >>> convertToHexadecimalDecimal('22')\n  22\n  >>> convertToHexadecimalDecimal('1000')\n  1000\n  >>> convertToHexadecimalDecimal('111')\n  111\n  */\nconst convertToHexadecimalHexadecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToHexadecimalHexadecimal(22)\n  22\n  >>> convertToHexadecimalHexadecimal('22')\n  22\n  >>> convertToHexadecimalHexadecimal('1000')\n  1000\n  >>> convertToHexadecimalHexadecimal('111')\n  111\n  */\nconst convertToHexadecimalHexadecimalDecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToHexadecimalHexadecimalDecimal(22)\n  22\n  >>> convertToHexadecimalHexadecimalDecimal('22')\n  22\n  >>> convertToHexadecimalHexadecimalDecimal('1000')\n  1000\n  >>> convertToHexadecimalHexadecimalDecimal('111')\n  111\n  */\nconst convertToDecimalHexadecimalDecimal = (number) => {\n  let res = 0;\n  let n = parseInt(number, 16);\n  while (n >= 16) {\n    res += n % 16;\n    n = Math.floor(n / 16);\n  }\n  return res;\n};\n\n/*\n  Convert string representation to number.\n  string representation rs ar e lesst han 10. \n  >>> convertToDecimalHexadecimalDecimal(22)\n  22\n  >>> convertToDecimalHexadecimalDecimal('", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(3, 5)\n  15\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*Given length of a side and low retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  25\n  */\nconst triangleArea = (l, r) => {\n  const a = l * r;\n  return a * a / 2;\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\n/*The Fib5 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib5(0) ->0\n  f ib5(1)- > 0\n  f ib5(2) ->  2\n  fib5(3) -> 0\n  fib5(n)->fib5(n-1) + fi b5(n-2) + fib 5(n-3) + fib5(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib5 number sequen ce.  Do not use recursi on.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  14\n  */\nconst fib5 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4);\n};\n\n/*The Fib6 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib6(0) ->0\n  f ib6(1)- > 0\n  f ib6(2) ->  2\n  fib6(3) -> 0\n  fib6(n)->fib6(n-1) + fi b6(n-2) + fib 6(n-3) + fib6(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib6 number sequen ce.  Do not use recursi on.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  10\n  >>> fib6(7)\n  18\n  */\nconst fib6 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4);\n};\n\n/*The Fib7 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib7(0) ->0\n  f ib7(1)- > 0\n  f ib7(2) ->  2\n  fib7(3) -> 0\n  fib7(n)->fib7(n-1) + fi b7(n-2) + fib 7(n-3) + fib7(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib7 number sequen ce.  Do not use recursi on.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  15\n  >>> fib7(7)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4);\n};\n\n/*The Fib8 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib8(0) ->0\n  f ib8(1)- > 0\n  f ib8(2) ->  2\n  fib8(3) -> 0\n  fib8(n)->fib8(n-1) + fi b8(n-2) + fib 8(n-3) + fib8(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib8 number sequen ce.  Do not use recursi on.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  15\n  >>> fib8(7)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4);\n};\n\n/*The Fib9 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib9(0) ->0\n  f ib9(1)- > 0\n  f ib9(2) ->  2\n  fib9(3) -> 0\n  fib9(n)->fib9(n-1) + fi b9(n-2) + fib 9(n-3) + fib9(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib9 number sequen ce.  Do not use recursi on.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  16\n  >>> fib9(7)\n  23\n  */\nconst fib9 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4);\n};\n\n/*The Fib10 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib10(0) ->0\n  f ib10(1)- > 0\n  f ib10(2) ->  2\n  fib10(3) -> 0\n  fib10(n)->fib10(n-1) + fi b10(n-2) + fib 10(n-3) + fib10(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib10 number sequen ce.  Do not use recursi on.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  15\n  >>> fib10(7)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4);\n};\n\n/*The Fib11 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib11(0) ->0\n  f ib11(1)- > 0\n  f ib11(2) ->  2\n  fib11(3) -> 0\n  fib11(n)->fib11(n-1) + fi b11(n-2) + fib 11(n-3) + fib11(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib11 number sequen ce.  Do not use recursi on.\n  >>> fib11(5)\n  11\n  >>> fib11(6)\n", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfList(l.slice(0, mid))\n  let right = medianOfList(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOf(l.slice(0, mid))\n  let right = medianOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfList(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfList(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfListOfList(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfList(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) | 0)\n  let left = medianOfListOfListOfListOfListOfListOfListOf(l.slice(0, mid))\n  let right = medianOfListOfListOfListOfListOfListOfListOf(l.slice(mid + 1, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list  l.\n  >>> medianOfListOfListOfListOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOf", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reversedText = text;\n  reversedText = reversedText.split('').reverse().join('');\n  return reversedText == text;\n};\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  ", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n.toString(2);\n  p = p.toString(2);\n  let res = 0;\n  for (let i = 0; i < p.length; i++) {\n    res = (res << 1) | (p[i] & 1);\n  }\n  return ((res >> n) & 1) === 1;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 3)\n  0\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 7)\n  1\n  >>> modp(3, 11)\n  0\n  >>> modp(3, 13)\n  0\n  >>> modp(3, 15)\n  0\n  >>> modp(3, 17)\n  0\n  >>> modp(3, 19)\n  0\n  >>> modp(3, 21)\n  0\n  >>> modp(3, 23)\n  0\n  >>> modp(3, 25)\n  0\n  >>> modp(3, 27)\n  0\n  >>> modp(3, 29)\n  0\n  >>> modp(3, 31)\n  0\n  >>> modp(3, 33)\n  0\n  >>> modp(3, 35)\n  0\n  >>> modp(3, 37)\n  0\n  >>> modp(3, 39)\n  0\n  >>> modp(3, 41)\n  0\n  >>> modp(3, 43)\n  0\n  >>> modp(3, 45)\n  0\n  >>> modp(3, 47)\n  0\n  >>> modp(3, 49)\n  0\n  >>> modp(3, 51)\n  0\n  >>> modp(3, 53)\n  0\n  >>> modp(3, 55)\n  0\n  >>> modp(3, 57)\n  0\n  >>> modp(3, 59)\n  0\n  >>> modp(3, 61)\n  0\n  >>> modp(3, 63)\n  0\n  >>> modp(3, 65)\n  0\n  >>> modp(3, 67)\n  0\n  >>> modp(3, 69)\n  0\n  >>> modp(3, 71)\n  0\n  >>> modp(3, 73)\n  0\n  >>> modp(3, 75)\n  0\n  >>> modp(3, 77)\n  0\n  >>> modp(3, 79)\n  0\n  >>> modp(3, 81)\n  0\n  >>> modp(3, 83)\n  0\n  >>> modp(3, 85)\n  0\n  >>> modp(3, 87)\n  0\n  >>> modp(3, 89)\n  0\n  >>> modp(3, 91)\n  0\n  >>> modp(3, 93)\n  0\n  >>> modp(3, 95)\n  0\n  >>> modp(3, 97)\n  0\n  >>> modp(3, 99)\n  0\n  >>> modp(4, 1)\n  0\n  >>> modp(4, 3)\n  0\n  >>> modp(4, 5)\n  0\n  >>> modp(4, 7)\n  0\n  >>> modp(4, 11)\n  0\n  >>> modp(4, 13)\n  0\n  >>> modp(4, 15)\n  0\n  >>> modp(4, 17)\n  0\n  >>> modp(4, 19)\n  0\n  >>> modp(4, 21)\n  0\n  >>> modp(4, 23)\n  0\n  >>> modp(4, 25)\n  0\n  >>> modp(4, 27)\n  0\n  >>> modp(4, 29)\n  0\n  >>> modp(4, 31)\n  0\n  >>> modp(4, 33)\n  0\n  >>> modp(4, 35)\n  0\n  >>> modp(4, 37)\n  0\n  >>> modp(4, 39)\n  0\n  >>> modp(4, 41)\n  0\n  >>> modp(4, 43)\n  0\n  >>> modp(4, 45)\n  0\n  >>> modp(4, 47)\n  0\n  >>> modp(4, 49)\n  0\n  >>> modp(4, 51)\n  0\n  >>> modp(4, 53)\n  0\n  >>> modp(4, 55)\n  0\n  >>> modp(4, 57)\n  0\n  >>> modp(4, 59)\n  0\n  >>> modp(4, 61)\n  0\n  >>> modp(4, 63)\n  0\n  >>> modp(4, 65)\n  0\n  >>> modp(4, 67)\n  0\n  >>> modp(4, 69)\n  0\n  >>> modp(4, 71)\n  0\n  >>> modp(4, 73)\n  0\n  >>> modp(4, 75)\n  0\n  >>> modp(4, 77)\n  0\n  >>> modp(4, 79)\n  0\n  >>> modp(4, 81)\n  0\n  >>> modp(4, 83)\n  0\n  >>> modp(4, 85)\n  0\n  >>> modp(4, 87)\n  0\n  >>> modp(4, 89)\n  0\n  >>> modp(4, 91)\n  0\n  >>> modp(4, 93)\n  0\n  >>> modp(4, 95)\n  0\n  >>> modp(4, 97)\n  0\n  >>> modp(4, 99)\n  0\n  >>> modp(5, 1)\n  0\n  >>> modp(5, 3)\n  0\n  >>> modp(5, 5)\n  0\n  >>> modp(5, 7)\n  0\n  >>> modp(5, 11)\n  0\n  >>> modp(5, 13)\n  0\n  >>> modp(5, 15)\n  0\n  >>> modp(5, 17)\n  0\n  >>> modp(5, 19)\n  0\n  >>> modp(5, 21)\n  0\n  >>> modp(5, 23)\n  0\n  >>> modp(5, 25)\n  0\n  >>> modp(5, 27)\n  0\n  >>> modp(5, 29)\n  0\n  >>> modp(5, 31)\n  0\n  >>> modp(5, 33)\n  0\n  >>> modp(5, 35)\n  0\n  >>> modp(5, 37)\n  0\n  >>> modp(5, 39)\n  0\n  >>> modp(5, 41)\n  0\n  >>> modp(5, 43)\n  0\n  >>> modp(5, 45)\n  0\n  >>> modp(5, 47)\n  0\n  >>> modp(5, 49)\n  0\n  >>> modp(5, 51)\n  0\n  >>> modp(5, 53)\n  0\n  >>> modp(5, 55)\n  0\n  >>> modp(5, 57)\n  0\n  >>> modp(5, 59)\n  0\n  >>> modp(5, 61)\n  0\n  >>> modp(5, 63)\n  0\n  >>> modp(5, 65)\n  0\n  >>> modp(5, 67)\n  ", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n      break\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      j++\n    } else {\n      result.push(numbers[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> remove([1,2,3], 2)\n  [1,3]\n  >>> remove([1,2,3], 1)\n  [1,2]\n  >>> remove([1,2,3], 0)\n  []\n  */\nconst remove = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> remove([1,2,3], 2)\n  [1,3]\n  >>> remove([1,2,3], 1)\n  [1,2]\n  >>> remove([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list `list'\n  >>> removeAll([1,2,3], 2)\n  [1,3]\n  >>> removeAll([1,2,3], 1)\n  [1,2]\n  >>> removeAll([1,2,3], 0)\n  []\n  */\nconst removeAll = (list, element) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === element) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/* Remove all occurrences of element `element' from list ", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return retu rn s.split(\" \").map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC ode", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('').filter(x => /[aeiou]/i.test(x)).join('');\n  return vowels;\n};\n\n/*\n  removeNumbers is a function that take s str ing and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('').filter(x => /\\d/i.test(x)).join('');\n  return numbers;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removeWhiteSpace is a function that take s str ing and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('').filter(x => /\\s/.test(x.toLowerCase())).join('');\n  return whiteSpace;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('').filter(x => /\\d/i.test(x)).join('');\n  return numbers;\n};\n\n/*\n  removeWhiteSpace is a function that take s str ing and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removePunctuations2 = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removeWhiteSpace is a function that take s str ing and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removePunctuations3 = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations4 = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations5 = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuations('abcdef')\n  'bcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations6 = (text) => {\n  let punctuations = text.split('').filter(x => /[!?.,:;]/.test(x.toLowerCase())).join('');\n  return punctuations;\n};\n\n/*\n  removePunctuations is a function that take s str ing and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> ", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or above threshold t.\n  >>> equalOrAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveThreshold = (l, t) => {\n  return l.every(n => n === t || n > t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or below threshold t.\n  >>> equalOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n < t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal above threshold t.\n  >>> equalOrAboveOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal below threshold t.\n  >>> equalOrBelowOrAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowOrAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowOrAboveThreshold = (l, t) => {\n  return l.every(n => n === t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal above threshold t.\n  >>> equalOrAboveOrBelowOrAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelowOrAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal below threshold t.\n  >>> equalOrBelowOrAboveOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowOrAboveOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowOrAboveOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal above threshold t.\n  >>> equalOrAboveOrBelowOrAboveOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelowOrAboveOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelowOrAboveOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t || n >= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal below threshold t.\n  >>> equalOrBelowOrAboveOrBelowOrAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowOrAboveOrBelowOrAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowOrAboveOrBelowOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal above threshold t.\n  >>> equalOrAboveOrBelowOrBelowOrBelowOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelowOrBelowOrBelowOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelowOrBelowOrBelowOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t || n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal below threshold t.\n  >>> equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t || n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal above threshold t.\n  >>> equalOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t || n <= t || n >= t || n <= t);\n};\n\n/**\n * Return true if all numbers in the lis t l a re equal or equal below threshold t.\n  >>> equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst equalOrBelowOrAboveOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowOrBelowThreshold = (l, t) => {\n  return l.every(n => n === t || n >= t ", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y with optional precision\n  >>> add(2, 3, 2)\n  5\n  >>> add(5, 7, 2)\n  12\n  */\nconst addWithPrecision = (x, y, precision) => {\n  return x + y.toFixed(precision);\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y with optional precision\n  >>> subtract(2, 3, 2)\n  3\n  >>> subtract(5, 7, 2)\n  -2\n  */\nconst subtractWithPrecision = (x, y, precision) => {\n  return x - y.toFixed(precision);\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  Multiply two numbers x and y with optional precision\n  >>> multiply(2, 3, 2)\n  6\n  >>> multiply(5, 7, 2)\n  24\n  */\nconst multiplyWithPrecision = (x, y, precision) => {\n  return x * y.toFixed(precision);\n};\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  Divide two numbers x and y with optional precision\n  >>> divide(2, 3, 2)\n  1.5\n  >>> divide(5, 7, 2)\n  0.5\n  */\nconst divideWithPrecision = (x, y, precision) => {\n  return x / y.toFixed(precision);\n};\n\n/*\n  Calculate the absolute value of a number\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  -2\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*\n  Calculate the absolute value of a number with optional precision\n  >>> abs(2, 2)\n  2\n  >>> abs(-2, 3, 2)\n  -2\n  */\nconst absWithPrecision = x => {\n  return Math.abs(x.toFixed(2));\n};\n\n/*\n  Calculate the square root of a number\n  >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  Calculate the square root of a number with optional precision\n  >>> sqrt(2, 2)\n  2\n  >>> sqrt(-2, 3, 2)\n  1\n  */\nconst sqrtWithPrecision = x => {\n  return Math.sqrt(x.toFixed(2));\n};\n\n/*\n  Calculate the exponential of a number\n  >>> exp(2)\n  2\n  >>> exp(-2)\n  -2\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*\n  Calculate the exponential of a number with optional precision\n  >>> exp(2, 2)\n  2\n  >>> exp(-2, 3, 2)\n  -2\n  */\nconst expWithPrecision = x => {\n  return Math.exp(x).toFixed(2);\n};\n\n/*\n  Calculate the natural logarithm of a number\n  >>> ln(2)\n  2\n  >>> ln(-2)\n  -2\n  */\nconst ln = x => {\n  return Math.log(x);\n};\n\n/*\n  Calculate the natural logarithm of a number with optional precision\n  >>> ln(2, 2)\n  2\n  >>> ln(-2, 3, 2)\n  -2\n  */\nconst lnWithPrecision = x => {\n  return Math.log(x).toFixed(2);\n};\n\n/*\n  Calculate the logarithm of a number\n  >>> log(2)\n  2\n  >>> log(-2)\n  -2\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*\n  Calculate the logarithm of a number with optional precision\n  >>> log(2, 2)\n  2\n  >>> log(2, 3, 2)\n  -2\n  */\nconst logWithPrecision = x => {\n  return Math.log(x).toFixed(2);\n};\n\n/*\n  Calculate the inverse of a number\n  >>> inverse(2)\n  2\n  >>> inverse(-2)\n  -2\n  */\nconst inverse = x => {\n  return 1 / x;\n};\n\n/*\n  Calculate the inverse of a number with optional precision\n  >>> inverse(2, 2)\n  2\n  >>> inverse(-2, 3, 2)\n  -2\n  */\nconst inverseWithPrecision = x => {\n  return 1 / x.toFixed(2);\n};\n\n/*\n  Calculate the hyperbolic sine of a number\n  >>> sinh(2)\n  2\n  >>> sinh(-2)\n  -2\n  */\nconst sinh = x => {\n  return Math.sinh(x);\n};\n\n/*\n  Calculate the hyperbolic sine of a number with optional precision\n  >>> sinh(2, 2)\n  2\n  >>> sinh(-2, 3, 2)\n  -2\n  */\nconst sinhWithPrecision = x => {\n  return Math.sinh(x).toFixed(2);\n};\n\n/*\n  Calculate the hyperbolic cosine of a number\n  >>> cosh(2)\n  2\n  >>> cosh(-2)\n  -2\n  */\nconst cosh = x => {\n  return Math.cosh(x);\n};\n\n/*\n  Calculate the hyperbolic cosine of a number with optional precision\n  >>> cosh(2, 2)\n  2\n  >>> cosh(-2, 3, 2)\n  -2\n  */\nconst coshWithPrecision = x => {\n  return Math.cosh(x).toFixed(2);\n};\n\n/*\n  Calculate the hyperbolic tangent of a number\n  >>> tanh(2)\n  2\n  >>> tanh(-2)\n  -2\n  */\nconst tanh = x => {\n  return Math.tanh(x);\n};\n\n/*\n  Calculate the hyperbolic tangent of a number with optional precision\n  >>> tanh(2, 2)\n  2\n  >>> tanh(-2, 3, 2)\n  -2\n  */\nconst tanhWithPrecision = x => {\n  return Math.tanh(x).toFixed(2);\n};\n\n/*\n  Calculate the inverse hyperbolic sine of a number\n  >>> asinh(2)\n  2\n  >>> asinh(-2)\n  -2\n  */\nconst asinh = x => {\n  return Math.asinh(x);\n};\n\n/*\n  Calculate the inverse hyperbolic sine of a number with optional precision\n  >>> asinh(2, 2)\n  2\n  >>> asinh(-2, 3, 2)\n  -2\n  */\nconst asinhWithPrecision = x => {\n  return Math.asinh(x).toFixed(2);\n};\n\n/*\n  Calculate the inverse hyperbolic cosine of a number\n  >>> acosh(2)\n  2\n  >>> acosh(-2)\n  -2\n  */\nconst acosh = x => {\n  return Math.acosh(x);\n};\n\n/*\n  Calculate the inverse hyperbolic cosine of a number with optional precision\n  >>> acosh(2, 2)\n  2\n  >>> acosh(-2, 3, 2)\n  -2\n  */\nconst acoshWithPrecision = x => {\n  return Math.acosh(x).toFixed(2);\n};\n\n/*\n  Calculate the inverse hyperbolic tangent of a number\n  >>> atanh(2)\n  2\n  >>> atanh(-2)\n  -2\n  */\nconst atanh = x => {\n  return Math.atanh(x);\n};\n\n/*\n  Calculate the inverse hyperbolic tangent of a number with optional precision\n  >>> atanh(2, 2)\n  2\n  >>> atanh(-2, 3, ", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len0 = s0.length;\n  let len1 = s1.length;\n  let len = len0 + len1;\n  let ret = false;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let chr;\n  let ", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(7)\n  34\n  >>> fib(6)\n  55\n  >>> fib(5)\n  89\n  >>> fib(4)\n  144\n  >>> fib(3)\n  233\n  >>> fib(2)\n  377\n  >>> fib(1)\n  55\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // returns undefined\n  undefined\n  */\nconst fib = n => fib(n-1) + fib(n-2);\n\n/*\n  >>> fib(0) // ", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const re = new RegExp(brackets.split('').reverse().join(''), \"g\");\n  return brackets.match(re);\n};\n\n/**\n  Returns true if the string is a valid HTML tag. \n  \n  >>> isHTML(\"<\")\n  true\n  >>> isHTML(\"<a>\")\n  true\n  >>> isHTML(\"<a foo='bar'>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a></a><a></a><a></a><a></a><a>\")\n  true\n  >>> isHTML(\"<a foo='bar'></a><a>", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] < l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] < l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonic([4, 1, 0, -10])\n * true\n * >>> monotonic([4, 1, 0, 10])\n * false\n * >>> monotonic([4, 1, 0, -10])\n * true\n */\nconst monotonicIncr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] < l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] < l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically decreasing.\n * Return false if list elements are monotonically increasing.\n * >>> monotonic([4, 1, 0, 10])\n * true\n * >>> monotonic([4, 1, 0, -10])\n * false\n * >>> monotonic([4, 1, 0, -10])\n * true\n */\nconst monotonicDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicIncr([4, 1, 0, -10])\n * true\n * >>> monotonicIncr([4, 1, 0, 10])\n * false\n * >>> monotonicIncr([4, 1, 0, -10])\n * true\n */\nconst monotonicIncrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicDecr([4, 1, 0, 10])\n * true\n * >>> monotonicDecr([4, 1, 0, -10])\n * false\n * >>> monotonicDecr([4, 1, 0, -10])\n * true\n */\nconst monotonicDecrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicIncrDecr([4, 1, 0, 10])\n * true\n * >>> monotonicIncrDecr([4, 1, 0, -10])\n * false\n * >>> monotonicIncrDecr([4, 1, 0, -10])\n * true\n */\nconst monotonicIncrDecrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicIncrDecrDecr([4, 1, 0, 10])\n * true\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * false\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * true\n */\nconst monotonicDecrDecrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicIncrDecrDecr([4, 1, 0, 10])\n * true\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * false\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * true\n */\nconst monotonicIncrDecrDecrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n    }\n    if (j >= n) {\n      flag = false;\n      break;\n    }\n    if (l[j] > l[j + 1]) {\n      k++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if list elements are monotonically increasing.\n * Return false if list elements are monotonically decreasing.\n * >>> monotonicDecrDecrDecr([4, 1, 0, 10])\n * true\n * >>> monotonicDecrDecrDecr([4, 1, 0, -10])\n * false\n * >>> monotonicDecrDecrDecr([4, 1, 0, -10])\n * true\n */\nconst monotonicDecrDecrDecrDecr = (l) => {\n  let n = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    while (j < n && l[j] > l[j + 1]) {\n      j++;\n", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWith([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWith([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicatesNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicatesNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elementsfor t wo lists.\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 2;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if it is a prime number.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome.\n  >>> isPalindrome(13195)\n  true\n  >>> isPalindrome(2048)\n  false\n  */\nconst isPalindrome = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumber(13195)\n  true\n  >>> isPalindromeOfNumber(2048)\n  false\n  */\nconst isPalindromeOfNumber = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumber(13195)\n  true\n  >>> isPalindromeOfNumber(2048)\n  false\n  */\nconst isPalindromeOfNumberOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of n.\n  >>> isPalindromeOfNumberOf(13195)\n  true\n  >>> isPalindromeOfNumberOf(2048)\n  false\n  */\nconst isPalindromeOfNumberOfOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, ", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/)\n  const nested_paren_groups = []\n  let current_level = 0\n  let current_level_count = 0\n  let current_level_index = 0\n  let current_level_string = ''\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level_string_count = 0\n  let current_level_string_index = 0\n  let current_level", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array and returns the sum of all the elements in the array.\n  >>> sumOfArray([1, 2, 3, 4])\n  10\n  >>> sumOfArray([5, 6, 7, 8])\n  15\n  >>> sumOfArray([9, 10, 11, 12])\n  20\n  >>> sumOfArray([13, 14, 15, 16])\n  25\n  >>> sumOfArray([17, 18, 19, 20])\n  30\n  >>> sumOfArray([21, 22, 23, 24])\n  35\n  >>> sumOfArray([25, 26, 27, 28])\n  40\n  >>> sumOfArray([29, 30, 31, 32])\n  45\n  >>> sumOfArray([33, 34, 35, 36])\n  50\n  >>> sumOfArray([37, 38, 39, 40])\n  55\n  >>> sumOfArray([41, 42, 43, 44])\n  60\n  >>> sumOfArray([45, 46, 47, 48])\n  65\n  >>> sumOfArray([49, 50, 51, 52])\n  70\n  >>> sumOfArray([53, 54, 55, 56])\n  75\n  >>> sumOfArray([57, 58, 59, 60])\n  80\n  >>> sumOfArray([61, 62, 63, 64])\n  85\n  >>> sumOfArray([65, 66, 67, 68])\n  90\n  >>> sumOfArray([69, 70, 71, 72])\n  95\n  >>> sumOfArray([73, 74, 75, 76])\n  100\n  >>> sumOfArray([77, 78, 79, 80])\n  105\n  >>> sumOfArray([81, 82, 83, 84])\n  110\n  >>> sumOfArray([85, 86, 87, 88])\n  115\n  >>> sumOfArray([89, 90, 91, 92])\n  120\n  >>> sumOfArray([93, 94, 95, 96])\n  125\n  >>> sumOfArray([97, 98, 99, 100])\n  130\n  >>> sumOfArray([101, 102, 103, 104])\n  135\n  >>> sumOfArray([105, 106, 107, 108])\n  140\n  >>> sumOfArray([109, 110, 111, 112])\n  145\n  >>> sumOfArray([113, 114, 115, 116])\n  150\n  >>> sumOfArray([117, 118, 119, 120])\n  155\n  >>> sumOfArray([121, 122, 123, 124])\n  160\n  >>> sumOfArray([125, 126, 127, 128])\n  165\n  >>> sumOfArray([129, 130, 131, 132])\n  170\n  >>> sumOfArray([133, 134, 135, 136])\n  175\n  >>> sumOfArray([137, 138, 139, 140])\n  180\n  >>> sumOfArray([141, 142, 143, 144])\n  185\n  >>> sumOfArray([145, 146, 147, 148])\n  190\n  >>> sumOfArray([149, 150, 151, 152])\n  195\n  >>> sumOfArray([153, 154, 155, 156])\n  200\n  >>> sumOfArray([157, 158, 159, 160])\n  205\n  >>> sumOfArray([161, 162, 163, 164])\n  210\n  >>> sumOfArray([165, 166, 167, 168])\n  215\n  >>> sumOfArray([169, 170, 171, 172])\n  220\n  >>> sumOfArray([173, 174, 175, 176])\n  225\n  >>> sumOfArray([177, 178, 179, 180])\n  230\n  >>> sumOfArray([181, 182, 183, 184])\n  235\n  >>> sumOfArray([185, 186, 187, 188])\n  240\n  >>> sumOfArray([189, 190, 191, 192])\n  245\n  >>> sumOfArray([193, 194, 195, 196])\n  250\n  >>> sumOfArray([197, 198, 199, 200])\n  255\n  >>> sumOfArray([201, 202, 203, 204])\n  260\n  >>> sumOfArray([205, 206, 207, 208])\n  265\n  >>> sumOfArray([209, 210, 211, 212])\n  270\n  >>> sumOfArray([213, 214, 215, 216])\n  275\n  >>> sumOfArray([217, 218, 219, 220])\n  280\n  >>> sumOfArray([221, 222, 223, 224])\n  285\n  >>> sumOfArray([225, 226, 227, 228])\n  290\n  >>> sumOfArray([229, 230, 231, 232])\n  295\n  >>> sumOfArray([233, 234, 235, 236])\n  300\n  >>> sumOfArray([237, 238, 239, 240])\n  305\n  >>> sumOfArray([241, 242, 243, 244])\n  310\n  >>> sumOfArray([245, 246, 247, 248])\n  315\n  >>> sumOfArray([249, 250, 251, 252])\n  320\n  >>> sumOfArray([253, 254, 255, 256])\n  325\n  >>> sumOfArray([257, 258, 259, 260])\n  330\n  >>> sumOfArray([261, 262, 263, 264])\n  335\n  >>> sumOfArray([265, 266, 267, 268])\n  340\n  >>> sumOfArray([269, 270, 271, 272])\n  345\n  >>> sumOfArray([273, 274, 275, 276])\n  350\n  >>> sumOfArray([277, 278, 279, 280])\n  355\n  >>> sumOfArray([281, 282, 283, 284])\n  360\n  >>> sumOfArray([285, 286, 287, 288])\n  365\n  >>> sumOfArray([289, 290, 291, 292])\n  370\n  >>> sumOfArray([293, 294, 295, 296])\n  375\n  >>> sumOfArray([297, 298, 299, 300])\n  380\n  >>> sumOfArray([301, 302, 303, 304])\n  385\n  >>> sumOfArray([305, 306, 307, 308])\n  390\n  >>> sumOfArray([309, 310, 311, 312)\n  395\n  >>> sumOfArray([313, 314, 315, 316])\n  400\n  >>> sumOfArray([317, 318, 319, 320])\n  405\n  >>> sumOfArray([321, 322, 323, 324])\n  410\n  >>> sumOfArray([325, 326, 32", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const re = new RegExp(`^${brackets}$`);\n  return re.test(openingBracket);\n};\n\n/**\n  Returns true if a closing bracket is followed by a opening bracket.\n\n  >>> correctBracketing(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")\n  true\n  >>> correctBracketing(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")(\")", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sa = 0\n  let sb = 0\n  let sai = 1\n  let sbi = 2\n  let saj = 3\n  let sbj = 4\n  let sak = 0\n  let sbk = 0\n  let sakj = 1\n  let sbkj = 2\n  let sakjk = 2\n  let sbkjk = 3\n  let sakjl = 3\n  let sbkjl = 3\n  let sakjm = 3\n  let sbkjm = 3\n  let sakjn = 4\n  let sbkjn = 4\n  let sakjp = 5\n  let sbkjp = 5\n  let sakjq = 5\n  let sbkjq = 5\n  let sakjr = 5\n  let sbkjr = 5\n  let sakjs = 5\n  let sbkjs = 5\n  let sakjt = 5\n  let sbkjt = 5\n  let sakjv = 5\n  let sbkjv = 5\n  let sakjw = 5\n  let sbkjw = 5\n  let sakjx = 5\n  let sbkjx = 5\n  let sakjy = 5\n  let sbkjy = 5\n  let sakjz = 5\n  let sbkjz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = 5\n  let sbkjmw = 5\n  let sakjmx = 5\n  let sbkjmx = 5\n  let sakjmy = 5\n  let sbkjmy = 5\n  let sakjmz = 5\n  let sbkjmz = 5\n  let sakjmv = 5\n  let sbkjmv = 5\n  let sakjmw = ", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = [];\n  let fibfib2 = [];\n  let fibfib3 = [];\n  for (let i = 1; i <= n; i++) {\n    fibfib.push(i);\n    fib2.push(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]);\n    fib3.push(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3] + fibfib[i - 4] + fibfib[i - 5] + fibfib[i - 6] + fibfib[i - 7] + fibfib[i - 8] + fibfib[i - 9] + fibfib[i - 10] + fibfib[i - 11] + fibfib[i - 12] + fibfib[i - 13] + fibfib[i - 14] + fibfib[i - 15] + fibfib[i - 16] + fibfib[i - 17] + fibfib[i - 18] + fibfib[i - 19] + fibfib[i - 20] + fibfib[21] + fibfib[22] + fibfib[23] + fibfib[24] + fibfib[25] + fibfib[26] + fibfib[27] + fib[28] + fib[29] + fib[30] + fib[31] + fib[32] + fib[33] + fib[34] + fib[35] + fib[36] + fib[37] + fib[38] + fib[39] + fib[40] + fib[41] + fib[42] + fib[43] + fib[44] + fib[45] + fib[46] + fib[47] + fib[48] + fib[49] + fib[50] + fib[51] + fib[52] + fib[53] + fib[54] + fib[55] + fib[56] + fib[57] + fib[58] + fib[59] + fib[60] + fib[61] + fib[62] + fib[63] + fib[64] + fib[65] + fib[66] + fib[67] + fib[68] + fib[69] + fib[70] + fib[71] + fib[72] + fib[73] + fib[74] + fib[75] + fib[76] + fib[77] + fib[78] + fib[79] + fib[80] + fib[81] + fib[82] + fib[83] + fib[84] + fib[85] + fib[86] + fib[87] + fib[88] + fib[89] + fib[90] + fib[91] + fib[92] + fib[93] + fib[94] + fib[95] + fib[96] + fib[97] + fib[98] + fib[99] + fib[100] + fib[101] + fib[102] + fib[103] + fib[104] + fib[105] + fib[106] + fib[107] + fib[108] + fib[109] + fib[110] + fib[111] + fib[112] + fib[113] + fib[114] + fib[115] + fib[116] + fib[117] + fib[118] + fib[119] + fib[120] + fib[121] + fib[122] + fib[123] + fib[124] + fib[125] + fib[126] + fib[127] + fib[128] + fib[129] + fib[130] + fib[131] + fib[132] + fib[133] + fib[134] + fib[135] + fib[136] + fib[137] + fib[138] + fib[139] + fib[140] + fib[141] + fib[142] + fib[143] + fib[144] + fib[145] + fib[146] + fib[147] + fib[148] + fib[149] + fib[150] + fib[151] + fib[152] + fib[153] + fib[154] + fib[155] + fib[156] + fib[157] + fib[158] + fib[159] + fib[160] + fib[161] + fib[162] + fib[163] + fib[164] + fib[165] + fib[166] + fib[167] + fib[168] + fib[169] + fib[170] + fib[171] + fib[172] + fib[173] + fib[174] + fib[175] + fib[176] + fib[177] + fib[178] + fib[179] + fib[180] + fib[181] + fib[182] + fib[183] + fib[184] + fib[185] + fib[186] + fib[187] + fib[188] + fib[189] + fib[190] + fib[191] + fib[192] + fib[193] + fib[194] + fib[195] + fib[196] + fib[197] + fib[198] + fib[199] + fib[200] + fib[201] + fib[202] + fib[203] + fib[204] + fib[205] + fib[206] + fib[207] + fib[208] + fib[209] + fib[210] + fib[211] + fib[212] + fib[213] + fib[214] + fib[215] + fib[216] + fib[217] + fib[218] + fib[219] + fib[220] + fib[221] + fib[222] + fib[223] + fib[224] + fib[225] + fib[226] + fib[227] + fib[228] + fib[229] + fib[230] + fib[231] + fib[232] + fib[233] + fib[234] + fib[235] + fib[236] + fib[237] + fib[238] + fib[239] + fib[240] + fib[241] + fib[242] + fib[243] + fib[244] + fib[245] + fib[246] + fib[247] + fib[248] + fib[249] + fib[250] + fib[251] + fib[252];\n  }\n  return fibfib;\n};\n\n/*The Fibonacci number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fib n  == 0 \n  fib n-1 ==  0\n  fib n-2 ==  1\n  fib n-3  ==  1\n  fib n-4  ==  2\n  fib n-5  ==  3\n  fib n-6  ==  5\n  fib n-7  ==  8\n  fib n-8  ==  13\n  fib n-9  ==  21\n  fib n-10  ==  34\n  fib n-11  ==  55\n  fib n-12  ==  89\n  fib n-13  ==  144\n  fib n-14  ==  233\n  fib n-15  ==  377\n  fib n-16  ==  610\n  fib n-17  ==  987\n  fib n-18  ==  1597\n  fib n-19  ", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  let vowelsArray = [];\n  let vowelsArray2 = [];\n  let vowelsArray3 = [];\n  let vowelsArray4 = [];\n  let vowelsArray5 = [];\n  let vowelsArray6 = [];\n  let vowelsArray7 = [];\n  let vowelsArray8 = [];\n  let vowelsArray9 = [];\n  let vowelsArray10 = [];\n  let vowelsArray11 = [];\n  let vowelsArray12 = [];\n  let vowelsArray13 = [];\n  let vowelsArray14 = [];\n  let vowelsArray15 = [];\n  let vowelsArray16 = [];\n  let vowelsArray17 = [];\n  let vowelsArray18 = [];\n  let vowelsArray19 = [];\n  let vowelsArray20 = [];\n  let vowelsArray21 = [];\n  let vowelsArray22 = [];\n  let vowelsArray23 = [];\n  let vowelsArray24 = [];\n  let vowelsArray25 = [];\n  let vowelsArray26 = [];\n  let vowelsArray27 = [];\n  let vowelsArray28 = [];\n  let vowelsArray29 = [];\n  let vowelsArray30 = [];\n  let vowelsArray31 = [];\n  let vowelsArray32 = [];\n  let vowelsArray33 = [];\n  let vowelsArray34 = [];\n  let vowelsArray35 = [];\n  let vowelsArray36 = [];\n  let vowelsArray37 = [];\n  let vowelsArray38 = [];\n  let vowelsArray39 = [];\n  let vowelsArray40 = [];\n  let vowelsArray41 = [];\n  let vowelsArray42 = [];\n  let vowelsArray43 = [];\n  let vowelsArray44 = [];\n  let vowelsArray45 = [];\n  let vowelsArray46 = [];\n  let vowelsArray47 = [];\n  let vowelsArray48 = [];\n  let vowelsArray49 = [];\n  let vowelsArray50 = [];\n  let vowelsArray51 = [];\n  let vowelsArray52 = [];\n  let vowelsArray53 = [];\n  let vowelsArray54 = [];\n  let vowelsArray55 = [];\n  let vowelsArray56 = [];\n  let vowelsArray57 = [];\n  let vowelsArray58 = [];\n  let vowelsArray59 = [];\n  let vowelsArray60 = [];\n  let vowelsArray61 = [];\n  let vowelsArray62 = [];\n  let vowelsArray63 = [];\n  let vowelsArray64 = [];\n  let vowelsArray65 = [];\n  let vowelsArray66 = [];\n  let vowelsArray67 = [];\n  let vowelsArray68 = [];\n  let vowelsArray69 = [];\n  let vowelsArray70 = [];\n  let vowelsArray71 = [];\n  let vowelsArray72 = [];\n  let vowelsArray73 = [];\n  let vowelsArray74 = [];\n  let vowelsArray75 = [];\n  let vowelsArray76 = [];\n  let vowelsArray77 = [];\n  let vowelsArray78 = [];\n  let vowelsArray79 = [];\n  let vowelsArray80 = [];\n  let vowelsArray81 = [];\n  let vowelsArray82 = [];\n  let vowelsArray83 = [];\n  let vowelsArray84 = [];\n  let vowelsArray85 = [];\n  let vowelsArray86 = [];\n  let vowelsArray87 = [];\n  let vowelsArray88 = [];\n  let vowelsArray89 = [];\n  let vowelsArray90 = [];\n  let vowelsArray91 = [];\n  let vowelsArray92 = [];\n  let vowelsArray93 = [];\n  let vowelsArray94 = [];\n  let vowelsArray95 = [];\n  let vowelsArray96 = [];\n  let vowelsArray97 = [];\n  let vowelsArray98 = [];\n  let vowelsArray99 = [];\n  let vowelsArray100 = [];\n  let vowelsArray101 = [];\n  let vowelsArray102 = [];\n  let vowelsArray103 = [];\n  let vowelsArray104 = [];\n  let vowelsArray105 = [];\n  let vowelsArray106 = [];\n  let vowelsArray107 = [];\n  let vowelsArray108 = [];\n  let vowelsArray109 = [];\n  let vowelsArray110 = [];\n  let vowelsArray111 = [];\n  let vowelsArray112 = [];\n  let vowelsArray113 = [];\n  let vowelsArray114 = [];\n  let vowelsArray115 = [];\n  let vowelsArray116 = [];\n  let vowelsArray117 = [];\n  let vowelsArray118 = [];\n  let vowelsArray119 = [];\n  let vowelsArray120 = [];\n  let vowelsArray121 = [];\n  let vowelsArray122 = [];\n  let vowelsArray123 = [];\n  let vowelsArray124 = [];\n  let vowelsArray125 = [];\n  let vowelsArray126 = [];\n  let vowelsArray127 = [];\n  let vowelsArray128 = [];\n  let vowelsArray129 = [];\n  let vowelsArray130 = [];\n  let vowelsArray131 = [];\n  let vowelsArray132 = [];\n  let vowelsArray133 = [];\n  let vowelsArray134 = [];\n  let vowelsArray135 = [];\n  let vowelsArray136 = [];\n  let vowelsArray137 = [];\n  let vowelsArray138 = [];\n  let vowelsArray139 = [];\n  let vowelsArray140 = [];\n  let vowelsArray141 = [];\n  let vowelsArray142 = [];\n  let vowelsArray143 = [];\n  let vowelsArray144 = [];\n  let vowelsArray145 = [];\n  let vowelsArray146 = [];\n  let vowelsArray147 = [];\n  let vowelsArray148 = [];\n  let vowelsArray149 = [];\n  let vowelsArray150 = [];\n  let vowelsArray151 = [];\n  let vowelsArray152 = [];\n  let vowelsArray153 = [];\n  let vowelsArray154 = [];\n  let vowelsArray155 = [];\n  let vowelsArray156 = [];\n  let vowelsArray157 = [];\n  let vowelsArray158 = [];\n  let vowelsArray159 = [];\n  let vowelsArray160 = [];\n  let vowelsArray161 = [];\n  let vowelsArray162 = [];\n  let vowelsArray163 = [];\n  let vowelsArray164 = [];\n  let vowelsArray165 = [];\n  let vowelsArray166 = [];\n  let vowelsArray167 = [];\n  let vowelsArray168 = [];\n  let vowelsArray169 = [];\n  let vowelsArray170 = [];\n  let vowelsArray171 = [];\n  let vowelsArray172 = [];\n  let vowelsArray173 = [];\n  let vowelsArray174 = [];\n  let vowelsArray175 = [];\n  let vowelsArray176 = [];\n  let vowelsArray177 = [];\n  let vowelsArray178 = [];\n  let vowelsArray179 = [];\n  let vowelsArray180 = [];\n  let vowelsArray181 = [];\n  let vowelsArray182 = [];\n  let vowelsArray183 = [];\n  let vowelsArray184 = [];\n  let vowelsArray185 = [];\n  let vowelsArray186 = [];\n  let vowelsArray187 = [];\n  let vowelsArray188 = [];\n  let vowelsArray189 = [];\n  let vowelsArray190 = [];\n  let vowelsArray191 = [];\n  let vowelsArray192 = [];\n  let vowelsArray193 = [];\n  let vowelsArray", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result + s.substr(0, s.length - shift);\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst intToBase10 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert a string to an integer in base 10.\n */\nconst base10ToInt = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = parseInt(s.substr(0, n), 10);\n  return result;\n};\n\n/**\n * Convert a string to an integer in base 2.\n */\nconst base2ToInt = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = parseInt(s.substr(0, n), 2);\n  return result;\n};\n\n/**\n * Convert a string to an integer in base 2.\n */\nconst base10ToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = parseInt(s.substr(0, n), 2);\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst intToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst base2ToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst intToBase10 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst base10ToBase10 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst intToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst base2ToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst intToBase10 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst base10ToBase10 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst intToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 2.\n */\nconst base2ToBase2 = (x) => {\n  let s = x.toString();\n  let n = s.length;\n  let result = \"\";\n  let i = n - 1;\n  while (i >= 0) {\n    let digit = s.charAt(i);\n    result += digit;\n    if (digit === \"0\") {\n      result += \"1\";\n      i--;\n    } else if (digit === \"1\") {\n      result += \"0\";\n      i--;\n    } else {\n      result += \"0\";\n      i--;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert an integer to a string in base 10.\n */\nconst intToBase10 = (x) => {\n  let s = x.toString();\n", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the lower characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper and lower case characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes astr", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let sum = 0;\n    let num = 0;\n    let arr = [];\n    let arr1 = [];\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n    let arr73 = [];\n    let arr74 = [];\n    let arr75 = [];\n    let arr76 = [];\n    let arr77 = [];\n    let arr78 = [];\n    let arr79 = [];\n    let arr80 = [];\n    let arr81 = [];\n    let arr82 = [];\n    let arr83 = [];\n    let arr84 = [];\n    let arr85 = [];\n    let arr86 = [];\n    let arr87 = [];\n    let arr88 = [];\n    let arr89 = [];\n    let arr90 = [];\n    let arr91 = [];\n    let arr92 = [];\n    let arr93 = [];\n    let arr94 = [];\n    let arr95 = [];\n    let arr96 = [];\n    let arr97 = [];\n    let arr98 = [];\n    let arr99 = [];\n    let arr100 = [];\n    let arr101 = [];\n    let arr102 = [];\n    let arr103 = [];\n    let arr104 = [];\n    let arr105 = [];\n    let arr106 = [];\n    let arr107 = [];\n    let arr108 = [];\n    let arr109 = [];\n    let arr110 = [];\n    let arr111 = [];\n    let arr112 = [];\n    let arr113 = [];\n    let arr114 = [];\n    let arr115 = [];\n    let arr116 = [];\n    let arr117 = [];\n    let arr118 = [];\n    let arr119 = [];\n    let arr120 = [];\n    let arr121 = [];\n    let arr122 = [];\n    let arr123 = [];\n    let arr124 = [];\n    let arr125 = [];\n    let arr126 = [];\n    let arr127 = [];\n    let arr128 = [];\n    let arr129 = [];\n    let arr130 = [];\n    let arr131 = [];\n    let arr132 = [];\n    let arr133 = [];\n    let arr134 = [];\n    let arr135 = [];\n    let arr136 = [];\n    let arr137 = [];\n    let arr138 = [];\n    let arr139 = [];\n    let arr140 = [];\n    let arr141 = [];\n    let arr142 = [];\n    let arr143 = [];\n    let arr144 = [];\n    let arr145 = [];\n    let arr146 = [];\n    let arr147 = [];\n    let arr148 = [];\n    let arr149 = [];\n    let arr150 = [];\n    let arr151 = [];\n    let arr152 = [];\n    let arr153 = [];\n    let arr154 = [];\n    let arr155 = [];\n    let arr156 = [];\n    let arr157 = [];\n    let arr158 = [];\n    let arr159 = [];\n    let arr160 = [];\n    let arr161 = [];\n    let arr162 = [];\n    let arr163 = [];\n    let arr164 = [];\n    let arr165 = [];\n    let arr166 = [];\n    let arr167 = [];\n    let arr168 = [];\n    let arr169 = [];\n    let arr170 = [];\n    let arr171 = [];\n    let arr172 = [];\n    let arr173 = [];\n    let arr174 = [];\n    let arr175 = [];\n    let arr176 = [];\n    let arr177 = [];\n    let arr178 = [];\n    let arr179 = [];\n    let arr180 = [];\n    let arr181 = [];\n    let arr182 = [];\n    let arr183 = [];\n    let arr184 = [];\n    let arr185 = [];\n    let arr186 = [];\n    let arr187 = [];\n    let arr188 = [];\n    let arr189 = [];\n    let arr190 = [];\n    let arr191 = [];\n    let arr192 = [];\n    let arr193 = [];\n    let arr194 = [];\n    let arr195 = [];\n    let arr196 = [];\n    let arr197 = [];\n    let arr198 = [];\n    let arr199 = [];\n    let arr200 = [];\n    let arr201 = [];\n    let arr202 = [];\n    let arr203 = [];\n    let arr204 = [];\n    let arr205 = [];\n    let arr206 = [];\n    let arr207 = [];\n    let arr208 = [];\n    let arr209 = [];\n    let arr210 = [];\n    let arr211 = [];\n    let arr212 = [];\n    let arr213 = [];\n    let arr214 = [];\n    let arr215 = [];\n    let arr216 = [];\n    let arr217 = [];\n    let arr218 = [];\n    let arr219 = [];\n    let arr220 = [];\n    let arr221 = [];\n    let arr222 = [];\n    let arr223 = [];\n    let arr224 = [];\n    let arr225 = [];\n    let arr226 = [];\n    let arr227 = [];\n    let arr228 = [];\n    let arr229 = [];\n    let arr230 = [];\n    let arr231 = [];\n    let arr232 = [];\n    let arr233 = [];\n    let arr234 = [];\n    let arr235 = [];\n    let arr236 = [];\n    let arr237 = [];\n    let arr238 = [];\n    let arr239 = [];\n    let arr240 = [];\n    let arr241 = [];\n    let arr242 = [];\n    let arr243 = [];\n    let arr244 = [];\n    let arr245 = [];\n    let arr246 = [];\n", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even === 0) return [];\n  result.push(even);\n  result.push(index);\n  return result;\n};\n\n// Given an array representing a branc h ofa tree thathas non-negative integer nodes\n// your task is to pluck one o f the  nodesa nd retu rn it.\n// The plucked node should be t henode with thesmallest even  value.\n// If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckOne = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even === 0) return [];\n  result.push(even);\n  result.push(index);\n  return result;\n};\n\n// Given an array representing a branc h ofa tree thathas non-negative integer nodes\n// your task is to pluck one o f the  nodesa nd retu rn it.\n// The plucked node should be t henode with thesmallest even  value.\n// If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckTwo = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even === 0) return [];\n  result.push(even);\n  result.push(index);\n  return result;\n};\n\n// Given an array representing a branc h ofa tree thathas non-negative integer nodes\n// your task is to pluck one o f the  nodesa nd retu rn it.\n// The plucked node should be t henode with thesmallest even  value.\n// If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckThree = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even === 0) return [];\n  result.push(even);\n  result.push(index);\n  return result;\n};\n\n// Given an array representing a branc h ofa tree thathas non-negative integer nodes\n// your task is to pluck one o f the  nodesa nd retu rn it.\n// The plucked node should be t henode with thesmallest even  value.\n// If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckFour = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      index = i;\n    }\n  }\n  if (even === 0) return [];\n  result.push(even);\n  result.push(index);\n  return result;\n};\n\n// Given an array representing a branc h ofa tree thathas ", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let pos = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  let found = false;\n  let found2 = false;\n  let found3 = false;\n  let found4 = false;\n  let found5 = false;\n  let found6 = false;\n  let found7 = false;\n  let found8 = false;\n  let found9 = false;\n  let found10 = false;\n  let found11 = false;\n  let found12 = false;\n  let found13 = false;\n  let found14 = false;\n  let found15 = false;\n  let found16 = false;\n  let found17 = false;\n  let found18 = false;\n  let found19 = false;\n  let found20 = false;\n  let found21 = false;\n  let found22 = false;\n  let found23 = false;\n  let found24 = false;\n  let found25 = false;\n  let found26 = false;\n  let found27 = false;\n  let found28 = false;\n  let found29 = false;\n  let found30 = false;\n  let found31 = false;\n  let found32 = false;\n  let found33 = false;\n  let found34 = false;\n  let found35 = false;\n  let found36 = false;\n  let found37 = false;\n  let found38 = false;\n  let found39 = false;\n  let found40 = false;\n  let found41 = false;\n  let found42 = false;\n  let found43 = false;\n  let found44 = false;\n  let found45 = false;\n  let found46 = false;\n  let found47 = false;\n  let found48 = false;\n  let found49 = false;\n  let found50 = false;\n  let found51 = false;\n  let found52 = false;\n  let found53 = false;\n  let found54 = false;\n  let found55 = false;\n  let found56 = false;\n  let found57 = false;\n  let found58 = false;\n  let found59 = false;\n  let found60 = false;\n  let found61 = false;\n  let found62 = false;\n  let found63 = false;\n  let found64 = false;\n  let found65 = false;\n  let found66 = false;\n  let found67 = false;\n  let found68 = false;\n  let found69 = false;\n  let found70 = false;\n  let found71 = false;\n  let found72 = false;\n  let found73 = false;\n  let found74 = false;\n  let found75 = false;\n  let found76 = false;\n  let found77 = false;\n  let found78 = false;\n  let found79 = false;\n  let found80 = false;\n  let found81 = false;\n  let found82 = false;\n  let found83 = false;\n  let found84 = false;\n  let found85 = false;\n  let found86 = false;\n  let found87 = false;\n  let found88 = false;\n  let found89 = false;\n  let found90 = false;\n  let found91 = false;\n  let found92 = false;\n  let found93 = false;\n  let found94 = false;\n  let found95 = false;\n  let found96 = false;\n  let found97 = false;\n  let found98 = false;\n  let found99 = false;\n  let found100 = false;\n  let found101 = false;\n  let found102 = false;\n  let found103 = false;\n  let found104 = false;\n  let found105 = false;\n  let found106 = false;\n  let found107 = false;\n  let found108 = false;\n  let found109 = false;\n  let found110 = false;\n  let found111 = false;\n  let found112 = false;\n  let found113 = false;\n  let found114 = false;\n  let found115 = false;\n  let found116 = false;\n  let found117 = false;\n  let found118 = false;\n  let found119 = false;\n  let found120 = false;\n  let found121 = false;\n  let found122 = false;\n  let found123 = false;\n  let found124 = false;\n  let found125 = false;\n  let found126 = false;\n  let found127 = false;\n  let found128 = false;\n  let found129 = false;\n  let found130 = false;\n  let found131 = false;\n  let found132 = false;\n  let found133 = false;\n  let found134 = false;\n  let found135 = false;\n  let found136 = false;\n  let found137 = false;\n  let found138 = false;\n  let found139 = false;\n  let found140 = false;\n  let found141 = false;\n  let found142 = false;\n  let found143 = false;\n  let found144 = false;\n  let found145 = false;\n  let found146 = false;\n  let found147 = false;\n  let found148 = false;\n  let found149 = false;\n  let found150 = false;\n  let found151 = false;\n  let found152 = false;\n  let found153 = false;\n  let found154 = false;\n  let found155 = false;\n  let found156 = false;\n  let found157 = false;\n  let found158 = false;\n  let found159 = false;\n  let found160 = false;\n  let found161 = false;\n  let found162 = false;\n  let found163 = false;\n  let found164 = false;\n  let found165 = false;\n  let found166 = false;\n  let found167 = false;\n  let found168 = false;\n  let found169 = false;\n  let found170 = false;\n  let found171 = false;\n  let found172 = false;\n  let found173 = false;\n  let found174 = false;\n  let found175 = false;\n  let found176 = false;\n  let found177 = false;\n  let found178 = false;\n  let found179 = false;\n  let found180 = false;\n  let found181 = false;\n  let found182 = false;\n  let found183 = false;\n  let found184 = false;\n  let found185 = false;\n  let found186 = false;\n  let found187 = false;\n  let found188 = false;\n  let found189 = false;\n  let found190 = false;\n  let found191 = false;\n  let found192 = false;\n  let found193 = false;\n  let found194 = false;\n  let found195 = false;\n  let found196 = false;\n  let found197 = false;\n  let found198 = false;\n  let found199 = false;\n  let found200 = false;\n  let found201 = false;\n  let found202 = false;\n  let found203 = false;\n  let found204 = false;\n  let found205 = false;\n  let found206 = false;\n  let found207 = false;\n  let found208 = false;\n  let found209 = false;\n  let found210 = false;\n  let found211 = false;\n  let found212 = false;\n  let found213 = false;\n  let found214 = false;\n  let found215 = false;\n  let found216 = false;\n  let found217 = false;\n  let found218 = false;\n  let found219 = false;\n  let found220 = false;\n  let found221 = false;\n  let found222 = false;\n  let found223 = false;\n  let found224 = false;\n  let found225 = false;\n  let found226 = false;\n  let found227 = false;\n  let found228 = false;\n  let found229 = false;\n  let found230 = false;\n  let found231 = false;\n  let found232 = false;\n  let found233 = false;\n  let found234 = false;\n  let found235 = false;\n  let found236 = false;\n  let found237 = false;\n  let found238 = false;\n  let found239 = false;\n  let found240 = false;\n  let found241 = false;\n  let found242 = false;\n  let found243 = false;\n  let found244 = false;\n  let found245 = false;\n  let found246 = false;\n  let found247 = false;\n  let found248 = false;\n  let found249 = false;\n  let found250 = false;\n  let found251 = false;\n  let found252 = false;\n  let found253 = false;\n  let found254 = false;\n  let found255", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0);\n};\n\n/**\n * Get a random element from an array\n * >>> getRandom([])\n */\nconst getRandom = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from an array\n * >>> getRandom([])\n */\nconst getRandomInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRange(0, 10)\n */\nconst getRandomInRangeInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n * Get a random element from an array\n * >>> getRandomInRangeInt(0, 10)\n */\nconst getRandomInRangeIntInt = (minVal, maxVal) => {\n  return Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal;\n};\n\n/**\n", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  let min = 0;\n  let max = len - 1;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let minValue = Number.MAX_VALUE;\n  let maxValue = Number.MIN_VALUE;\n  let minIndexValue = Number.MAX_VALUE;\n  let maxIndexValue = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.MIN_VALUE;\n  let minIndexMin = Number.MAX_VALUE;\n  let maxIndexMax = Number.", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const a1 = Math.pow(a, 2);\n  const a2 = Math.pow(a, 3);\n  const a3 = Math.pow(a, 4);\n  const b1 = Math.pow(b, 2);\n  const b2 = Math.pow(b, 3);\n  const b3 = Math.pow(b, 4);\n  const c1 = Math.pow(c, 2);\n  const c2 = Math.pow(c, 3);\n  const c3 = Math.pow(c, 4);\n  return (a1 + a2 + a3) * (b1 + b2 + b3) * (c1 + c2 + c3);\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t ", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Math.max(...q);\n  const maxWeightWeight = maxWeight * w;\n  const maxWeightWeightWeight = maxWeightWeight * w;\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w;\n  const maxWeightWeightWeightWeight = maxWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = ", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  let minChangeLength = 0;\n  let minChangeIndexLength = 0;\n  let minChangeIndexLength2 = 0;\n  let minChangeIndexLength3 = 0;\n  let minChangeIndexLength4 = 0;\n  let minChangeIndexLength5 = 0;\n  let minChangeIndexLength6 = 0;\n  let minChangeIndexLength7 = 0;\n  let minChangeIndexLength8 = 0;\n  let minChangeIndexLength9 = 0;\n  let minChangeIndexLength10 = 0;\n  let minChangeIndexLength11 = 0;\n  let minChangeIndexLength12 = 0;\n  let minChangeIndexLength13 = 0;\n  let minChangeIndexLength14 = 0;\n  let minChangeIndexLength15 = 0;\n  let minChangeIndexLength16 = 0;\n  let minChangeIndexLength17 = 0;\n  let minChangeIndexLength18 = 0;\n  let minChangeIndexLength19 = 0;\n  let minChangeIndexLength20 = 0;\n  let minChangeIndexLength21 = 0;\n  let minChangeIndexLength22 = 0;\n  let minChangeIndexLength23 = 0;\n  let minChangeIndexLength24 = 0;\n  let minChangeIndexLength25 = 0;\n  let minChangeIndexLength26 = 0;\n  let minChangeIndexLength27 = 0;\n  let minChangeIndexLength28 = 0;\n  let minChangeIndexLength29 = 0;\n  let minChangeIndexLength30 = 0;\n  let minChangeIndexLength31 = 0;\n  let minChangeIndexLength32 = 0;\n  let minChangeIndexLength33 = 0;\n  let minChangeIndexLength34 = 0;\n  let minChangeIndexLength35 = 0;\n  let minChangeIndexLength36 = 0;\n  let minChangeIndexLength37 = 0;\n  let minChangeIndexLength38 = 0;\n  let minChangeIndexLength39 = 0;\n  let minChangeIndexLength40 = 0;\n  let minChangeIndexLength41 = 0;\n  let minChangeIndexLength42 = 0;\n  let minChangeIndexLength43 = 0;\n  let minChangeIndexLength44 = 0;\n  let minChangeIndexLength45 = 0;\n  let minChangeIndexLength46 = 0;\n  let minChangeIndexLength47 = 0;\n  let minChangeIndexLength48 = 0;\n  let minChangeIndexLength49 = 0;\n  let minChangeIndexLength50 = 0;\n  let minChangeIndexLength51 = 0;\n  let minChangeIndexLength52 = 0;\n  let minChangeIndexLength53 = 0;\n  let minChangeIndexLength54 = 0;\n  let minChangeIndexLength55 = 0;\n  let minChangeIndexLength56 = 0;\n  let minChangeIndexLength57 = 0;\n  let minChangeIndexLength58 = 0;\n  let minChangeIndexLength59 = 0;\n  let minChangeIndexLength60 = 0;\n  let minChangeIndexLength61 = 0;\n  let minChangeIndexLength62 = 0;\n  let minChangeIndexLength63 = 0;\n  let minChangeIndexLength64 = 0;\n  let minChangeIndexLength65 = 0;\n  let minChangeIndexLength66 = 0;\n  let minChangeIndexLength67 = 0;\n  let minChangeIndexLength68 = 0;\n  let minChangeIndexLength69 = 0;\n  let minChangeIndexLength70 = 0;\n  let minChangeIndexLength71 = 0;\n  let minChangeIndexLength72 = 0;\n  let minChangeIndexLength73 = 0;\n  let minChangeIndexLength74 = 0;\n  let minChangeIndexLength75 = 0;\n  let minChangeIndexLength76 = 0;\n  let minChangeIndexLength77 = 0;\n  let minChangeIndexLength78 = 0;\n  let minChangeIndexLength79 = 0;\n  let minChangeIndexLength80 = 0;\n  let minChangeIndexLength81 = 0;\n  let minChangeIndexLength82 = 0;\n  let minChangeIndexLength83 = 0;\n  let minChangeIndexLength84 = 0;\n  let minChangeIndexLength85 = 0;\n  let minChangeIndexLength86 = 0;\n  let minChangeIndexLength87 = 0;\n  let minChangeIndexLength88 = 0;\n  let minChangeIndexLength89 = 0;\n  let minChangeIndexLength90 = 0;\n  let minChangeIndexLength91 = 0;\n  let minChangeIndexLength92 = 0;\n  let minChangeIndexLength93 = 0;\n  let minChangeIndexLength94 = 0;\n  let minChangeIndexLength95 = 0;\n  let minChangeIndexLength96 = 0;\n  let minChangeIndexLength97 = 0;\n  let minChangeIndexLength98 = 0;\n  let minChangeIndexLength99 = 0;\n  let minChangeIndexLength100 = 0;\n  let minChangeIndexLength101 = 0;\n  let minChangeIndexLength102 = 0;\n  let minChangeIndexLength103 = 0;\n  let minChangeIndexLength104 = 0;\n  let minChangeIndexLength105 = 0;\n  let minChangeIndexLength106 = 0;\n  let minChangeIndexLength107 = 0;\n  let minChangeIndexLength108 = 0;\n  let minChangeIndexLength109 = 0;\n  let minChangeIndexLength110 = 0;\n  let minChangeIndexLength111 = 0;\n  let minChangeIndexLength112 = 0;\n  let minChangeIndexLength113 = 0;\n  let minChangeIndexLength114 = 0;\n  let minChangeIndexLength115 = 0;\n  let minChangeIndexLength116 = 0;\n  let minChangeIndexLength117 = 0;\n  let minChangeIndexLength118 = 0;\n  let minChangeIndexLength119 = 0;\n  let minChangeIndexLength120 = 0;\n  let minChangeIndexLength121 = 0;\n  let minChangeIndexLength122 = 0;\n  let minChangeIndexLength123 = 0;\n  let minChangeIndexLength124 = 0;\n  let minChangeIndexLength125 = 0;\n  let minChangeIndexLength126 = 0;\n  let minChangeIndexLength127 = 0;\n  let minChangeIndexLength128 = 0;\n  let minChangeIndexLength129 = 0;\n  let minChangeIndexLength130 = 0;\n  let minChangeIndexLength131 = 0;\n  let minChangeIndexLength132 = 0;\n  let minChangeIndexLength133 = 0;\n  let minChangeIndexLength134 = 0;\n  let minChangeIndexLength135 = 0;\n  let minChangeIndexLength136 = 0;\n  let minChangeIndexLength137 = 0;\n  let minChangeIndexLength138 = 0;\n  let minChangeIndexLength139 = 0;\n  let minChangeIndexLength140 = 0;\n  let minChangeIndexLength141 = 0;\n  let minChangeIndexLength142 = 0;\n  let minChangeIndexLength143 = 0;\n  let minChangeIndexLength144 = 0;\n  let minChangeIndexLength145 = 0;\n  let minChangeIndexLength146 = 0;\n  let minChangeIndexLength147 = 0;\n  let minChangeIndexLength148 = 0;\n  let minChangeIndexLength149 = 0;\n  let minChangeIndexLength150 = 0;\n  let minChangeIndexLength151 = 0;\n  let minChangeIndexLength152 = 0;\n  let minChangeIndexLength153 = 0;\n  let minChangeIndexLength154 = 0;\n  let minChangeIndexLength155 = 0;\n  let minChangeIndexLength156 = 0;\n  let minChangeIndexLength157 = 0;\n  let minChangeIndexLength158 = 0;\n  let minChangeIndexLength159 = 0;\n  let minChangeIndexLength160 = 0;\n  let minChangeIndexLength161 = 0;\n  let minChangeIndexLength162 = 0;\n  let minChangeIndexLength163 = 0;\n  let minChangeIndexLength164 = 0;\n  let minChangeIndexLength165 = 0;\n  let minChangeIndexLength166 = 0;\n  let minChangeIndexLength167 = 0;\n  let minChangeIndexLength168 = 0;\n  let minChangeIndexLength169 = 0;\n  let minChangeIndexLength170 = 0;\n  let minChangeIndexLength171 = 0;\n  let minChangeIndexLength172 = 0;\n  let minChangeIndexLength173 = 0;\n  let minChangeIndexLength174", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      match.push(item);\n      total += item.length;\n    }\n  });\n  return match;\n};\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st greater t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime9 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime15 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime23 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime33 = true;\n  let isPrime35 = true;\n  let isPrime37 = true;\n  let isPrime39 = true;\n  let isPrime41 = true;\n  let isPrime43 = true;\n  let isPrime45 = true;\n  let isPrime47 = true;\n  let isPrime49 = true;\n  let isPrime51 = true;\n  let isPrime53 = true;\n  let isPrime55 = true;\n  let isPrime57 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime63 = true;\n  let isPrime65 = true;\n  let isPrime67 = true;\n  let isPrime69 = true;\n  let isPrime71 = true;\n  let isPrime73 = true;\n  let isPrime75 = true;\n  let isPrime77 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime83 = true;\n  let isPrime85 = true;\n  let isPrime87 = true;\n  let isPrime89 = true;\n  let isPrime91 = true;\n  let isPrime93 = true;\n  let isPrime95 = true;\n  let isPrime97 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime105 = true;\n  let isPrime107 = true;\n  let isPrime109 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime115 = true;\n  let isPrime117 = true;\n  let isPrime119 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255 = true;\n  let isPrime257 = true;\n  let isPrime259 = true;\n  let isPrime261 = true;\n  let isPrime263 = true;\n  let isPrime265 = true;\n  let isPrime267 = true;\n  let isPrime269 = true;\n  let isPrime271 = true;\n  let isPrime273 = true;\n  let isPrime275 = true;\n  let isPrime277 = true;\n  let isPrime279 = true;\n  let isPrime281 = true;\n  let isPrime283 = true;\n  let isPrime285 = true;\n  let isPrime287 = true;\n  let isPrime289 = true;\n  let isPrime291 = true;\n  let isPrime293 = true;\n  let isPrime295 = true;\n  let isPrime297 = true;\n  let isPrime299 = true;\n  let isPrime301 = true;\n  let isPrime303 = true;\n  let isPrime305 = true;\n  let isPrime307 = true;\n  let isPrime309 = true;\n  let isPrime311 = true;\n  let isPrime313 = true;\n  let isPrime315 = true;\n  let isPrime317 = true;\n  let isPrime319 = true;\n  let isPrime321 = true;\n  let isPrime323 = true;\n  let isPrime325 = true;\n  let isPrime327 = true;\n  let isPrime329 = true;\n  let isPrime331 = true;\n  let isPrime333 = true;\n  let isPrime335 = true;\n  let isPrime337 = true;\n  let isPrime339 = true;\n  let isPrime341 = true;\n  let isPrime343 = true;\n  let isPrime345 = true;\n  let isPrime347 = true;\n  let isPrime349 = true;\n  let isPrime351 = true;\n  let isPrime353 = true;\n  let isPrime355 = true;\n  let isPrime357 = true;\n  let isPrime359 = true;\n  let isPrime361 = true;\n  let isPrime363 = true;\n  let isPrime365 = true;\n  let isPrime367 = true;\n  let isPrime369 = true;\n  let isPrime371 = true;\n  let isPrime373 = true;\n  let isPrime375 = true;\n  let isPrime377 = true;\n  let isPrime379 = true;\n  let isPrime381 = true;\n  let isPrime383 = true;\n  let isPrime385 = true;\n  let isPrime387 = true;\n  let isPrime389 = true;\n  let isPrime391 = true;\n  let isPrime393 = true;\n  let isPrime395 = true;\n  let isPrime397 = true;\n  let isPrime399 = true;\n  let isPri", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isSimple = true;\n  let power = 1;\n  while (power <= n) {\n    if (x % power === 0) {\n      isSimple = false;\n      break;\n    }\n    power *= 2;\n  }\n  return isSimple;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a simple prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isSimplePrime(2) => true\n  isSimplePrime(3) => false\n  isSimplePrime(5) => false\n  isSimplePrime(7) => true\n  isSimplePrime(11) => false\n  */\nconst isSimplePrime = (x) => {\n  let isSimple = true;\n  let prime = 1;\n  while (prime <= x) {\n    if (x % prime === 0) {\n      isSimple = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isSimple;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime = (x) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= x) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime2 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime3 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime4 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime5 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime6 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime7 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime8 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPrime;\n};\n\n/*Your task is to write a function that retu rns true ifa number x is a prime and false in other cases.\n  x  is a s i mple prime and n is an integer\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => true\n  isPrime(11) => false\n  */\nconst isPrime9 = (x, n) => {\n  let isPrime = true;\n  let prime = 1;\n  while (prime <= n) {\n    if (x % prime === 0) {\n      isPrime = false;\n      break;\n    }\n    prime *= 2;\n  }\n  return isPri", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = true;\n  if (a > 1) {\n    iscube = false;\n  }\n  return iscube;\n};\n\n/*\n  Write a function that takes an integer number n and return\n  the sum of all its cubes.\n  Examples:\n  cubesum(1)==> 1\n  cubesum(2)==> 6\n  cubesum(3)==> 24\n  cubesum(4)==> 120\n  cubesum(5)==> 720\n  cubesum(6)==> 5040\n  cubesum(7)==> 40320\n  cubesum(8)==> 362880\n  cubesum(9)==> 3628800\n  cubesum(10)==> 39916800\n  cubesum(11)==> 479001600\n  cubesum(12)==> 52428800\n  cubesum(13)==> 576080000\n  cubesum(14)==> 60480000\n  cubesum(15)==> 630080000\n  cubesum(16)==> 6710886400\n  cubesum(17)==> 70481920000\n  cubesum(18)==> 72918432000\n  cubesum(19)==> 75296368000\n  cubesum(20)==> 77524091200\n  cubesum(21)==> 796335371200\n  cubesum(22)==> 817179869184\n  cubesum(23)==> 847213595488\n  cubesum(24)==> 879609302220\n  cubesum(25)==> 911599028864\n  cubesum(26)==> 930196446736\n  cubesum(27)==> 9460089608000\n  cubesum(28)==> 9640007629184\n  cubesum(29)==> 9863970070144\n  cubesum(30)==> 100460007629184\n  cubesum(31)==> 10185940729184\n  cubesum(32)==> 10359962737184\n  cubesum(33)==> 10590007629184\n  cubesum(34)==> 10790007629184\n  cubesum(35)==> 11019962737184\n  cubesum(36)==> 1130196446736\n  cubesum(37)==> 115099028864\n  cubesum(38)==> 1170196446736\n  cubesum(39)==> 119099028864\n  cubesum(40)==> 12019962737184\n  cubesum(41)==> 1230196446736\n  cubesum(42)==> 125099028864\n  cubesum(43)==> 1270196446736\n  cubesum(44)==> 129099028864\n  cubesum(45)==> 1319962737184\n  cubesum(46)==> 133099028864\n  cubesum(47)==> 1350007629184\n  cubesum(48)==> 1370007629184\n  cubesum(49)==> 1390007629184\n  cubesum(50)==> 1410007629184\n  cubesum(51)==> 1430007629184\n  cubesum(52)==> 1450007629184\n  cubesum(53)==> 1470007629184\n  cubesum(54)==> 1490007629184\n  cubesum(55)==> 1510007629184\n  cubesum(56)==> 1530007629184\n  cubesum(57)==> 1550007629184\n  cubesum(58)==> 1570007629184\n  cubesum(59)==> 1590007629184\n  cubesum(60)==> 1610007629184\n  cubesum(61)==> 1630007629184\n  cubesum(62)==> 1650007629184\n  cubesum(63)==> 1670007629184\n  cubesum(64)==> 1690007629184\n  cubesum(65)==> 1710007629184\n  cubesum(66)==> 1730007629184\n  cubesum(67)==> 1750007629184\n  cubesum(68)==> 1770007629184\n  cubesum(69)==> 1790007629184\n  cubesum(70)==> 1810007629184\n  cubesum(71)==> 1830007629184\n  cubesum(72)==> 1850007629184\n  cubesum(73)==> 1870007629184\n  cubesum(74)==> 1890007629184\n  cubesum(75)==> 1910007629184\n  cubesum(76)==> 1930007629184\n  cubesum(77)==> 1950007629184\n  cubesum(78)==> 1970007629184\n  cubesum(79)==> 1990007629184\n  cubesum(80)==> 20010007629184\n  cubesum(81)==> 2030007629184\n  cubesum(82)==> 2050007629184\n  cubesum(83)==> 2070007629184\n  cubesum(84)==> 2090007629184\n  cubesum(85)==> 2110007629184\n  cubesum(86)==> 2130007629184\n  cubesum(87)==> 2150007629184\n  cubesum(88)==> 2170007629184\n  cubesum(89)==> 2190007629184\n  cubesum(90)==> 2210007629184\n  cubesum(91)==> 2230007629184\n  cubesum(92)==> 2250007629184\n  cubesum(93)==> 2270007629184\n  cubesum(94)==> 2290007629184\n  cubesum(95)==> 2310007629184\n  cubesum(96)==> 2330007629184\n  cubesum(97)==> 2350007629184\n  cubesum(98)==> 2370007629184\n  cubesum(99)==> 2390007629184\n  cubesum(100)==> 2410007629184\n  cubesum(101)==> 2430007629184\n  cubesum(102)==> 2450007629184\n  cubesum(103)==> 2470007629184\n  cubesum(104)==> 2490007629184\n  cubesum(105)==> 2510007629184\n  cubesum(106)==> 2530007629184\n  cubesum(107)==> 2550007629184\n  cubesum(108)==> 2570007629184\n  cubesum(109)==> 2590007629184\n  cubesum(110)==> 26", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let hexadecimal = num;\n  let symbols = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/g;\n  let symbol = symbols.exec(hexadecimal);\n  while (symbol) {\n    count += symbol[0].length;\n    hexadecimal = hexadecimal.replace(symbol[0], \"\");\n    symbol = symbols.exec(hexadecimal);\n  }\n  return count;\n};\n\n/*\n  You have been tasked to write a funct ion t hat receives a string and counts the number of hexadec digits that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexDigits = (num) => {\n  let count = 0;\n  let hexadecimal = num;\n  let symbols = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/g;\n  let symbol = symbols.exec(hexadecimal);\n  while (symbol) {\n    count += symbol[0].length;\n    hexadecimal = hexadecimal.replace(symbol[0], \"\");\n    symbol = symbols.exec(hexadecimal);\n  }\n  return count;\n};\n\n/*\n  You have been tasked to write a funct ion t hat receives a string and counts the number of hexadec digits that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexLength = (num) => {\n  let count = 0;\n  let hexadecimal = num;\n  let symbols = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/g;\n  let symbol = symbols.exec(hexadecimal);\n  while (symbol) {\n    count += symbol[0].length;\n    hexadecimal = hexadecimal.replace(symbol[0], \"\");\n    symbol = symbols.exec(hexadecimal);\n  }\n  return count;\n};\n\n/*\n  You have been tasked to write a funct ion t hat receives a string and counts the number of hexadec digits that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexLength2 = (num) => {\n  let count = 0;\n  let hexadecimal = num;\n  let symbols = /[ABCDEFGHIJKLMNOPQRSTUVWXYZ]/g;\n  let symbol = symbols.exec(hexadecimal);\n  while (symbol) {\n    count += symbol[0].length;\n    hexadecimal = hexadecimal.replace(symbol[0], \"\");\n    symbol = symbols.exec(hexadecimal);\n  }\n  return count;\n};\n\n/*\n  You have been tasked to write a funct ion t hat receives a string and counts the number of hexadec digits that ar e primes (prime number=== or  ap", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let numString = \"\";\n  let numStringLength = 0;\n  let numStringLength2 = 0;\n  let numStringLength3 = 0;\n  let numStringLength4 = 0;\n  let numStringLength5 = 0;\n  let numStringLength6 = 0;\n  let numStringLength7 = 0;\n  let numStringLength8 = 0;\n  let numStringLength9 = 0;\n  let numStringLength10 = 0;\n  let numStringLength11 = 0;\n  let numStringLength12 = 0;\n  let numStringLength13 = 0;\n  let numStringLength14 = 0;\n  let numStringLength15 = 0;\n  let numStringLength16 = 0;\n  let numStringLength17 = 0;\n  let numStringLength18 = 0;\n  let numStringLength19 = 0;\n  let numStringLength20 = 0;\n  let numStringLength21 = 0;\n  let numStringLength22 = 0;\n  let numStringLength23 = 0;\n  let numStringLength24 = 0;\n  let numStringLength25 = 0;\n  let numStringLength26 = 0;\n  let numStringLength27 = 0;\n  let numStringLength28 = 0;\n  let numStringLength29 = 0;\n  let numStringLength30 = 0;\n  let numStringLength31 = 0;\n  let numStringLength32 = 0;\n  let numStringLength33 = 0;\n  let numStringLength34 = 0;\n  let numStringLength35 = 0;\n  let numStringLength36 = 0;\n  let numStringLength37 = 0;\n  let numStringLength38 = 0;\n  let numStringLength39 = 0;\n  let numStringLength40 = 0;\n  let numStringLength41 = 0;\n  let numStringLength42 = 0;\n  let numStringLength43 = 0;\n  let numStringLength44 = 0;\n  let numStringLength45 = 0;\n  let numStringLength46 = 0;\n  let numStringLength47 = 0;\n  let numStringLength48 = 0;\n  let numStringLength49 = 0;\n  let numStringLength50 = 0;\n  let numStringLength51 = 0;\n  let numStringLength52 = 0;\n  let numStringLength53 = 0;\n  let numStringLength54 = 0;\n  let numStringLength55 = 0;\n  let numStringLength56 = 0;\n  let numStringLength57 = 0;\n  let numStringLength58 = 0;\n  let numStringLength59 = 0;\n  let numStringLength60 = 0;\n  let numStringLength61 = 0;\n  let numStringLength62 = 0;\n  let numStringLength63 = 0;\n  let numStringLength64 = 0;\n  let numStringLength65 = 0;\n  let numStringLength66 = 0;\n  let numStringLength67 = 0;\n  let numStringLength68 = 0;\n  let numStringLength69 = 0;\n  let numStringLength70 = 0;\n  let numStringLength71 = 0;\n  let numStringLength72 = 0;\n  let numStringLength73 = 0;\n  let numStringLength74 = 0;\n  let numStringLength75 = 0;\n  let numStringLength76 = 0;\n  let numStringLength77 = 0;\n  let numStringLength78 = 0;\n  let numStringLength79 = 0;\n  let numStringLength80 = 0;\n  let numStringLength81 = 0;\n  let numStringLength82 = 0;\n  let numStringLength83 = 0;\n  let numStringLength84 = 0;\n  let numStringLength85 = 0;\n  let numStringLength86 = 0;\n  let numStringLength87 = 0;\n  let numStringLength88 = 0;\n  let numStringLength89 = 0;\n  let numStringLength90 = 0;\n  let numStringLength91 = 0;\n  let numStringLength92 = 0;\n  let numStringLength93 = 0;\n  let numStringLength94 = 0;\n  let numStringLength95 = 0;\n  let numStringLength96 = 0;\n  let numStringLength97 = 0;\n  let numStringLength98 = 0;\n  let numStringLength99 = 0;\n  let numStringLength100 = 0;\n  let numStringLength101 = 0;\n  let numStringLength102 = 0;\n  let numStringLength103 = 0;\n  let numStringLength104 = 0;\n  let numStringLength105 = 0;\n  let numStringLength106 = 0;\n  let numStringLength107 = 0;\n  let numStringLength108 = 0;\n  let numStringLength109 = 0;\n  let numStringLength110 = 0;\n  let numStringLength111 = 0;\n  let numStringLength112 = 0;\n  let numStringLength113 = 0;\n  let numStringLength114 = 0;\n  let numStringLength115 = 0;\n  let numStringLength116 = 0;\n  let numStringLength117 = 0;\n  let numStringLength118 = 0;\n  let numStringLength119 = 0;\n  let numStringLength120 = 0;\n  let numStringLength121 = 0;\n  let numStringLength122 = 0;\n  let numStringLength123 = 0;\n  let numStringLength124 = 0;\n  let numStringLength125 = 0;\n  let numStringLength126 = 0;\n  let numStringLength127 = 0;\n  let numStringLength128 = 0;\n  let numStringLength129 = 0;\n  let numStringLength130 = 0;\n  let numStringLength131 = 0;\n  let numStringLength132 = 0;\n  let numStringLength133 = 0;\n  let numStringLength134 = 0;\n  let numStringLength135 = 0;\n  let numStringLength136 = 0;\n  let numStringLength137 = 0;\n  let numStringLength138 = 0;\n  let numStringLength139 = 0;\n  let numStringLength140 = 0;\n  let numStringLength141 = 0;\n  let numStringLength142 = 0;\n  let numStringLength143 = 0;\n  let numStringLength144 = 0;\n  let numStringLength145 = 0;\n  let numStringLength146 = 0;\n  let numStringLength147 = 0;\n  let numStringLength148 = 0;\n  let numStringLength149 = 0;\n  let numStringLength150 = 0;\n  let numStringLength151 = 0;\n  let numStringLength152 = 0;\n  let numStringLength153 = 0;\n  let numStringLength154 = 0;\n  let numStringLength155 = 0;\n  let numStringLength156 = 0;\n  let numStringLength157 = 0;\n  let numStringLength158 = 0;\n  let numStringLength159 = 0;\n  let numStringLength160 = 0;\n  let numStringLength161 = 0;\n  let numStringLength162 = 0;\n  let numStringLength163 = 0;\n  let numStringLength164 = 0;\n  let numStringLength165 = 0;\n  let numStringLength166 = 0;\n  let numStringLength167 = 0;\n  let numStringLength168 = 0;\n  let numStringLength169 = 0;\n  let numStringLength170 = 0;\n  let numStringLength171 = 0;\n  let numStringLength172 = 0;\n  let numStringLength173 = 0;\n  let numStringLength174 = 0;\n  let numStringLength175 = 0;\n  let numStringLength176 = 0;\n  let numStringLength177 = 0;\n  let numStringLength178 = 0;\n  let numStringLength179 = 0;\n  let numStringLength180 = 0;\n  let numStringLength181 = 0;\n  let numStringLength182 = 0;\n  let numStringLength183 = 0;\n  let numStringLength184 = 0;\n  let numStringLength185 = 0;\n  let numStringLength186 = 0;\n  let numStringLength187 = 0;\n  let numStringLength188 = 0;\n  let numStringLength189 = 0;\n  let numStringLength190 = 0;\n  let numStringLength191 = 0;\n  let numStringLength192 = 0;\n  let numStringLength193 = 0;\n  let numStringLength194 = 0;\n  let numStringLength195 = 0;\n  let numStringLength196 = 0;\n  let numStringLength197 = 0;\n  let num", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const emptyProduct = 1;\n  const emptySum = 0;\n  const emptyProductSum = emptyProduct * emptySum;\n  const emptyProductSum2 = emptyProduct * emptySum;\n  const emptyProductSum3 = emptyProduct * emptySum;\n  const emptyProductSum4 = emptyProduct * emptySum;\n  const emptyProductSum5 = emptyProduct * emptySum;\n  const emptyProductSum6 = emptyProduct * emptySum;\n  const emptyProductSum7 = emptyProduct * emptySum;\n  const emptyProductSum8 = emptyProduct * emptySum;\n  const emptyProductSum9 = emptyProduct * emptySum;\n  const emptyProductSum10 = emptyProduct * emptySum;\n  const emptyProductSum11 = emptyProduct * emptySum;\n  const emptyProductSum12 = emptyProduct * emptySum;\n  const emptyProductSum13 = emptyProduct * emptySum;\n  const emptyProductSum14 = emptyProduct * emptySum;\n  const emptyProductSum15 = emptyProduct * emptySum;\n  const emptyProductSum16 = emptyProduct * emptySum;\n  const emptyProductSum17 = emptyProduct * emptySum;\n  const emptyProductSum18 = emptyProduct * emptySum;\n  const emptyProductSum19 = emptyProduct * emptySum;\n  const emptyProductSum20 = emptyProduct * emptySum;\n  const emptyProductSum21 = emptyProduct * emptySum;\n  const emptyProductSum22 = emptyProduct * emptySum;\n  const emptyProductSum23 = emptyProduct * emptySum;\n  const emptyProductSum24 = emptyProduct * emptySum;\n  const emptyProductSum25 = emptyProduct * emptySum;\n  const emptyProductSum26 = emptyProduct * emptySum;\n  const emptyProductSum27 = emptyProduct * emptySum;\n  const emptyProductSum28 = emptyProduct * emptySum;\n  const emptyProductSum29 = emptyProduct * emptySum;\n  const emptyProductSum30 = emptyProduct * emptySum;\n  const emptyProductSum31 = emptyProduct * emptySum;\n  const emptyProductSum32 = emptyProduct * emptySum;\n  const emptyProductSum33 = emptyProduct * emptySum;\n  const emptyProductSum34 = emptyProduct * emptySum;\n  const emptyProductSum35 = emptyProduct * emptySum;\n  const emptyProductSum36 = emptyProduct * emptySum;\n  const emptyProductSum37 = emptyProduct * emptySum;\n  const emptyProductSum38 = emptyProduct * emptySum;\n  const emptyProductSum39 = emptyProduct * emptySum;\n  const emptyProductSum40 = emptyProduct * emptySum;\n  const emptyProductSum41 = emptyProduct * emptySum;\n  const emptyProductSum42 = emptyProduct * emptySum;\n  const emptyProductSum43 = emptyProduct * emptySum;\n  const emptyProductSum44 = emptyProduct * emptySum;\n  const emptyProductSum45 = emptyProduct * emptySum;\n  const emptyProductSum46 = emptyProduct * emptySum;\n  const emptyProductSum47 = emptyProduct * emptySum;\n  const emptyProductSum48 = emptyProduct * emptySum;\n  const emptyProductSum49 = emptyProduct * emptySum;\n  const emptyProductSum50 = emptyProduct * emptySum;\n  const emptyProductSum51 = emptyProduct * emptySum;\n  const emptyProductSum52 = emptyProduct * emptySum;\n  const emptyProductSum53 = emptyProduct * emptySum;\n  const emptyProductSum54 = emptyProduct * emptySum;\n  const emptyProductSum55 = emptyProduct * emptySum;\n  const emptyProductSum56 = emptyProduct * emptySum;\n  const emptyProductSum57 = emptyProduct * emptySum;\n  const emptyProductSum58 = emptyProduct * emptySum;\n  const emptyProductSum59 = emptyProduct * emptySum;\n  const emptyProductSum60 = emptyProduct * emptySum;\n  const emptyProductSum61 = emptyProduct * emptySum;\n  const emptyProductSum62 = emptyProduct * emptySum;\n  const emptyProductSum63 = emptyProduct * emptySum;\n  const emptyProductSum64 = emptyProduct * emptySum;\n  const emptyProductSum65 = emptyProduct * emptySum;\n  const emptyProductSum66 = emptyProduct * emptySum;\n  const emptyProductSum67 = emptyProduct * emptySum;\n  const emptyProductSum68 = emptyProduct * emptySum;\n  const emptyProductSum69 = emptyProduct * emptySum;\n  const emptyProductSum70 = emptyProduct * emptySum;\n  const emptyProductSum71 = emptyProduct * emptySum;\n  const emptyProductSum72 = emptyProduct * emptySum;\n  const emptyProductSum73 = emptyProduct * emptySum;\n  const emptyProductSum74 = emptyProduct * emptySum;\n  const emptyProductSum75 = emptyProduct * emptySum;\n  const emptyProductSum76 = emptyProduct * emptySum;\n  const emptyProductSum77 = emptyProduct * emptySum;\n  const emptyProductSum78 = emptyProduct * emptySum;\n  const emptyProductSum79 = emptyProduct * emptySum;\n  const emptyProductSum80 = emptyProduct * emptySum;\n  const emptyProductSum81 = emptyProduct * emptySum;\n  const emptyProductSum82 = emptyProduct * emptySum;\n  const emptyProductSum83 = emptyProduct * emptySum;\n  const emptyProductSum84 = emptyProduct * emptySum;\n  const emptyProductSum85 = emptyProduct * emptySum;\n  const emptyProductSum86 = emptyProduct * emptySum;\n  const emptyProductSum87 = emptyProduct * emptySum;\n  const emptyProductSum88 = emptyProduct * emptySum;\n  const emptyProductSum89 = emptyProduct * emptySum;\n  const emptyProductSum90 = emptyProduct * emptySum;\n  const emptyProductSum91 = emptyProduct * emptySum;\n  const emptyProductSum92 = emptyProduct * emptySum;\n  const emptyProductSum93 = emptyProduct * emptySum;\n  const emptyProductSum94 = emptyProduct * emptySum;\n  const emptyProductSum95 = emptyProduct * emptySum;\n  const emptyProductSum96 = emptyProduct * emptySum;\n  const emptyProductSum97 = emptyProduct * emptySum;\n  const emptyProductSum98 = emptyProduct * emptySum;\n  const emptyProductSum99 = emptyProduct * emptySum;\n  const emptyProductSum100 = emptyProduct * emptySum;\n  const emptyProductSum101 = emptyProduct * emptySum;\n  const emptyProductSum102 = emptyProduct * emptySum;\n  const emptyProductSum103 = emptyProduct * emptySum;\n  const emptyProductSum104 = emptyProduct * emptySum;\n  const emptyProductSum105 = emptyProduct * emptySum;\n  const emptyProductSum106 = emptyProduct * emptySum;\n  const emptyProductSum107 = emptyProduct * emptySum;\n  const emptyProductSum108 = emptyProduct * emptySum;\n  const emptyProductSum109 = emptyProduct * emptySum;\n  const emptyProductSum110 = emptyProduct * emptySum;\n  const emptyProductSum111 = emptyProduct * emptySum;\n  const emptyProductSum112 = emptyProduct * empty", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let isHappy = false\n  let isHappy2 = false\n  let isHappy3 = false\n  let isHappy4 = false\n  let isHappy5 = false\n  let isHappy6 = false\n  let isHappy7 = false\n  let isHappy8 = false\n  let isHappy9 = false\n  let isHappy10 = false\n  let isHappy11 = false\n  let isHappy12 = false\n  let isHappy13 = false\n  let isHappy14 = false\n  let isHappy15 = false\n  let isHappy16 = false\n  let isHappy17 = false\n  let isHappy18 = false\n  let isHappy19 = false\n  let isHappy20 = false\n  let isHappy21 = false\n  let isHappy22 = false\n  let isHappy23 = false\n  let isHappy24 = false\n  let isHappy25 = false\n  let isHappy26 = false\n  let isHappy27 = false\n  let isHappy28 = false\n  let isHappy29 = false\n  let isHappy30 = false\n  let isHappy31 = false\n  let isHappy32 = false\n  let isHappy33 = false\n  let isHappy34 = false\n  let isHappy35 = false\n  let isHappy36 = false\n  let isHappy37 = false\n  let isHappy38 = false\n  let isHappy39 = false\n  let isHappy40 = false\n  let isHappy41 = false\n  let isHappy42 = false\n  let isHappy43 = false\n  let isHappy44 = false\n  let isHappy45 = false\n  let isHappy46 = false\n  let isHappy47 = false\n  let isHappy48 = false\n  let isHappy49 = false\n  let isHappy50 = false\n  let isHappy51 = false\n  let isHappy52 = false\n  let isHappy53 = false\n  let isHappy54 = false\n  let isHappy55 = false\n  let isHappy56 = false\n  let isHappy57 = false\n  let isHappy58 = false\n  let isHappy59 = false\n  let isHappy60 = false\n  let isHappy61 = false\n  let isHappy62 = false\n  let isHappy63 = false\n  let isHappy64 = false\n  let isHappy65 = false\n  let isHappy66 = false\n  let isHappy67 = false\n  let isHappy68 = false\n  let isHappy69 = false\n  let isHappy70 = false\n  let isHappy71 = false\n  let isHappy72 = false\n  let isHappy73 = false\n  let isHappy74 = false\n  let isHappy75 = false\n  let isHappy76 = false\n  let isHappy77 = false\n  let isHappy78 = false\n  let isHappy79 = false\n  let isHappy80 = false\n  let isHappy81 = false\n  let isHappy82 = false\n  let isHappy83 = false\n  let isHappy84 = false\n  let isHappy85 = false\n  let isHappy86 = false\n  let isHappy87 = false\n  let isHappy88 = false\n  let isHappy89 = false\n  let isHappy90 = false\n  let isHappy91 = false\n  let isHappy92 = false\n  let isHappy93 = false\n  let isHappy94 = false\n  let isHappy95 = false\n  let isHappy96 = false\n  let isHappy97 = false\n  let isHappy98 = false\n  let isHappy99 = false\n  let isHappy100 = false\n  let isHappy101 = false\n  let isHappy102 = false\n  let isHappy103 = false\n  let isHappy104 = false\n  let isHappy105 = false\n  let isHappy106 = false\n  let isHappy107 = false\n  let isHappy108 = false\n  let isHappy109 = false\n  let isHappy110 = false\n  let isHappy111 = false\n  let isHappy112 = false\n  let isHappy113 = false\n  let isHappy114 = false\n  let isHappy115 = false\n  let isHappy116 = false\n  let isHappy117 = false\n  let isHappy118 = false\n  let isHappy119 = false\n  let isHappy120 = false\n  let isHappy121 = false\n  let isHappy122 = false\n  let isHappy123 = false\n  let isHappy124 = false\n  let isHappy125 = false\n  let isHappy126 = false\n  let isHappy127 = false\n  let isHappy128 = false\n  let isHappy129 = false\n  let isHappy130 = false\n  let isHappy131 = false\n  let isHappy132 = false\n  let isHappy133 = false\n  let isHappy134 = false\n  let isHappy135 = false\n  let isHappy136 = false\n  let isHappy137 = false\n  let isHappy138 = false\n  let isHappy139 = false\n  let isHappy140 = false\n  let isHappy141 = false\n  let isHappy142 = false\n  let isHappy143 = false\n  let isHappy144 = false\n  let isHappy145 = false\n  let isHappy146 = false\n  let isHappy147 = false\n  let isHappy148 = false\n  let isHappy149 = false\n  let isHappy150 = false\n  let isHappy151 = false\n  let isHappy152 = false\n  let isHappy153 = false\n  let isHappy154 = false\n  let isHappy155 = false\n  let isHappy156 = false\n  let isHappy157 = false\n  let isHappy158 = false\n  let isHappy159 = false\n  let isHappy160 = false\n  let isHappy161 = false\n  let isHappy162 = false\n  let isHappy163 = false\n  let isHappy164 = false\n  let isHappy165 = false\n  let isHappy166 = false\n  let isHappy167 = false\n  let isHappy168 = false\n  let is", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(\n    (grade) => grade > 0? grade : grades.find((g) => g === grade)\n  );\n  return gradesArray.map((grade) => grade > 0? grade : grades.find((g) => g === grade));\n};\n\n/*\n  It is the last week of the semester a nd th e teacher has to give the grades\n  to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(\n    (grade) => grade > 0? grade : grades.find((g) => g === grade)\n  );\n  return gradesArray.map((grade) => grade > 0? grade : grades.find((g) => g === grade));\n};\n\n/*\n  It is the last week of the semester a nd th e teacher has to give the grades\n  to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(\n    (grade) => grade > 0? grade : grades.find((g) => g === grade)\n  );\n  return gradesArray.map((grade) => grade > 0? grade : grades.find((g) => g === grade));\n};\n\n/*\n  It is the last week of the semester a nd th e teacher has to give the grades\n  to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(\n    (grade) => grade > 0? grade : grades.find((g) => g === grade)\n  );\n  return gradesArray.map((grade) => grade > 0? grade : grades.find((g) => g === grade));\n};\n\n/*\n  It is the last week of the semester a nd th e teacher has to give the grades\n  to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(\n    (grade) => grade > 0? grade : grades.find((g) => g === grade)\n  );\n  return gradesArray.map((grade) => grade > 0? grade : grades.find((g) => g === grade));\n};\n\n/*\n  It is the last week of the semester a n", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let startNum = sOneStarts(n);\n  let endNum = sOneEnds(n);\n  let startNumStr = startNum.toString();\n  let endNumStr = endNum.toString();\n  let startNumArr = startNumStr.split('');\n  let endNumArr = endNumStr.split('');\n  let startNumArrStr = startNumArr.toString();\n  let endNumArrStr = endNumArr.toString();\n  let startNumArrArr = startNumArrStr.split('');\n  let endNumArrArr = endNumArrStr.split('');\n  let startNumArrArrStr = startNumArrArr.toString();\n  let endNumArrArrStr = endNumArrArr.toString();\n  let startNumArrArrArrArr = startNumArrArrArrStr.split('');\n  let endNumArrArrArrArr = endNumArrArrArrStr.split('');\n  let startNumArrArrArrArrStr = startNumArrArrArrArr.toString();\n  let endNumArrArrArrArrArrStr = endNumArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArr = startNumArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrStr = endNumArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let endNumArrArrArrArrArrArrArrArrArrArrArrArrStr = endNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n  let startNumArrArrArrArrArrArrArrArrArrArrArrArrArr = startNumArrArrArrArrArrArrArrArrArrArrArrArrArr.toString();\n", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 2);\n    binary += sum % 2;\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return its decimal equivalent in binary.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"1\".\n      For N = 150, the decimal equivalent will be \"110\".\n      For N = 147, the decimal equivalent will be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 2);\n    binary += sum.toString(2);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return its decimal equivalent in decimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be 1000.\n      For N = 150, the decimal equivalent will be 150.\n      For N = 147, the decimal equivalent will be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalDecimal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 2);\n    binary += sum.toString(2);\n  }\n  \n  return parseInt(binary, 2);\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x1000\".\n      For N = 150, the decimal equivalent will be \"0x150x\".\n      For N = 147, the decimal equivalent will be \"0x140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 16);\n    binary += sum.toString(16);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return its decimal equivalent in octal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0o1000\".\n      For N = 150, the decimal equivalent will be \"0o150x\".\n      For N = 147, the decimal equivalent will be \"0o140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalOctal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 8);\n    binary += sum.toString(8);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x1000\".\n      For N = 150, the decimal equivalent will be \"0x150x\".\n      For N = 147, the decimal equivalent will be \"0x140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimalOctal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 16);\n    binary += sum.toString(16);\n  }\n  \n  return parseInt(binary, 16);\n};\n\n/*Given a positive integer N, return its decimal equivalent in octal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0o1000\".\n      For N = 150, the decimal equivalent will be \"0o150x\".\n      For N = 147, the decimal equivalent will be \"0o140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalOctalOctal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 8);\n    binary += sum.toString(8);\n  }\n  \n  return parseInt(binary, 8);\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x1000\".\n      For N = 150, the decimal equivalent will be \"0x150x\".\n      For N = 147, the decimal equivalent will be \"0x140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimalHexadecimal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 16);\n    binary += sum.toString(16);\n  }\n  \n  return parseInt(binary, 16);\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x1000\".\n      For N = 150, the decimal equivalent will be \"0x150x\".\n      For N = 147, the decimal equivalent will be \"0x140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimalHexadecimalOctal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 16);\n    binary += sum.toString(16);\n  }\n  \n  return parseInt(binary, 16);\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x1000\".\n      For N = 150, the decimal equivalent will be \"0x150x\".\n      For N = 147, the decimal equivalent will be \"0x140x\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimalHexadecimalOctalOctal = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = N; i >= 1; i--) {\n    sum += parseInt(i, 16);\n    ", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at ", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArr91 = [];\n  let newStrArr92 = [];\n  let newStrArr93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrArr111 = [];\n  let newStrArr112 = [];\n  let newStrArr113 = [];\n  let newStrArr114 = [];\n  let newStrArr115 = [];\n  let newStrArr116 = [];\n  let newStrArr117 = [];\n  let newStrArr118 = [];\n  let newStrArr119 = [];\n  let newStrArr120 = [];\n  let newStrArr121 = [];\n  let newStrArr122 = [];\n  let newStrArr123 = [];\n  let newStrArr124 = [];\n  let newStrArr125 = [];\n  let newStrArr126 = [];\n  let newStrArr127 = [];\n  let newStrArr128 = [];\n  let newStrArr129 = [];\n  let newStrArr130 = [];\n  let newStrArr131 = [];\n  let newStrArr132 = [];\n  let newStrArr133 = [];\n  let newStrArr134 = [];\n  let newStrArr135 = [];\n  let newStrArr136 = [];\n  let newStrArr137 = [];\n  let newStrArr138 = [];\n  let newStrArr139 = [];\n  let newStrArr140 = [];\n  let newStrArr141 = [];\n  let newStrArr142 = [];\n  let newStrArr143 = [];\n  let newStrArr144 = [];\n  let newStrArr145 = [];\n  let newStrArr146 = [];\n  let newStrArr147 = [];\n  let newStrArr148 = [];\n  let newStrArr149 = [];\n  let newStrArr150 = [];\n  let newStrArr151 = [];\n  let newStrArr152 = [];\n  let newStrArr153 = [];\n  let newStrArr154 = [];\n  let newStrArr155 = [];\n  let newStrArr156 = [];\n  let newStrArr157 = [];\n  let newStrArr158 = [];\n  let newStrArr159 = [];\n  let newStrArr160 = [];\n  let newStrArr161 = [];\n  let newStrArr162 = [];\n  let newStrArr163 = [];\n  let newStrArr164 = [];\n  let newStrArr165 = [];\n  let newStrArr166 = [];\n  let newStrArr167 = [];\n  let newStrArr168 = [];\n  let newStrArr169 = [];\n  let newStrArr170 = [];\n  let newStrArr171 = [];\n  let newStrArr172 = [];\n  let newStrArr173 = [];\n  let newStrArr174 = [];\n  let newStrArr175 = [];\n  let newStrArr176 = [];\n  let newStrArr177 = [];\n  let newStrArr178 = [];\n  let newStrArr179 = [];\n  let newStrArr180 = [];\n  let newStrArr181 = [];\n  let newStrArr182 = [];\n  let newStrArr183 = [];\n  let newStrArr184 = [];\n  let newStrArr185 = [];\n  let newStrArr186 = [];\n  let newStrArr187 = [];\n  let newStrArr188 = [];\n  let newStrArr189 = [];\n  let newStrArr190 = [];\n  let newStrArr191 = [];\n  let new", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      res.push([i, j]);\n      i++;\n      j++;\n      k++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[j][i] === x) {\n      res.push([i, j]);\n      i++;\n      j++;\n      k++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      res.push([i, j]);\n      i++;\n      j++;\n      k++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCols = (lst, x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[j][i] === x) {\n      res.push([i, j]);\n      i++;\n      j++;\n      k++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsCols = (lst, x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i][j] === x) {\n      res.push([i, j]);\n      i++;\n      j++;\n      k++;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, ", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => b - a);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integ ers,return a copy of the given array after sorting,\n * you will sort the given n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n * o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []\n  let S = []\n  let T = []\n  let U = []\n  let V = []\n  let W = []\n  let X = []\n  let Y = []\n  let Z = []\n  let a = []\n  let b = []\n  let c = []\n  let d = []\n  let e = []\n  let f = []\n  let g = []\n  let h = []\n  let i = []\n  let j = []\n  let k = []\n  let l = []\n  let m = []\n  let n = []\n  let o = []\n  let p = []\n  let q = []\n  let r = []\n  let s = []\n  let t = []\n  let u = []\n  let v = []\n  let w = []\n  let x = []\n  let y = []\n  let z = []\n  let A = []\n  let B = []\n  let C = []\n  let D = []\n  let E = []\n  let F = []\n  let G = []\n  let H = []\n  let I = []\n  let J = []\n  let K = []\n  let L = []\n  let M = []\n  let N = []\n  let O = []\n  let P = []\n  let Q = []\n  let R = []", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentMax = 0;\n  let currentMaxIndex = 0;\n  let currentMaxValue = 0;\n  let currentMaxIndex2 = 0;\n  let currentMaxValue2 = 0;\n  let currentMaxIndex3 = 0;\n  let currentMaxValue3 = 0;\n  let currentMaxIndex4 = 0;\n  let currentMaxValue4 = 0;\n  let currentMaxIndex5 = 0;\n  let currentMaxValue5 = 0;\n  let currentMaxIndex6 = 0;\n  let currentMaxValue6 = 0;\n  let currentMaxIndex7 = 0;\n  let currentMaxValue7 = 0;\n  let currentMaxIndex8 = 0;\n  let currentMaxValue8 = 0;\n  let currentMaxIndex9 = 0;\n  let currentMaxValue9 = 0;\n  let currentMaxIndex10 = 0;\n  let currentMaxValue10 = 0;\n  let currentMaxIndex11 = 0;\n  let currentMaxValue11 = 0;\n  let currentMaxIndex12 = 0;\n  let currentMaxValue12 = 0;\n  let currentMaxIndex13 = 0;\n  let currentMaxValue13 = 0;\n  let currentMaxIndex14 = 0;\n  let currentMaxValue14 = 0;\n  let currentMaxIndex15 = 0;\n  let currentMaxValue15 = 0;\n  let currentMaxIndex16 = 0;\n  let currentMaxValue16 = 0;\n  let currentMaxIndex17 = 0;\n  let currentMaxValue17 = 0;\n  let currentMaxIndex18 = 0;\n  let currentMaxValue18 = 0;\n  let currentMaxIndex19 = 0;\n  let currentMaxValue19 = 0;\n  let currentMaxIndex20 = 0;\n  let currentMaxValue20 = 0;\n  let currentMaxIndex21 = 0;\n  let currentMaxValue21 = 0;\n  let currentMaxIndex22 = 0;\n  let currentMaxValue22 = 0;\n  let currentMaxIndex23 = 0;\n  let currentMaxValue23 = 0;\n  let currentMaxIndex24 = 0;\n  let currentMaxValue24 = 0;\n  let currentMaxIndex25 = 0;\n  let currentMaxValue25 = 0;\n  let currentMaxIndex26 = 0;\n  let currentMaxValue26 = 0;\n  let currentMaxIndex27 = 0;\n  let currentMaxValue27 = 0;\n  let currentMaxIndex28 = 0;\n  let currentMaxValue28 = 0;\n  let currentMaxIndex29 = 0;\n  let currentMaxValue29 = 0;\n  let currentMaxIndex30 = 0;\n  let currentMaxValue30 = 0;\n  let currentMaxIndex31 = 0;\n  let currentMaxValue31 = 0;\n  let currentMaxIndex32 = 0;\n  let currentMaxValue32 = 0;\n  let currentMaxIndex33 = 0;\n  let currentMaxValue33 = 0;\n  let currentMaxIndex34 = 0;\n  let currentMaxValue34 = 0;\n  let currentMaxIndex35 = 0;\n  let currentMaxValue35 = 0;\n  let currentMaxIndex36 = 0;\n  let currentMaxValue36 = 0;\n  let currentMaxIndex37 = 0;\n  let currentMaxValue37 = 0;\n  let currentMaxIndex38 = 0;\n  let currentMaxValue38 = 0;\n  let currentMaxIndex39 = 0;\n  let currentMaxValue39 = 0;\n  let currentMaxIndex40 = 0;\n  let currentMaxValue40 = 0;\n  let currentMaxIndex41 = 0;\n  let currentMaxValue41 = 0;\n  let currentMaxIndex42 = 0;\n  let currentMaxValue42 = 0;\n  let currentMaxIndex43 = 0;\n  let currentMaxValue43 = 0;\n  let currentMaxIndex44 = 0;\n  let currentMaxValue44 = 0;\n  let currentMaxIndex45 = 0;\n  let currentMaxValue45 = 0;\n  let currentMaxIndex46 = 0;\n  let currentMaxValue46 = 0;\n  let currentMaxIndex47 = 0;\n  let currentMaxValue47 = 0;\n  let currentMaxIndex48 = 0;\n  let currentMaxValue48 = 0;\n  let currentMaxIndex49 = 0;\n  let currentMaxValue49 = 0;\n  let currentMaxIndex50 = 0;\n  let currentMaxValue50 = 0;\n  let currentMaxIndex51 = 0;\n  let currentMaxValue51 = 0;\n  let currentMaxIndex52 = 0;\n  let currentMaxValue52 = 0;\n  let currentMaxIndex53 = 0;\n  let currentMaxValue53 = 0;\n  let currentMaxIndex54 = 0;\n  let currentMaxValue54 = 0;\n  let currentMaxIndex55 = 0;\n  let currentMaxValue55 = 0;\n  let currentMaxIndex56 = 0;\n  let currentMaxValue56 = 0;\n  let currentMaxIndex57 = 0;\n  let currentMaxValue57 = 0;\n  let currentMaxIndex58 = 0;\n  let currentMaxValue58 = 0;\n  let currentMaxIndex59 = 0;\n  let currentMaxValue59 = 0;\n  let currentMaxIndex60 = 0;\n  let currentMaxValue60 = 0;\n  let currentMaxIndex61 = 0;\n  let currentMaxValue61 = 0;\n  let currentMaxIndex62 = 0;\n  let currentMaxValue62 = 0;\n  let currentMaxIndex63 = 0;\n  let currentMaxValue63 = 0;\n  let currentMaxIndex64 = 0;\n  let currentMaxValue64 = 0;\n  let currentMaxIndex65 = 0;\n  let currentMaxValue65 = 0;\n  let currentMaxIndex66 = 0;\n  let currentMaxValue66 = 0;\n  let currentMaxIndex67 = 0;\n  let currentMaxValue67 = 0;\n  let currentMaxIndex68 = 0;\n  let currentMaxValue68 = 0;\n  let currentMaxIndex69 = 0;\n  let currentMaxValue69 = 0;\n  let currentMaxIndex70 = 0;\n  let currentMaxValue70 = 0;\n  let currentMaxIndex71 = 0;\n  let currentMaxValue71 = 0;\n  let currentMaxIndex72 = 0;\n  let currentMaxValue72 = 0;\n  let currentMaxIndex73 = 0;\n  let currentMaxValue73 = 0;\n  let currentMaxIndex74 = 0;\n  let currentMaxValue74 = 0;\n  let currentMaxIndex75 = 0;\n  let currentMaxValue75 = 0;\n  let currentMaxIndex76 = 0;\n  let currentMaxValue76 = 0;\n  let currentMaxIndex77 = 0;\n  let currentMaxValue77 = 0;\n  let currentMaxIndex78 = 0;\n  let currentMaxValue78 = 0;\n  let currentMaxIndex79 = 0;\n  let currentMaxValue79 = 0;\n  let currentMaxIndex80 = 0;\n  let currentMaxValue80 = 0;\n  let currentMaxIndex81 = 0;\n  let currentMaxValue81 = 0;\n  let currentMaxIndex82 = 0;\n  let currentMaxValue82 = 0;\n  let currentMaxIndex83 = 0;\n  let currentMaxValue83 = 0;\n  let currentMaxIndex84 = 0;\n  let currentMaxValue84 = 0;\n  let currentMaxIndex85 = 0;\n  let currentMaxValue85 = 0;\n  let currentMaxIndex86 = 0;\n  let currentMaxValue86 = 0;\n  let currentMaxIndex87 = 0;\n  let currentMaxValue87 = 0;\n  let currentMaxIndex88 = 0;\n  let currentMaxValue88 = 0;\n  let currentMaxIndex89 = 0;\n  let currentMaxValue89 = 0;\n  let currentMaxIndex90 = 0;\n  let currentMaxValue90 = 0;\n  let currentMaxIndex91 = 0;\n  let currentMaxValue91 = 0;\n  let currentMaxIndex92 = 0;\n  let currentMaxValue92 = 0;\n  let currentMaxIndex93 = 0;\n  let currentMaxValue93 = 0;\n  let currentMaxIndex94 = 0;\n  let currentMaxValue94 = 0;\n  let currentMaxIndex95 = 0;\n  let currentMaxValue95 = 0;\n  let currentMaxIndex96 = 0;\n  let currentMaxValue96 = 0;\n  let currentMaxIndex97 = 0;\n  let currentMaxValue97 = 0;\n  let currentMaxIndex98 = 0;\n  let currentMaxValue98 = 0;\n  let currentMaxIndex99 = 0;\n  let currentMaxValue99 = 0;\n  let currentMaxIndex100 = 0;\n  let currentMaxValue100 = 0;\n  let currentMaxIndex101 = 0;\n  let currentMaxValue101 = 0;\n  let currentMaxIndex102 = 0;\n  let currentMaxValue102 = 0;\n  let currentMaxIndex103 = 0;\n  let currentMaxValue103 = 0;\n  let currentMaxIndex104 = 0;\n  let currentMaxValue104 = 0;\n  let currentMaxIndex105 = 0;\n  let currentMaxValue105 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmal = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\nconstnextSmallest = (lst) => {\n  let res = [lst[0]];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < res[res.length - 1]) {\n      res.push(lst[i]);\n    }\n  }\n  return res[res.length - 1];\n};\n\n", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' ');\n  let boredom = sentence.split(' ');\n  \n  bored = bored.concat(boredom.map((word) => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }));\n  \n  return bored.length;\n};\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.slice(0, words.length - 1);\n  let sentence = sentences.join(' '", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return anyInt(x, z, y)\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  if (x < y) {\n    return anyInt(y, x, z)\n  }\n  if (y < z) {\n    return ", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const messageLength = message.length;\n  const messageArray = message.split('');\n  const messageArrayLength = messageArray.length;\n  let encoded = '';\n  for (let i = 0; i < messageArrayLength; i++) {\n    const letter = messageArray[i];\n    let encodedLetter = alphabet[letter];\n    if (encodedLetter === 'l') {\n      encodedLetter = alphabet[letter.toUpperCase()];\n    }\n    encoded += encodedLetter;\n  }\n  return encoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAll = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAll = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAll = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAllAll = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decodeAllAllAllAllAll = (encoded) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const encodedLength = encoded.length;\n  let decoded = '';\n  for (let i = 0; i < encodedLength; i++) {\n    const letter = encoded.charAt(i);\n    let decodedLetter = alphabet[letter];\n    if (decodedLetter === 'l') {\n      decodedLetter = alphabet[letter.toUpperCase()];\n    }\n    decoded += decodedLetter;\n  }\n  return decoded;\n};\n\n/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that ", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      sum = sum + max;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isDictCase = true;\n  Object.keys(dict).forEach(key => {\n    let value = dict[key];\n    if (typeof value ==='string') {\n      value = value.trim();\n    }\n    if (value && typeof value ==='string') {\n      if (value.toLowerCase() === key.toLowerCase()) {\n        isDictCase = false;\n      }\n    }\n  });\n  return isDictCase;\n};\n\n/*\n  Given a string, return true if it is a valid phone number.\n  Examples:\n  isValidPhoneNumber(\"1234567890\") should return true.\n  isValidPhoneNumber(\"123456789012\") should return false.\n  isValidPhoneNumber(\"123456789012-34567890\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012-34567890\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012-3456789012\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012-3456789012-34567890\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012-3456789012-3456789012-34567890\") should return false.\n  isValidPhoneNumber(\"123456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012-3456789012", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count >= 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpToZero(5) => [2,3]\n  countUpToZero(11) => [2,3,5,7]\n  countUpToZero(0) => []\n  countUpToZero(20) => [2,3,5,7,11,13,17,19]\n  countUpToZero(1) => []\n  countUpToZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToZero = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownToZero(5) => [2,3]\n  countDownToZero(11) => [2,3,5,7]\n  countDownToZero(0) => []\n  countDownToZero(20) => [2,3,5,7,11,13,17,19]\n  countDownToZero(1) => []\n  countDownToZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToZero = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count >= 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpToOne(5) => [2,3]\n  countUpToOne(11) => [2,3,5,7]\n  countUpToOne(0) => []\n  countUpToOne(20) => [2,3,5,7,11,13,17,19]\n  countUpToOne(1) => []\n  countUpToOne(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToOne = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownToOne(5) => [2,3]\n  countDownToOne(11) => [2,3,5,7]\n  countDownToOne(0) => []\n  countDownToOne(20) => [2,3,5,7,11,13,17,19]\n  countDownToOne(1) => []\n  countDownToOne(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToOne = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count >= 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpToTwo(5) => [2,3]\n  countUpToTwo(11) => [2,3,5,7]\n  countUpToTwo(0) => []\n  countUpToTwo(20) => [2,3,5,7,11,13,17,19]\n  countUpToTwo(1) => []\n  countUpToTwo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToTwo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownToTwo(5) => [2,3]\n  countDownToTwo(11) => [2,3,5,7]\n  countDownToTwo(0) => []\n  countDownToTwo(20) => [2,3,5,7,11,13,17,19]\n  countDownToTwo(1) => []\n  countDownToTwo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToTwo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count >= 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpToThree(5) => [2,3]\n  countUpToThree(11) => [2,3,5,7]\n  countUpToThree(0) => []\n  countUpToThree(20) => [2,3,5,7,11,13,17,19]\n  countUpToThree(1) => []\n  countUpToThree(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToThree = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countDownToThree(5) => [2,3]\n  countDownToThree(11) => [2,3,5,7]\n  countDownToThree(0) => []\n  countDownToThree(20) => [2,3,5,7,11,13,17,19]\n  countDownToThree(1) ", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let res = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181 = 0\n  let temp182 = 0\n  let temp183 = 0\n  let temp184 = 0\n  let temp185 = 0\n  let temp186 = 0\n  let temp187 = 0\n  let temp188 = 0\n  let temp189 = 0\n  let temp190 = 0\n  let temp191 = 0\n  let temp192 = 0\n  let temp193 = 0\n  let temp194 = 0\n  let temp195 = 0\n  let temp196 = 0\n  let temp197 = 0\n  let temp198 = 0\n  let temp199 = 0\n  let temp200 = 0\n  let temp201 = 0\n  let temp202 = 0\n  let temp203 = 0\n  let temp204 = 0\n  let temp205 = 0\n  let temp206 = 0\n  let temp207 = 0\n  let temp208 = 0\n  let temp209 = 0\n  let temp210 = 0\n  let temp211 = 0\n  let temp212 = 0\n  let temp213 = 0\n  let temp214 = 0\n  let temp215 = 0\n  let temp216 = 0\n  let temp217 = 0\n  let temp218 = 0\n  let temp219 = 0\n  let temp220 = 0\n  let temp221 = 0\n  let temp222 = 0\n  let temp223 = 0\n  let temp224 = 0\n  let temp225 = 0\n  let temp226 = 0\n  let temp227 = 0\n  let temp228 = 0\n  let temp229 = 0\n  let temp230 = 0\n  let temp231 = 0\n  let temp232 = 0\n  let temp233 = 0\n  let temp234 = 0\n  let temp235 = 0\n  let temp236 = 0\n  let temp237 = 0\n  let temp238 = 0\n  let temp239 = 0\n  let temp240 = 0\n  let temp241 = 0\n  let temp242 = 0\n  let temp243 = 0\n  let temp244 = 0\n  let temp245 = 0\n  let temp246 = 0\n  let temp247 = 0\n  let temp248 = 0\n  let temp249 = 0\n  let temp250 = 0\n  let temp251 = 0\n  let temp252 = 0\n  let temp253 = 0\n  let temp254 = 0\n  let temp255 = 0\n  let temp256 = 0\n  let temp257 = 0\n  let temp258 = 0\n  let temp259 = 0\n  let temp260 = 0\n  let temp261 = 0\n  let temp262 = 0\n  let temp263 = 0\n  let temp264 = 0\n  let temp265 = 0\n  let temp266 = 0\n  let temp267 = 0\n  let temp268 = 0\n  let temp269 = 0\n  let temp270 = 0\n  let temp271 = 0\n  let temp272 = 0\n  let temp273 = 0\n  let temp274 = 0\n  let temp275 = 0\n  let temp276 = 0\n  let temp277 = 0\n  let temp278 = 0\n  let temp", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i).toUpperCase() === 'A') {\n      upper += 1;\n    } else if (s.charAt(i).toUpperCase() === 'E') {\n      upper += 2;\n    } else if (s.charAt(i).toUpperCase() === 'I') {\n      upper += 3;\n    } else if (s.charAt(i).toUpperCase() === 'O') {\n      upper += 4;\n    } else if (s.charAt(i).toUpperCase() === 'U') {\n      upper += 5;\n    }\n  }\n  \n  return upper;\n};\n\n/*\n  Given a string s, count the number o f lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      lower += 1;\n    } else if (s.charAt(i).toLowerCase() === 'e') {\n      lower += 2;\n    } else if (s.charAt(i).toLowerCase() === 'i') {\n      lower += 3;\n    } else if (s.charAt(i).toLowerCase() === 'o') {\n      lower += 4;\n    } else if (s.charAt(i).toLowerCase() === 'u') {\n      lower += 5;\n    }\n  }\n  \n  return lower;\n};\n\n/*\n  Given a string s, count the number o f vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let vowels = 0;\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      vowels += 1;\n    } else if (s.charAt(i).toLowerCase() === 'e') {\n      vowels += 2;\n    } else if (s.charAt(i).toLowerCase() === 'i') {\n      vowels += 3;\n    } else if (s.charAt(i).toLowerCase() === 'o') {\n      vowels += 4;\n    } else if (s.charAt(i).toLowerCase() === 'u') {\n      vowels += 5;\n    }\n  }\n  \n  return vowels;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n  let longestCommonSubsequence = '';\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i)) {\n      longestCommonSubsequence += s.charAt(i);\n    } else if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    }\n  }\n  \n  return longestCommonSubsequence;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n  let longestCommonSubsequence = '';\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i)) {\n      longestCommonSubsequence += s.charAt(i);\n    } else if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    }\n  }\n  \n  return longestCommonSubsequence;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n  let longestCommonSubsequence = '';\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i)) {\n      longestCommonSubsequence += s.charAt(i);\n    } else if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    }\n  }\n  \n  return longestCommonSubsequence;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n  let longestCommonSubsequence = '';\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i)) {\n      longestCommonSubsequence += s.charAt(i);\n    } else if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    }\n  }\n  \n  return longestCommonSubsequence;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n  let longestCommonSubsequence = '';\n  let i;\n  \n  for (i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === s.charAt(i)) {\n      longestCommonSubsequence += s.charAt(i);\n    } else if (s.charAt(i) === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    } else if (s.charAt(i).toUpperCase() === s.charAt(i).toUpperCase()) {\n      longestCommonSubsequence += s.charAt(i).toUpperCase();\n    }\n  }\n  \n  return longestCommonSubsequence;\n};\n\n/*\n  Given a string s, return the longest common subsequence of s.\n  \n  For example:\n  longestCommonSubsequence('abcdefg') returns 'bcdefg'\n  longestCommonSubsequence('dBBE') returns 'dBBE'\n  */\nconst longestCommonSubsequence = (s) => {\n", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num;\n  let int;\n  let int2;\n  let int3;\n  let int4;\n  let int5;\n  let int6;\n  let int7;\n  let int8;\n  let int9;\n  let int10;\n  let int11;\n  let int12;\n  let int13;\n  let int14;\n  let int15;\n  let int16;\n  let int17;\n  let int18;\n  let int19;\n  let int20;\n  let int21;\n  let int22;\n  let int23;\n  let int24;\n  let int25;\n  let int26;\n  let int27;\n  let int28;\n  let int29;\n  let int30;\n  let int31;\n  let int32;\n  let int33;\n  let int34;\n  let int35;\n  let int36;\n  let int37;\n  let int38;\n  let int39;\n  let int40;\n  let int41;\n  let int42;\n  let int43;\n  let int44;\n  let int45;\n  let int46;\n  let int47;\n  let int48;\n  let int49;\n  let int50;\n  let int51;\n  let int52;\n  let int53;\n  let int54;\n  let int55;\n  let int56;\n  let int57;\n  let int58;\n  let int59;\n  let int60;\n  let int61;\n  let int62;\n  let int63;\n  let int64;\n  let int65;\n  let int66;\n  let int67;\n  let int68;\n  let int69;\n  let int70;\n  let int71;\n  let int72;\n  let int73;\n  let int74;\n  let int75;\n  let int76;\n  let int77;\n  let int78;\n  let int79;\n  let int80;\n  let int81;\n  let int82;\n  let int83;\n  let int84;\n  let int85;\n  let int86;\n  let int87;\n  let int88;\n  let int89;\n  let int90;\n  let int91;\n  let int92;\n  let int93;\n  let int94;\n  let int95;\n  let int96;\n  let int97;\n  let int98;\n  let int99;\n  let int100;\n  let int101;\n  let int102;\n  let int103;\n  let int104;\n  let int105;\n  let int106;\n  let int107;\n  let int108;\n  let int109;\n  let int110;\n  let int111;\n  let int112;\n  let int113;\n  let int114;\n  let int115;\n  let int116;\n  let int117;\n  let int118;\n  let int119;\n  let int120;\n  let int121;\n  let int122;\n  let int123;\n  let int124;\n  let int125;\n  let int126;\n  let int127;\n  let int128;\n  let int129;\n  let int130;\n  let int131;\n  let int132;\n  let int133;\n  let int134;\n  let int135;\n  let int136;\n  let int137;\n  let int138;\n  let int139;\n  let int140;\n  let int141;\n  let int142;\n  let int143;\n  let int144;\n  let int145;\n  let int146;\n  let int147;\n  let int148;\n  let int149;\n  let int150;\n  let int151;\n  let int152;\n  let int153;\n  let int154;\n  let int155;\n  let int156;\n  let int157;\n  let int158;\n  let int159;\n  let int160;\n  let int161;\n  let int162;\n  let int163;\n  let int164;\n  let int165;\n  let int166;\n  let int167;\n  let int168;\n  let int169;\n  let int170;\n  let int171;\n  let int172;\n  let int173;\n  let int174;\n  let int175;\n  let int176;\n  let int177;\n  let int178;\n  let int179;\n  let int180;\n  let int181;\n  let int182;\n  let int183;\n  let int184;\n  let int185;\n  let int186;\n  let int187;\n  let int188;\n  let int189;\n  let int190;\n  let int191;\n  let int192;\n  let int193;\n  let int194;\n  let int195;\n  let int196;\n  let int197;\n  let int198;\n  let int199;\n  let int200;\n  let int201;\n  let int202;\n  let int203;\n  let int204;\n  let int205;\n  let int206;\n  let int207;\n  let int208;\n  let int209;\n  let int210;\n  let int211;\n  let int212;\n  let int213;\n  let int214;\n  let int215;\n  let int216;\n  let int217;\n  let int218;\n  let int219;\n  let int220;\n  let int221;\n  let int222;\n  let int223;\n  let int224;\n  let int225;\n  let int226;\n  let int227;\n  let int228;\n  let int229;\n  let int230;\n  let int231;\n  let int232;\n  let int233;\n  let int234;\n  let int235;\n  let int236;\n  let int237;\n  let int238;\n  let int239;\n  let int240;\n  let int241;\n  let int242;\n  let int243;\n  let int244;\n  let int245;\n  let int246;\n  let int247;\n  let int248;\n  let int249;\n  let int250;\n  let int251;\n  let int252;\n  let int253;\n  let int254;\n  let int255;\n  let int256;\n  let int257;\n  let int258;\n  let int259;\n  let int260;\n  let int261;\n  let int262;\n  let int263;\n  let int264;\n  let int265;\n  let int266;\n  let int267;\n  let int268;\n  let int269;\n  let int270;\n  let int271;\n  let int272;\n  let int273;\n  let int274;\n  let int275;\n  let int276;\n  let int277;\n  let int278;\n  let int279;\n  let int280;\n  let int281;\n", "passed": 0}
