{"task_id": "JavaScript/0", "prompt": "/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check ifi n gi ven li s t of n umbers, a re any two numbers cl oser to each ot h er than\n  given thr eshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closeElements = [\n    [0, 1],\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [8, 9],\n    [9, 10],\n    [10, 11],\n    [11, 12],\n    [12, 13],\n    [13, 14],\n    [14, 15],\n    [15, 16],\n    [16, 17],\n    [17, 18],\n    [18, 19],\n    [19, 20],\n    [20, 21],\n    [21, 22],\n    [22, 23],\n    [23, 24],\n    [24, 25],\n    [25, 26],\n    [26, 27],\n    [27, 28],\n    [28, 29],\n    [29, 30],\n    [30, 31],\n    [31, 32],\n    [32, 33],\n    [33, 34],\n    [34, 35],\n    [35, 36],\n    [36, 37],\n    [37, 38],\n    [38, 39],\n    [39, 40],\n    [40, 41],\n    [41, 42],\n    [42, 43],\n    [43, 44],\n    [44, 45],\n    [45, 46],\n    [46, 47],\n    [47, 48],\n    [48, 49],\n    [49, 50],\n    [50, 51],\n    [51, 52],\n    [52, 53],\n    [53, 54],\n    [54, 55],\n    [55, 56],\n    [56, 57],\n    [57, 58],\n    [58, 59],\n    [59, 60],\n    [60, 61],\n    [61, 62],\n    [62, 63],\n    [63, 64],\n    [64, 65],\n    [65, 66],\n    [66, 67],\n    [67, 68],\n    [68, 69],\n    [69, 70],\n    [70, 71],\n    [71, 72],\n    [72, 73],\n    [73, 74],\n    [74, 75],\n    [75, 76],\n    [76, 77],\n    [77, 78],\n    [78, 79],\n    [79, 80],\n    [80, 81],\n    [81, 82],\n    [82, 83],\n    [83, 84],\n    [84, 85],\n    [85, 86],\n    [86, 87],\n    [87, 88],\n    [88, 89],\n    [89, 90],\n    [90, 91],\n    [91, 92],\n    [92, 93],\n    [93, 94],\n    [94, 95],\n    [95, 96],\n    [96, 97],\n    [97, 98],\n    [98, 99],\n    [99, 100],\n    [100, 101],\n    [101, 102],\n    [102, 103],\n    [103, 104],\n    [104, 105],\n    [105, 106],\n    [106, 107],\n    [107, 108],\n    [108, 109],\n    [109, 110],\n    [110, 111],\n    [111, 112],\n    [112, 113],\n    [113, 114],\n    [114, 115],\n    [115, 116],\n    [116, 117],\n    [117, 118],\n    [118, 119],\n    [119, 120],\n    [120, 121],\n    [121, 122],\n    [122, 123],\n    [123, 124],\n    [124, 125],\n    [125, 126],\n    [126, 127],\n    [127, 128],\n    [128, 129],\n    [129, 130],\n    [130, 131],\n    [131, 132],\n    [132, 133],\n    [133, 134],\n    [134, 135],\n    [135, 136],\n    [136, 137],\n    [137, 138],\n    [138, 139],\n    [139, 140],\n    [140, 141],\n    [141, 142],\n    [142, 143],\n    [143, 144],\n    [144, 145],\n    [145, 146],\n    [146, 147],\n    [147, 148],\n    [148, 149],\n    [149, 150],\n    [150, 151],\n    [151, 152],\n    [152, 153],\n    [153, 154],\n    [154, 155],\n    [155, 156],\n    [156, 157],\n    [157, 158],\n    [158, 159],\n    [159, 160],\n    [160, 161],\n    [161, 162],\n    [162, 163],\n    [163, 164],\n    [164, 165],\n    [165, 166],\n    [166, 167],\n    [167, 168],\n    [168, 169],\n    [169, 170],\n    [170, 171],\n    [171, 172],\n    [172, 173],\n    [173, 174],\n    [174, 175],\n    [175, 176],\n    [176, 177],\n    [177, 178],\n    [178, 179],\n    [179, 180],\n    [180, 181],\n    [181, 182],\n    [182, 183],\n    [183, 184],\n    [184, 185],\n    [185, 186],\n    [186, 187],\n    [187, 188],\n    [188, 189],\n    [189, 190],\n    [190, 191],\n    [191, 192],\n    [192, 193],\n    [193, 194],\n    [194, 195],\n    [195, 196],\n    [196, 197],\n    [197, 198],\n    [198, 199],\n    [199, 200],\n    [200, 201],\n    [201, 202],\n    [202, 203],\n    [203, 204],\n    [204, 205],\n    [205, 206],\n    [206, 207],\n    [207, 208],\n    [208, 209],\n    [209, 210],\n    [210, 211],\n    [211, 212],\n    [212, 213],\n    [213, 214],\n    [214, 215],\n    [215, 216],\n    [216, 217],\n    [217, 218],\n    [218, 219],\n    [219, 220],\n    [220, 221],\n    [221, 222],\n    [222, 223],\n    [223, 224],\n    [224, 225],\n    [225, 226],\n    [226, 227],\n    [227, 228],\n    [228, 229],\n    [229, 230],\n    [230, 231],\n    [231, 232],\n    [232, 233],\n    [233, 234],\n    [234, 235],\n    [235, 236],\n    [236, 237],\n    [237, 238],\n    [238, 239],\n    [239, 240],\n    [240, 241],\n    [241, 242],\n    [242, 243],\n    [243, 244],\n    [244, 245],\n    [245, 246],\n    [246, 247],\n    [247, 248],\n    [248, 249],\n    [249, 250],\n    [250, 251],\n    [251, 252],\n    [252, 253],\n    [253, 254],\n    [254, 255],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input tot hisfuncti o n is a  string c ontaining multiple gr oups of nestedp arentheses. Your go al is to  separate t hose groupi n to separate str ings and r e turn the list ofthose.\n  Se pa rate groups are balanc ed (each open brace is properly cl osed) and not nested  with in each other\n  Ig n ore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test if gn iven  strig is a p alindrome  */\nconst isPalindrom e = (string) => {\n  return string = = string.split('').re verse().join ( '');\n}\n\n/* Find  the short e st palindrome that begins wi th  a supplied string.\n Algorithm idea is simple:\n  - Find the longest postfix  of s upplied string tha t  is apalindrome.\n  - Append to the endof the stringreverse of a s tring prefix that comesbefore the pal indromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeLength2 = 0;\n  let longestPalindromeLength3 = 0;\n  let longestPalindromeLength4 = 0;\n  let longestPalindromeLength5 = 0;\n  let longestPalindromeLength6 = 0;\n  let longestPalindromeLength7 = 0;\n  let longestPalindromeLength8 = 0;\n  let longestPalindromeLength9 = 0;\n  let longestPalindromeLength10 = 0;\n  let longestPalindromeLength11 = 0;\n  let longestPalindromeLength12 = 0;\n  let longestPalindromeLength13 = 0;\n  let longestPalindromeLength14 = 0;\n  let longestPalindromeLength15 = 0;\n  let longestPalindromeLength16 = 0;\n  let longestPalindromeLength17 = 0;\n  let longestPalindromeLength18 = 0;\n  let longestPalindromeLength19 = 0;\n  let longestPalindromeLength20 = 0;\n  let longestPalindromeLength21 = 0;\n  let longestPalindromeLength22 = 0;\n  let longestPalindromeLength23 = 0;\n  let longestPalindromeLength24 = 0;\n  let longestPalindromeLength25 = 0;\n  let longestPalindromeLength26 = 0;\n  let longestPalindromeLength27 = 0;\n  let longestPalindromeLength28 = 0;\n  let longestPalindromeLength29 = 0;\n  let longestPalindromeLength30 = 0;\n  let longestPalindromeLength31 = 0;\n  let longestPalindromeLength32 = 0;\n  let longestPalindromeLength33 = 0;\n  let longestPalindromeLength34 = 0;\n  let longestPalindromeLength35 = 0;\n  let longestPalindromeLength36 = 0;\n  let longestPalindromeLength37 = 0;\n  let longestPalindromeLength38 = 0;\n  let longestPalindromeLength39 = 0;\n  let longestPalindromeLength40 = 0;\n  let longestPalindromeLength41 = 0;\n  let longestPalindromeLength42 = 0;\n  let longestPalindromeLength43 = 0;\n  let longestPalindromeLength44 = 0;\n  let longestPalindromeLength45 = 0;\n  let longestPalindromeLength46 = 0;\n  let longestPalindromeLength47 = 0;\n  let longestPalindromeLength48 = 0;\n  let longestPalindromeLength49 = 0;\n  let longestPalindromeLength50 = 0;\n  let longestPalindromeLength51 = 0;\n  let longestPalindromeLength52 = 0;\n  let longestPalindromeLength53 = 0;\n  let longestPalindromeLength54 = 0;\n  let longestPalindromeLength55 = 0;\n  let longestPalindromeLength56 = 0;\n  let longestPalindromeLength57 = 0;\n  let longestPalindromeLength58 = 0;\n  let longestPalindromeLength59 = 0;\n  let longestPalindromeLength60 = 0;\n  let longestPalindromeLength61 = 0;\n  let longestPalindromeLength62 = 0;\n  let longestPalindromeLength63 = 0;\n  let longestPalindromeLength64 = 0;\n  let longestPalindromeLength65 = 0;\n  let longestPalindromeLength66 = 0;\n  let longestPalindromeLength67 = 0;\n  let longestPalindromeLength68 = 0;\n  let longestPalindromeLength69 = 0;\n  let longestPalindromeLength70 = 0;\n  let longestPalindromeLength71 = 0;\n  let longestPalindromeLength72 = 0;\n  let longestPalindromeLength73 = 0;\n  let longestPalindromeLength74 = 0;\n  let longestPalindromeLength75 = 0;\n  let longestPalindromeLength76 = 0;\n  let longestPalindromeLength77 = 0;\n  let longestPalindromeLength78 = 0;\n  let longestPalindromeLength79 = 0;\n  let longestPalindromeLength80 = 0;\n  let longestPalindromeLength81 = 0;\n  let longestPalindromeLength82 = 0;\n  let longestPalindromeLength83 = 0;\n  let longestPalindromeLength84 = 0;\n  let longestPalindromeLength85 = 0;\n  let longestPalindromeLength86 = 0;\n  let longestPalindromeLength87 = 0;\n  let longestPalindromeLength88 = 0;\n  let longestPalindromeLength89 = 0;\n  let longestPalindromeLength90 = 0;\n  let longestPalindromeLength91 = 0;\n  let longestPalindromeLength92 = 0;\n  let longestPalindromeLength93 = 0;\n  let longestPalindromeLength94 = 0;\n  let longestPalindromeLength95 = 0;\n  let longestPalindromeLength96 = 0;\n  let longestPalindromeLength97 = 0;\n  let longestPalindromeLength98 = 0;\n  let longestPalindromeLength99 = 0;\n  let longestPalindromeLength100 = 0;\n  let longestPalindromeLength101 = 0;\n  let longestPalindromeLength102 = 0;\n  let longestPalindromeLength103 = 0;\n  let longestPalindromeLength104 = 0;\n  let longestPalindromeLength105 = 0;\n  let longestPalindromeLength106 = 0;\n  let longestPalindromeLength107 = 0;\n  let longestPalindromeLength108 = 0;\n  let longestPalindromeLength109 = 0;\n  let longestPalindromeLength110 = 0;\n  let longestPalindromeLength111 = 0;\n  let longestPalindromeLength112 = 0;\n  let longestPalindromeLength113 = 0;\n  let longestPalindromeLength114 = 0;\n  let longestPalindromeLength115 = 0;\n  let longestPalindromeLength116 = 0;\n  let longestPalindromeLength117 = 0;\n  let longestPalindromeLength118 = 0;\n  let longestPalindromeLength119 = 0;\n  let longestPalindromeLength120 = 0;\n  let longestPalindromeLength121 = 0;\n  let longestPalindromeLength122 = 0;\n  let longestPalindromeLength123 = 0;\n  let longestPalindromeLength124 = 0;\n  let longestPalindromeLength125 = 0;\n  let longestPalindromeLength126 = 0;\n  let longestPalindromeLength127 = 0;\n  let longestPalindromeLength128 = 0;\n  let longestPalindromeLength129 = 0;\n  let longestPalindromeLength130 = 0;\n  let longestPalindromeLength131 = 0;\n  let longestPalindromeLength132 = 0;\n  let longestPalindromeLength133 = 0;\n  let longestPalindromeLength134 = 0;\n  let longestPalindromeLength135 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s .\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(0);\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      arr[j] += arr[j - 1];\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a po siti ve int e ger n,  you have  to make a pile of nlevels of stone s.\n  The first level  has n stones.\n  Thenumber of st o nes in the next  level is:       - the nextodd numberif  n is odd.\n      - the  next even number if n is even.\n Return thenumber of  ston es in each level i n  a list, where element at index\n  i repr esents the number of stonesin the level (i+1).\n\n  E xamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/101", "prompt": "/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You willb e gi ven as tringof wordsseparated by commas o r spaces. Yourt ask is\n  to split t he string into wordsand returna n  array of the w ords.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas(\"Hi, my name is John\") == \" Hi, my name is John\"\n  removeSpacesAndCommas(\"One, two, three, four, five, six\") == \" One, two, three, four, five, six\"\n  */\nconst removeSpacesAndCommas = (s) => {\n  let result = s.replace(/\\s/g, \"\");\n  result = result.replace(/,/g, \"\");\n  return result;\n};\n\n/*\n  You will receive a string. Your task is to remove all spaces and all\n  commas from the string. Your function should return a new string without\n  any spaces or commas.\n  \n  For example:\n  removeSpacesAndCommas", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functi on t akes t w o posi tive numb ers x and y and retur ns the\n  bigges t  even integer numbe r that is in the rang e [x, y] inc l usive. If \n  th ere's no s u ch number, then the function  s hould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num1 = Math.floor(x / 2);\n  const num2 = Math.floor(y / 2);\n  const num3 = Math.floor(num1 / 2);\n  const num4 = Math.floor(num2 / 2);\n  const num5 = Math.floor(num3 / 2);\n  const num6 = Math.floor(num4 / 2);\n  const num7 = Math.floor(num5 / 2);\n  const num8 = Math.floor(num6 / 2);\n  const num9 = Math.floor(num7 / 2);\n  const num10 = Math.floor(num8 / 2);\n  const num11 = Math.floor(num9 / 2);\n  const num12 = Math.floor(num10 / 2);\n  const num13 = Math.floor(num11 / 2);\n  const num14 = Math.floor(num12 / 2);\n  const num15 = Math.floor(num13 / 2);\n  const num16 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15;\n  const num17 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16;\n  const num18 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17;\n  const num19 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18;\n  const num20 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19;\n  const num21 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20;\n  const num22 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21;\n  const num23 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22;\n  const num24 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23;\n  const num25 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24;\n  const num26 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25;\n  const num27 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26;\n  const num28 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27;\n  const num29 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28;\n  const num30 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29;\n  const num31 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29 + num30;\n  const num32 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29 + num30 + num31;\n  const num33 = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13 + num14 + num15 + num16 + num17 + num18 + num19 + num20 + num21 + num22 + num23 + num24 + num25 + num26 + num27 + num28 + num29 + num30 + num31 + num32;\n  const num34 = num1 + num2 + num3 + num4 + num5 + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en t wo pos i tive i ntegers n  and m, and your task  is to computet he\n  average of the  integers from n thro ugh m (inclu d ing nand m).   Round th e  answer to the nearest integ er  and convert that to b inary.\n  If n isgreater than m, r eturn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let result = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 10 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyodd digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyodd digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueEvenDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueOddOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueOddOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOddDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyodd digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueEvenOddOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueEvenOddOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyodd digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueOddEvenOddDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddOddEvenDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j === k) {\n        res.push(x.slice(i, j));\n        i = j + 1;\n      } else {\n        res.push(x.slice(i, j));\n        i = j;\n      }\n      j = k;\n      k = j + 1;\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n\n/*Given a lis t of  posit i ve int egers x.return a sorted listof all \n  eleme n ts that hasn't anyeven digit.\n\n  Note:Returned lis t  should be sort ed in incr e asing order.\n  \n For exampl e: \n  >>> uniqueOddOddOddEvenDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueOddOddOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddOddEvenDigits = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  while (i < l) {\n    if (x[i] % 2 === 0) {\n      if (j", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given ana rray  of in t egers,  sort the  integers that are be tween 1 and 9 i n clusive,\n  reversethe resulting array,and then rep l ace each digitby its cor r esponding name from\n  \"One\",  \" Two\", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let arr2 = arr.slice();\n  let arr3 = arr2.slice();\n  let arr4 = arr3.slice();\n  let arr5 = arr4.slice();\n  let arr6 = arr5.slice();\n  let arr7 = arr6.slice();\n  let arr8 = arr7.slice();\n  let arr9 = arr8.slice();\n  let arr10 = arr9.slice();\n  let arr11 = arr10.slice();\n  let arr12 = arr11.slice();\n  let arr13 = arr12.slice();\n  let arr14 = arr13.slice();\n  let arr15 = arr14.slice();\n  let arr16 = arr15.slice();\n  let arr17 = arr16.slice();\n  let arr18 = arr17.slice();\n  let arr19 = arr18.slice();\n  let arr20 = arr19.slice();\n  let arr21 = arr20.slice();\n  let arr22 = arr21.slice();\n  let arr23 = arr22.slice();\n  let arr24 = arr23.slice();\n  let arr25 = arr24.slice();\n  let arr26 = arr25.slice();\n  let arr27 = arr26.slice();\n  let arr28 = arr27.slice();\n  let arr29 = arr28.slice();\n  let arr30 = arr29.slice();\n  let arr31 = arr30.slice();\n  let arr32 = arr31.slice();\n  let arr33 = arr32.slice();\n  let arr34 = arr33.slice();\n  let arr35 = arr34.slice();\n  let arr36 = arr35.slice();\n  let arr37 = arr36.slice();\n  let arr38 = arr37.slice();\n  let arr39 = arr38.slice();\n  let arr40 = arr39.slice();\n  let arr41 = arr40.slice();\n  let arr42 = arr41.slice();\n  let arr43 = arr42.slice();\n  let arr44 = arr43.slice();\n  let arr45 = arr44.slice();\n  let arr46 = arr45.slice();\n  let arr47 = arr46.slice();\n  let arr48 = arr47.slice();\n  let arr49 = arr48.slice();\n  let arr50 = arr49.slice();\n  let arr51 = arr50.slice();\n  let arr52 = arr51.slice();\n  let arr53 = arr52.slice();\n  let arr54 = arr53.slice();\n  let arr55 = arr54.slice();\n  let arr56 = arr55.slice();\n  let arr57 = arr56.slice();\n  let arr58 = arr57.slice();\n  let arr59 = arr58.slice();\n  let arr60 = arr59.slice();\n  let arr61 = arr60.slice();\n  let arr62 = arr61.slice();\n  let arr63 = arr62.slice();\n  let arr64 = arr63.slice();\n  let arr65 = arr64.slice();\n  let arr66 = arr65.slice();\n  let arr67 = arr66.slice();\n  let arr68 = arr67.slice();\n  let arr69 = arr68.slice();\n  let arr70 = arr69.slice();\n  let arr71 = arr70.slice();\n  let arr72 = arr71.slice();\n  let arr73 = arr72.slice();\n  let arr74 = arr73.slice();\n  let arr75 = arr74.slice();\n  let arr76 = arr75.slice();\n  let arr77 = arr76.slice();\n  let arr78 = arr77.slice();\n  let arr79 = arr78.slice();\n  let arr80 = arr79.slice();\n  let arr81 = arr80.slice();\n  let arr82 = arr81.slice();\n  let arr83 = arr82.slice();\n  let arr84 = arr83.slice();\n  let arr85 = arr84.slice();\n  let arr86 = arr85.slice();\n  let arr87 = arr86.slice();\n  let arr88 = arr87.slice();\n  let arr89 = arr88.slice();\n  let arr90 = arr89.slice();\n  let arr91 = arr90.slice();\n  let arr92 = arr91.slice();\n  let arr93 = arr92.slice();\n  let arr94 = arr93.slice();\n  let arr95 = arr94.slice();\n  let arr96 = arr95.slice();\n  let arr97 = arr96.slice();\n  let arr98 = arr97.slice();\n  let arr99 = arr98.slice();\n  let arr100 = arr99.slice();\n  let arr101 = arr100.slice();\n  let arr102 = arr101.slice();\n  let arr103 = arr102.slice();\n  let arr104 = arr103.slice();\n  let arr105 = arr104.slice();\n  let arr106 = arr105.slice();\n  let arr107 = arr106.slice();\n  let arr108 = arr107.slice();\n  let arr109 = arr108.slice();\n  let arr110 = arr109.slice();\n  let arr111 = arr110.slice();\n  let arr112 = arr111.slice();\n  let arr113 = arr112.slice();\n  let arr114 = arr113.slice();\n  let arr115 = arr114.slice();\n  let arr116 = arr115.slice();\n  let arr117 = arr116.slice();\n  let arr118 = arr117.slice();\n  let arr119 = arr118.slice();\n  let arr120 = arr119.slice();\n  let arr121 = arr120.slice();\n  let arr122 = arr121.slice();\n  let arr123 = arr122.slice();\n  let arr124 = arr123.slice();\n  let arr125 = arr124.slice();\n  let arr126 = arr125.slice();\n  let arr127 = arr126.slice();\n  let arr128 = arr127.slice();\n  let arr129 = arr128.slice();\n  let arr130 = arr129.slice();\n  let arr131 = arr130.slice();\n  let arr132 = arr131.slice();\n  let arr133 = arr132.slice();\n  let arr134 = arr133.slice();\n  let arr135 = arr134.slice();\n  let arr136 = arr135.slice();\n  let arr137 = arr136.slice();\n  let arr138 = arr137.slice();\n  let arr139 = arr13", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fa ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const factorial = (n) => {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/* Implementthefuncti o n f th at takesn as a parameter,\n  a nd returns a li s t of size n, such t hat the value of theelement ati n dex iis the fac ctorial of i if i is even\n or the sumof  numbers from 1 to i o therwise.\n  i starts from 1.\n  the factorialof i is t he mu ltiplication of th e  numbers from 1 to i(1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  const factorial = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd\n  integer pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  evenOddPalindromes.push(even);\n  evenOddPalindromes.push(odd);\n  return evenOddPalindromes;\n};\n\n/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd integer\n  pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddEvenPalindrome = (n) => {\n  const evenOddEvenPalindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  evenOddEvenPalindromes.push(even);\n  evenOddEvenPalindromes.push(odd);\n  return evenOddEvenPalindromes;\n};\n\n/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd integer\n  pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddOddPalindrome = (n) => {\n  const evenOddOddPalindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  evenOddOddPalindromes.push(even);\n  evenOddOddPalindromes.push(odd);\n  return evenOddOddPalindromes;\n};\n\n/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd integer\n  pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddEvenOddPalindrome = (n) => {\n  const evenOddEvenOddPalindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  evenOddEvenOddPalindromes.push(even);\n  evenOddEvenOddPalindromes.push(odd);\n  return evenOddEvenOddPalindromes;\n};\n\n/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd integer\n  pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddOddEvenOddPalindrome = (n) => {\n  const evenOddOddEvenOddPalindromes = [];\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  evenOddOddEvenOddPalindromes.push(even);\n  evenOddOddEvenOddPalindromes.push(odd);\n  return evenOddOddEvenOddPalindromes;\n};\n\n/*\n  Given a po siti ve int e ger n,  return a  tuple that has the n umber of even a n d odd integer\n  pal indromesthat fall wi thin the ran g e(1, n), inclus ive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0 .\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e .g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on cou n tNumswhich tak es an array of intege rs and returns the number of elem ents which has a sumof digits >0.\n  If a number  is negati v e, then its first signed dig it  will be negative:\n  e.g. -123 has signed digits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0;\n  let sign = 1;\n  let signNum = 0;\n  let signNum2 = 1;\n  let signNum3 = 1;\n  let signNum4 = 1;\n  let signNum5 = 1;\n  let signNum6 = 1;\n  let signNum7 = 1;\n  let signNum8 = 1;\n  let signNum9 = 1;\n  let signNum10 = 1;\n  let signNum11 = 1;\n  let signNum12 = 1;\n  let signNum13 = 1;\n  let signNum14 = 1;\n  let signNum15 = 1;\n  let signNum16 = 1;\n  let signNum17 = 1;\n  let signNum18 = 1;\n  let signNum19 = 1;\n  let signNum20 = 1;\n  let signNum21 = 1;\n  let signNum22 = 1;\n  let signNum23 = 1;\n  let signNum24 = 1;\n  let signNum25 = 1;\n  let signNum26 = 1;\n  let signNum27 = 1;\n  let signNum28 = 1;\n  let signNum29 = 1;\n  let signNum30 = 1;\n  let signNum31 = 1;\n  let signNum32 = 1;\n  let signNum33 = 1;\n  let signNum34 = 1;\n  let signNum35 = 1;\n  let signNum36 = 1;\n  let signNum37 = 1;\n  let signNum38 = 1;\n  let signNum39 = 1;\n  let signNum40 = 1;\n  let signNum41 = 1;\n  let signNum42 = 1;\n  let signNum43 = 1;\n  let signNum44 = 1;\n  let signNum45 = 1;\n  let signNum46 = 1;\n  let signNum47 = 1;\n  let signNum48 = 1;\n  let signNum49 = 1;\n  let signNum50 = 1;\n  let signNum51 = 1;\n  let signNum52 = 1;\n  let signNum53 = 1;\n  let signNum54 = 1;\n  let signNum55 = 1;\n  let signNum56 = 1;\n  let signNum57 = 1;\n  let signNum58 = 1;\n  let signNum59 = 1;\n  let signNum60 = 1;\n  let signNum61 = 1;\n  let signNum62 = 1;\n  let signNum63 = 1;\n  let signNum64 = 1;\n  let signNum65 = 1;\n  let signNum66 = 1;\n  let signNum67 = 1;\n  let signNum68 = 1;\n  let signNum69 = 1;\n  let signNum70 = 1;\n  let signNum71 = 1;\n  let signNum72 = 1;\n  let signNum73 = 1;\n  let signNum74 = 1;\n  let signNum75 = 1;\n  let signNum76 = 1;\n  let signNum77 = 1;\n  let signNum78 = 1;\n  let signNum79 = 1;\n  let signNum80 = 1;\n  let signNum81 = 1;\n  let signNum82 = 1;\n  let signNum83 = 1;\n  let signNum84 = 1;\n  let signNum85 = 1;\n  let signNum86 = 1;\n  let signNum87 = 1;\n  let signNum88 = 1;\n  let signNum89 = 1;\n  let signNum91 = 1;\n  let signNum92 = 1;\n  let signNum93 = 1;\n  let signNum94 = 1;\n  let signNum95 = 1;\n  let signNum96 = 1;\n  let signNum97 = 1;\n  let signNum98 = 1;\n  let signNum99 = 1;\n  let signNum100 = 1;\n  let signNum101 = 1;\n  let signNum102 = 1;\n  let signNum103 = 1;\n  let signNum104 = 1;\n  let signNum105 = 1;\n  let signNum106 = 1;\n  let signNum107 = 1;\n  let signNum108 = 1;\n  let signNum109 = 1;\n  let signNum110 = 1;\n  let signNum111 = 1;\n  let signNum112 = 1;\n  let signNum113 = 1;\n  let signNum114 = 1;\n  let signNum115 = 1;\n  let signNum116 = 1;\n  let signNum117 = 1;\n  let signNum118 = 1;\n  let signNum119 = 1;\n  let signNum120 = 1;\n  let signNum121 = 1;\n  let signNum122 = 1;\n  let signNum123 = 1;\n  let signNum124 = 1;\n  let signNum125 = 1;\n  let signNum126 = 1;\n  let signNum127 = 1;\n  let signNum128 = 1;\n  let signNum129 = 1;\n  let signNum130 = 1;\n  let signNum131 = 1;\n  let signNum132 = 1;\n  let signNum133 = 1;\n  let signNum134 = 1;\n  let signNum135 = 1;\n  let signNum136 = 1;\n  let signNum137 = 1;\n  let signNum138 = 1;\n  let signNum139 = 1;\n  let signNum140 = 1;\n  let signNum141 = 1;\n  let signNum142 = 1;\n  let signNum143 = 1;\n  let signNum144 = 1;\n  let signNum145 = 1;\n  let signNum146 = 1;\n  let signNum147 = 1;\n  let signNum148 = 1;\n  let signNum149 = 1;\n  let signNum150 = 1;\n  let signNum151 = 1;\n  let signNum152 = 1;\n  let signNum153 = 1;\n  let signNum154 = 1;\n  let signNum155 = 1;\n  let signNum156 = 1;\n  let signNum157 = 1;\n  let signNum158 = 1;\n  let signNum159 = 1;\n  let signNum160 = 1;\n  let signNum161 = 1;\n  let signNum162 = 1;\n  let signNum163 = 1;\n  let signNum164 = 1;\n  let signNum165 = 1;\n  let signNum166 = 1;\n  let signNum167 = 1;\n  let signNum168 = 1;\n  let signNum169 = 1;\n  let signNum170 = 1;\n  let signNum171 = 1;\n  let signNum172 = 1;\n  let signNum173 = 1;\n  let signNum174 = 1;\n  let signNum175 = 1;\n  let signNum176 = 1;\n  let signNum177 = 1;\n  let signNum178 = 1;\n  let signNum179 = 1;\n  let signNum180 = 1;\n  let signNum181 = 1;\n  let signNum182 = 1;\n  let signNum183 = 1;\n  let signNum184 = 1;\n  let signNum185 = 1;\n  let signNum186 = 1;\n  let signNum187 = 1;\n  let signNum188 = 1;\n  let signNum189 = 1;\n  let signNum190 = 1;\n  let signNum191 = 1;\n  let signNum192 = 1;\n  let signNum193 = 1;\n  let signNum194 = 1;\n  let signNum195 = 1;\n  let signNum196 = 1;\n  let signNum197 = 1;\n  let signNum198 = 1;\n  let signNum199 = 1;\n  let signNum200 = 1;\n  let signNum201 = 1;\n  let signNum202 = 1;\n  let signNum203 = 1;\n  let signNum204 = 1;\n  let signNum205 = 1;\n  let signNum206 = 1;\n  let signNum207 = 1;\n  let signNum208 = 1;\n  let signNum209 = 1;\n  let signNum210 = 1;\n  let signNum211 = 1;\n  let signNum212 = 1;\n  let signNum213 = 1;\n  let signNum214 = 1;\n  let signNum215 = 1;\n  let signNum216 = 1;\n  let signNum217 = 1;\n  let signNum218 = 1;\n  let signNum219 = 1;\n  let signNum220 = 1;\n  let signNum221 = 1;\n  let signNum222 = 1;\n  let signNum223 = 1;\n  let signNum224 = 1;\n  let signNum225 = 1;\n  let signNum226 = 1;\n  let signNum227 = 1;\n  let signNum228 = 1;\n  let signNum229 = 1;\n  let signNum230 = 1;\n  let signNum231 = 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have anarra y 'arr '  of Nintegersarr[1], arr[2], ...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We have anarra y 'arr' of Nintegersarr[1], arr[2],...,arr[N].The\n  nu m bers in the array w ill be randomly order ed. Your tas k  is to determin e if\n  iti s possible to get an array s or ted in non-decreasingorder by performing \n  the followi ng operation on thegiven  array:\n      Youa re allowed to perform right shift operat ionany number of times.\n    One right shift operat ionmeans shif ting all elements of the array by one\n positio n in the right direction. Thelas t element of the array will be moved  to\n  the s tarting positionin the array i.e. 0th index. \n\n If it  is possible to obtain the sorted  array by performing the aboveoper ation\n  then return true  else return  false.\nIf  the  given array is empty then return true.\n  Note:  Thegiven list is guaranteed to have u nique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp25", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input aretwostring s  a and  b consis ting only of 1s and 0 s.\n  Perform bi n ary XOR on these in puts andreturn resul t also as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  let len = a.length;\n  let i;\n  let j;\n  let k;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n  let x;\n  let y;\n  let z;\n  let t;\n  let s;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this pro blem , youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In this pro blem, youw ill im plement a  function that takestwo lists of nu m bers,\n  and determi nes whether it is pos sible to per f orm an exchange  of elemen t s\n  between themto make lst 1a list of only even nu mbers.\n  There is no limit on thenumber of exchangedeleme nts between lst1 a n d lst2.\n  If it is possible to exchangeelements between the lst1 an d lst2 to make\n  all the  elements of l st1 to be even, r eturn \"YES\".\n  Otherwise, retu rn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = lst1.length;\n  let r = lst2.length;\n  while (i < l && j < r) {\n    if (lst1[i] % 2 === lst2[j % 2]) {\n      res.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      res.push(lst2[j % 2]);\n      j++;\n    }\n  }\n  return res.every(x => x % 2 === 0);\n};\n\n/*\n  Given two lists of numbers, return true if they can be merged into a\n  single sorted list in lexicographical order.\n  For example:\n  mergeSort([3, 6, 4, 1]) => true\n  mergeSort([3, 6, 4, 1]) => false\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([3, 6, 4, 1]) => [3, 6, 4, 1]\n  mergeSort([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLetters = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersWords = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersWordsWords = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersWordsWordsWords = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersWordsWordsWordsWords = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let maxCount = 0;\n  let maxLetter = '';\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    const letterCount = letterMap[letter];\n    if (letterCount > maxCount) {\n      maxCount = letterCount;\n      maxLetter = letter;\n    }\n    letterMap[letter] = letterCount + 1;\n  }\n  return { letterMap, maxCount, maxLetter };\n};\n\n/*Given a str ingrepres e ntinga space s eparated lowercase le tters, return a dictionary\n  of the  letter with the most  repetitiona nd containing t he corresp o nding count.\n  If several le tt ers have the same occu rrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delet ed all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  i = 0\n  j = 0\n  k = 0\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[k]\n    c[k] = temp\n    i++\n    k++\n  }\n  return [s, true]\n}\n\n/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delete all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst delete = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  i = 0\n  j = 0\n  k = 0\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[k]\n    c[k] = temp\n    i++\n    k++\n  }\n  return [s, true]\n}\n\n/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delete all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteReverse = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  i = 0\n  j = 0\n  k = 0\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[k]\n    c[k] = temp\n    i++\n    k++\n  }\n  return [s, true]\n}\n\n/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delete all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteDelete = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  i = 0\n  j = 0\n  k = 0\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[k]\n    c[k] = temp\n    i++\n    k++\n  }\n  return [s, true]\n}\n\n/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delete all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteDeleteReverse = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  i = 0\n  j = 0\n  k = 0\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[k]\n    c[k] = temp\n    i++\n    k++\n  }\n  return [s, true]\n}\n\n/*Task\n  Wea re g iven t w o stri ngs s and  c, you have to delete all the char a cters in s that are  equal to any charact er in c\n  th e n check if theresult str i ng is palindrome.\n  A string  i s called palindrome if  it reads the same backward as for ward.\n  You should r eturn  a tuple containin g  the result string and true/false for th echeck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst deleteDeleteDelete = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t .\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"));\n};\n\n/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of even  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f even digits in thei'thstring of the inpu t.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2!== 0) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"));\n};\n\n/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f even digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2 === 0) {\n      res.push(el);\n      count++;\n    }\n    if (el % 2 === 1) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"));\n};\n\n/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f even digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2!== 0) {\n      res.push(el);\n      count++;\n    }\n    if (el % 2 === 1) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"));\n};\n\n/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f odd digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2!== 0) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"));\n};\n\n/*Given a lis t of  strin g s, whe re each s tring consists of onl y digits, retur n  a list.\n  Each ele ment i of the outputshould be \"t h e number of odd  elementsi n the\n  string iof the inpu t. \" where all the i's sh ould be replacedby the number\n  o f even digits in thei'thstring of the inpu t.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  let count = 0;\n  let isOdd = (el) => {\n    if (el % 2!== 0) {\n      res.push(el);\n      count++;\n    }\n  };\n  lst.forEach((el) => {\n    isOdd(el);\n  });\n  return res.map((el) => el.toString().replace(/\\d/g, \"\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given ana rray  of in t egersnums, fin d the minimum sum ofany non-empty s u b-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array.\n  Example\n  reverseArray([2, 3, 4, 1, 2, 4]) == [4, 3, 2, 1]\n  reverseArray([-1, -2, -3]) == [-3, -2, -1]\n  */\nconst reverseArray = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev;\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order.\n  Example\n  reverseArrayInc(nums) == [4, 3, 2, 1]\n  reverseArrayInc(nums) == [-3, -2, -1]\n  */\nconst reverseArrayInc = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => a - b);\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in decreasing order.\n  Example\n  reverseArrayDec(nums) == [4, 3, 2, 1]\n  reverseArrayDec(nums) == [-3, -2, -1]\n  */\nconst reverseArrayDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a);\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => a - b).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse();\n};\n\n/*\n  Given a sorted array nums, return its reverse sorted array in increasing order and in decreasing order.\n  Example\n  reverseArrayIncDecDec([4, 3, 2, 1]) == [4, 3, 2, 1]\n  reverseArrayIncDecDec([-3, -2, -1]) == [-3, -2, -1]\n  */\nconst reverseArrayIncDecDec = (nums) => {\n  let rev = [];\n  for (let i = nums.length - 1; i >= 0; i--) {\n    rev.push(nums[i]);\n  }\n  return rev.sort((a, b) => b - a).reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity .  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena rect a ngular  grid ofwells. Each row repre sents a singlew ell,\n  and each 1 i n a row represents asingle unito f water.\n  Each  well hasa  corresponding bucket that c an  be used to extract wa ter from it, \n  and all buckets ha ve the same capacity.  Y our task is to use the buckets to emptythe wells.\n  Output  thenumber of times you nee d to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let result = 0;\n  let buckets = grid.map((row, i) => {\n    let bucket = row.map((val, j) => {\n      if (val === 1) {\n        return j;\n      }\n      return 0;\n    });\n    return bucket;\n  });\n  buckets.forEach((bucket, index) => {\n    if (bucket.length < capacity) {\n      bucket.forEach((val, i) => {\n        if (val === 1) {\n          result += index;\n        }\n      });\n    }\n  });\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar removeDuplicates = function(nums) {\n  let result = [];\n  let seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (!seen[num]) {\n      result.push(num);\n      seen[num] = true;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWays = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysII = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysIII = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysIV = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysV = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysVI = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysVII = function(nums) {\n  let result = 0;\n  let root = new TreeNode(0);\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    if (num === 0) {\n      continue;\n    }\n    if (root.val <= num) {\n      root.left = root.right = root;\n      root.val = num;\n      result++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-ways-to-build-a-binary-tree/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countWaysVIII = function(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Ka ta,you ha v e to s ort an ar ray of non-negative i ntegers accordi n g to\n  number of on es in their binary re presentation in ascending or der.\n  For similar number of ones, sort  b ased on decimal value. \n\n  It must be implemented like th is:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  while (i < len) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements.\n\n  >>> unique([1, 2, 1, 3, 1, 2])\n  [1, 2, 3]\n  */\nconst unique = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscending([1, 2, 1, 3, 1, 2])\n  [1, 2, 3, 1]\n  */\nconst uniqueAscending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueAscendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueAscendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueAscendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueAscendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in ascending order.\n\n  >>> uniqueAscendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueAscendingDescendingDescending = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result.sort((a, b) => b - a);\n};\n\n/**\n  Given an array of numbers, return an array of the same length\n  containing all unique elements, but in descending order.\n\n  >>> uniqueDescendingDescendingDescending([1, 2, 1, 3, 1, 2])\n  [3, 2, 1]\n  */\nconst uniqueDescendingDescendingDescending = (arr) => {\n  let result = [];\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a str ings anda  natur al number  n, you have been tas ked to implemen t  \n  a function that  returnsa list of al l words from string s that c ontain exa c tly \n  n consonants, in orde rthese words appear inthe string s.\n  If the string s is empty then the func tionshould return an e m pty list.\n  Note: you may assume the inp ut string contains only lett ers and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en a  word. Your t ask is to  find the closest vow el that standsb etween \n  two conso nants from the rightside of thew ord (case sensi tive).\n   Vowels in the beginning and  e nding doesn't count. R eturn empty string if you didn't\nfind any vowel metthe a bove condition. \n You may assume thatthe given string co ntains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map((v, i) => v);\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only .\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You are gi vena list of two  strings,  both strings consist  of open\n  pare n theses '(' or close  parentheses ')' only.\n  Your job is tocheck ifit is poss i ble to concatenate the two s tr ings in\n  some order,that the resulting string will begood.\n  A string S i scon sidered to be good if and only if all parentheses in S\n  ar ebalanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let isGood = true;\n  let isPossible = true;\n  let isPossible2 = true;\n  let isPossible3 = true;\n  let isPossible4 = true;\n  let isPossible5 = true;\n  let isPossible6 = true;\n  let isPossible7 = true;\n  let isPossible8 = true;\n  let isPossible9 = true;\n  let isPossible10 = true;\n  let isPossible11 = true;\n  let isPossible12 = true;\n  let isPossible13 = true;\n  let isPossible14 = true;\n  let isPossible15 = true;\n  let isPossible16 = true;\n  let isPossible17 = true;\n  let isPossible18 = true;\n  let isPossible19 = true;\n  let isPossible20 = true;\n  let isPossible21 = true;\n  let isPossible22 = true;\n  let isPossible23 = true;\n  let isPossible24 = true;\n  let isPossible25 = true;\n  let isPossible26 = true;\n  let isPossible27 = true;\n  let isPossible28 = true;\n  let isPossible29 = true;\n  let isPossible30 = true;\n  let isPossible31 = true;\n  let isPossible32 = true;\n  let isPossible33 = true;\n  let isPossible34 = true;\n  let isPossible35 = true;\n  let isPossible36 = true;\n  let isPossible37 = true;\n  let isPossible38 = true;\n  let isPossible39 = true;\n  let isPossible40 = true;\n  let isPossible41 = true;\n  let isPossible42 = true;\n  let isPossible43 = true;\n  let isPossible44 = true;\n  let isPossible45 = true;\n  let isPossible46 = true;\n  let isPossible47 = true;\n  let isPossible48 = true;\n  let isPossible49 = true;\n  let isPossible50 = true;\n  let isPossible51 = true;\n  let isPossible52 = true;\n  let isPossible53 = true;\n  let isPossible54 = true;\n  let isPossible55 = true;\n  let isPossible56 = true;\n  let isPossible57 = true;\n  let isPossible58 = true;\n  let isPossible59 = true;\n  let isPossible60 = true;\n  let isPossible61 = true;\n  let isPossible62 = true;\n  let isPossible63 = true;\n  let isPossible64 = true;\n  let isPossible65 = true;\n  let isPossible66 = true;\n  let isPossible67 = true;\n  let isPossible68 = true;\n  let isPossible69 = true;\n  let isPossible70 = true;\n  let isPossible71 = true;\n  let isPossible72 = true;\n  let isPossible73 = true;\n  let isPossible74 = true;\n  let isPossible75 = true;\n  let isPossible76 = true;\n  let isPossible77 = true;\n  let isPossible78 = true;\n  let isPossible79 = true;\n  let isPossible80 = true;\n  let isPossible81 = true;\n  let isPossible82 = true;\n  let isPossible83 = true;\n  let isPossible84 = true;\n  let isPossible85 = true;\n  let isPossible86 = true;\n  let isPossible87 = true;\n  let isPossible88 = true;\n  let isPossible89 = true;\n  let isPossible90 = true;\n  let isPossible91 = true;\n  let isPossible92 = true;\n  let isPossible93 = true;\n  let isPossible94 = true;\n  let isPossible95 = true;\n  let isPossible96 = true;\n  let isPossible97 = true;\n  let isPossible98 = true;\n  let isPossible99 = true;\n  let isPossible100 = true;\n  let isPossible101 = true;\n  let isPossible102 = true;\n  let isPossible103 = true;\n  let isPossible104 = true;\n  let isPossible105 = true;\n  let isPossible106 = true;\n  let isPossible107 = true;\n  let isPossible108 = true;\n  let isPossible109 = true;\n  let isPossible110 = true;\n  let isPossible111 = true;\n  let isPossible112 = true;\n  let isPossible113 = true;\n  let isPossible114 = true;\n  let isPossible115 = true;\n  let isPossible116 = true;\n  let isPossible117 = true;\n  let isPossible118 = true;\n  let isPossible119 = true;\n  let isPossible120 = true;\n  let isPossible121 = true;\n  let isPossible122 = true;\n  let isPossible123 = true;\n  let isPossible124 = true;\n  let isPossible125 = true;\n  let isPossible126 = true;\n  let isPossible127 = true;\n  let isPossible128 = true;\n  let isPossible129 = true;\n  let isPossible130 = true;\n  let isPossible131 = true;\n  let isPossible132 = true;\n  let isPossible133 = true;\n  let isPossible134 = true;\n  let isPossible135 = true;\n  let isPossible136 = true;\n  let isPossible137 = true;\n  let isPossible138 = true;\n  let isPossible139 = true;\n  let isPossible140 = true;\n  let isPossible141 = true;\n  let isPossible142 = true;\n  let isPossible143 = true;\n  let isPossible144 = true;\n  let isPossible145 = true;\n  let isPossible146 = true;\n  let isPossible147 = true;\n  let isPossible148 = true;\n  let isPossible149 = true;\n  let isPossible150 = true;\n  let isPossible151 = true;\n  let isPossible152 = true;\n  let isPossible153 = true;\n  let isPossible154 = true;\n  let isPossible155 = true;\n  let isPossible156 = true;\n  let isPossible157 = true;\n  let isPossible158 = true;\n  let isPossible159 = true;\n  let isPossible160 = true;\n  let isPossible161 = true;\n  let isPossible162 = true;\n  let isPossible163 = true;\n  let isPossible164 = true;\n  let isPossible165 = true;\n  let isPossible166 = true;\n  let isPossible167 = true;\n  let isPossible168 = true;\n  let isPossible169 = true;\n  let isPossible170 = true;\n  let isPossible171 = true;\n  let isPossible172 = true;\n  let isPossible173 = true;\n  let isPossible174 = true;\n  let isPossible175 = true;\n  let isPossible176 = true;\n  let isPossible177 = true;\n  let isPossible178 = true;\n  let isPossible179 = true;\n  let isPossible180 = true;\n  let isPossible181 = true;\n  let isPossible182 = true;\n  let isPossible183 = true;\n  let isPossible184 = true;\n  let isPossible185 = true;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of lis t of  strin g s, ret urn the l ongest one. Return th e first one inc ase of multiple\n  s trings of the same le ngth. Return null in case th e input li s t is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longestString = ''\n  let longestLength = 0\n  let maxLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n    if (string.length > maxLength) {\n      maxLength = string.length\n    }\n  }\n  return longestString\n}\n\n/* Given a string, return its length in characters. Return 0 if string is empty.\n  >>> length(\"\")\n  0\n  >>> length(\"a\")\n  1\n  >>> length(\"ab\")\n  2\n  >>> length(\"abcabc\")\n  3\n  */\nconst length = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* Given a string, return its first letter capitalized. Return an empty string in case\n  string is empty.\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"ab\")\n  \"Ab\"\n  >>> capitalize(\"abcabc\")\n  \"AbcAbcAbc\"\n  */\nconst capitalize = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter lowercase. Return an empty string in case\n  string is empty.\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"ab\")\n  \"ab\"\n  >>> lowercase(\"abcabc\")\n  \"abcABC\"\n  */\nconst lowercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter uppercase. Return an empty string in case\n  string is empty.\n  >>> uppercase(\"\")\n  \"\"\n  >>> uppercase(\"a\")\n  \"A\"\n  >>> uppercase(\"ab\")\n  \"AB\"\n  >>> uppercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst uppercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter capitalized. Return an empty string in case\n  string is empty.\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"ab\")\n  \"Ab\"\n  >>> capitalize(\"abcabc\")\n  \"AbcAbcAbc\"\n  */\nconst capitalizeFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter lowercase. Return an empty string in case\n  string is empty.\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\"a\")\n  \"a\"\n  >>> lowercase(\"ab\")\n  \"ab\"\n  >>> lowercase(\"abcabc\")\n  \"abcABC\"\n  */\nconst lowercaseFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter uppercase. Return an empty string in case\n  string is empty.\n  >>> uppercase(\"\")\n  \"\"\n  >>> uppercase(\"a\")\n  \"A\"\n  >>> uppercase(\"ab\")\n  \"AB\"\n  >>> uppercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst uppercaseFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter capitalized. Return an empty string in case\n  string is empty.\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"ab\")\n  \"AB\"\n  >>> capitalize(\"abcabc\")\n  \"ABCABC\"\n  */\nconst capitalizeFirstLetterUppercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter lowercase. Return an empty string in case\n  string is empty.\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\"a\")\n  \"A\"\n  >>> lowercase(\"ab\")\n  \"AB\"\n  >>> lowercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst lowercaseFirstLetterUppercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter uppercase. Return an empty string in case\n  string is empty.\n  >>> uppercase(\"\")\n  \"\"\n  >>> uppercase(\"a\")\n  \"A\"\n  >>> uppercase(\"ab\")\n  \"AB\"\n  >>> uppercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst uppercaseFirstLetterUppercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter capitalized. Return an empty string in case\n  string is empty.\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"ab\")\n  \"AB\"\n  >>> capitalize(\"abcabc\")\n  \"ABCABC\"\n  */\nconst capitalizeFirstLetterUppercaseFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter lowercase. Return an empty string in case\n  string is empty.\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\"a\")\n  \"A\"\n  >>> lowercase(\"ab\")\n  \"AB\"\n  >>> lowercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst lowercaseFirstLetterUppercaseFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter uppercase. Return an empty string in case\n  string is empty.\n  >>> uppercase(\"\")\n  \"\"\n  >>> uppercase(\"a\")\n  \"A\"\n  >>> uppercase(\"ab\")\n  \"AB\"\n  >>> uppercase(\"abcabc\")\n  \"ABCABC\"\n  */\nconst uppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter capitalized. Return an empty string in case\n  string is empty.\n  >>> capitalize(\"\")\n  \"\"\n  >>> capitalize(\"a\")\n  \"A\"\n  >>> capitalize(\"ab\")\n  \"AB\"\n  >>> capitalize(\"abcabc\")\n  \"ABCABC\"\n  */\nconst capitalizeFirstLetterUppercaseFirstLetterUppercase = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter lowercase. Return an empty string in case\n  string is empty.\n  >>> lowercase(\"\")\n  \"\"\n  >>> lowercase(\"a\")\n  \"A\"\n  >>> lowercase(\"", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given ana rray  arr o f  integ ers and a  positive integer k,return a sorted list \n  of length k  with the maximum k n umbers in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  while (j < len) {\n    if (arr[j] > max) {\n      max = arr[j];\n      result.push(max);\n    }\n    j++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElements = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsII = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsIII = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsIV = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsV = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsW = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsX = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsY = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsZ = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsAA = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueElementsAB = function (nums) {\n  let count = 0;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex + 1; i < nums.length; i++) {\n    if (nums[i] === max) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-elements-in-an-array/\n/**\n * @param {number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non -emp ty lis t  of in tegers, r eturn the sum of allof the odd elem e nts that are in eve n positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let elem;\n  let elems;\n  let elems2;\n  let elems3;\n  let elems4;\n  let elems5;\n  let elems6;\n  let elems7;\n  let elems8;\n  let elems9;\n  let elems10;\n  let elems11;\n  let elems12;\n  let elems13;\n  let elems14;\n  let elems15;\n  let elems16;\n  let elems17;\n  let elems18;\n  let elems19;\n  let elems20;\n  let elems21;\n  let elems22;\n  let elems23;\n  let elems24;\n  let elems25;\n  let elems26;\n  let elems27;\n  let elems28;\n  let elems29;\n  let elems30;\n  let elems31;\n  let elems32;\n  let elems33;\n  let elems34;\n  let elems35;\n  let elems36;\n  let elems37;\n  let elems38;\n  let elems39;\n  let elems40;\n  let elems41;\n  let elems42;\n  let elems43;\n  let elems44;\n  let elems45;\n  let elems46;\n  let elems47;\n  let elems48;\n  let elems49;\n  let elems50;\n  let elems51;\n  let elems52;\n  let elems53;\n  let elems54;\n  let elems55;\n  let elems56;\n  let elems57;\n  let elems58;\n  let elems59;\n  let elems60;\n  let elems61;\n  let elems62;\n  let elems63;\n  let elems64;\n  let elems65;\n  let elems66;\n  let elems67;\n  let elems68;\n  let elems69;\n  let elems70;\n  let elems71;\n  let elems72;\n  let elems73;\n  let elems74;\n  let elems75;\n  let elems76;\n  let elems77;\n  let elems78;\n  let elems79;\n  let elems80;\n  let elems81;\n  let elems82;\n  let elems83;\n  let elems84;\n  let elems85;\n  let elems86;\n  let elems87;\n  let elems88;\n  let elems89;\n  let elems90;\n  let elems91;\n  let elems92;\n  let elems93;\n  let elems94;\n  let elems95;\n  let elems96;\n  let elems97;\n  let elems98;\n  let elems99;\n  let elems100;\n  let elems101;\n  let elems102;\n  let elems103;\n  let elems104;\n  let elems105;\n  let elems106;\n  let elems107;\n  let elems108;\n  let elems109;\n  let elems110;\n  let elems111;\n  let elems112;\n  let elems113;\n  let elems114;\n  let elems115;\n  let elems116;\n  let elems117;\n  let elems118;\n  let elems119;\n  let elems120;\n  let elems121;\n  let elems122;\n  let elems123;\n  let elems124;\n  let elems125;\n  let elems126;\n  let elems127;\n  let elems128;\n  let elems129;\n  let elems130;\n  let elems131;\n  let elems132;\n  let elems133;\n  let elems134;\n  let elems135;\n  let elems136;\n  let elems137;\n  let elems138;\n  let elems139;\n  let elems140;\n  let elems141;\n  let elems142;\n  let elems143;\n  let elems144;\n  let elems145;\n  let elems146;\n  let elems147;\n  let elems148;\n  let elems149;\n  let elems150;\n  let elems151;\n  let elems152;\n  let elems153;\n  let elems154;\n  let elems155;\n  let elems156;\n  let elems157;\n  let elems158;\n  let elems159;\n  let elems160;\n  let elems161;\n  let elems162;\n  let elems163;\n  let elems164;\n  let elems165;\n  let elems166;\n  let elems167;\n  let elems168;\n  let elems169;\n  let elems170;\n  let elems171;\n  let elems172;\n  let elems173;\n  let elems174;\n  let elems175;\n  let elems176;\n  let elems177;\n  let elems178;\n  let elems179;\n  let elems180;\n  let elems181;\n  let elems182;\n  let elems183;\n  let elems184;\n  let elems185;\n  let elems186;\n  let elems187;\n  let elems188;\n  let elems189;\n  let elems190;\n  let elems191;\n  let elems192;\n  let elems193;\n  let elems194;\n  let elems195;\n  let elems196;\n  let elems197;\n  let elems198;\n  let elems199;\n  let elems200;\n  let elems201;\n  let elems202;\n  let elems203;\n  let elems204;\n  let elems205;\n  let elems206;\n  let elems207;\n  let elems208;\n  let elems209;\n  let elems210;\n  let elems211;\n  let elems212;\n  let elems213;\n  let elems214;\n  let elems215;\n  let elems216;\n  let elems217;\n  let elems218;\n  let elems219;\n  let elems220;\n  let elems221;\n  let elems222;\n  let elems223;\n  let elems224;\n  let elems225;\n  let elems226;\n  let elems227;\n  let elems228;\n  let elems229;\n  let elems230;\n  let elems231;\n  let elems232;\n  let elems233;\n  let elems234;\n  let elems235;\n  let elems236;\n  let elems237;\n  let elems238;\n  let elems239;\n  let elems240;\n  let elems241;\n  let elems242;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a no n-em pty ar r ay ofintegersarr and an integer k,  return\n  the s u m of the elements w ith at most two digit s from thef i rst kelementsof arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let max = 0;\n  let max2 = 0;\n  let max3 = 0;\n  let max4 = 0;\n  let max5 = 0;\n  let max6 = 0;\n  let max7 = 0;\n  let max8 = 0;\n  let max9 = 0;\n  let max10 = 0;\n  let max11 = 0;\n  let max12 = 0;\n  let max13 = 0;\n  let max14 = 0;\n  let max15 = 0;\n  let max16 = 0;\n  let max17 = 0;\n  let max18 = 0;\n  let max19 = 0;\n  let max20 = 0;\n  let max21 = 0;\n  let max22 = 0;\n  let max23 = 0;\n  let max24 = 0;\n  let max25 = 0;\n  let max26 = 0;\n  let max27 = 0;\n  let max28 = 0;\n  let max29 = 0;\n  let max30 = 0;\n  let max31 = 0;\n  let max32 = 0;\n  let max33 = 0;\n  let max34 = 0;\n  let max35 = 0;\n  let max36 = 0;\n  let max37 = 0;\n  let max38 = 0;\n  let max39 = 0;\n  let max40 = 0;\n  let max41 = 0;\n  let max42 = 0;\n  let max43 = 0;\n  let max44 = 0;\n  let max45 = 0;\n  let max46 = 0;\n  let max47 = 0;\n  let max48 = 0;\n  let max49 = 0;\n  let max50 = 0;\n  let max51 = 0;\n  let max52 = 0;\n  let max53 = 0;\n  let max54 = 0;\n  let max55 = 0;\n  let max56 = 0;\n  let max57 = 0;\n  let max58 = 0;\n  let max59 = 0;\n  let max60 = 0;\n  let max61 = 0;\n  let max62 = 0;\n  let max63 = 0;\n  let max64 = 0;\n  let max65 = 0;\n  let max66 = 0;\n  let max67 = 0;\n  let max68 = 0;\n  let max69 = 0;\n  let max70 = 0;\n  let max71 = 0;\n  let max72 = 0;\n  let max73 = 0;\n  let max74 = 0;\n  let max75 = 0;\n  let max76 = 0;\n  let max77 = 0;\n  let max78 = 0;\n  let max79 = 0;\n  let max80 = 0;\n  let max81 = 0;\n  let max82 = 0;\n  let max83 = 0;\n  let max84 = 0;\n  let max85 = 0;\n  let max86 = 0;\n  let max87 = 0;\n  let max88 = 0;\n  let max89 = 0;\n  let max90 = 0;\n  let max91 = 0;\n  let max92 = 0;\n  let max93 = 0;\n  let max94 = 0;\n  let max95 = 0;\n  let max96 = 0;\n  let max97 = 0;\n  let max98 = 0;\n  let max99 = 0;\n  let max100 = 0;\n  let max101 = 0;\n  let max102 = 0;\n  let max103 = 0;\n  let max104 = 0;\n  let max105 = 0;\n  let max106 = 0;\n  let max107 = 0;\n  let max108 = 0;\n  let max109 = 0;\n  let max110 = 0;\n  let max111 = 0;\n  let max112 = 0;\n  let max113 = 0;\n  let max114 = 0;\n  let max115 = 0;\n  let max116 = 0;\n  let max117 = 0;\n  let max118 = 0;\n  let max119 = 0;\n  let max120 = 0;\n  let max121 = 0;\n  let max122 = 0;\n  let max123 = 0;\n  let max124 = 0;\n  let max125 = 0;\n  let max126 = 0;\n  let max127 = 0;\n  let max128 = 0;\n  let max129 = 0;\n  let max130 = 0;\n  let max131 = 0;\n  let max132 = 0;\n  let max133 = 0;\n  let max134 = 0;\n  let max135 = 0;\n  let max136 = 0;\n  let max137 = 0;\n  let max138 = 0;\n  let max139 = 0;\n  let max140 = 0;\n  let max141 = 0;\n  let max142 = 0;\n  let max143 = 0;\n  let max144 = 0;\n  let max145 = 0;\n  let max146 = 0;\n  let max147 = 0;\n  let max148 = 0;\n  let max149 = 0;\n  let max150 = 0;\n  let max151 = 0;\n  let max152 = 0;\n  let max153 = 0;\n  let max154 = 0;\n  let max155 = 0;\n  let max156 = 0;\n  let max157 = 0;\n  let max158 = 0;\n  let max159 = 0;\n  let max160 = 0;\n  let max161 = 0;\n  let max162 = 0;\n  let max163 = 0;\n  let max164 = 0;\n  let max165 = 0;\n  let max166 = 0;\n  let max167 = 0;\n  let max168 = 0;\n  let max169 = 0;\n  let max170 = 0;\n  let max171 = 0;\n  let max172 = 0;\n  let max173 = 0;\n  let max174 = 0;\n  let max175 = 0;\n  let max176 = 0;\n  let max177 = 0;\n  let max178 = 0;\n  let max179 = 0;\n  let max180 = 0;\n  let max181 = 0;\n  let max182 = 0;\n  let max183 = 0;\n  let max184 = 0;\n  let max185 = 0;\n  let max186 = 0;\n  let max187 = 0;\n  let max188 = 0;\n  let max189 = 0;\n  let max190 = 0;\n  let max191 = 0;\n  let max192 = 0;\n  let max193 = 0;\n  let max194 = 0;\n  let max195 = 0;\n  let max196 = 0;\n  let max197 = 0;\n  let max198 = 0;\n  let max199 = 0;\n  let max200 = 0;\n  let max201 = 0;\n  let max202 = 0;\n  let max203 = 0;\n  let max204 = 0;\n  let max205 = 0;\n  let max206 = 0;\n  let max207 = 0;\n  let max208 = 0;\n  let max209 = 0;\n  let max210 = 0;\n  let max211 = 0;\n  let max212 = 0;\n  let max213 = 0;\n  let max214 = 0;\n  let max215 = 0;\n  let max216 = 0;\n  let max217 = 0;\n  let max218 = 0;\n  let max219 = 0;\n  let max220 = 0;\n  let max221 = 0;\n  let max222 = 0;\n  let max223 = 0;\n  let max224 = 0;\n  let max225 = 0;\n  let max226 = 0;\n  let max227 = 0;\n  let max228 = 0;\n  let max229 = 0;\n  let max230 = 0;\n  let max231 = 0;\n  let max232 = 0;\n  let max233 = 0;\n  let max234 = 0;\n  let max235 = 0;\n  let max236 = 0;\n  let max237 = 0;\n  let max238 = 0;\n  let max239 = 0;\n  let max240 = 0;\n  let max241 = 0;\n  let max242 = 0;\n  let max243 = 0;\n  let max244 = 0;\n  let max245 = 0;\n  let max246 = 0;\n  let max247 = 0;\n  let max248 = 0;\n  let max249 = 0;\n  let max250 = 0;\n  let max251 = 0;\n  let max252 = 0;\n  let max253 = 0;\n  let max254 = 0;\n  let max255 = 0;\n  let max256 = 0;\n  let max257 = 0;\n  let max258 = 0;\n  let max259 = 0;\n  let max260 = 0;\n  let max261 = 0;\n  let max262 = 0;\n  let max263 = 0;\n  let max264 = 0;\n  let max265 = 0;\n  let max266 = 0;\n  let max267 = 0;\n  let max268 = 0;\n  let max269 = 0;\n  let max270 = 0;\n  let max271 = 0;\n  let max272 = 0;\n  let max273 = 0;\n  let max274 = 0;\n  let max275 = 0;\n  let max276 = 0;\n  let max277 = 0;\n  let max278 = 0;\n  let max279 = 0;\n  let max280 = 0;\n  let max281 = 0;\n  let max282 = 0;\n  let max283 = 0;\n  let max284 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a po siti ve int e ger n,  return a  sorted list that has  the odd number s  in collatz sequenc e.\n\n  The Collatz con jecture isa conjecture in m athematics that concerns a sequence def in ed\n  as follows: start  with any positive integer n. Then each termis obtain ed fr om the \n  previous term as follows: if the previous term is  even, the next term is onehalf of \n  the previousterm. If the p revious term is o dd, the next term is 3times t he previous\n  term plus 1. The  co njecture is that no matter what valu e of n, the  sequence will al ways reach 1.\n\n  Note: \n      1.  Colla tz(1) is [1].\n      2. returned l ist sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  let prev = 1;\n  let next = 1;\n  let count = 0;\n  let isOdd = 1;\n  let isEven = 1;\n  let isOddEven = 1;\n  let isOddOddEven = 1;\n  let isOddOddOddEven = 1;\n  let isOddOddOddOddEven = 1;\n  let isOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = 1;\n  let isOddOddOddOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have to  wri te a f u nction  which va lidates a given datestring and\n  re t urns true if the da te is valid otherwise  false.\n  Th e  dateis validif all oft he following rules are satis fi ed:\n  1. The date stri ng is not empty.  2. The number o f days is not less t han 1  or higher than 31 days for months 1,3,5,7,8,10,12. And the  number of days is not lessthan 1 or higher than 30  days for mont hs 4,6,9,11. And, the number of days isnot les s than 1 or higher than 29 for  th e month 2.\n  3. The months should no t be less t han 1 or higher t han 12.\n  4. The date should bein the  format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat ='mm-dd-yyyy';\n  const dateObj = new Date(date);\n  const dateString = dateObj.toLocaleDateString(dateFormat, { month: 'long', day: 'numeric', year: 'numeric' });\n  const dateObj2 = new Date(dateString);\n  return dateObj2.getFullYear() === dateObj.getFullYear() && dateObj2.getMonth() === dateObj.getMonth() && dateObj2.getDate() === dateObj.getDate();\n};\n\n/**\n * Validates date string in format mm-dd-yyyy\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1, ... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesWithComma = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesWithCommaAndSpace = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesWithCommaAndSpaceAndSpace = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,ord(' b') = 1,... ord(' z ') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpacesWithCommaAndSpaceAndSpace = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      const wordLower = word.toLowerCase();\n      if (wordLower.length > 0 && wordLower.charAt(wordLower.length - 1) === ',') {\n        result.push(wordLower.substring(0, wordLower.length - 1));\n      } else {\n        result.push(wordLower);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a st ring  of wo r ds, re turn a li st of words split onwhitespace, ifn o whitespaces exist s in thetext you\n  s hould splito n commas ',' if  no commas exists you should return the  n umber of lower-case le tters with odd order in the\n  alph abet, ord('a') = 0,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a li st o f numb e rs, re turn whet her or not they are s orted\n  in asce n ding order. If list  has more than 1 dupl icate of the same\n number,return fal s e. Assume no negative number sand only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let num = 0\n  let num2 = 0\n  let num3 = 0\n  let num4 = 0\n  let num5 = 0\n  let num6 = 0\n  let num7 = 0\n  let num8 = 0\n  let num9 = 0\n  let num10 = 0\n  let num11 = 0\n  let num12 = 0\n  let num13 = 0\n  let num14 = 0\n  let num15 = 0\n  let num16 = 0\n  let num17 = 0\n  let num18 = 0\n  let num19 = 0\n  let num20 = 0\n  let num21 = 0\n  let num22 = 0\n  let num23 = 0\n  let num24 = 0\n  let num25 = 0\n  let num26 = 0\n  let num27 = 0\n  let num28 = 0\n  let num29 = 0\n  let num30 = 0\n  let num31 = 0\n  let num32 = 0\n  let num33 = 0\n  let num34 = 0\n  let num35 = 0\n  let num36 = 0\n  let num37 = 0\n  let num38 = 0\n  let num39 = 0\n  let num40 = 0\n  let num41 = 0\n  let num42 = 0\n  let num43 = 0\n  let num44 = 0\n  let num45 = 0\n  let num46 = 0\n  let num47 = 0\n  let num48 = 0\n  let num49 = 0\n  let num50 = 0\n  let num51 = 0\n  let num52 = 0\n  let num53 = 0\n  let num54 = 0\n  let num55 = 0\n  let num56 = 0\n  let num57 = 0\n  let num58 = 0\n  let num59 = 0\n  let num60 = 0\n  let num61 = 0\n  let num62 = 0\n  let num63 = 0\n  let num64 = 0\n  let num65 = 0\n  let num66 = 0\n  let num67 = 0\n  let num68 = 0\n  let num69 = 0\n  let num70 = 0\n  let num71 = 0\n  let num72 = 0\n  let num73 = 0\n  let num74 = 0\n  let num75 = 0\n  let num76 = 0\n  let num77 = 0\n  let num78 = 0\n  let num79 = 0\n  let num80 = 0\n  let num81 = 0\n  let num82 = 0\n  let num83 = 0\n  let num84 = 0\n  let num85 = 0\n  let num86 = 0\n  let num87 = 0\n  let num88 = 0\n  let num89 = 0\n  let num90 = 0\n  let num91 = 0\n  let num92 = 0\n  let num93 = 0\n  let num94 = 0\n  let num95 = 0\n  let num96 = 0\n  let num97 = 0\n  let num98 = 0\n  let num99 = 0\n  let num100 = 0\n  let num101 = 0\n  let num102 = 0\n  let num103 = 0\n  let num104 = 0\n  let num105 = 0\n  let num106 = 0\n  let num107 = 0\n  let num108 = 0\n  let num109 = 0\n  let num110 = 0\n  let num111 = 0\n  let num112 = 0\n  let num113 = 0\n  let num114 = 0\n  let num115 = 0\n  let num116 = 0\n  let num117 = 0\n  let num118 = 0\n  let num119 = 0\n  let num120 = 0\n  let num121 = 0\n  let num122 = 0\n  let num123 = 0\n  let num124 = 0\n  let num125 = 0\n  let num126 = 0\n  let num127 = 0\n  let num128 = 0\n  let num129 = 0\n  let num130 = 0\n  let num131 = 0\n  let num132 = 0\n  let num133 = 0\n  let num134 = 0\n  let num135 = 0\n  let num136 = 0\n  let num137 = 0\n  let num138 = 0\n  let num139 = 0\n  let num140 = 0\n  let num141 = 0\n  let num142 = 0\n  let num143 = 0\n  let num144 = 0\n  let num145 = 0\n  let num146 = 0\n  let num147 = 0\n  let num148 = 0\n  let num149 = 0\n  let num150 = 0\n  let num151 = 0\n  let num152 = 0\n  let num153 = 0\n  let num154 = 0\n  let num155 = 0\n  let num156 = 0\n  let num157 = 0\n  let num158 = 0\n  let num159 = 0\n  let num160 = 0\n  let num161 = 0\n  let num162 = 0\n  let num163 = 0\n  let num164 = 0\n  let num165 = 0\n  let num166 = 0\n  let num167 = 0\n  let num168 = 0\n  let num169 = 0\n  let num170 = 0\n  let num171 = 0\n  let num172 = 0\n  let num173 = 0\n  let num174 = 0\n  let num175 = 0\n  let num176 = 0\n  let num177 = 0\n  let num178 = 0\n  let num179 = 0\n  let num180 = 0\n  let num181 = 0\n  let num182 = 0\n  let num183 = 0\n  let num184 = 0\n  let num185 = 0\n  let num186 = 0\n  let num187 = 0\n  let num188 = 0\n  let num189 = 0\n  let num190 = 0\n  let num191 = 0\n  let num192 = 0\n  let num193 = 0\n  let num194 = 0\n  let num195 = 0\n  let num196 = 0\n  let num197 = 0\n  let num198 = 0\n  let num199 = 0\n  let num200 = 0\n  let num201 = 0\n  let num202 = 0\n  let num203 = 0\n  let num204 = 0\n  let num205 = 0\n  let num206 = 0\n  let num207 = 0\n  let num208 = 0\n  let num209 = 0\n  let num210 = 0\n  let num211 = 0\n  let num212 = 0\n  let num213 = 0\n  let num214 = 0\n  let num215 = 0\n  let num216 = 0\n  let num217 = 0\n  let num218 = 0\n  let num219 = 0\n  let num220 = 0\n  let num221 = 0\n  let num222 = 0\n  let num223 = 0\n  let num224 = 0\n  let num225 = 0\n  let num226 = 0\n  let num227 = 0\n  let num228 = 0\n  let num229 = 0\n  let num230 = 0\n  let num231 = 0\n  let num232 = 0\n  let num233 = 0\n  let num234 = 0\n  let num235 = 0\n  let num236 = 0\n  let num237 = 0\n  let num238 = 0\n  let num239 = 0\n  let num240 = 0\n  let num241 = 0\n  let num242 = 0\n  let num243 = 0\n  let num244 = 0\n  let num245 = 0\n  let num246 = 0\n  let num247 = 0\n  let num248 = 0\n  let num249 = 0\n  let num250 = 0\n  let num251 = 0\n  let num252 = 0\n  let num253 = 0\n  let num254 = 0\n  let num255 = 0\n  let num256 = 0\n  let num257 = 0\n  let num258 = 0\n  let num259 = 0\n  let num260 = 0\n  let num261 = 0\n  let num262 = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en t wo int e rvals, \n  whereeach interval is a pa ir of integers.  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let start3 = interval1[0];\n  let end3 = interval1[1];\n  let start4 = interval2[0];\n  let end4 = interval2[1];\n  let start5 = interval1[0];\n  let end5 = interval1[1];\n  let start6 = interval2[0];\n  let end6 = interval2[1];\n  let start7 = interval1[0];\n  let end7 = interval1[1];\n  let start8 = interval2[0];\n  let end8 = interval2[1];\n  let start9 = interval1[0];\n  let end9 = interval1[1];\n  let start10 = interval2[0];\n  let end10 = interval2[1];\n  let start11 = interval1[0];\n  let end11 = interval1[1];\n  let start12 = interval2[0];\n  let end12 = interval2[1];\n  let start13 = interval1[0];\n  let end13 = interval1[1];\n  let start14 = interval2[0];\n  let end14 = interval2[1];\n  let start15 = interval1[0];\n  let end15 = interval1[1];\n  let start16 = interval2[0];\n  let end16 = interval2[1];\n  let start17 = interval1[0];\n  let end17 = interval1[1];\n  let start18 = interval2[0];\n  let end18 = interval2[1];\n  let start19 = interval1[0];\n  let end19 = interval1[1];\n  let start20 = interval2[0];\n  let end20 = interval2[1];\n  let start21 = interval1[0];\n  let end21 = interval1[1];\n  let start22 = interval2[0];\n  let end22 = interval2[1];\n  let start23 = interval1[0];\n  let end23 = interval1[1];\n  let start24 = interval2[0];\n  let end24 = interval2[1];\n  let start25 = interval1[0];\n  let end25 = interval1[1];\n  let start26 = interval2[0];\n  let end26 = interval2[1];\n  let start27 = interval1[0];\n  let end27 = interval1[1];\n  let start28 = interval2[0];\n  let end28 = interval2[1];\n  let start29 = interval1[0];\n  let end29 = interval1[1];\n  let start30 = interval2[0];\n  let end30 = interval2[1];\n  let start31 = interval1[0];\n  let end31 = interval1[1];\n  let start32 = interval2[0];\n  let end32 = interval2[1];\n  let start33 = interval1[0];\n  let end33 = interval1[1];\n  let start34 = interval2[0];\n  let end34 = interval2[1];\n  let start35 = interval1[0];\n  let end35 = interval1[1];\n  let start36 = interval2[0];\n  let end36 = interval2[1];\n  let start37 = interval1[0];\n  let end37 = interval1[1];\n  let start38 = interval2[0];\n  let end38 = interval2[1];\n  let start39 = interval1[0];\n  let end39 = interval1[1];\n  let start40 = interval2[0];\n  let end40 = interval2[1];\n  let start41 = interval1[0];\n  let end41 = interval1[1];\n  let start42 = interval2[0];\n  let end42 = interval2[1];\n  let start43 = interval1[0];\n  let end43 = interval1[1];\n  let start44 = interval2[0];\n  let end44 = interval2[1];\n  let start45 = interval1[0];\n  let end45 = interval1[1];\n  let start46 = interval2[0];\n  let end46 = interval2[1];\n  let start47 = interval1[0];\n  let end47 = interval1[1];\n  let start48 = interval2[0];\n  let end48 = interval2[1];\n  let start49 = interval1[0];\n  let end49 = interval1[1];\n  let start50 = interval2[0];\n  let end50 = interval2[1];\n  let start51 = interval1[0];\n  let end51 = interval1[1];\n  let start52 = interval2[0];\n  let end52 = interval2[1];\n  let start53 = interval1[0];\n  let end53 = interval1[1];\n  let start54 = interval2[0];\n  let end54 = interval2[1];\n  let start55 = interval1[0];\n  let end55 = interval1[1];\n  let start56 = interval2[0];\n  let end56 = interval2[1];\n  let start57 = interval1[0];\n  let end57 = interval1[1];\n  let start58 = interval2[0];\n  let end58 = interval2[1];\n  let start59 = interval1[0];\n  let end59 = interval1[1];\n  let start60 = interval2[0];\n  let end60 = interval2[1];\n  let start61 = interval1[0];\n  let end61 = interval1[1];\n  let start62 = interval2[0];\n  let end62 = interval2[1];\n  let start63 = interval1[0];\n  let end63 = interval1[1];\n  let start64 = interval2[0];\n  let end64 = interval2[1];\n  let start65 = interval1[0];\n  let end65 = interval1[1];\n  let start66 = interval2[0];\n  let end66 = interval2[1];\n  let start67 = interval1[0];\n  let end67 = interval1[1];\n  let start68 = interval2[0];\n  let end68 = interval2[1];\n  let start69 = interval1[0];\n  let end69 = interval1[1];\n  let start70 = interval2[0];\n  let end70 = interval2[1];\n  let start71 = interval1[0];\n  let end71 = interval1[1];\n  let start72 = interval2[0];\n  let end72 = interval2[1];\n  let start73 = interval1[0];\n  let end73 = interval1[1];\n  let start74 = interval2[0];\n  let end74 = interval2[1];\n  let start75 = interval1[0];\n  let end75 = interval1[1];\n  let start76 = interval2[0];\n  let end76 = interval2[1];\n  let start77 = interval1[0];\n  let end77 = interval1[1];\n  let start78 = interval2[0];\n  let end78 = interval2[1];\n  let start79 = interval1[0];\n  let end79 = interval1[1];\n  let start80 = interval2[0];\n  let end80 = interval2[1];\n  let start81 = interval1[0];\n  let end81 = interval1[1];\n  let start82 = interval2[0];\n  let end82 = interval2[1];\n  let start83 = interval1[0];\n  let end83 = interval1[1];\n  let start84 = interval2[0];\n  let end84 = interval2[1];\n  let start85 = interval1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi venan arr a y arrof intege rs and you need to re turn\n  sum of m a gnitudes of integer s multiplied by produ ct of all si g ns\n  of each nu mber in th e  array, represented by 1, -1  o r 0.\n  Note: return nu ll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let res = 0\n  let i = 0\n  let sign = 1\n  let signs = arr.map(n => sign * n)\n  let signsSum = signs.reduce((acc, n) => acc + n, 0)\n  let signsSum2 = signs.reduce((acc, n) => acc + n * n, 0)\n  let signsSum3 = signs.reduce((acc, n) => acc + n * n * n, 0)\n  let signsSum4 = signs.reduce((acc, n) => acc + n * n * n * n, 0)\n  let signsSum5 = signs.reduce((acc, n) => acc + n * n * n * n * n, 0)\n  let signsSum6 = signs.reduce((acc, n) => acc + n * n * n * n * n * n, 0)\n  let signsSum7 = signs.reduce((acc, n) => acc + n * n * n * n * n * n, 0)\n  let signsSum8 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n, 0)\n  let signsSum9 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  let signsSum10 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  let signsSum11 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum12 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum13 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum14 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum15 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n, 0)\n  let signsSum16 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n, 0)\n  let signsSum17 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum18 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum19 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n, 0)\n  let signsSum20 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n * n, 0)\n  let signsSum21 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum22 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum23 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum24 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum25 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum26 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum27 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum28 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum29 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum30 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum31 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum32 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum33 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum34 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum35 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum36 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum37 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum38 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum39 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum40 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum41 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum42 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum43 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  let signsSum44 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum45 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum46 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum47 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum48 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum49 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum50 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum51 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum52 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum53 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n * n, 0)\n  let signsSum54 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  let signsSum55 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * n, 0)\n  let signsSum56 = signs.reduce((acc, n) => acc + n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k ,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a gr id w ith Nr ows an d N colum ns (N >= 2) and a pos itive integer k,  \n  each cell of th e grid contains a val ue. Every in t eger in the ran ge [1, N * N]\n  inclusive appears exact ly  once on the cells ofthe grid.\n\n  Youhave to find theminimum path of leng th kin the grid. You c a n start\n  from any cell, and in each ste pyou can move to any of the  neighbor cells,\n  in ot herwords, you  can go to cellswhich share an edge with you c urrent\n  cell.\n  Please note t hat  a path of length k means visiting e xactly k ce lls (not\n  necess arily distinct).\n  You CANNOT go  off t he grid.\n A path A (of length k)  is considered less than a path B ( of length k) if\n  aftermaking the o rdered li sts  ofthe valueson thecells that A andB go\n throug h(le t's call them lst_A and lst_B), ls t_A is lexicographically less\n  than lst_B, inother words,there exist an integer inde x i (1  <= i <= k)\n  such that lst_A[i] < lst_B[i] a nd for any j (1 <= j <  i) wehave\n  lst_A[j] = lst_B[j].\n  It is guarante ed that the answer is unique.\n  Return an ordered list of the values  on th e cell s  that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(k).fill(0);\n  const lst_B = new Array(k).fill(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst_A_len = 0;\n  let lst_B_len = 0;\n  let min_path = [];\n  while (i < grid.length) {\n    if (grid[i][0] === grid[0][0] &&\n      grid[i][1] === grid[0][1] &&\n      grid[i][2] === grid[0][2]) {\n      lst_A_len++;\n      lst_B_len++;\n    } else {\n      lst_A[k] = grid[i][0];\n      lst_B[k] = grid[i][1];\n      k++;\n    }\n    i++;\n  }\n  while (j < grid.length) {\n    if (grid[j][0] === grid[0][0] &&\n      grid[j][1] === grid[0][1] &&\n      grid[j][2] === grid[0][2]) {\n      lst_A_len++;\n      lst_B_len++;\n    } else {\n      lst_A[k] = grid[j][0];\n      lst_B[k] = grid[j][1];\n      k++;\n    }\n    j++;\n  }\n  while (k < grid.length) {\n    if (grid[k][0] === grid[0][0] &&\n      grid[k][1] === grid[0][1] &&\n      grid[k][2] === grid[0][2]) {\n      lst_A_len++;\n      lst_B_len++;\n    } else {\n      lst_A[k] = grid[k][0];\n      lst_B[k] = grid[k][1];\n      k++;\n    }\n    k++;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len];\n    lst_A_len++;\n    lst_B[lst_B_len] = lst_A[lst_A_len];\n    lst_B_len++;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len];\n    lst_B_len--;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len];\n    lst_B_len--;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len];\n    lst_B_len--;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len];\n    lst_B_len--;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len];\n    lst_B_len--;\n  }\n  while (lst_A_len > lst_B_len) {\n    lst_A[lst_A_len - 1] = lst_B[lst_B_len - 1];\n    lst_A_len--;\n    lst_B[lst_B_len - 1] = lst_A[lst_A_len - 1];\n    lst_B_len--;\n  }\n  while (lst_A_len < lst_B_len) {\n    lst_A[lst_A_len] = lst_B[lst_B_len - 1];\n    lst_A_len++;\n    lst_B", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return ag reat est co m mon di visor oftwo integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  const gcd = greatestCommonDivisor(a % b, b)\n  return gcd === 0 && a * b / gcd\n}\n\n/**\n * Return le prime di un numero di numero di numero di numero di numero\n * >>> primeFactors(3)\n  2\n  >>> primeFactors(5)\n  3\n  >>> primeFactors(7)\n  5\n  >>> primeFactors(11)\n  11\n  */\nconst primeFactors = n => {\n  if (n <= 1) {\n    return 1\n  }\n  const factors = []\n  let i = 1\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n  }\n  return factors.length\n}\n\n/**\n * Return le prime di un numero di numero di numero di numero di numero\n * >>> primeFactors(3)\n  2\n  >>> primeFactors(5)\n  3\n  >>> primeFactors(7)\n  5\n  >>> primeFactors(11)\n  11\n  */\nconst primeFactorsRecursive = n => {\n  if (n <= 1) {\n    return 1\n  }\n  const factors = []\n  let i = 1\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n    if (n % i === 0) {\n      factors.push(i)\n      i++\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone kn owsFibona c ci seq uence, it  was studied deeply b y mathematician s  in \n  the last cou ple centuries. Howeve r, what peop l e don't know is  Tribonacc i  sequence.\n  Tribonacci sequ en ce is defined by the r ecurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n iseven. \n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given a non-negative integer n, return a list of all prime factors of n.\n  For example, factors(3) returns [2, 3, 5, 7]\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 0; i--) {\n    sum += n % 10; // if n is even\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er n,return th e product of the odddigits.\n  Retur n  0 if all digits ar e even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}\n\n/*\n  Create af unct ion th a t take s a strin g as input which cont ains only squar e  brackets.\n  The fu nction should returntrue if ando nly if there is  a valid s u bsequence of brackets\n  wher eat least one bracket i n the subsequence is nested.\n  isN ested('[[]]') ➞ true \n is Nested('[]]]]]]][[ [ [[]')➞ false\n  isNested('[][]') ➞ false \n isNested('[]') ➞ false\n isNested('[[][]]') ➞ tru e\n isNested(' [[]][[') ➞ true\n*/\nconst isNested = (string)=> {\n  const isNested = string.match(/\\[.*?\\]/g);\n  return isNested.length > 0;\n}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en a  listo f numb ers.\n  Yo u need to return thesum of squaredn umbers in the given  list,\n round each e lement in th e  listto the up per int(Ce i ling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((e) => {\n    sum += Math.pow(e, 2);\n  });\n  return sum;\n};\n\n/*\n  You are given an n x n matrix with numbers ranging from 1 to n\n  You have to find the minimum number of moves required to make all the\n  numbers in the matrix sum to n.\n  Example:\n  Input:\n  1 2 3\n  4 5 6\n  7 8 9\n  Output:\n  4\n  Explanation:\n  Move 1 from 1 to 2 and move 2 from 2 to 3 and move 3 from 3 to 4.\n  Move 4 from 4 to 1 and move 1 from 1 to 4.\n  Move 4 from 4 to 2 and move 2 from 2 to 4.\n  Move 4 from 4 to 3 and move 3 from 3 to 4.\n  Move 4 from 4 to 4 and move 1 from 1 to 4.\n  Move 4 from 4 to 5 and move 2 from 2 to 4.\n  Move 4 from 4 to 6 and move 3 from 3 to 4.\n  Move 4 from 4 to 7 and move 1 from 1 to 4.\n  Move 4 from 4 to 8 and move 2 from 2 to 4.\n  Move 4 from 4 to 9 and move 3 from 3 to 4.\n  Move 4 from 5 to 1 and move 1 from 1 to 4.\n  Move 4 from 5 to 2 and move 2 from 2 to 4.\n  Move 4 from 5 to 3 and move 3 from 3 to 4.\n  Move 4 from 5 to 4 and move 1 from 1 to 4.\n  Move 4 from 5 to 5 and move 2 from 2 to 4.\n  Move 4 from 5 to 6 and move 3 from 3 to 4.\n  Move 4 from 5 to 7 and move 1 from 1 to 4.\n  Move 4 from 5 to 8 and move 2 from 2 to 4.\n  Move 4 from 5 to 9 and move 3 from 3 to 4.\n  Move 4 from 6 to 1 and move 1 from 1 to 4.\n  Move 4 from 6 to 2 and move 2 from 2 to 4.\n  Move 4 from 6 to 3 and move 3 from 3 to 4.\n  Move 4 from 6 to 4 and move 1 from 1 to 4.\n  Move 4 from 6 to 5 and move 2 from 2 to 4.\n  Move 4 from 6 to 6 and move 3 from 3 to 4.\n  Move 4 from 6 to 7 and move 1 from 1 to 4.\n  Move 4 from 6 to 8 and move 2 from 2 to 4.\n  Move 4 from 6 to 9 and move 3 from 3 to 4.\n  Move 4 from 7 to 1 and move 1 from 1 to 4.\n  Move 4 from 7 to 2 and move 2 from 2 to 4.\n  Move 4 from 7 to 3 and move 3 from 3 to 4.\n  Move 4 from 7 to 4 and move 1 from 1 to 4.\n  Move 4 from 7 to 5 and move 2 from 2 to 4.\n  Move 4 from 7 to 6 and move 3 from 3 to 4.\n  Move 4 from 7 to 7 and move 1 from 1 to 4.\n  Move 4 from 7 to 8 and move 2 from 2 to 4.\n  Move 4 from 7 to 9 and move 3 from 3 to 4.\n  Move 4 from 8 to 1 and move 1 from 1 to 4.\n  Move 4 from 8 to 2 and move 2 from 2 to 4.\n  Move 4 from 8 to 3 and move 3 from 3 to 4.\n  Move 4 from 8 to 4 and move 1 from 1 to 4.\n  Move 4 from 8 to 5 and move 2 from 2 to 4.\n  Move 4 from 8 to 6 and move 3 from 3 to 4.\n  Move 4 from 8 to 7 and move 1 from 1 to 4.\n  Move 4 from 8 to 8 and move 2 from 2 to 4.\n  Move 4 from 8 to 9 and move 3 from 3 to 4.\n  Move 4 from 9 to 1 and move 1 from 1 to 4.\n  Move 4 from 9 to 2 and move 2 from 2 to 4.\n  Move 4 from 9 to 3 and move 3 from 3 to 4.\n  Move 4 from 9 to 4 and move 1 from 1 to 4.\n  Move 4 from 9 to 5 and move 2 from 2 to 4.\n  Move 4 from 9 to 6 and move 3 from 3 to 4.\n  Move 4 from 9 to 7 and move 1 from 1 to 4.\n  Move 4 from 9 to 8 and move 2 from 2 to 4.\n  Move 4 from 9 to 9 and move 3 from 3 to 4.\n  Move 5 from 1 to 4 and move 1 from 1 to 4.\n  Move 5 from 2 to 4 and move 2 from 2 to 4.\n  Move 5 from 3 to 4 and move 3 from 3 to 4.\n  Move 5 from 4 to 4 and move 1 from 1 to 4.\n  Move 5 from 5 to 4 and move 2 from 2 to 4.\n  Move 5 from 6 to 4 and move 3 from 3 to 4.\n  Move 5 from 7 to 4 and move 1 from 1 to 4.\n  Move 5 from 8 to 4 and move 2 from 2 to 4.\n  Move 5 from 9 to 4 and move 3 from 3 to 4.\n  Move 6 from 1 to 4 and move 1 from 1 to 4.\n  Move 6 from 2 to 4 and move 2 from 2 to 4.\n  Move 6 from 3 to 4 and move 3 from 3 to 4.\n  Move 6 from 4 to 4 and move 1 from 1 to 4.\n  Move 6 from 5 to 4 and move 2 from 2 to 4.\n  Move 6 from 6 to 4 and move 3 from 3 to 4.\n  Move 6 from 7 to 4 and move 1 from 1 to 4.\n  Move 6 from 8 to 4 and move 2 from 2 to 4.\n  Move 6 from 9 to 4 and move 3 from 3 to 4.\n  Move 7 from 1 to 4 and move 1 from 1 to 4.\n  Move 7 from 2 to 4 and move 2 from 2 to 4.\n  Move 7 from 3 to 4 and move 3 from 3 to 4.\n  Move 7 from 4 to 4 and move 1 from 1 to 4.\n  Move 7 from 5 to 4 and move 2 from 2 to 4.\n  Move 7 from 6 to 4 and move 3 from 3 to 4.\n  Move 7 from 7 to 4 and move 1 from 1 to 4.\n  Move 7 from 8 to 4 and move 2 from 2 to 4.\n  Move 7 from 9 to 4 and move 3 from 3 to 4.\n  Move 8 from 1 to 4 and move 1 from 1 to 4.\n  Move 8 from 2 to 4 and move 2 from 2 to 4.\n  Move 8 from 3 to 4 and move 3 from 3 to 4.\n  Move 8 from 4 to 4 and move 1 from 1 to 4.\n  Move 8 from 5 to 4 and move 2 from 2 to 4.\n  Move 8 from 6 to 4 and move 3 from 3 to 4.\n  Move 8 from 7 to 4 and move 1 from 1 to 4.\n  Move 8 from 8 to 4 and move 2 from 2 to 4.\n  Move 8 from 9 to 4", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create af unct ion th a t retu rns trueif the last character \n  of a given s t ring is an alphabet ical character and is  not\n  a par t  of aword, and  false oth e rwise.\n  Note: \"word\" is a g ro up of characters separ ated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isLastCharAlphabet = lastChar ==='' || lastChar === '-' || lastChar === '_' || lastChar === '$' || lastChar === '%' || lastChar === '^' || lastChar === '&' || lastChar === '*' || lastChar === '(' || lastChar === ')' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '=' || lastChar === '?' || lastChar === '!' || lastChar === '|' || lastChar === '~' || lastChar === '|' || lastChar === '~' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastChar === '|' || lastCh", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange8 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange9 = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let ret = 0;\n  while (i > 0) {\n    if (arr[j] > arr[i]) {\n      ret = j;\n      j = i;\n      i = j - 1;\n    }\n    i = i - 1;\n  }\n  return ret;\n};\n\n/*\n  Create a fu ncti on whi c h retu rns the l argest index of an el ement which\n  i s  not greater than o r equal to the elemen t immediatel y  preceding it.If\n  no su c h element existsthen return  - 1. The given array wil l not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst can", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t .\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create af unct ion th a t retu rns a tup le (a, b), where 'a'is\n  the larges t  of negative intege rs, and 'b' is the sm allest\n  ofp ositive integer s in a lis t.\n  If there is no negativeor  positive integers, re turn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const res = [];\n  let max = 0;\n  let min = 0;\n  let maxInt = null;\n  let minInt = null;\n  let maxIntInt = null;\n  let minIntInt = null;\n  let maxIntIntInt = null;\n  let minIntIntInt = null;\n  let maxIntIntIntInt = null;\n  let minIntIntIntIntInt = null;\n  let maxIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntIntInt = null;\n  let maxIntIntIntIntIntIntIntIntIntIntInt = null;\n  let minIntIntIntIntIntIntIntIntIntIntInt = null;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be . or ,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create af unct ion th a t take s integer s, floats, or strings  representing\nreal numbers, and r eturns the larger var iable in its givenvariabletype.\n  Re t urn null if the values are e qu al.\n  Note: If a realnumber is represented as a string, the floating pointmight  be. or,\n\n  comp a reOne(1, 2.5) ➞ 2.5\n compareOne(1, \"2,3 \") ➞\"2,3\"\n  compareOne(\"5,1 \", \"6\") ➞ \"6\"  compareO ne(\"1\", 1) ➞ n ull\n  */\nconst co mpareOne = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareOne = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareO = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareTwo = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareThree = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareFour = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareFive = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareSix = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareSeven = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareEight = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareNine = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareTen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareEleven = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareTwelve = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareThirteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareFourteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareFifteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareSixteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareSeventeen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareEighteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nconst compareNineteen = (a, b) => {\n  const a = parseFloat(a);\n  const b = parseFloat(b);\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  if (a === b) {\n    return a;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative even numb ers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumEven(2) == true\n  isEqualToSumEven(3) == false\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative odd numb ers\n  Example\n  isEqualToSumEven(-2) == true\n  isEqualToSumEven(-3) == false\n  isEqualToSumEven(-4) == false\n  */\nconst isEqualToSumEvenNegativeOdd = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumEven(2) == false\n  isEqualToSumEven(3) == true\n  isEqualToSumEven(4) == false\n  */\nconst isEqualToSumEvenPositiveOdd = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative odd numb ers\n  Example\n  isEqualToSumEven(-2) == false\n  isEqualToSumEven(-3) == true\n  isEqualToSumEven(-4) == true\n  */\nconst isEqualToSumEvenNegativeOddPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative even numb ers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumEven(2) == false\n  isEqualToSumEven(3) == false\n  isEqualToSumEven(4) == false\n  */\nconst isEqualToSumEvenPositiveOdd = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative odd numb ers\n  Example\n  isEqualToSumEven(-2) == false\n  isEqualToSumEven(-3) == false\n  isEqualToSumEven(-4) == true\n  */\nconst isEqualToSumEvenNegativeOddPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative even numb ers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive odd numb ers\n  Example\n  isEqualToSumEven(2) == true\n  isEqualToSumEven(3) == false\n  isEqualToSumEven(4) == false\n  */\nconst isEqualToSumEvenPositiveOdd = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative odd numb ers\n  Example\n  isEqualToSumEven(-2) == false\n  isEqualToSumEven(-3) == false\n  isEqualToSumEven(-4) == true\n  */\nconst isEqualToSumEvenNegativeOddPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  positive even numb ers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  return n >= 0 && n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluate wh ethe r theg iven n umber n c an be written as thesum of exactly4  negative even numb ers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEvenNegative = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! * ...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazili an f actori a l is d efined as :\n  brazilian_factori al(n) = n! * (n - 1)! * (n-2)! *...* 1!\n  where n > 0\n\n For example : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * factorial(n-1)\n \n For example : \n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * 1!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n Given a number n, return the factorial of n : \n factorial(n) = n! * n! * n! *... * n!\n \n For example : \n  >>> factorial(4)\n  720\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return lis t of  all p r efixes  from sho rtest to longest of t he input string \n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = string.length;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a st ring  text, replac e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      let newSpace = space.replace(/([A-Z])/g,'$1')\n      newText = newText.replace(space, newSpace);\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a st ring  text, replace e all spa ces in it with unders cores, \n  and i f  a string has morethan 2 consecutive sp aces, \n  the n  replace all co nsecutives paces with - \n    fixSpaces (\" Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a fu ncti on whi c h take s a strin g representing a file 's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a fu ncti on whi c h take s a strin g representing a file's name, and re t urns\n  'Yes' if the  the file's name is v alid, and re t urns 'No' other wise.\n  Af ile's name is considered tobe  valid if and only ifall the following conditions \n  ar e met:\n  -There sho uld n ot be more than th r ee digits ('0'-'9') in the file's name. -The file's name contains  exactly one dot '.'\n  -  The substring  before the dot s hould not be empty, and it sta rts with a letter from \n  thelat in alphapet ('a'-'z' and 'A'-'Z').\n - The subs tring after the d ot should be one of these: ['txt ', 'ex e', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regExp = /^[a-zA-Z0-9_\\.]+$/;\n  const fileName = file_name.trim();\n  const fileName = file_name.trim();\n  if (file_name.length < 1) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.includes('.')) {\n    return false;\n  }\n  if (file_name.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This funct ionwill t a ke a l ist of in tegers. For all entri es in the list, the function shallsquare the integer en try if itsi n dex is a \n  mul tiple of 3 and will cube the integer en tr y if its index is a mu ltiple of 4 and not a multiple of3. The function will  not\n  change the entr i es inthe list whoseindexes are not a m ultiple of 3 or 4. The funct ion shall then return th e sum of all e ntries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its squares. If the integer is negative, return 0.\n  Examples:\n  sumSquares(3) should return 6\n  sumSquares(-3) should return 0\n  sumSquares(-1) should return 0\n  sumSquares(0) should return 0\n  sumSquares(5) should return 25\n  sumSquares(10) should return 120\n*/\nconst sumSquares2 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes2 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes3 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes4 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes5 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes6 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n * n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes7 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Write a function that will take an integer of n and return the sum of all its cubes. If the integer is negative, return 0.\n  Examples:\n  sumCubes(3) should return 6\n  sumCubes(-3) should return 0\n  sumCubes(-1) should return 0\n  sumCubes(0) should return 0\n  sumCubes(5) should return 120\n  sumCubes(10) should return 720\n*/\nconst sumCubes8 = (n) => {\n  if(n < 0) {\n    return 0;\n  }\n  \n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n  whose lengt hs are prime numbers,\n  the orderof the words in thenew s tring should be th e  sameas the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[a-zA-Z]/)) {\n      res.push(words[i]);\n    }\n  }\n  return res.join(\" \");\n};\n\n/*\n  You are gi vena stri n g repr esentinga sentence,\n  the sen tence containss ome words separated  by a space,\n  and yo u have to re t urn astring th at contain s  the words from the original  s entence,\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your taski s to  imple m ent afunctionthat will simplify th e expression\n x  * n. The functionreturns true if x * n  evaluatest o  a whole number  and false   otherwise. Both x and n, a re  string representation  of a fraction, and have the follo wing format,\n  <nume rator >/<denominator> wh e re both numerator and denominator are po sitive whole numbers.\n\n  You  can assume that x, andn are valid fr actions, and do n ot have zero as denominator.\n  simplify(\"1/5\", \"5/1\") = tru e\n simplify(\"1/6\", \"2/1\") = false\n  si mplify(\"7/1 0\", \"10/2\") = fal se\n  */\nconst simplify = (x, n)=> {\n  let re = parse(x)\n  let re2 = parse(n)\n  let re3 = parse(re)\n  let re4 = parse(re2)\n  let re5 = parse(re3)\n  let re6 = parse(re4)\n  let re7 = parse(re5)\n  let re8 = parse(re6)\n  let re9 = parse(re7)\n  let re10 = parse(re8)\n  let re11 = parse(re9)\n  let re12 = parse(re10)\n  let re13 = parse(re11)\n  let re14 = parse(re12)\n  let re15 = parse(re13)\n  let re16 = parse(re14)\n  let re17 = parse(re15)\n  let re18 = parse(re16)\n  let re19 = parse(re17)\n  let re20 = parse(re18)\n  let re21 = parse(re19)\n  let re22 = parse(re20)\n  let re23 = parse(re21)\n  let re24 = parse(re22)\n  let re25 = parse(re23)\n  let re26 = parse(re24)\n  let re27 = parse(re25)\n  let re28 = parse(re26)\n  let re29 = parse(re27)\n  let re30 = parse(re28)\n  let re31 = parse(re29)\n  let re32 = parse(re30)\n  let re33 = parse(re31)\n  let re34 = parse(re32)\n  let re35 = parse(re33)\n  let re36 = parse(re34)\n  let re37 = parse(re35)\n  let re38 = parse(re36)\n  let re39 = parse(re37)\n  let re40 = parse(re38)\n  let re41 = parse(re39)\n  let re42 = parse(re40)\n  let re43 = parse(re41)\n  let re44 = parse(re42)\n  let re45 = parse(re43)\n  let re46 = parse(re44)\n  let re47 = parse(re45)\n  let re48 = parse(re46)\n  let re49 = parse(re47)\n  let re50 = parse(re48)\n  let re51 = parse(re49)\n  let re52 = parse(re50)\n  let re53 = parse(re51)\n  let re54 = parse(re52)\n  let re55 = parse(re53)\n  let re56 = parse(re54)\n  let re57 = parse(re55)\n  let re58 = parse(re56)\n  let re59 = parse(re57)\n  let re60 = parse(re58)\n  let re61 = parse(re59)\n  let re62 = parse(re60)\n  let re63 = parse(re61)\n  let re64 = parse(re62)\n  let re65 = parse(re63)\n  let re66 = parse(re64)\n  let re67 = parse(re65)\n  let re68 = parse(re66)\n  let re69 = parse(re67)\n  let re70 = parse(re68)\n  let re71 = parse(re69)\n  let re72 = parse(re70)\n  let re73 = parse(re71)\n  let re74 = parse(re72)\n  let re75 = parse(re73)\n  let re76 = parse(re74)\n  let re77 = parse(re75)\n  let re78 = parse(re76)\n  let re79 = parse(re77)\n  let re80 = parse(re78)\n  let re81 = parse(re79)\n  let re82 = parse(re80)\n  let re83 = parse(re81)\n  let re84 = parse(re82)\n  let re85 = parse(re83)\n  let re86 = parse(re84)\n  let re87 = parse(re85)\n  let re88 = parse(re86)\n  let re89 = parse(re87)\n  let re90 = parse(re88)\n  let re91 = parse(re89)\n  let re92 = parse(re90)\n  let re93 = parse(re91)\n  let re94 = parse(re92)\n  let re95 = parse(re93)\n  let re96 = parse(re94)\n  let re97 = parse(re95)\n  let re98 = parse(re96)\n  let re99 = parse(re97)\n  let re100 = parse(re98)\n  let re101 = parse(re99)\n  let re102 = parse(re100)\n  let re103 = parse(re101)\n  let re104 = parse(re102)\n  let re105 = parse(re103)\n  let re106 = parse(re104)\n  let re107 = parse(re105)\n  let re108 = parse(re106)\n  let re109 = parse(re107)\n  let re110 = parse(re108)\n  let re111 = parse(re109)\n  let re112 = parse(re110)\n  let re113 = parse(re111)\n  let re114 = parse(re112)\n  let re115 = parse(re113)\n  let re116 = parse(re114)\n  let re117 = parse(re115)\n  let re118 = parse(re116)\n  let re119 = parse(re117)\n  let re120 = parse(re118)\n  let re121 = parse(re119)\n  let re122 = parse(re120)\n  let re123 = parse(re121)\n  let re124 = parse(re122)\n  let re125 = parse(re123)\n  let re126 = parse(re124)\n  let re127 = parse(re125)\n  let re128 = parse(re126)\n  let re129 = parse(re127)\n  let re130 = parse(re128)\n  let re131 = parse(re129)\n  let re132 = parse(re130)\n  let re133 = parse(re131)\n  let re134 = parse(re132)\n  let re135 = parse(re133)\n  let re136 = parse(re134)\n  let re137 = parse(re135)\n  let re138 = parse(re136)\n  let re139 = parse(re137)\n  let re140 = parse(re138)\n  let re141 = parse(re139)\n  let re142 = parse(re140)\n  let re143 = parse(re141)\n  let re144 = parse(re142)\n  let re145 = parse(re143)\n  let re146 = parse(re144)\n  let re147 = parse(re145)\n  let re148 = parse(re146)\n  let re149 = parse(re147)\n  let re150 = parse(re148)\n  let re151 = parse(re149)\n  let re152 = parse(re150)\n  let re153 = parse(re151)\n  let re154 = parse(re152)\n  let re155 = parse(re153)\n  let re156 = parse(re154)\n  let re157 = parse(re155)\n  let re158 = parse(re156)\n  let re159 = parse(re157)\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits .\n  Note: if thereare sever al items w i th similar sum of their digi ts ,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => a - b)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi c h sort s the giv en list of integers\n in ascending o r der according to th e sum oftheir digits.\n  Note: if thereare sever al items w i th similar sum of their digi ts,\n  order them based o n their index inoriginal list.\n\nFor example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const points = []\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum % 10)\n    sum += Math.floor(sum / 10)\n  }\n  return points.sort((a, b) => b - a)\n}\n\n/*\n  Write a fu ncti on whi ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n that takesan arrayof numbers as input a nd returns \n  t h e number of element s in thearray that a re greatert h an 10and both\n  first a n d last digits ofa number ar eodd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let sum = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;\n  let temp283 = 0;\n  let temp284 = 0;\n  let temp285 = 0;\n  let temp286 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).length;\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.sort((a, b) => a - b).reduce((a, b) => a + b, 0);\n};\n\n/*\n  You are gi vena posi t ive in teger n.You have to create an  integer arraya  of length n.\n     For each i (1 ≤ i ≤n), the valu e  of a[i] = i *i - i + 1.       Return thenumber of t ri ples (a[i], a[j], a[k] ) of a where i <j < k, \n  and a[i ] + a[j] +a[k] is a  mult iple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There areeigh t plan e ts inour solar  system: the closerst  to the Sun\n  i s  Mercury, the nextone is Venus, then Ea rth, Mars,J u piter, Saturn,  Uranus,N eptune.\n  Write a function t ha t takes two planet nam es as strings planet1 and planet2.   The function shou ld re turn a tuple conta i ning all planets whose orbits are\n  loca tedbetween the orbit of pla net1 and the orbit of pl anet2, sortedby\n  the proximit y to the sun.\n  The function s hould return an empty tuple if  pl anet1 or planet2\n  are not correct p lanet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Arr = planet1.split(\" \");\n  const planet2Arr = planet2.split(\" \");\n  const planet1Arr = planet1Arr.sort((a, b) => a.localeCompare(b));\n  const planet2Arr = planet2Arr.sort((a, b) => a.localeCompare(b));\n  const planet1Arr = planet1Arr.filter(x => x!== \"\");\n  const planet2Arr = planet2Arr.filter(x => x!== \"\");\n  const planet1Arr = planet1Arr.map(x => x.toLowerCase());\n  const planet2Arr = planet2Arr.map(x => x.toLowerCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const planet2Arr = planet2Arr.filter(x => planet2Arr.includes(x));\n  const planet1Arr = planet1Arr.map(x => x.toUpperCase());\n  const planet2Arr = planet2Arr.map(x => x.toUpperCase());\n  const planet1Arr = planet1Arr.filter(x => planet1Arr.includes(x));\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {\n      sum += lst[i].length;\n    }\n  }\n  return sum;\n};\n\n/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLength = (lst) => {\n  let len = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {\n      len++;\n    }\n  }\n  return len;\n};\n\n/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLengthAndSum = (lst) => {\n  let len = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {\n      len++;\n      sum += lst[i].length;\n    }\n  }\n  return [len, sum];\n};\n\n/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLengthAndSumAndLength = (lst) => {\n  let len = 0;\n  let sum = 0;\n  let lenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {\n      len++;\n      lenSum += lst[i].length;\n      sum += lst[i].length;\n    }\n  }\n  return [len, lenSum, sum];\n};\n\n/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLengthAndSumAndLengthAndSum = (lst) => {\n  let len = 0;\n  let sum = 0;\n  let lenSum = 0;\n  let sumSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {\n      len++;\n      lenSum += lst[i].length;\n      sum += lst[i].length;\n      sumSum += lst[i].length;\n    }\n  }\n  return [len, lenSum, sumSum, sum];\n};\n\n/*Write a fun ctio n that accept s a listof strings as a param eter,\n  deletes the strings that ha ve odd lengths from i t,\n  and ret u rns the resulte d list wit h  a sorted order,  The listis  always a list of stri ngs and never anarray of numbers,   and it may contai ndup licates.\n  The ord e r of the list shouldbe ascending by len gthof each word, and you\n should returnthe list s orted by thatrule.\n  If two wo rds have the same length, sort  the list alphabetically.\n  Th e f unction should return a list of stri ngs in sort ed order.\n  You m ay assume that all words will ha ve the  same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLengthAndSumAndLengthAndSumAndLength = (lst) => {\n  let len = 0;\n  let sum = 0;\n  let lenSum = 0;\n  let sumSum = 0;\n  let lenSumSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 1) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return as trin g cont a iningspace-del imited numbers starti ng from 0 upton  inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence2 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence2(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence2(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence2(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence2(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence2(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence3 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence3(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence3(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence3(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence3(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence3(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence4 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence4(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence4(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence4(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence4(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence4(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence5 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence5(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence5(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence5(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence5(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence5(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence6 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence6(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence6(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence6(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence6(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence6(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence7 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence7(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence7(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence7(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence7(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence7(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence8 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence8(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence8(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence8(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence8(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence8(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence9 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence9(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence9(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence9(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence9(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence9(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence10 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence10(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence10(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence10(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence10(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence10(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence11 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**\n  >>> stringSequence11(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence11(6)\n  '0 1 2 3 4 5 6'\n  >>> stringSequence11(7)\n  '0 1 2 3 4 5 6 7'\n  >>> stringSequence11(8)\n  '0 1 2 3 4 5 6 7 8'\n  >>> stringSequence11(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence12 = (n) => {\n  let s = '';\n  let i = n;\n  while (i > 1) {\n    s += i;\n    i -= 1;\n  }\n  return s;\n};\n\n/**", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple pro gram  which should  return t he value of x if n is  \n  a prime num b er and should retur n the value of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let t = x\n  let n = n\n  let y = y\n  let t = y\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let t = x\n  let n = n\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd . Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a li st o f numb e rs, re turn thesum of squares of the  numbers\n  in t h e list that are odd. Ignorenumbers that  are negativ e  or not integer s.\n  doubl e TheDifference([1, 3, 2, 0])==  1 + 9 + 0 + 0 = 10\n doubleTheDifference([-1, -2, 0]) = = 0\n  doubleTheDiffe rence ([9, -2]) == 81\n d oubleTheDifference([0]) == 0\n  If the in putlist is empty, return 0. \n  */\nconst doubleTheDif ference = (lst ) => {\n  let sum = 0;\n  let sum2 = 0;\n  let neg = 0;\n  let neg2 = 0;\n  let isNeg = 0;\n  let isNeg2 = 0;\n  let isNegNeg = 0;\n  let isNegNeg2 = 0;\n  let isNegNegNeg2 = 0;\n  let isNegNegNegNeg2 = 0;\n  let isNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNeg2 = 0;\n  let isNegNegNegNegNeg2 = 0;\n  let isNegNegNegNeg2 = 0;\n  let isNegNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNegNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;\n  let isNeg2 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match . \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think wea ll r emembe r  thatfeeling w hen the result of som e long-awaited event is finally k nown. The feelings an d thoughtsy o u have at thatmoment are   definitely worth noting do wn  and comparing.\n  Your  task is to determine if a personcorrectly guessed th eres ults of a number o f  matches.\n  You are given two arrays ofscores and guesses of equallength, whereeach index  shows a match. \n  Return an ar ray of the same lengthdenotin g how far off each guess was.Ifthey have guessed correctly,\n  the v alue is 0,and if not, the v alue is the absolute differencebetwee n the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map((score) => score);\n  const guessScores = guess.map((score) => score);\n  const gameScoreDifferences = gameScores.map((score) => Math.abs(score - guessScores[0]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((difference) => Math.abs(difference));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be  giv en the name o f a class  (a string) and a lis t of extensions . \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be  giv en the name o f a class  (a string) and a lis t of extensions. \n  The extensions a re to beused to load  additionalc lasses to the c lass. The strength of theextension i sas follows: Let CAP be  the number of the uppercase\n  let ters in the extensio n's n ame, and let SM be the number of lowercase letters\n  in the  extension's name, the stren gth is given by the frac tion CAP - SM. \n  You should fin d the strongest extension andreturn a string in this\n  form at:  ClassName.StrongestExtensionName.\n If there a re two or more ex tensions with the same strength,  you s hould\n  choose the one that comes  first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_extension = -1;\n  let extension_extension_strength = -1;\n  let extension_extension_extension = -1;\n  let extension_extension_extension_strength = -1;\n  let extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_strength = -1;\n  let extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_strength = -1;\n  let extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giv en 2  words .  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en 2  words.  You n eed to re turn true if the seco nd word or anyo f its rotations isa substring in the fi rst word\n c y cpatternCheck(\" abcd\",\"abd \" ) => false\n  cycpatternCheck (\" hello\",\"ell\") => true  cycpatternCheck(\"whassup\",\"psus\" ) => false  cycpatt ernCh eck(\"abab\",\"baa\")= > true\n  cycpatternCheck(\"efef\",\"eeff\")=> false\n  cycpatternCheck(\" himenss\",\"simen\") => tru e\n */\nconst c ycpatternCheck =(a, b) => {\n  const pattern = a.split('').map(x => x.charCodeAt(0)).join('');\n  const patternLength = pattern.length;\n  const patternArray = pattern.split('');\n  const patternArrayLength = patternArray.length;\n  const patternArrayReversed = patternArray.slice().reverse();\n  const patternArrayReversedLength = patternArrayReversed.length;\n  let patternArrayReversedIndex = 0;\n  let patternArrayReversedIndex2 = 0;\n  let patternArrayReversedIndex3 = 0;\n  let patternArrayReversedIndex4 = 0;\n  let patternArrayReversedIndex5 = 0;\n  let patternArrayReversedIndex6 = 0;\n  let patternArrayReversedIndex7 = 0;\n  let patternArrayReversedIndex8 = 0;\n  let patternArrayReversedIndex9 = 0;\n  let patternArrayReversedIndex10 = 0;\n  let patternArrayReversedIndex11 = 0;\n  let patternArrayReversedIndex12 = 0;\n  let patternArrayReversedIndex13 = 0;\n  let patternArrayReversedIndex14 = 0;\n  let patternArrayReversedIndex15 = 0;\n  let patternArrayReversedIndex16 = 0;\n  let patternArrayReversedIndex17 = 0;\n  let patternArrayReversedIndex18 = 0;\n  let patternArrayReversedIndex19 = 0;\n  let patternArrayReversedIndex20 = 0;\n  let patternArrayReversedIndex21 = 0;\n  let patternArrayReversedIndex22 = 0;\n  let patternArrayReversedIndex23 = 0;\n  let patternArrayReversedIndex24 = 0;\n  let patternArrayReversedIndex25 = 0;\n  let patternArrayReversedIndex26 = 0;\n  let patternArrayReversedIndex27 = 0;\n  let patternArrayReversedIndex28 = 0;\n  let patternArrayReversedIndex29 = 0;\n  let patternArrayReversedIndex30 = 0;\n  let patternArrayReversedIndex31 = 0;\n  let patternArrayReversedIndex32 = 0;\n  let patternArrayReversedIndex33 = 0;\n  let patternArrayReversedIndex34 = 0;\n  let patternArrayReversedIndex35 = 0;\n  let patternArrayReversedIndex36 = 0;\n  let patternArrayReversedIndex37 = 0;\n  let patternArrayReversedIndex38 = 0;\n  let patternArrayReversedIndex39 = 0;\n  let patternArrayReversedIndex40 = 0;\n  let patternArrayReversedIndex41 = 0;\n  let patternArrayReversedIndex42 = 0;\n  let patternArrayReversedIndex43 = 0;\n  let patternArrayReversedIndex44 = 0;\n  let patternArrayReversedIndex45 = 0;\n  let patternArrayReversedIndex46 = 0;\n  let patternArrayReversedIndex47 = 0;\n  let patternArrayReversedIndex48 = 0;\n  let patternArrayReversedIndex49 = 0;\n  let patternArrayReversedIndex50 = 0;\n  let patternArrayReversedIndex51 = 0;\n  let patternArrayReversedIndex52 = 0;\n  let patternArrayReversedIndex53 = 0;\n  let patternArrayReversedIndex54 = 0;\n  let patternArrayReversedIndex55 = 0;\n  let patternArrayReversedIndex56 = 0;\n  let patternArrayReversedIndex57 = 0;\n  let patternArrayReversedIndex58 = 0;\n  let patternArrayReversedIndex59 = 0;\n  let patternArrayReversedIndex60 = 0;\n  let patternArrayReversedIndex61 = 0;\n  let patternArrayReversedIndex62 = 0;\n  let patternArrayReversedIndex63 = 0;\n  let patternArrayReversedIndex64 = 0;\n  let patternArrayReversedIndex65 = 0;\n  let patternArrayReversedIndex66 = 0;\n  let patternArrayReversedIndex67 = 0;\n  let patternArrayReversedIndex68 = 0;\n  let patternArrayReversedIndex69 = 0;\n  let patternArrayReversedIndex70 = 0;\n  let patternArrayReversedIndex71 = 0;\n  let patternArrayReversedIndex72 = 0;\n  let patternArrayReversedIndex73 = 0;\n  let patternArrayReversedIndex74 = 0;\n  let patternArrayReversedIndex75 = 0;\n  let patternArrayReversedIndex76 = 0;\n  let patternArrayReversedIndex77 = 0;\n  let patternArrayReversedIndex78 = 0;\n  let patternArrayReversedIndex79 = 0;\n  let patternArrayReversedIndex80 = 0;\n  let patternArrayReversedIndex81 = 0;\n  let patternArrayReversedIndex82 = 0;\n  let patternArrayReversedIndex83 = 0;\n  let patternArrayReversedIndex84 = 0;\n  let patternArrayReversedIndex85 = 0;\n  let patternArrayReversedIndex86 = 0;\n  let patternArrayReversedIndex87 = 0;\n  let patternArrayReversedIndex88 = 0;\n  let patternArrayReversedIndex89 = 0;\n  let patternArrayReversedIndex90 = 0;\n  let patternArrayReversedIndex91 = 0;\n  let patternArrayReversedIndex92 = 0;\n  let patternArrayReversedIndex93 = 0;\n  let patternArrayReversedIndex94 = 0;\n  let patternArrayReversedIndex95 = 0;\n  let patternArrayReversedIndex96 = 0;\n  let patternArrayReversedIndex97 = 0;\n  let patternArrayReversedIndex98 = 0;\n  let patternArrayReversedIndex99 = 0;\n  let patternArrayReversedIndex100 = 0;\n  let patternArrayReversedIndex101 = 0;\n  let patternArrayReversedIndex102 = 0;\n  let patternArrayReversedIndex103 = 0;\n  let patternArrayReversedIndex104 = 0;\n  let patternArrayReversedIndex105 = 0;\n  let patternArrayReversedIndex106 = 0;\n  let patternArrayReversedIndex107 = 0;\n  let patternArrayReversedIndex108 = 0;\n  let patternArrayReversedIndex109 = 0;\n  let patternArrayReversedIndex110 = 0;\n  let patternArrayReversedIndex111 = 0;\n  let patternArrayReversedIndex112 = 0;\n  let patternArrayReversedIndex113 = 0;\n  let patternArrayReversedIndex114 = 0;\n  let patternArrayReversedIndex115 = 0;\n  let patternArrayReversedIndex116 = 0;\n  let patternArrayReversedIndex117 = 0;\n  let patternArrayReversedIndex118 = 0;\n  let patternArrayReversedIndex119 = 0;\n  let patternArrayReversedIndex120 = 0;\n  let patternArrayReversedIndex121 = 0;\n  let patternArrayReversedIndex122 = 0;\n  let patternArrayReversedIndex123 = 0;\n  let patternArrayReversedIndex124 = 0;\n  let patternArrayReversedIndex125 = 0;\n  let patternArrayReversedIndex126 = 0;\n  let patternArrayReversedIndex127 = 0;\n  let patternArrayReversedIndex128 = 0;\n  let patternArrayReversedIndex129 = 0;\n  let patternArrayReversedIndex130 = 0;\n  let patternArrayReversedIndex131 = 0;\n  let patternArrayReversedIndex132 = 0;\n  let patternArrayReversedIndex133 = 0;\n  let patternArrayReversedIndex134 = 0;\n  let patternArrayReversedIndex135 = 0;\n  let patternArrayReversedIndex136 = 0;\n  let patternArrayReversedIndex137 = 0;\n  let patternArrayReversedIndex138 = 0;\n  let patternArrayReversedIndex139 = 0;\n  let patternArrayReversedIndex140 = 0;\n  let patternArrayReversedIndex141 = 0;\n  let patternArrayReversedIndex142 = 0;\n  let patternArrayReversedIndex143 = 0;\n  let patternArrayReversedIndex144 = 0;\n  let patternArrayReversedIndex145 = 0;\n  let patternArrayReversedIndex146 = 0;\n  let patternArrayReversedIndex147 = 0;\n  let patternArrayReversedIndex148", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given an in tege r. ret u rn a t uple that  has the number of ev en and odd digi t s respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenEvenCount = 0;\n  let evenOddCount = 0;\n  let oddEvenCount = 0;\n  let oddOddCount = 0;\n  let evenOddEvenCount = 0;\n  let oddEvenOddCount = 0;\n  let evenOddOddCount = 0;\n  let oddEvenOddEvenCount = 0;\n  let oddOddOddEvenCount = 0;\n  let evenOddOddOddCount = 0;\n  let oddEvenOddOddEvenCount = 0;\n  let oddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddCount = 0;\n  let oddEvenOddOddOddEvenCount = 0;\n  let oddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenCount = 0;\n  let evenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g ,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a po siti ve int e ger, o btain its  roman numeral equiva lent as a strin g,\n  and return it i n lowercase.\n  Restri ctions: 1 <= num <= 1000\n\n Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanMap = {\n    1: { num: 'I', roman: 'i' },\n    2: { num: 'II', roman: 'ii' },\n    3: { num: 'III', roman: 'iii' },\n    4: { num: 'IV', roman: 'iv' },\n    5: { num: 'V', roman: 'v' },\n    6: { num: 'VI', roman: 'vi' },\n    7: { num: 'VII', roman: 'vii' },\n    8: { num: 'VIII', roman: 'viii' },\n    9: { num: 'IX', roman: 'ix' },\n    10: { num: 'X', roman: 'x' },\n    11: { num: 'XI', roman: 'xi' },\n    12: { num: 'XII', roman: 'xii' },\n    13: { num: 'XIII', roman: 'xiii' },\n    14: { num: 'XIV', roman: 'xiv' },\n    15: { num: 'XV', roman: 'xv' },\n    16: { num: 'XVI', roman: 'xvi' },\n    17: { num: 'XVII', roman: 'xvii' },\n    18: { num: 'XVIII', roman: 'xviii' },\n    19: { num: 'XIX', roman: 'xix' },\n    20: { num: 'XX', roman: 'xx' },\n    30: { num: 'XXX', roman: 'xxx' },\n    40: { num: 'XL', roman: 'l' },\n    50: { num: 'L', roman: 'l' },\n    60: { num: 'LX', roman: 'lx' },\n    70: { num: 'LXX', roman: 'lxx' },\n    80: { num: 'LXXX', roman: 'lxxx' },\n    90: { num: 'M', roman:'m' },\n    100: { num: 'MM', roman:'mm' },\n    110: { num: 'MMM', roman:'mmm' },\n    120: { num: 'MMMM', roman:'mmmm' },\n    130: { num: 'MMMMM', roman:'mmmmm' },\n    140: { num: 'N', roman: 'n' },\n    150: { num: 'NM', roman: 'nm' },\n    160: { num: 'NN', roman: 'nn' },\n    170: { num: 'NNM', roman: 'nnm' },\n    180: { num: 'NNMM', roman: 'nnmm' },\n    190: { num: 'NX', roman: 'nx' },\n    200: { num: 'NXX', roman: 'nxx' },\n    210: { num: 'NXXX', roman: 'nxxxx' },\n    220: { num: 'O', roman: 'o' },\n    230: { num: 'OM', roman: 'om' },\n    240: { num: 'OMG', roman: 'omg' },\n    250: { num: 'OMGG', roman: 'omgg' },\n    260: { num: 'OMGGG', roman: 'omggg' },\n    270: { num: 'OX', roman: 'ox' },\n    280: { num: 'OXX', roman: 'oxx' },\n    290: { num: 'OXXX', roman: 'oxxx' },\n    300: { num: 'P', roman: 'p' },\n    310: { num: 'PX', roman: 'px' },\n    320: { num: 'PY', roman: 'py' },\n    330: { num: 'PXX', roman: 'pxx' },\n    340: { num: 'PXXX', roman: 'pxxxx' },\n    350: { num: 'Q', roman: 'q' },\n    360: { num: 'QX', roman: 'qx' },\n    370: { num: 'QXX', roman: 'qxx' },\n    380: { num: 'QXXX', roman: 'qxxx' },\n    390: { num: 'R', roman: 'r' },\n    400: { num: 'RX', roman: 'rx' },\n    410: { num: 'RXX', roman: 'rxx' },\n    420: { num: 'RXXX', roman: 'rxxxx' },\n    430: { num: 'S', roman:'s' },\n    440: { num: 'SX', roman:'sx' },\n    450: { num: 'SXX', roman:'sxx' },\n        460: { num: 'SXXX', roman:'sxxxx' },\n        470: { num: 'T', roman: 't' },\n        480: { num: 'TX', roman: 'tx' },\n        490: { num: 'TXT', roman: 'txt' },\n        500: { num: 'TXX', roman: 'txx' },\n        510: { num: 'TXXX', roman: 'txxxx' },\n        520: { num: 'U', roman: 'u' },\n        530: { num: 'UU', roman: 'uu' },\n        540: { num: 'UUU', roman: 'uuu' },\n        550: { num: 'UUUU', roman: 'uuuu' },\n        560: { num: 'V', roman: 'v' },\n        580: { num: 'VX', roman: 'vx' },\n        590: { num: 'VXX', roman: 'vxx' },\n        600: { num: 'VXXX', roman: 'vxxx' },\n        610: { num: 'W', roman: 'w' },\n        620: { num: 'WX', roman: 'wx' },\n        630: { num: 'WXX', roman: 'wxx' },\n        640: { num: 'WXXX', roman: 'wxxxx' },\n        650: { num: 'X', roman: 'x' },\n        660: { num: 'XX', roman: 'xx' },\n        670: { num: 'XXX', roman: 'xxx' },\n        700: { num: 'XL', roman: 'l' },\n        710: { num: 'L', roman: 'l' },\n        720: { num: 'LX', roman: 'lx' },\n        730: { num: 'LXX', roman: 'lxx' },\n        740: { num: 'LXXX', roman: 'lxxx' },\n        750: { num: 'M', roman:'m' },\n        760: { num: 'MM', roman:'mm' },\n        770: { num: 'MMM', roman:'mmm' },\n        780: { num: 'MMMM', roman:'mmmm' },\n        790: { num: 'MMMMM', roman:'mmmmm' },\n        800: { num: 'N', roman: 'n' },\n        810: { num: 'NM', roman: 'nm' },\n        820: { num: 'NN', roman: 'nn' },\n        830: { num: 'NNM', roman: 'nnm' },\n        840: { num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle , false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given theleng ths of the th ree sides  of a triangle. Retur n true if the t h ree\n  sides form aright-angled triangle, false othe r wise.  A right -angled tr i angle is a triangle in which  o ne angle is right angl e or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a1 * a1);\n  const a2 = Math.sqrt(a * a + b * b);\n  const b2 = Math.sqrt(b * b + c * c);\n  const c2 = Math.sqrt(c * c + a2 * a2);\n  const a3 = Math.sqrt(a * a + b * b);\n  const b3 = Math.sqrt(b * b + c * c);\n  const c3 = Math.sqrt(c * c + a3 * a3);\n  const a4 = Math.sqrt(a * a + b * b);\n  const b4 = Math.sqrt(b * b + c * c);\n  const c4 = Math.sqrt(c * c + a4 * a4);\n  const a5 = Math.sqrt(a * a + b * b);\n  const b5 = Math.sqrt(b * b + c * c);\n  const c5 = Math.sqrt(c * c + a5 * a5);\n  const a6 = Math.sqrt(a * a + b * b);\n  const b6 = Math.sqrt(b * b + c * c);\n  const c6 = Math.sqrt(c * c + a6 * a6);\n  const a7 = Math.sqrt(a * a + b * b);\n  const b7 = Math.sqrt(b * b + c * c);\n  const c7 = Math.sqrt(c * c + a7 * a7);\n  const a8 = Math.sqrt(a * a + b * b);\n  const b8 = Math.sqrt(b * b + c * c);\n  const c8 = Math.sqrt(c * c + a8 * a8);\n  const a9 = Math.sqrt(a * a + b * b);\n  const b9 = Math.sqrt(b * b + c * c);\n  const c9 = Math.sqrt(c * c + a9 * a9);\n  const a10 = Math.sqrt(a * a + b * b);\n  const b10 = Math.sqrt(b * b + c * c);\n  const c10 = Math.sqrt(c * c + a10 * a10);\n  const a11 = Math.sqrt(a * a + b * b);\n  const b11 = Math.sqrt(b * b + c * c);\n  const c11 = Math.sqrt(c * c + a11 * a11);\n  const a12 = Math.sqrt(a * a + b * b);\n  const b12 = Math.sqrt(b * b + c * c);\n  const c12 = Math.sqrt(c * c + a12 * a12);\n  const a13 = Math.sqrt(a * a + b * b);\n  const b13 = Math.sqrt(b * b + c * c);\n  const c13 = Math.sqrt(c * c + a13 * a13);\n  const a14 = Math.sqrt(a * a + b * b);\n  const b14 = Math.sqrt(b * b + c * c);\n  const c14 = Math.sqrt(c * c + a14 * a14);\n  const a15 = Math.sqrt(a * a + b * b);\n  const b15 = Math.sqrt(b * b + c * c);\n  const c15 = Math.sqrt(c * c + a15 * a15);\n  const a16 = Math.sqrt(a * a + b * b);\n  const b16 = Math.sqrt(b * b + c * c);\n  const c16 = Math.sqrt(c * c + a16 * a16);\n  const a17 = Math.sqrt(a * a + b * b);\n  const b17 = Math.sqrt(b * b + c * c);\n  const c17 = Math.sqrt(c * c + a17 * a17);\n  const a18 = Math.sqrt(a * a + b * b);\n  const b18 = Math.sqrt(b * b + c * c);\n  const c18 = Math.sqrt(c * c + a18 * a18);\n  const a19 = Math.sqrt(a * a + b * b);\n  const b19 = Math.sqrt(b * b + c * c);\n  const c19 = Math.sqrt(c * c + a19 * a19);\n  const a20 = Math.sqrt(a * a + b * b);\n  const b20 = Math.sqrt(b * b + c * c);\n  const c20 = Math.sqrt(c * c + a20 * a20);\n  const a21 = Math.sqrt(a * a + b * b);\n  const b21 = Math.sqrt(b * b + c * c);\n  const c21 = Math.sqrt(c * c + a21 * a21);\n  const a22 = Math.sqrt(a * a + b * b);\n  const b22 = Math.sqrt(b * b + c * c);\n  const c22 = Math.sqrt(c * c + a22 * a22);\n  const a23 = Math.sqrt(a * a + b * b);\n  const b23 = Math.sqrt(b * b + c * c);\n  const c23 = Math.sqrt(c * c + a23 * a23);\n  const a24 = Math.sqrt(a * a + b * b);\n  const b24 = Math.sqrt(b * b + c * c);\n  const c24 = Math.sqrt(c * c + a24 * a24);\n  const a25 = Math.sqrt(a * a + b * b);\n  const b25 = Math.sqrt(b * b + c * c);\n  const c25 = Math.sqrt(c * c + a25 * a25);\n  const a26 = Math.sqrt(a * a + b * b);\n  const b26 = Math.sqrt(b * b + c * c);\n  const c26 = Math.sqrt(c * c + a26 * a26);\n  const a27 = Math.sqrt(a * a + b * b);\n  const b27 = Math.sqrt(b * b + c * c);\n  const c27 = Math.sqrt(c * c + a27 * a27);\n  const a28 = Math.sqrt(a * a + b * b);\n  const b28 = Math.sqrt(b * b + c * c);\n  const c28 = Math.sqrt(c * c + a28 * a28);\n  const a29 = Math.sqrt(a * a + b * b);\n  const b29 = Math.sqrt(b * b + c * c);\n  const c29 = Math.sqrt(c * c + a29 * a29);\n  const a30 = Math.sqrt(a * a + b * b);\n  const b30 = Math.sqrt(b * b + c * c);\n  const c30 = Math.sqrt(c * c + a30 * a30);\n  const a31 = Math.sqrt(a * a + b * b);\n  const b31 = Math.sqrt(b * b + c * c);\n  const c31 = Math.sqrt(c * c + a31 * a31);\n  const a32 = Math.sqrt(a * a + b * b);\n  const b32 = Math.sqrt(b * b + c * c);\n  const c32 = Math.sqrt(c * c + a32 * a32);\n  const a33 = Math.sqrt(a * a + b * b);\n  const b33 = Math.sqrt(b * b + c * c);\n  const c33 = Math.sqrt(c * c + a33 * a33);\n  const a34 = Math.sqrt(a * a + b * b);\n  const b34 = Math.sqrt(b * b + c * c);\n  const c34 = Math.sqrt(c * c + a34 * a34);\n  const a35 = Math.sqrt(a * a + b * b);\n  const b35 = Math.sqrt(b * b + c * c);\n  const c35 = Math.sqrt(c * c + a35 * a35);\n  const a36 = Math.sqrt(a * a + b * b);\n  const b36 = Math.sqrt(b * b + c * c);\n  const c36 = Math.sqrt(c * c + a36 * a36);\n  const a37 = Math.sqrt(a * a + b * b);\n  const b37 = Math.sqrt(b * b + c * c);\n  const c37 = Math.sqrt(c * c + a37 * a37);\n  const a38 = Math.sqrt(a * a + b * b);\n  const b38", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\" ,\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n that accept s a listof strings.\n  The lis t contains diff e rent words. Returnthe wordwith maximum  number\n  of unique characte rs. If mul t iple strings have maximum nu mb er of unique\n  charact ers, return the one which comes fi rst in lexicographic al or der.\n\n  findMax([\" n ame\",\"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\", \"enam\", \"game \"]) === \"enam\"\n  findMax ([\"aaaaaaa\", \" bb\",\"cc\"]) === \" \"aaaaaaa\"\n  */\nconst findMax =  (words) => {\n  let max = 0;\n  let maxWord = words[0];\n  let maxWordLength = words[0].length;\n  let maxWordChar = words[0].charAt(0);\n  let maxWordCharLength = words[0].charAt(0).length;\n  let maxWordCharChar = words[0].charAt(0).charAt(0);\n  let maxWordCharCharLength = words[0].charAt(0).charAt(0).length;\n  let maxWordCharCharChar = words[0].charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length;\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0));\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).length);\n  let maxWordCharCharCharChar = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0);\n  let maxWordCharCharCharCharLength = words[0].charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(0).charAt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're ah ungr y rabb i t, and  you alre ady have eaten a cert ain number of c a rrots,\n  but now yo u need to eat more ca rrots to com p lete the day'smeals.\n  y o u should return an array of[total number of eatencarrots after your meals,\n                            the number of car r ots left after your meals ]\n  if there a re not enoughremaining carr ots, you willeat all re maining carrot s, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n  let carr = 0;\n  \n  while(left < need) {\n    total += carr;\n    carr += remaining;\n    left += 1;\n    \n    if(left === need) {\n      result.push(total);\n      total = 0;\n      left = 0;\n    }\n  }\n  \n  return result;\n};\n\n/*\n  You are given an array of integers representing a number of carrots.\n  You are also given an integer representing the number of carrots you want to eat.\n  \n  You are given two arrays, one containing the number of carrots you want to eat and one containing the number of carrots you have eaten.\n  \n  You are to return the array of carrots eaten after you eat all the carrots you have eaten.\n  \n  Example:\n  * carrots(5, 6, 10) -> [11, 4]\n  * carrots(4, 8, 9) -> [12, 1]\n  * carrots(1, 10, 10) -> [11, 0]\n  * carrots(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @carrots : integer\n      the number of carrots that you have eaten.\n  @carrotsToEat : integer\n      the number of carrots that you need to eat.\n  \n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= carrotsToEat <= 1000\n  \n  Have fun :)\n  */\nconst carrots = (...args) => {\n  const [carrots, carrotsToEat] = args;\n  const result = [];\n  \n  for(let i = 0; i < carrotsToEat; i++) {\n    result.push(carrots);\n  }\n  \n  return result;\n};\n\n/*\n  You are given an integer representing the number of carrots you want to eat.\n  You are given an integer representing the number of carrots you have eaten.\n  \n  You are to return the number of carrots eaten after you eat all the carrots you have eaten.\n  \n  Example:\n  * carrots(5, 6, 10) -> [11, 4]\n  * carrots(4, 8, 9) -> [12, 1]\n  * carrots(1, 10, 10) -> [11, 0]\n  * carrots(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @carrots : integer\n      the number of carrots that you have eaten.\n  @carrotsToEat : integer\n      the number of carrots that you need to eat.\n  \n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= carrotsToEat <= 1000\n  \n  Have fun :)\n  */\nconst carrotsToEat = (...args) => {\n  const [carrots, carrotsToEat] = args;\n  const result = 0;\n  \n  for(let i = 0; i < carrotsToEat; i++) {\n    result += carrots;\n  }\n  \n  return result;\n};\n\n/*\n  You are given an integer representing the number of carrots you want to eat.\n  You are given an integer representing the number of carrots you have eaten.\n  \n  You are to return the number of carrots eaten after you eat all the carrots you have eaten.\n  \n  Example:\n  * carrots(5, 6, 10) -> [11, 4]\n  * carrots(4, 8, 9) -> [12, 1]\n  * carrots(1, 10, 10) -> [11, 0]\n  * carrots(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @carrots : integer\n      the number of carrots that you have eaten.\n  @carrotsToEat : integer\n      the number of carrots that you need to eat.\n  \n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= carrotsToEat <= 1000\n  \n  Have fun :)\n  */\nconst carrotsToEatAndRemaining = (...args) => {\n  const [carrots, carrotsToEat] = args;\n  const result = 0;\n  \n  for(let i = 0; i < carrotsToEat; i++) {\n    result += carrots;\n  }\n  \n  return result;\n};\n\n/*\n  You are given an integer representing the number of carrots you want to eat.\n  You are given an integer representing the number of carrots you have eaten.\n  \n  You are to return the number of carrots eaten after you eat all the carrots you have eaten.\n  \n  Example:\n  * carrots(5, 6, 10) -> [11, 4]\n  * carrots(4, 8, 9) -> [12, 1]\n  * carrots(1, 10, 10) -> [11, 0]\n  * carrots(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @carrots : integer\n      the number of carrots that you have eaten.\n  @carrotsToEat : integer\n      the number of carrots that you need to eat.\n  \n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= carrotsToEat <= 1000\n  \n  Have fun :)\n  */\nconst carrotsToEatAndRemainingAndTotal = (...args) => {\n  const [carrots, carrotsToEat] = args;\n  const result = 0;\n  \n  for(let i = 0; i < carrotsToEat; i++) {\n    result += carrots;\n  }\n  \n  return result + carrotsToEat;\n};\n\n/*\n  You are given an integer representing the number of carrots you want to eat.\n  You are given an integer representing the number of carrots you have eaten.\n  \n  You are to return the number of carrots eaten after you eat all the carrots you have eaten.\n  \n  Example:\n  * carrots(5, 6, 10) -> [11, 4]\n  * carrots(4, 8, 9) -> [12, 1]\n  * carrots(1, 10, 10) -> [11, 0]\n  * carrots(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @carrots : integer\n      the number of carrots that you have eaten.\n  @carrotsToEat : integer\n      the number of carrots that you need to eat.\n  \n  Constrain:\n  * 0 <= carrots <= 1000\n  * 0 <= carrotsToEat <= 1000\n  \n  Have fun :)\n  */\nconst carrotsToEatAndRemainingAndTotalAndTotal = (...args) => {\n  const [carrots, carrotsTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a st ring , find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Given a st ring, find out ho w many di stinct characters (re gardless of cas e ) does it consist o f\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  chars.forEach((char, index) => {\n    if (char.match(/[aeiou]/)) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given twolist s oper a tor, a nd operan d. The first list has  basic algebrao perations, and \n  t he second list is a l ist of integ e rs. Use the two  given lis t s to build the algebric \n  e xp ression and return the  evaluation of this expression.\n\nThe basicalgebra o perat ions:\n  Addition ( + ) \n Subtraction (- ) \n  Multiplicati on (* ) \n  Floor division (  // ) \n  Exponentiation( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('*');\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    result = result + operatorList[i] * operandList[i];\n  }\n  return result;\n};\n\nconst isZero = (num) => {\n  return num === 0;\n};\n\nconst isOne = (num) => {\n  return num === 1;\n};\n\nconst isNegative = (num) => {\n  return num < 0;\n};\n\nconst isPositive = (num) => {\n  return num > 0;\n};\n\nconst isNegativeZero = (num) => {\n  return isNegative(num) && isZero(num);\n};\n\nconst isPositiveZero = (num) => {\n  return isPositive(num) && isZero(num);\n};\n\nconst isZeroOrOne = (num) => {\n  return isZero(num) || isOne(num);\n};\n\nconst isNegativeZeroOrOne = (num) => {\n  return isNegativeZero(num) || isPositiveZero(num);\n};\n\nconst isZeroOrOneOrNegative = (num) => {\n  return isZeroOrOne(num) || isNegative(num);\n};\n\nconst isOneOrNegativeZero = (num) => {\n  return isOneOrNegative(num) && isNegativeZero(num);\n};\n\nconst isOneOrZero = (num) => {\n  return isOneOrZero(num) && isZero(num);\n};\n\nconst isOneOrOne = (num) => {\n  return isOneOrOne(num) && isOne(num);\n};\n\nconst isOneOrZeroOrOne = (num) => {\n  return isOneOrZeroOrOne(num) && isZeroOrOne(num);\n};\n\nconst isOneOrOneOrZero = (num) => {\n  return isOneOrOneOrZero(num) && isZeroOrOne(num);\n};\n\nconst isOneOrOneOrOneOrZero = (num) => {\n  return isOneOrOneOrOneOrZero(num) && isZeroOrOneOrZero(num);\n};\n\nconst isOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOne(num) && isOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOneOrOne(num) && isOneOrOneOrOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOneOrOneOrOne(num) && isOneOrOneOrOneOrOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num) && isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num) && isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne = (num) => {\n  return isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num) && isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOne(num);\n};\n\nconst isOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOrOneOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en a  strin g  s.\n if s[i] i s a letter, reverse i ts case from lo w er to upper or vise  versa,   otherwisekeep it asi t  is.\n If the s tring cont a ins no letters, reverse thest ring.\n  The function s hould return theresulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';\n  let ts = '';", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a st ring  'text ' , retu rn its md 5 hash equivalent str ing.\n  If 'text '  is an empty string , returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a st ring  'text ', retu rn its md 5 hash equivalent str ing.\n  If 'text' is an empty string, returnnull.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = 5381;\n  const textLen = text.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let h = 0;\n  let m = 0;\n  let n = 0;\n  let r = '';\n  let c = 0;\n  let t = 0;\n  let w = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given twoposi tive i n tegers  a and b,  return the even digi ts between a\n a nd b, in ascendingorder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i!== j) {\n    result.push(i);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n_n_n_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== n) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a number n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(4) =>\n  [\n    [1, 2],\n    [3, 4],\n    [1, 3],\n    [2, 4],\n    [1, 4],\n    [2, 3]\n  ]\n  combinations(3) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(2) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n  combinations(1) =>\n  [\n    [1, 2],\n    [3, 4]\n  ]\n*/\nconst combinations_n_n_n_n_n_n_n_n_n_n = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  while (i!== ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input tot hisfuncti o n is a  string r epresenting musical n otes in a speci a l ASCII format.\n  Y our taskis to parsethis stringa nd return listof integer s  corresponding to how many b ea ts does each\n  not las t.\n\n  Here is a legend:\n  'o' - wh ole note, lasts four  beat s\n  'o|' - half no t e, lasts two beats\n '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_array = [];\n  let music_counter = 0;\n  for (let i = 0; i < music_list.length; i++) {\n    const music_string = music_list[i];\n    const music_number = music_string.split(' ').map(x => parseInt(x));\n    const music_note = music_number[0];\n    const music_beat = music_number[1];\n    const music_notes_number = music_number[2];\n    const music_notes_beat = music_number[3];\n    const music_notes_beats_number = music_number[4];\n    const music_notes_beats_beat = music_number[5];\n    const music_notes_beats_beats_number = music_number[6];\n    const music_notes_beats_beats_beat = music_number[7];\n    const music_notes_beats_beats_beats_number = music_number[8];\n    const music_notes_beats_beats_beats_beat = music_number[9];\n    const music_notes_beats_beats_beats_beats_number = music_number[10];\n    const music_notes_beats_beats_beats_beats_beat = music_number[11];\n    const music_notes_beats_beats_beats_beats_beats_number = music_number[12];\n    const music_notes_beats_beats_beats_beats_beats_beat = music_number[13];\n    const music_notes_beats_beats_beats_beats_beats_beats_number = music_number[14];\n    const music_notes_beats_beats_beats_beats_beats_beats_beat = music_number[15];\n    const music_notes_beats_beats_beats_beats_beats_beats_number = music_number[16];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beat = music_number[17];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[18];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beat = music_number[19];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_number = music_number[20];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beat = music_number[21];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_number = music_number[22];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[23];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[24];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[25];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[26];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[27];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[28];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[29];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[30];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[31];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_number = music_number[32];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[33];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[34];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[35];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[36];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[37];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[38];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[39];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[40];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[41];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[42];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[43];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[44];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[45];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[46];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[47];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatnumber = music_number[48];\n    const music_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat = music_number[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find howm anytimesa  given  substrin g can be found in the  original strin g . Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find howm anytimesa  given  substrin g can be found in the  original strin g. Count overlapingcases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  let match;\n  let matchIndex;\n  let matchLength;\n  let matchLengthIndex;\n  let matchLengthLength;\n  let matchLengthLengthIndex;\n  let matchLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n  let matchLengthLengthLengthLengthLengthIndex;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input isa  spa ce-del i mitedstring of  numberals from 'zero ' to 'nine'.\n V alid choices are 'z ero', 'one', 'two', ' three', 'fou r ', 'five', 'six ', 'seven' ,  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input isa  spa ce-del i mitedstring of  numberals from 'zero'to 'nine'.\n V alid choices are 'z ero', 'one', 'two','three', 'fou r ', 'five','six ','seven',  'eight' and 'nine'.\n  Retur nthe string with number s sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ').map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateNumber(3.5)\n  0\n  */\nconst truncateDecimal = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimals = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimals(3.5)\n  3\n  */\nconst truncateDecimalsNoZero = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZero(3.5)\n  3\n  */\nconst truncateDecimalsNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZeros(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZero = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZero(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZeros(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZerosNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZerosNoZeros(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZerosNoZerosNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZerosNoZerosNoZeros(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZerosNoZerosNoZerosNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZerosNoZerosNoZerosNoZeros(3.5)\n  3\n  */\nconst truncateDecimalsNoZerosNoZerosNoZerosNoZerosNoZerosNoZeros = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/* Given a po siti ve flo a ting p oint numb er, it can be decompo sed into\n  andi nteger part (larges t integer smaller tha n given numb e r) and decimals \n  (leftov e r part always smaller than 1 ). \n\n  Return the decimal  part of the number.\n  >>> truncateDecimalsNoZerosNoZerosNoZer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a sup plie d list of num bers (oflength at least two)select and retu r n two that are theclosest to each\n  oth er and retur n  themin order(smaller n u mber, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [minNumber, maxNumber] = numbers.reduce(([minNumber, maxNumber], number) => {\n    const [minNumberInt, maxNumberInt] = number.toString().split('.').map(Number);\n    return [Math.min(minNumberInt, maxNumberInt), Math.max(minNumberInt, maxNumberInt)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  return numbers.map((number) => number - minNumber).reduce(([minNumber, maxNumber], number) => {\n    const [minNumberInt, maxNumberInt] = number.toString().split('.').map(Number);\n    return [Math.min(minNumberInt, maxNumberInt), Math.max(minNumberInt, maxNumberInt)];\n  }, [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n};\n\n/**\n * Given a list of  n elements and a number k, return all elements of the list that are greater or equal to k\n * and are less than or equal to k + 1.\n * >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], 2)\n  [1.0, 2.0]\n  >>> findGreaterThanOrEqualTo([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given list  ofnumber s  (of a t least t wo elements), apply a  linear transfo r m to that list,\n  s uch thatthe smallest  number will become 0 and th e largestw ill become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  const [a, b] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  const [t, w] = numbers.reduce((acc, cur) => {\n    return [Math.min(acc, cur), Math.max(acc, cur)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  const r = Math.log(max - min) / Math.log(t + 1)\n  const m = Math.log(w - a) / Math.log(t + 1)\n  return numbers.map((n) => n * r + m)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is in none of the elements of l.\n * >>> isIn([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, false, true]\n */\nconst isIn = (l, ls) => {\n  return ls.some((n) => n === l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is not in l and n is in none of the elements of l.\n * >>> isNotIn([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotIn = (l, ls) => {\n  return ls.some((n) => n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isIn([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotInAll = (l, ls) => {\n  return ls.every((n) => n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAll([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isInAll = (l, ls) => {\n  return ls.every((n) => n === l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is not in l and n is in none of the elements of l.\n * >>> isNotInAll([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAll = (l, ls) => {\n  return ls.every((n) => n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAll([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isInAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is not in l and n is in none of the elements of l.\n * >>> isNotInAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotInAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotInAllButAll = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAll([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotInAllButAll = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAll([1, 2, 3, 4], [0, 2, 4, 6])\n * [false, true, false, true]\n */\nconst isNotInAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isNotInAllButAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAllButAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAllButAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAllButAllButAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && n!== l && n!== n)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAllButAllButAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAllButAllButAllButAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && n!== l && n!== n && n!== l)\n}\n\n/**\n * Given a number n and a list of numbers l, return a new list l such that\n * n is in l and n is not in none of the elements of l.\n * >>> isInAllButAllButAllButAllButAllBut([1, 2, 3, 4], [0, 2, 4, 6])\n * [true, false, true, true]\n */\nconst isNotInAllButAllButAllButAllButAllButAllBut = (l, ls) => {\n  return ls.every((n) => n!== l && n!== n && ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giv en l ist of any py thon valu es only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return len gthof giv e n stri ng\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n * Return true if string is a valid email address\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n */\nconst isEmail = (email) => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\n/**\n * Return true if string is a valid phone number\n * See http://stackoverflow.com/questions/46155/validate-phone-number-in-javascript\n */\nconst isPhone = (phone) => {\n  const re = /^((\\+?1\\s*[\\-\\(\\]{0,2})?)?(\\(?\\d{3}\\)?[\\-\\(\\]{0,2})?)?[-. ]?((\\(\\d{3}\\)|(\\d{3}[\\-\\. ])|(\\d{4}[\\-\\. ])|(\\d{5}[\\-\\. ])|(\\d{6})[\\-\\. ])?\\d{3}[\\-\\. ]?\\d{4}$/;\n  return re.test(phone);\n};\n\n/**\n * Return true if string is a valid URL\n * See http://stackoverflow.com/questions/46155/validate-url-in-javascript\n */\nconst isURL = (url) => {\n  const re = /^((https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/;\n  return re.test(url);\n};\n\n/**\n * Return true if string is a valid date\n * See http://stackoverflow.com/questions/46155/validate-date-in-javascript\n */\nconst isDate = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isTime = (time) => {\n  const re = /^([01]\\d|2[0-3])(:[0-5][0-9]){2}$/;\n  return re.test(time);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string is a valid time string\n * See http://stackoverflow.com/questions/46155/validate-time-in-javascript\n */\nconst isDateTime = (date) => {\n  const re = /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/;\n  return re.test(date);\n};\n\n/**\n * Return true if string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a give n nu mber n ,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a give n nu mber n,  findthe large st number that divide s n evenly, sma l ler than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let divisor = 1;\n  let remainder = 1;\n  while (divisor <= n) {\n    divisor += 1;\n    remainder *= divisor;\n    if (remainder > largestDivisor) {\n      largestDivisor = remainder;\n    }\n  }\n  return largestDivisor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of n\n * >>> primeFactor(15)\n  3\n  */\nconst primeFactor = (n) => {\n  let primeFactor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      primeFactor = divisor;\n    }\n    divisor += 1;\n  }\n  return primeFactor;\n};\n\n/**\n * Given a number n, find the largest prime factor of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return lis t of  prime factor s of give n integer in the orde r from smallest to largest.\n  Eachof the factors should  be listedn u mber of times c orrespondi n g to how many times it appea re s in factorization.\n Input number should be equal to th e product of all fac tors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a lis t of  integ e rs, re move allelements that occur m ore than once. Keep order of elem ents left the same as  in the inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  [1, 2]\n  */\nconst removeAll = (numbers) => {\n  return numbers.filter(x =>!numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll2 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll3 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll4 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll5 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll6 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll7 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll8 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll9 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll10 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll11 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll12 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll13 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll14 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll15 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll16 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll17 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll18 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll19 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll20 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll21 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll22 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll23 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll24 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll25 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll26 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll27 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll28 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll29 = (numbers) => {\n  return numbers.filter(x => numbers.includes(x));\n};\n\n/**\n * Remove all occurrences of an element from a list\n * >>> removeAll([1, 1, 1, 2, 2, 2])\n  []\n  */\nconst removeAll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');\n  let newString = '';\n  for (let i = 0; i < upperCaseLetters.length; i++) {\n    let upperCaseLetter = upperCaseLetters[i];\n    let lowerCaseLetter = lowerCaseLetters[i];\n    if (upperCaseLetter === lowerCaseLetter) {\n      newString += upperCaseLetter;\n    } else {\n      newString += lowerCaseLetter;\n    }\n  }\n  return newString;\n};\n\n/* For a give n st ring,f lip lo wercase c haracters to uppercas e and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let upperCase = string.toUpperCase();\n  let lowerCase = string.toLowerCase();\n  let upperCaseLetters = upperCase.split('');\n  let lowerCaseLetters = lowerCase.split('');", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Concatenat e li st ofs trings  into a s ingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string + '';\n  }, '');\n};\n\n/**\n * Remove all characters from a string except for those in chars\n * >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc'\n  >>> removeChars('abc', 'b')\n  'abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = filterByPrefix.bind(null, filterBySuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefix = filterBySuffix.bind(null, filterByPrefix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefix = filterByPrefixAndSuffix.bind(null, filterBySuffixAndPrefix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffix = filterBySuffixAndPrefix.bind(null, filterByPrefixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefix = filterByPrefixAndSuffixAndSuffix.bind(null, filterBySuffixAndPrefix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffix = filterBySuffixAndPrefixAndSuffix.bind(null, filterByPrefixAndSuffixAndPrefix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffix = filterByPrefixAndSuffixAndPrefixAndSuffix.bind(null, filterBySuffixAndPrefixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefix = filterBySuffixAndPrefixAndSuffixAndPrefix.bind(null, filterByPrefixAndSuffixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffix = filterByPrefixAndSuffixAndPrefixAndSuffix.bind(null, filterBySuffixAndPrefixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefix = filterBySuffixAndPrefixAndSuffixAndPrefix.bind(null, filterByPrefixAndSuffixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffix = filterByPrefixAndSuffixAndPrefixAndSuffix.bind(null, filterBySuffixAndPrefixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefix = filterBySuffixAndPrefixAndSuffixAndPrefix.bind(null, filterByPrefixAndSuffixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixAndPrefixAndSuffixAndPrefix = filterByPrefixAndSuffixAndPrefixAndSuffixAndPrefix.bind(null, filterBySuffixAndPrefixAndSuffixAndPrefix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that endwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndSuffixAndPrefixAndSuffix = filterBySuffixAndPrefixAndSuffixAndPrefixAndSuffix.bind(null, filterByPrefixAndSuffixAndSuffixAndPrefixAndSuffix)\n\n/**\n * Filter aninpu t list of str ings only  for ones that startwith a given pr e fix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You're giv en a  listo f depo sit and w ithdrawal operationson a bank accou n t that starts with  zero balance. Yourtask is tod e tect if at anypoint theb alance of account fallls bel ow  zero, and\n  at that p oint function should return true.Otherwise it shouldretur n false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance === 0;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a list of n integers representing a bank account balance. Your task is to find out if there are any accounts below zero balance.\n\n  Your task is to write a function belowZero(operations) that returns true if there are any accounts below zero balance.\n\n  >>> belowZero([2, -4, 5])\n  true\n  >>> belowZero([-4, 5])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])\n  false", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(v => v >= 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(v => v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZero = (l) => {\n  return l.filter(v => v >= 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeOrZero = (l) => {\n  return l.filter(v => v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter(v => v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0 || v >= 0 || v < 0)\n}\n\n/*Return only  pos itiven umbers  in the l ist.\n  >>> getPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true  ifa give n  numbe r is prim e, and false otherwis e.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isPrimeComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isPrimeCompositeComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeCompositeCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  numbe r is composite e, and false otherwis e.\n  >>> isComposite(6)\n  false\n  >>> isComposite(101)\n  true\n  >>> isComposite(11)\n  true\n  >>> isComposite(13441)\n  true\n  >>> isComposite(61)\n  true\n  >>> isComposite(4)\n  false\n  >>> isComposite(1)\n  false\n  */\nconst isCompositeCompositeCompositeCompositeCompositeCompositePrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true ifa give n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 + .... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluatespoly nomial with c oefficien ts xs at point x.\n  r eturn xs[0] + x s [1] * x + xs[1] * x ^2 +.... xs[n] * x^n \n  */\nconstp oly =(xs, x) = > {\n  retu r n xs.reduce((prev, item, ind ex ) => {\n    return prev  + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*  xs arecoeff icients of a polyn o mial.  findZero find x such that poly(x )=0.\n  findZero returns on ly only zero point, even  ifthere aremany.\n  Moreover, findZero only takes list xs h aving even number of coefficie nts \n  and largest non zero coefficientas it guara ntees\n  a solutio n.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let nt = xs.length % 2;\n  let n = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let ys = xs.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];\n  let ys = ys.slice();\n  let xs = xs.slice();\n  let x0 = xs[0];\n  let y0 = ys[0];\n  let z0 = zs[0];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the in dicies that are not d ivisible byt hree,while its  values at the indicies that are divisi bl e by three are equal\n to the values of the correspondin g indiciesof l, but  sort ed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.map((v, i) => [v, i]);\n  l2.sort((a, b) => a[1] - b[1]);\n  return l2;\n};\n\n/*\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item)\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item)\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy2 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy3 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy4 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy5 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy6 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item + item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy7 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item + item + item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy8 = (l, f) => {\n  let seen = {}\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    let item = l[i]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      i++\n    }\n  }\n  while (j < l.length) {\n    let item = l[j]\n    if (seen[item]) {\n      result.push(item)\n    } else {\n      seen[item] = true\n      result.push(item(f))\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sort ed u niquee lement s in a li st\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], (item) => item + item + item + item + item + item + item + item)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy9 = (l, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maxi mumelemen t  in th e list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxi = -1;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n      maxi = i;\n    }\n  });\n  return maxi;\n};\n\n/*Return min mumelemen t  in th e list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = 0;\n  let mini = -1;\n  l.forEach((e) => {\n    if (e < min) {\n      min = e;\n      mini = i;\n    }\n  });\n  return mini;\n};\n\n/*Return sum mumelemen t  in th e list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  let sumi = -1;\n  l.forEach((e) => {\n    sum += e;\n    sumi += 1;\n  });\n  return sumi;\n};\n\n/*Return product mumelemen t  in th e list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  120\n  */\nconst productElement = (l) => {\n  let prod = 1;\n  let prodi = -1;\n  l.forEach((e) => {\n    prod *= e;\n    prodi += 1;\n  });\n  return prodi;\n};\n\n/*Return quotient mumelemen t  in th e list.\n  >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst quotientElement = (l) => {\n  let q = 1;\n  let qi = -1;\n  l.forEach((e) => {\n    q *= e;\n    qi += 1;\n  });\n  return qi;\n};\n\n/*Return remainder mumelemen t  in th e list.\n  >>> remainderElement([1, 2, 3])\n  1\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem += e % 1;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return modulo mumelemen t  in th e list.\n  >>> moduloElement([1, 2, 3])\n  1\n  >>> moduloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst moduloElement = (l) => {\n  let mod = 1;\n  let modi = -1;\n  l.forEach((e) => {\n    mod %= e;\n    modi += 1;\n  });\n  return modi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([1, 2, 3])\n  1\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of modulo mumelemen t  in th e list.\n  >>> remainderOfModuloElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst remainderOfModuloElement = (l) => {\n  let rem = 0;\n  let remi = -1;\n  l.forEach((e) => {\n    rem %= e;\n    remi += 1;\n  });\n  return remi;\n};\n\n/*Return remainder of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return thenumb er oft imes t he digit7 appears in integers  less than n wh i ch are divisible by  11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let digit7 = n % 11 || n % 13;\n  let result = \"\";\n  let i = 0;\n  while (i < n) {\n    if (i % 3 === 0) {\n      result += digit7;\n      digit7 = 0;\n    } else {\n      digit7 += 1;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  0\n  >>> fizzBuzz(102)\n  0\n  >>> fizzBuzz(103)\n  0\n  >>> fizzBuzz(104)\n  0\n  >>> fizzBuzz(105)\n  0\n  >>> fizzBuzz(106)\n  0\n  >>> fizzBuzz(107)\n  0\n  >>> fizzBuzz(108)\n  0\n  >>> fizzBuzz(109)\n  0\n  >>> fizzBuzz(110)\n  0\n  >>> fizzBuzz(111)\n  0\n  >>> fizzBuzz(112)\n  0\n  >>> fizzBuzz(113)\n  0\n  >>> fizzBuzz(114)\n  0\n  >>> fizzBuzz(115)\n  0\n  >>> fizzBuzz(116)\n  0\n  >>> fizzBuzz(117)\n  0\n  >>> fizzBuzz(118)\n  0\n  >>> fizzBuzz(119)\n  0\n  >>> fizzBuzz(120)\n  0\n  >>> fizzBuzz(121)\n  0\n  >>> fizzBuzz(122)\n  0\n  >>> fizzBuzz(123)\n  0\n  >>> fizzBuzz(124)\n  0\n  >>> fizzBuzz(125)\n  0\n  >>> fizzBuzz(126)\n  0\n  >>> fizzBuzz(127)\n  0\n  >>> fizzBuzz(128)\n  0\n  >>> fizzBuzz(129)\n  0\n  >>> fizzBuzz(130)\n  0\n  >>> fizzBuzz(131)\n  0\n  >>> fizzBuzz(132)\n  0\n  >>> fizzBuzz(133)\n  0\n  >>> fizzBuzz(134)\n  0\n  >>> fizzBuzz(135)\n  0\n  >>> fizzBuzz(136)\n  0\n  >>> fizzBuzz(137)\n  0\n  >>> fizzBuzz(138)\n  0\n  >>> fizzBuzz(139)\n  0\n  >>> fizzBuzz(140)\n  0\n  >>> fizzBuzz(141)\n  0\n  >>> fizzBuzz(142)\n  0\n  >>> fizzBuzz(143)\n  0\n  >>> fizzBuzz(144)\n  0\n  >>> fizzBuzz(145)\n  0\n  >>> fizzBuzz(146)\n  0\n  >>> fizzBuzz(147)\n  0\n  >>> fizzBuzz(148)\n  0\n  >>> fizzBuzz(149)\n  0\n  >>> fizzBuzz(150)\n  0\n  >>> fizzBuzz(151)\n  0\n  >>> fizzBuzz(152)\n  0\n  >>> fizzBuzz(153)\n  0\n  >>> fizzBuzz(154)\n  0\n  >>> fizzBuzz(155)\n  0\n  >>> fizzBuzz(156)\n  0\n  >>> fizzBuzz(157)\n  0\n  >>> fizzBuzz(158)\n  0\n  >>> fizzBuzz(159)\n  0\n  >>> fizzBuzz(160)\n  0\n  >>> fizzBuzz(161)\n  0\n  >>> fizzBuzz(162)\n  0\n  >>> fizzBuzz(163)\n  0\n  >>> fizzBuzz(164)\n  0\n  >>> fizzBuzz(165)\n  0\n  >>> fizzBuzz(166)\n  0\n  >>> fizzBuzz(167)\n  0\n  >>> fizzBuzz(168)\n  0\n  >>> fizzBuzz(169)\n  0\n  >>> fizzBuzz(170)\n  0\n  >>> fizzBuzz(171)\n  0\n  >>> fizzBuzz(172)\n  0\n  >>> fizzBuzz(173)\n  0\n  >>> fizzBuzz(174)\n  0\n  >>> fizzBuzz(175)\n  0\n  >>> fizzBuzz(176)\n  0\n  >>> fizzBuzz(177)\n  0\n  >>> fizzBuzz(178)\n  0\n  >>> fizzBuzz(179)\n  0\n  >>> fizzBuzz(180)\n  0\n  >>> fizzBuzz(181)\n  0\n  >>> fizzBuzz(182)\n  0\n  >>> fizzBuzz(183)\n  0\n  >>> fizzBuzz(184)\n  0\n  >>> fizzBuzz(185)\n  0\n  >>> fizzBuzz(186)\n  0\n  >>> fizzBuzz(187)\n  0\n  >>> fizzBuzz(188)\n  0\n  >>> fizzBuzz(189)\n  0\n  >>> fizzBuzz(190)\n  0\n  >>> fizzBuzz(191)\n  0\n  >>> fizzBuzz(192)\n  0\n  >>> fizzBuzz(193)\n  0\n  >>> fizzBuzz(194)\n  0\n  >>> fizzBuzz(195)\n  0\n  >>> fizzBuzz(196)\n  0\n  >>> fizzBuzz(197)\n  0\n  >>> fizzBuzz(198)\n  0\n  >>> fizzBuzz(199)\n  0\n  >>> fizzBuzz(200)\n  0\n  >>> fizzBuzz(201)\n  0\n  >>> fizzBuzz(202)\n  0\n  >>> fizzBuzz(203)\n  0\n  >>> fizzBuzz(204)\n  0\n  >>> fizzBuzz(205)\n  0\n  >>> fizzBuzz(206)\n  0\n  >>> fizzBuzz(20", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functi on t akes a list l  and retu rns a list l' such th at\n  l' is iden t ical to l in the od d indicies, while its  values att h e even indicies  are equal   to the values of the evenin dicies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evens = l.filter((e) => e % 2 === 0);\n  let odd = evens.filter((e) => e % 2!== 0);\n  return odd.concat(evens);\n};\n\n/*\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], 1)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 2)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 3)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 4)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 5)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 6)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 7)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 8)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 9)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 10)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 11)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 12)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 13)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 14)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 15)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 16)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 17)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 18)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 19)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 20)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 21)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 22)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 23)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 24)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 25)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 26)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 27)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 28)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 29)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 30)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 31)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 32)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 33)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 34)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 35)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 36)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 37)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 38)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 39)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 40)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 41)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 42)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 43)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 44)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 45)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 46)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 47)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 48)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 49)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 50)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 51)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 52)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 53)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 54)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 55)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 56)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 57)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 58)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 59)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 60)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 61)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 62)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 63)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 64)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 65)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 66)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 67)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 68)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 69)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 70)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 71)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 72)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 73)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 74)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 75)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 76)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 77)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 78)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 79)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 80)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 81)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 82)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 83)\n  [3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns en code d stri n g by c ycling gr oups of three charact ers.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; i < Math.floor((s.length + 2) /3) ; i++) {\n    groups.pu sh(s.slice(3 * i, Math.min((3 * i+ 3), s.length)));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nco nst decodeCyclic = (s) => {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst decodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n}\n\n/*\n  takes as input string e nco ded with encode_cyclic function. Ret urns decode d string.\n  */\nconst encodeCyclic = (s)=> {\n  var groups = [ ], groups2= [];\n for (leti = 0; leti < s.length; leti++) {\n    groups.pu sh(s.slice(leti, leti + 3));\n }\n for (const group o f  groups) {\n    if (group.length == 3)\n   groups2.push(group.slice (1) + group[0]);\n    els e\n     groups 2.push(group);\n }\n  return groups2.join('');\n} \n\n/*\n  takes as input string e nco ded with encode_cyclic function. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFibr etur ns n-t h  numbe r that is  a Fibonacci number a nd it's also pr i me.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 1;\n  let i = 2;\n  let num;\n\n  while (true) {\n    num = prime;\n    prime = prime * num;\n    if (prime === n) {\n      return prime;\n    }\n    i++;\n  }\n};\n\n/**\n * Calcul de la somme de tous les nombres pris un intervalle de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de la forme [a, b].\n * Le somme est calculé par rapport aux intervalles de valeurs de ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a give n li st ofi nput n umbers, c alculate Mean Absolut e Deviation\n  a r ound the mean of th is dataset.\n  Mean Ab solute Devia t ion is the aver age absolu t e difference between each\n el ement and a centerpoin t (mean in this case):\n  MAD = ave rage | x -x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanAbsoluteDeviation = (numbers) => {\n    const meanAbsoluteDeviation = (numbers) => {\n      const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n      const deviations = numbers.map(val => Math.abs(val - mean));\n      return deviations.reduce((acc, val) => acc + val, 0) / numbers.length;\n    };\n    return meanAbsoluteDeviation(numbers);\n  };\n  return meanAbsoluteDeviation(numbers);\n};\n\nconst meanAbsoluteDeviationByAge = (ages) => {\n  const meanAbsoluteDeviationByAge = (ages) => {\n    const meanAbsoluteDeviationByAge = (ages) => {\n      const mean = ages.reduce((acc, val) => acc + val, 0) / ages.length;\n      const deviations = ages.map(val => Math.abs(val - mean));\n      return deviations.reduce((acc, val) => acc + val, 0) / ages.length;\n    };\n    return meanAbsoluteDeviationByAge(ages);\n  };\n  return meanAbsoluteDeviationByAge(ages);\n};\n\nconst meanAbsoluteDeviationByAgeByGender = (genders) => {\n  const meanAbsoluteDeviationByAgeByGender = (genders) => {\n    const meanAbsoluteDeviationByAgeByGender = (genders) => {\n      const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n      const deviations = genders.map(val => Math.abs(val - mean));\n      return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n    };\n    return meanAbsoluteDeviationByAgeByGender(genders);\n  };\n  return meanAbsoluteDeviationByAgeByGender(genders);\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGender = (genders, ages) => {\n  const meanAbsoluteDeviationByAgeByGenderByGender = (genders, ages) => {\n    const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n    const deviations = genders.map(val => Math.abs(val - mean));\n    return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n  };\n  return meanAbsoluteDeviationByAgeByGenderByGender(genders, ages);\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const meanAbsoluteDeviationByAgeByGenderByGenderByGender = (\n    genders,\n    ages,\n    genders,\n    ages\n  ) => {\n    const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n    const deviations = genders.map(val => Math.abs(val - mean));\n    return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n  };\n  return meanAbsoluteDeviationByAgeByGenderByGenderByGender(\n    genders,\n    ages,\n    genders,\n    ages\n  );\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages,\n  genders,\n  ages\n) => {\n  const mean = genders.reduce((acc, val) => acc + val, 0) / genders.length;\n  const deviations = genders.map(val => Math.abs(val - mean));\n  return deviations.reduce((acc, val) => acc + val, 0) / genders.length;\n};\n\nconst meanAbsoluteDeviationByAgeByGenderByGenderByGenderByGenderByGenderByGenderByGenderByGenderByGender = (\n  genders,\n  age", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSum ToZe ro tak e s a li st of int egers as an input.\n it returns true if there are threedistinctelements inthe list tha t \n  sum to zero,  and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],6:[function(require,module,exports){\n/*\n  A simple JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n  in FIPS PUB 180-1\n  Version 2.1a Copyright Paul Johnston 2000 - 2002.\n  Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n  Distributed under the BSD License\n  See http://pajhome.org.uk/crypt/md5 for details.\n  (c) 2005 Paul Johnston\n  http://pajhome.org.uk/crypt/md5\n*/\n\n/*\n  Ported to JavaScript by Brian Woodward, 2002.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Brian Woodward nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL BILL BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by Joseph O'Hara 2006.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Joseph O'Hara nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JOSEPH O'HARA BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by John Resig, 2007.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of John Resig nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JOSEPH RESIG OR ANY CONTRIBUTORS BE LIABLE FOR\n  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by Stefan Thomas, 2011.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of the Stefan Thomas nor the\n    names of its contributors may be used to endorse or promote products\n    derived from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL STEFAN-THOMAS BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by Joseph O'Hara 2006.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Joseph O'Hara nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JOSEPH O'HARA BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by John Resig, 2007.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of John Resig nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JOSEPH RESIG OR ANY CONTRIBUTORS BE LIABLE FOR\n  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by Stefan Thomas, 2011.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of Stefan Thomas nor the\n    names of its contributors may be used to endorse or promote products\n    derived from this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL STEFAN-THOMAS BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by John Resig, 2007.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of John Resig nor the names of his contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n  DISCLAIMED. IN NO EVENT SHALL JOSEPH RESIG OR ANY CONTRIBUTORS BE LIABLE FOR\n  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\n  Ported to JavaScript by Stefan Thomas, 2011.\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other .  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis ion = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (\n        cars[i].speed > cars[j].speed &&\n        cars[i].speed > cars[j].speed * 0.1 &&\n        cars[i].speed > cars[j].speed * 0.2 &&\n        cars[i].speed > cars[j].speed * 0.3 &&\n        cars[i].speed > cars[j].speed * 0.4 &&\n        cars[i].speed > cars[j].speed * 0.5 &&\n        cars[i].speed > cars[j].speed * 0.6 &&\n        cars[i].speed > cars[j].speed * 0.7 &&\n        cars[i].speed > cars[j].speed * 0.8 &&\n        cars[i].speed > cars[j].speed * 0.9 &&\n        cars[i].speed > cars[j].speed * 1.0\n      ) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis car = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (\n        cars[i].speed > cars[j].speed &&\n        cars[i].speed > cars[j].speed * 0.1 &&\n        cars[i].speed > cars[j].speed * 0.2 &&\n        cars[i].speed > cars[j].speed * 0.3 &&\n        cars[i].speed > cars[j].speed * 0.4 &&\n        cars[i].speed > cars[j].speed * 0.5 &&\n        cars[i].speed > cars[j].speed * 0.6 &&\n        cars[i].speed > cars[j].speed * 0.7 &&\n        cars[i].speed > cars[j].speed * 0.8 &&\n        cars[i].speed > cars[j].speed * 0.9 &&\n        cars[i].speed > cars[j].speed * 1.0\n      ) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis cars = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (\n        cars[i].speed > cars[j].speed &&\n        cars[i].speed > cars[j].speed * 0.1 &&\n        cars[i].speed > cars[j].speed * 0.2 &&\n        cars[i].speed > cars[j].speed * 0.3 &&\n        cars[i].speed > cars[j].speed * 0.4 &&\n        cars[i].speed > cars[j].speed * 0.5 &&\n        cars[i].speed > cars[j].speed * 0.6 &&\n        cars[i].speed > cars[j].speed * 0.7 &&\n        cars[i].speed > cars[j].speed * 0.8 &&\n        cars[i].speed > cars[j].speed * 0.9 &&\n        cars[i].speed > cars[j].speed * 1.0\n      ) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Imagine aroad  that' s  a per fectly st raight infinitely lon g line.\n  n car s  are driving left t o right; simultaneou sly, a diffe r ent set of n ca rs\n  are d r iving right to left.   The t wo  sets of cars start ou t being very farfrom\n  each other.  All cars move inthe s ame speed.  Two ca r s aresaid to collide\n  when a car that' smoving leftto right hitsa car that's moving righ t to left.\n  H owever, the carsare infinitely sturdy and stro ng; as a result, they continue  mo ving\n  in their trajectory as if the y did not c ollide.\n\n  This f unction outputs the number of su ch col lisions.\n */\nconst carRaceCollis carss = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (\n        cars[i].speed > cars[j].speed &&\n        cars[i].speed > cars[j].speed * 0.1 &&\n        cars[i].speed > cars[j].speed * 0.2 &&\n        cars[i].speed > cars[j].speed * 0.3 &&\n        cars[i].speed > cars[j].speed * 0.4 &&\n        cars[i].speed > cars[j].speed * 0.5 &&\n        cars[i].speed > cars[j].speed * 0.6 &&\n        cars[i].speed > cars[j].speed * 0.7 &&\n        cars[i].speed > cars[j].speed * 0.8 &&\n        cars[i].speed > cars[j].speed * 0.9 &&\n        cars[i].speed > cars[j].speed * 1.0\n      ) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Imagine aroad  that' ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i]);\n      n++;\n    }\n  }\n  return res;\n};\n\n/*Return list  wit h elem e nts in cremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumTo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tozero, and  false oth e rwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToOne Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um toone,and  false oth e rwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 1) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToTwo Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um totwo,and  false oth e rwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 2) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToThree Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tothree,and  false oth e rwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 3) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToFour Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tofour,and  false oth e rwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 4) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToFive Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tofive,and  false oth e rwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 5) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToSix Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um tosix,and  false oth e rwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 6) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToSeven Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um toseven,and  false oth e rwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 7) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 2;\n};\n\n/*\n  pairsSumToEight Zero  takes a list  of integ ers as an input.\n  it  returns true i f  there are two dist inct elements in thelist that\ns um toeight,and  false oth e rwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change nume rica l base of inp ut number  x to base.\n  returnstring represen t ation after the con version.  base numbe rs are lesst han 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let ret = '';\n  let i = parseInt(x, base);\n  let j = 1;\n  while (i > 0) {\n    ret += j % 10 + i % 10;\n    j = Math.floor(i / 10);\n    i++;\n  }\n  return ret;\n};\n\n/*\n  >>> changeBase('22', 2)\n  '1000'\n  >>> changeBase('22', 3)\n  '111'\n  >>> changeBase('22', 4)\n  '1001'\n  >>> changeBase('22', 5)\n  '1010'\n  >>> changeBase('22', 6)\n  '1001'\n  >>> changeBase('22', 7)\n  '1010'\n  >>> changeBase('22', 8)\n  '1001'\n  >>> changeBase('22', 9)\n  '1010'\n  >>> changeBase('22', 10)\n  '1001'\n  >>> changeBase('22', 11)\n  '1010'\n  >>> changeBase('22', 12)\n  '1001'\n  >>> changeBase('22', 13)\n  '1010'\n  >>> changeBase('22', 14)\n  '1001'\n  >>> changeBase('22', 15)\n  '1010'\n  >>> changeBase('22', 16)\n  '1001'\n  >>> changeBase('22', 17)\n  '1010'\n  >>> changeBase('22', 18)\n  '1001'\n  >>> changeBase('22', 19)\n  '1010'\n  >>> changeBase('22', 20)\n  '1001'\n  >>> changeBase('22', 21)\n  '1010'\n  >>> changeBase('22', 22)\n  '1001'\n  >>> changeBase('22', 23)\n  '1010'\n  >>> changeBase('22', 24)\n  '1001'\n  >>> changeBase('22', 25)\n  '1010'\n  >>> changeBase('22', 26)\n  '1001'\n  >>> changeBase('22', 27)\n  '1010'\n  >>> changeBase('22', 28)\n  '1001'\n  >>> changeBase('22', 29)\n  '1010'\n  >>> changeBase('22', 30)\n  '1001'\n  >>> changeBase('22', 31)\n  '1010'\n  >>> changeBase('22', 32)\n  '1001'\n  >>> changeBase('22', 33)\n  '1010'\n  >>> changeBase('22', 34)\n  '1001'\n  >>> changeBase('22', 35)\n  '1010'\n  >>> changeBase('22', 36)\n  '1001'\n  >>> changeBase('22', 37)\n  '1010'\n  >>> changeBase('22', 38)\n  '1001'\n  >>> changeBase('22', 39)\n  '1010'\n  >>> changeBase('22', 40)\n  '1001'\n  >>> changeBase('22', 41)\n  '1010'\n  >>> changeBase('22', 42)\n  '1001'\n  >>> changeBase('22', 43)\n  '1010'\n  >>> changeBase('22', 44)\n  '1001'\n  >>> changeBase('22', 45)\n  '1010'\n  >>> changeBase('22', 46)\n  '1001'\n  >>> changeBase('22', 47)\n  '1010'\n  >>> changeBase('22', 48)\n  '1001'\n  >>> changeBase('22', 49)\n  '1010'\n  >>> changeBase('22', 50)\n  '1001'\n  >>> changeBase('22', 51)\n  '1010'\n  >>> changeBase('22', 52)\n  '1001'\n  >>> changeBase('22', 53)\n  '1010'\n  >>> changeBase('22', 54)\n  '1001'\n  >>> changeBase('22', 55)\n  '1010'\n  >>> changeBase('22', 56)\n  '1001'\n  >>> changeBase('22', 57)\n  '1010'\n  >>> changeBase('22', 58)\n  '1001'\n  >>> changeBase('22', 59)\n  '1010'\n  >>> changeBase('22', 60)\n  '1001'\n  >>> changeBase('22', 61)\n  '1010'\n  >>> changeBase('22', 62)\n  '1001'\n  >>> changeBase('22', 63)\n  '1010'\n  >>> changeBase('22', 64)\n  '1001'\n  >>> changeBase('22', 65)\n  '1010'\n  >>> changeBase('22', 66)\n  '1001'\n  >>> changeBase('22', 67)\n  '1010'\n  >>> changeBase('22', 68)\n  '1001'\n  >>> changeBase('22', 69)\n  '1010'\n  >>> changeBase('22', 70)\n  '1001'\n  >>> changeBase('22', 71)\n  '1010'\n  >>> changeBase('22', 72)\n  '1001'\n  >>> changeBase('22', 73)\n  '1010'\n  >>> changeBase('22', 74)\n  '1001'\n  >>> changeBase('22', 75)\n  '1010'\n  >>> changeBase('22', 76)\n  '1001'\n  >>> changeBase('22', 77)\n  '1010'\n  >>> changeBase('22', 78)\n  '1001'\n  >>> changeBase('22', 79)\n  '1010'\n  >>> changeBase('22', 80)\n  '1001'\n  >>> changeBase('22', 81)\n  '1010'\n  >>> changeBase('22', 82)\n  '1001'\n  >>> changeBase('22', 83)\n  '1010'\n  >>> changeBase('22', 84)\n  '1001'\n  >>> changeBase('22', 85)\n  '1010'\n  >>> changeBase('22', 86)\n  '1001'\n  >>> changeBase('22', 87)\n  '1010'\n  >>> changeBase('22', 88)\n  '1001'\n  >>> changeBase('22', 89)\n  '1010'\n  >>> changeBase('22', 90)\n  '1001'\n  >>> changeBase('22', 91)\n  '1010'\n  >>> changeBase('22', 92)\n  '1001'\n  >>> changeBase('22', 93)\n  '1010'\n  >>> changeBase('22', 94)\n  '1001'\n  >>> changeBase('22', 95)\n  '1010'\n  >>> changeBase('22', 96)\n  '1001'\n  >>> changeBase('22', 97)\n  '1010'\n  >>> changeBase('22', 98)\n  '1001'\n  >>> changeBase('22', 99)\n  '1010'\n  >>> changeBase('22', 100)\n  '1001'\n  >>> changeBase('22', 101)\n  '1010'\n  >>> changeBase('22', 102)\n  '1001'\n  >>> changeBase('22', 103)\n  '1010'\n  >>> changeBase('22', 104)", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/45", "prompt": "/*Given lengt h of  a sid e  and h igh retur n area for a triangle .\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given lengt h of  a sid e  and h igh retur n area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (h * (h - 1)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a rectangle.\n  >>> rectangleArea(5, 3)\n  15\n  */\nconst rectangleArea = (a, h) => {\n  const area = (h * (h - 2)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a pentagon.\n  >>> pentagonArea(5, 3)\n  25\n  */\nconst pentagonArea = (a, h) => {\n  const area = (h * (h - 3)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a hexagon.\n  >>> hexagonArea(5, 3)\n  75\n  */\nconst hexagonArea = (a, h) => {\n  const area = (h * (h - 4)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a heptagon.\n  >>> heptagonArea(5, 3)\n  125\n  */\nconst heptagonArea = (a, h) => {\n  const area = (h * (h - 5)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a octagon.\n  >>> octagonArea(5, 3)\n  175\n  */\nconst octagonArea = (a, h) => {\n  const area = (h * (h - 6)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a nonagonal.\n  >>> nonagonalArea(5, 3)\n  225\n  */\nconst nonagonalArea = (a, h) => {\n  const area = (h * (h - 7)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a decagonal.\n  >>> decagonalArea(5, 3)\n  315\n  */\nconst decagonalArea = (a, h) => {\n  const area = (h * (h - 8)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a trigonal.\n  >>> trigonalArea(5, 3)\n  90\n  */\nconst trigonalArea = (a, h) => {\n  const area = (h * (h - 9)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a quartic.\n  >>> quarticArea(5, 3)\n  135\n  */\nconst quarticArea = (a, h) => {\n  const area = (h * (h - 10)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a quintic.\n  >>> quinticArea(5, 3)\n  315\n  */\nconst quinticArea = (a, h) => {\n  const area = (h * (h - 11)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a nickel.\n  >>> nickelArea(5, 3)\n  315\n  */\nconst nickelArea = (a, h) => {\n  const area = (h * (h - 12)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 13)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a nickel.\n  >>> nickelArea(5, 3)\n  315\n  */\nconst nickelArea = (a, h) => {\n  const area = (h * (h - 14)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 15)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 16)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 17)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 18)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 19)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 20)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 21)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 22)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (a, h) => {\n  const area = (h * (h - 23)) / 2;\n  return area;\n};\n\n/*Given lengt h of  a sid e  and h igh retur n area for a penny.\n  >>> pennyArea(5, 3)\n  315\n  */\nconst pennyArea = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 nu mber  seque n ce isa sequenc e similar to the Fibb onacci sequnece that's defined as f ollows:\n fib4(0) ->0\n  fib4(1)- > 0\n fib4(2) - > 2\n  fib4 ( 3) -> 0\n  fib4(n) -> fib4(n- 1)  + fib4(n-2) + fib4(n- 3) + fib4(n-4).\n Please write a f unction toefficient ly co mpute the n-th ele m ent of the fib4 number sequence.  Do not  userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\n/*\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 number sequence\n fib5(n) ->  the nth ele m ent of the fib5 ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOf(l.slice(0, mid));\n  let right = medianOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfList(l.slice(0, mid));\n  let right = medianOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOf(l.slice(0, mid));\n  let right = medianOfListOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfList(l.slice(0, mid));\n  let right = medianOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOf(l.slice(0, mid));\n  let right = medianOfListOfListOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfList(l.slice(0, mid));\n  let right = medianOfListOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfListOf(l.slice(0, mid));\n  let right = medianOfListOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfList = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfListOfList(l.slice(0, mid));\n  let right = medianOfListOfListOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfListOfList([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfListOfListOf(l.slice(0, mid));\n  let right = medianOfListOfListOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfList([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfListOfListOfList(l.slice(0, mid));\n  let right = medianOfListOfListOfListOfListOfList(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOf = (l) => {\n  if (l.length < 2) return l[0];\n  let mid = Math.floor(l.length / 2);\n  let left = medianOfListOfListOfListOfListOfListOfListOf(l.slice(0, mid));\n  let right = medianOfListOfListOfListOfListOfListOf(l.slice(mid));\n  return left + right;\n};\n\n/*Return medi an o f elem e nts in  the list  l.\n  >>> medianOfListOfListOfListOfListOfListOfListOfListOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOfListOfListOfListOfListOfListOfListOfListOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOfListOf = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.trim();\n  let reversedText = text.split('').reverse().join('');\n  return reversedText === text;\n};\n\n/*\n  Checks ifgive n stri n g is a  palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp(1, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  0\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  0\n  */\nconst modp1 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp1(3, 5)\n  3\n  >>> modp1(1101, 101)\n  2\n  >>> modp1(3, 11)\n  8\n  >>> modp1(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp2(3, 5)\n  3\n  >>> modp2(1101, 101)\n  2\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp3(3, 5)\n  3\n  >>> modp3(1101, 101)\n  2\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp4(3, 5)\n  3\n  >>> modp4(1101, 101)\n  2\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp5(3, 5)\n  3\n  >>> modp5(1101, 101)\n  2\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp6(3, 5)\n  3\n  >>> modp6(1101, 101)\n  2\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp7(3, 5)\n  3\n  >>> modp7(1101, 101)\n  2\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp8(3, 5)\n  3\n  >>> modp8(1101, 101)\n  2\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp9(3, 5)\n  3\n  >>> modp9(1101, 101)\n  2\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp10(3, 5)\n  3\n  >>> modp10(1101, 101)\n  2\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  0\n  */\nconst modp11 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp11(3, 5)\n  3\n  >>> modp11(1101, 101)\n  2\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  0\n  */\nconst modp12 = (n, p) => {\n  const b = Math.pow(2, n);\n  const e = Math.pow(2, p - 1);\n  const a = Math.pow(2, p);\n  return ((b * e) % a) % b;\n};\n\n/*Return 2^nmodu lo p ( b e awar e of nume rics).\n  >>> modp12(3, 5)\n  3\n  >>> mod", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Insert an umbe r 'del i meter'  betweenevery two consecutive  elements of in p ut list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      if (j === 0) {\n        result.push(numbers[i])\n        i++\n      } else {\n        result.push(numbers[i])\n        i++\n      }\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll = (string, delimeter) => {\n  return string.split(delimeter).join(\"\")\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll2 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll3 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll4 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll5 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll6 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll7 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll8 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll9 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll10 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll11 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll12 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll13 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll14 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll15 = (string, delimeter) => {\n  return string.split(delimeter).join(\"\").replace(/[^a-zA-Z0-9]/g, \"\");\n}\n\n/**\n * Remove all occurrences of `delimeter` from `string`\n *\n * >>> removeAll('abc', 'b')\n * 'abc'\n * >>> removeAll('abc', 'b')\n * 'ab'\n * >>> removeAll('abc', 'b')\n * 'a'\n */\nconst removeAll16 = (string, delimeter) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeSh ift = (s) => {\n  retu rn s.split(\" \" ).map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  ta kes a s input string enc o ded with encode_shift function. Returnsdecoded string.\n  */\nconst d ecodeShift = (s) => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )+ 5 - \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s hifting e very character by 5 i n the alphabet.   */\nconst encodeShift = s => {\n  retu rn s.split(\" \").map(ch => Str ing.fromCh a rCode(\n    ((ch.charCodeAt(0 )- \"a\".charCodeAt(0 )) % 26) + \"a\".charCodeAt(0)\n  )). join(\"\");\n}\n\n/*\n  returns en code d stri n g by s h", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowe ls i s a fu n ctionthat take s string and returnsstring withoutv owels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let newText = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true  ifall nu m bers i n the lis t l are below thresho ld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = l.length;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;\n  let sum285 = 0;\n  let sum286 = 0;\n  let sum287 = 0;\n  let sum288 = 0;\n  let sum289 = 0;\n  let sum290 = 0;\n  let sum291 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Add two num bers  x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check ift wo w ords h a ve the  same cha racters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let len = Math.min(s1.length, s0.length);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len2 = s0.length;\n  let len3 = s1.length;\n  let len4 = len2;\n  let len5 = len3;\n  let len6 = len4;\n  let len7 = len5;\n  let len8 = len6;\n  let len9 = len7;\n  let len10 = len8;\n  let len11 = len9;\n  let len12 = len10;\n  let len13 = len11;\n  let len14 = len12;\n  let len15 = len13;\n  let len16 = len14;\n  let len17 = len15;\n  let len18 = len16;\n  let len19 = len17;\n  let len20 = len18;\n  let len21 = len19;\n  let len22 = len20;\n  let len23 = len21;\n  let len24 = len22;\n  let len25 = len23;\n  let len26 = len24;\n  let len27 = len25;\n  let len28 = len26;\n  let len29 = len27;\n  let len30 = len28;\n  let len31 = len29;\n  let len32 = len30;\n  let len33 = len31;\n  let len34 = len32;\n  let len35 = len33;\n  let len36 = len34;\n  let len37 = len35;\n  let len38 = len36;\n  let len39 = len37;\n  let len40 = len38;\n  let len41 = len39;\n  let len42 = len40;\n  let len43 = len41;\n  let len44 = len42;\n  let len45 = len43;\n  let len46 = len44;\n  let len47 = len45;\n  let len48 = len46;\n  let len49 = len47;\n  let len50 = len48;\n  let len51 = len49;\n  let len52 = len50;\n  let len53 = len51;\n  let len54 = len52;\n  let len55 = len53;\n  let len56 = len54;\n  let len57 = len55;\n  let len58 = len56;\n  let len59 = len57;\n  let len60 = len58;\n  let len61 = len59;\n  let len62 = len60;\n  let len63 = len61;\n  let len64 = len62;\n  let len65 = len63;\n  let len66 = len64;\n  let len67 = len65;\n  let len68 = len66;\n  let len69 = len67;\n  let len70 = len68;\n  let len71 = len69;\n  let len72 = len70;\n  let len73 = len71;\n  let len74 = len72;\n  let len75 = len73;\n  let len76 = len74;\n  let len77 = len75;\n  let len78 = len76;\n  let len79 = len77;\n  let len80 = len78;\n  let len81 = len79;\n  let len82 = len80;\n  let len83 = len81;\n  let len84 = len82;\n  let len85 = len83;\n  let len86 = len84;\n  let len87 = len85;\n  let len88 = len86;\n  let len89 = len87;\n  let len90 = len88;\n  let len91 = len89;\n  let len92 = len90;\n  let len93 = len91;\n  let len94 = len92;\n  let len95 = len93;\n  let len96 = len94;\n  let len97 = len95;\n  let len98 = len96;\n  let len99 = len97;\n  let len100 = len98;\n  let len101 = len99;\n  let len102 = len100;\n  let len103 = len101;\n  let len104 = len102;\n  let len105 = len103;\n  let len106 = len104;\n  let len107 = len105;\n  let len108 = len106;\n  let len109 = len107;\n  let len110 = len108;\n  let len111 = len109;\n  let len112 = len110;\n  let len113 = len112;\n  let len114 = len113;\n  let len115 = len114;\n  let len116 = len115;\n  let len117 = len116;\n  let len118 = len117;\n  let len119 = len118;\n  let len120 = len119;\n  let len121 = len120;\n  let len122 = len121;\n  let len123 = len122;\n  let len124 = len123;\n  let len125 = len124;\n  let len126 = len125;\n  let len127 = len126;\n  let len128 = len127;\n  let len129 = len128;\n  let len130 = len129;\n  let len131 = len130;\n  let len132 = len131;\n  let len133 = len132;\n  let len134 = len133;\n  let len135 = len134;\n  let len136 = len135;\n  let len137 = len136;\n  let len138 = len137;\n  let len139 = len138;\n  let len140 = len139;\n  let len141 = len140;\n  let len142 = len141;\n  let len143 = len142;\n  let len144 = len143;\n  let len145 = len144;\n  let len146 = len145;\n  let len147 = len146;\n  let len148 = len147;\n  let len149 = len148;\n  let len150 = len149;\n  let len151 = len150;\n  let len152 = len151;\n  let len153 = len152;\n  let len154 = len153;\n  let len155 = len154;\n  let len156 = len155;\n  let len157 = len156;\n  let len158 = len157;\n  let len159 = len158;\n  let len160 = len159;\n  let len161 = len160;\n  let len162 = len161;\n  let len163 = len162;\n  let len164 = len163;\n  let len165 = len164;\n  let len166 = len165;\n  let len167 = len166;\n  let len168 = len167;\n  let len169 = len168;\n  let len170 = len169;\n  let len171 = len170;\n  let len172 = len171;\n  let len173 = len172;\n  let len174 = len173;\n  let len175 = len174;\n  let len176 = len175;\n  let len177 = len176;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th  Fib onacci number .\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return n-th  Fib onacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Return n-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* bracketsi s astring of \"<\"  and \">\". \n  return false if ev ery opening bra c ket has a correspon ding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = {\n    '<': true,\n    '>': true,\n    '<<': true,\n    '>>': true,\n    '>>>': true\n  };\n  return brackets[brackets];\n};\n\nmodule.exports = correctBracketing;\n\n},{}],4:[function(require,module,exports){\n// https://gist.github.com/jonschlinkert/7292941\nconst isNumber = n => typeof n === 'number';\n\nconst isString = n => typeof n ==='string';\n\nconst isBoolean = n => typeof n === 'boolean';\n\nconst isNull = n => n === null;\n\nconst isUndefined = n => n === undefined;\n\nconst isRegExp = n => typeof n === 'object' && n.constructor.name === 'RegExp';\n\nconst isDate = n => typeof n === 'object' && n.constructor.name === 'Date';\n\nconst isError = n => typeof n === 'object' && n.constructor.name === 'Error';\n\nconst isSymbol = n => typeof n === 'object' && n.constructor.name === 'Symbol';\n\nconst isMap = (n) => typeof n === 'object' && n instanceof Map;\n\nconst isSet = (n) => typeof n === 'object' && n instanceof Set;\n\nconst isWeakMap = (n) => typeof n === 'object' && n instanceof WeakMap;\n\nconst isWeakSet = (n) => typeof n === 'object' && n instanceof WeakSet;\n\nconst isSetLike = (n) => isSet(n) || isMap(n) || isWeakMap(n) || isWeakSet(n);\n\nconst isMapLike = (n) => isMap(n) || isSetLike(n);\n\nconst isWeakMapLike = (n) => isWeakMap(n) || isSetLike(n);\n\nconst isWeakSetLike = (n) => isWeakSet(n) || isSetLike(n);\n\nconst isArrayLike = (n) => Array.isArray(n);\n\nconst isMapOrSetLike = (n) => isMap(n) || isSetLike(n);\n\nconst isMapOrWeakMapOrWeakSetLike = (n) => isMapOrWeakMap(n) || isWeakMapOrWeakSet(n);\n\nconst isMapOrWeakMapOrWeakSet = (n) => isMapOrWeakMap(n) || isWeakMapOrWeakSet(n);\n\nconst isMapOrWeakMap = (n) => isMapOrWeakMap(n) || isWeakMap(n);\n\nconst isSetOrWeakSet = (n) => isSet(n) || isWeakSet(n);\n\nconst isSetOrWeakMap = (n) => isSetOrWeakMap(n) || isWeakMap(n);\n\nconst isSetOrWeakSet = (n) => isSetOrWeakSet(n) || isWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || isWeakMapOrWeakSetLike(n);\n\nconst isSetOrWeakMapOrWeakSet = (n) => isSetOrWeakMapOrWeakSet(n) || isWeakMapOrWeakSet(n);\n\nconst isSetOrWeakMapOrWeakSetLike = (n) => isSetOrWeakMapOrWeakSetLike(n) || is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true  islist e l ements  are mono tonically increasingor decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let isMonotonic = true;\n  let isMonotonicIncreasing = false;\n  let isMonotonicDecreasing = false;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonic = false;\n      isMonotonicIncreasing = true;\n    } else if (l[i] < l[i + 1]) {\n      isMonotonic = false;\n      isMonotonicDecreasing = true;\n    }\n  }\n  return isMonotonic && isMonotonicIncreasing && isMonotonicDecreasing;\n};\n\n/*Return true islist e l ements are monotonically increasing.\n  >>> monotonic_increasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing = (l) => {\n  let isMonotonicIncreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonicIncreasing = false;\n    }\n  }\n  return isMonotonicIncreasing;\n};\n\n/*Return true islist e l ements are monotonically decreasing.\n  >>> monotonic_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_decreasing = (l) => {\n  let isMonotonicDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      isMonotonicDecreasing = false;\n    }\n  }\n  return isMonotonicDecreasing;\n};\n\n/*Return true islist e l ements are monotonically increasing and monotonically decreasing.\n  >>> monotonic_increasing_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_decreasing = (l) => {\n  let isMonotonicIncreasing = true;\n  let isMonotonicDecreasing = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonicIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isMonotonicDecreasing = false;\n    }\n  }\n  return isMonotonicIncreasing && isMonotonicDecreasing;\n};\n\n/*Return true islist e l ements are monotonically increasing and monotonically decreasing.\n  >>> monotonic_increasing_decreasing([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_decreasing([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_decreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_decreasing_and_monotonic = (l) => {\n  let isMonotonicIncreasing = true;\n  let isMonotonicDecreasing = true;\n  let isMonotonicIncreasingAndMonotonic = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonicIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isMonotonicDecreasing = false;\n    }\n    if (l[i] > l[i + 1] && l[i] < l[i + 1]) {\n      isMonotonicIncreasingAndMonotonic = false;\n    }\n  }\n  return isMonotonicIncreasing && isMonotonicDecreasing && isMonotonicIncreasingAndMonotonic;\n};\n\n/*Return true islist e l ements are monotonically increasing and monotonically decreasing and monotonically increasing.\n  >>> monotonic_increasing_decreasing_and_monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_decreasing_and_monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_decreasing_and_monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_decreasing_and_monotonic_and_monotonic = (l) => {\n  let isMonotonicIncreasing = true;\n  let isMonotonicDecreasing = true;\n  let isMonotonicIncreasingAndMonotonic = true;\n  let isMonotonicDecreasingAndMonotonic = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonicIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isMonotonicDecreasing = false;\n    }\n    if (l[i] > l[i + 1] && l[i] < l[i + 1]) {\n      isMonotonicIncreasingAndMonotonic = false;\n    }\n    if (l[i] > l[i + 1] && l[i] > l[i + 1]) {\n      isMonotonicDecreasingAndMonotonic = false;\n    }\n  }\n  return isMonotonicIncreasing && isMonotonicDecreasing && isMonotonicIncreasingAndMonotonic && isMonotonicDecreasingAndMonotonic;\n};\n\n/*Return true islist e l ements are monotonically increasing and monotonically decreasing and monotonically increasing and monotonically decreasing.\n  >>> monotonic_increasing_decreasing_and_monotonic_and_monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic_increasing_decreasing_and_monotonic_and_monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic_increasing_decreasing_and_monotonic_and_monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_increasing_decreasing_and_monotonic_and_monotonic_and_monotonic = (l) => {\n  let isMonotonicIncreasing = true;\n  let isMonotonicDecreasing = true;\n  let isMonotonicIncreasingAndMonotonic = true;\n  let isMonotonicDecreasingAndMonotonic = true;\n  let isMonotonicIncreasingAndMonotonicAndMonotonic = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      isMonotonicIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isMonotonicDecreasing = false;\n    }\n    if (l[i] > l[i + 1] && l[i] < l[i + 1]) {\n      isMonotonicIncreasingAndMonotonic = false;\n    }\n    if (l[i] > l[i + 1] && l[i] > l[i + 1]) {\n      isMonotonicDecreasingAndMonotonic = false;\n    }\n    if (l[i] > l[i + 1] && l[i] > l[i + 1]) {\n      isMonotonicIncreasingAndMonotonicAndMonotonic = false;\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSort = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> commonSort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonSort([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortBy = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> commonSortBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonSortBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDesc = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> commonSortByDesc([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonSortByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescBy = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> commonSortByDescBy([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonSortByDescBy([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDesc = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n\n  return result\n}\n\n/*Return sort ed u niquec ommonelementsfor two lists.\n  >>> commonSortByDescByDesc([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonSortByDescByDesc([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonSortByDescByDescBy = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n\n  while (j < len) {\n    if (l1[j] === l2[i]) {\n      result.push(l1[j])\n      j++\n    } else {\n      result.push(l2[i])\n      i++\n    }\n  }\n\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n\n  while (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return thelarg est pr i me fac tor of n.  Assume n > 1 and isnot a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) return 1;\n  if (n <= 2) return 2;\n  if (n <= 3) return 3;\n  if (n <= 5) return 5;\n  if (n <= 10) return 10;\n  if (n <= 100) return 100;\n  if (n <= 200) return 200;\n  if (n <= 400) return 400;\n  if (n <= 800) return 800;\n  if (n <= 1600) return 1600;\n  if (n <= 3200) return 3200; // not prime\n  return largestPrimeFactor(n / 2);\n};\n\n/*\n  >>> primeFactors(13195)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  >>> primeFactors(2048)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es .\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input tot hisfuncti o n is a  string r epresented multiple g roups for neste d  parentheses separa ted by spaces.\n  Foreach of theg roup,output th e deepestl evel of nesting of parenthes es.\n  E.g. (()()) has ma ximum two levelsof nesting while((())) hasthree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN isa  fun ctiont hat su ms number s from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(10))\n  55\n  >>> sumToN(sumToN(5))\n  15\n  >>> sumToN(sumToN(1))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(10)))\n  55\n  >>> sumToN(sumToN(sumToN(5)))\n  15\n  >>> sumToN(sumToN(sumToN(1)))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(10))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(5))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(1))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(10))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(5)))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(1)))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10)))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(10))))))))\n  55\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(5))))))))\n  15\n  >>> sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(sumToN(1))))))))\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(sumToN(sumTo", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* bracketsi s astring of \"(\"  and \")\". \n  return true if eve ry opening brac k et has a correspond ing closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketing = false;\n  let openingBracket;\n  let closingBracket;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;\n  let closingBracketCount;\n  let openingBracketIndex;\n  let closingBracketIndex;\n  let openingBracketCount;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 + ....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represe nt c oeffic i ents o f a polyn omial.\n  xs[0] + xs[1 ] * x + xs[2] * x^2 +....\n   Retur n derivative of thispolynomiali n  the same form. \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length\n  let d = 1\n  let i = 0\n  let j = 0\n  let k = 0\n  let x\n  let x0 = xs[0]\n  let x1 = xs[1]\n  let x2 = xs[2]\n  let x3 = xs[3]\n  let x4 = xs[4]\n  let x5 = xs[5]\n  let x6 = xs[6]\n  let x7 = xs[7]\n  let x8 = xs[8]\n  let x9 = xs[9]\n  let x10 = xs[10]\n  let x11 = xs[11]\n  let x12 = xs[12]\n  let x13 = xs[13]\n  let x14 = xs[14]\n  let x15 = xs[15]\n  let x16 = xs[16]\n  let x17 = xs[17]\n  let x18 = xs[18]\n  let x19 = xs[19]\n  let x20 = xs[20]\n  let x21 = xs[21]\n  let x22 = xs[22]\n  let x23 = xs[23]\n  let x24 = xs[24]\n  let x25 = xs[25]\n  let x26 = xs[26]\n  let x27 = xs[27]\n  let x28 = xs[28]\n  let x29 = xs[29]\n  let x30 = xs[30]\n  let x31 = xs[31]\n  let x32 = xs[32]\n  let x33 = xs[33]\n  let x34 = xs[34]\n  let x35 = xs[35]\n  let x36 = xs[36]\n  let x37 = xs[37]\n  let x38 = xs[38]\n  let x39 = xs[39]\n  let x40 = xs[40]\n  let x41 = xs[41]\n  let x42 = xs[42]\n  let x43 = xs[43]\n  let x44 = xs[44]\n  let x45 = xs[45]\n  let x46 = xs[46]\n  let x47 = xs[47]\n  let x48 = xs[48]\n  let x49 = xs[49]\n  let x50 = xs[50]\n  let x51 = xs[51]\n  let x52 = xs[52]\n  let x53 = xs[53]\n  let x54 = xs[54]\n  let x55 = xs[55]\n  let x56 = xs[56]\n  let x57 = xs[57]\n  let x58 = xs[58]\n  let x59 = xs[59]\n  let x60 = xs[60]\n  let x61 = xs[61]\n  let x62 = xs[62]\n  let x63 = xs[63]\n  let x64 = xs[64]\n  let x65 = xs[65]\n  let x66 = xs[66]\n  let x67 = xs[67]\n  let x68 = xs[68]\n  let x69 = xs[69]\n  let x70 = xs[70]\n  let x71 = xs[71]\n  let x72 = xs[72]\n  let x73 = xs[73]\n  let x74 = xs[74]\n  let x75 = xs[75]\n  let x76 = xs[76]\n  let x77 = xs[77]\n  let x78 = xs[78]\n  let x79 = xs[79]\n  let x80 = xs[80]\n  let x81 = xs[81]\n  let x82 = xs[82]\n  let x83 = xs[83]\n  let x84 = xs[84]\n  let x85 = xs[85]\n  let x86 = xs[86]\n  let x87 = xs[87]\n  let x88 = xs[88]\n  let x89 = xs[89]\n  let x90 = xs[90]\n  let x91 = xs[91]\n  let x92 = xs[92]\n  let x93 = xs[93]\n  let x94 = xs[94]\n  let x95 = xs[95]\n  let x96 = xs[96]\n  let x97 = xs[97]\n  let x98 = xs[98]\n  let x99 = xs[99]\n  let x100 = xs[100]\n  let x101 = xs[101]\n  let x102 = xs[102]\n  let x103 = xs[103]\n  let x104 = xs[104]\n  let x105 = xs[105]\n  let x106 = xs[106]\n  let x107 = xs[107]\n  let x108 = xs[108]\n  let x109 = xs[109]\n  let x110 = xs[110]\n  let x111 = xs[111]\n  let x112 = xs[112]\n  let x113 = xs[113]\n  let x114 = xs[114]\n  let x115 = xs[115]\n  let x116 = xs[116]\n  let x117 = xs[117]\n  let x118 = xs[118]\n  let x119 = xs[119]\n  let x120 = xs[120]\n  let x121 = xs[121]\n  let x122 = xs[122]\n  let x123 = xs[123]\n  let x124 = xs[124]\n  let x125 = xs[125]\n  let x126 = xs[126]\n  let x127 = xs[127]\n  let x128 = xs[128]\n  let x129 = xs[129]\n  let x130 = xs[130]\n  let x131 = xs[131]\n  let x132 = xs[132]\n  let x133 = xs[133]\n  let x134 = xs[134]\n  let x135 = xs[135]\n  let x136 = xs[136]\n  let x137 = xs[137]\n  let x138 = xs[138]\n  let x139 = xs[139]\n  let x140 = xs[140]\n  let x141 = xs[141]\n  let x142 = xs[142]\n  let x143 = xs[143]\n  let x144 = xs[144]\n  let x145 = xs[145]\n  let x146 = xs[146]\n  let x147 = xs[147]\n  let x148 = xs[148]\n  let x149 = xs[149]\n  let x150 = xs[150]\n  let x151 = xs[151]\n  let x152 = xs[152]\n  let x153 = xs[153]\n  let x154 = xs[154]\n  let x155 = xs[155]\n  let x156 = xs[156]\n  let x157 = xs[157]\n  let x158 = xs[158]\n  let x159 = xs[159]\n  let x160 = xs[160]\n  let x161 = xs[161]\n  let x162 = xs[162]\n  let x163 = xs[163]\n  let x164 = xs[164]\n  let x165 = xs[165]\n  let x166 = xs[166]\n  let x167 = xs[167]\n  let x168 = xs[168]\n  let x169 = xs[169]\n  let x170 = xs[170]\n  let x171 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFibnumb er seq u ence i s a seque nce similar to the Fi bbonacci sequne c e that's defined as  follows:\n  fibfib(0)  == 0\n  fibf i b(1) == 0\n  fib fib(2) ==1 \n  fibfib(n) == fibfib(n-1)+fibfib(n-2) + fibfib(n -3).\n  Please write a function toefficiently computethe n -th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n -3);\n};\n\n/*\n  Write a function fibfib2 that computes the n -th element of the fibfib2 number sequence.\n  >>> fibfib2(2)\n  1\n  >>> fibfib2(5)\n  8\n  >>> fibfib2(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib2(n-1) + fibfib2(n-2) + fibfib2(n -3);\n};\n\n/*\n  Write a function fibfib3 that computes the n -th element of the fibfib3 number sequence.\n  >>> fibfib3(2)\n  2\n  >>> fibfib3(5)\n  10\n  >>> fibfib3(8)\n  50\n  */\nconst fibfib3 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib3(n-1) + fibfib3(n-2) + fibfib3(n -3);\n};\n\n/*\n  Write a function fibfib4 that computes the n -th element of the fibfib4 number sequence.\n  >>> fibfib4(2)\n  3\n  >>> fibfib4(5)\n  50\n  >>> fibfib4(8)\n  100\n  */\nconst fibfib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib4(n-1) + fibfib4(n-2) + fibfib4(n -3);\n};\n\n/*\n  Write a function fibfib5 that computes the n -th element of the fibfib5 number sequence.\n  >>> fibfib5(2)\n  4\n  >>> fibfib5(5)\n  100\n  >>> fibfib5(8)\n  500\n  */\nconst fibfib5 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib5(n-1) + fibfib5(n-2) + fibfib5(n -3);\n};\n\n/*\n  Write a function fibfib6 that computes the n -th element of the fibfib6 number sequence.\n  >>> fibfib6(2)\n  5\n  >>> fibfib6(5)\n  1000\n  >>> fibfib6(8)\n  5000\n  */\nconst fibfib6 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib6(n-1) + fibfib6(n-2) + fibfib6(n -3);\n};\n\n/*\n  Write a function fibfib7 that computes the n -th element of the fibfib7 number sequence.\n  >>> fibfib7(2)\n  6\n  >>> fibfib7(5)\n  10000\n  >>> fibfib7(8)\n  50000\n  */\nconst fibfib7 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib7(n-1) + fibfib7(n-2) + fibfib7(n -3);\n};\n\n/*\n  Write a function fibfib8 that computes the n -th element of the fibfib8 number sequence.\n  >>> fibfib8(2)\n  7\n  >>> fibfib8(5)\n  100000\n  >>> fibfib8(8)\n  500000\n  */\nconst fibfib8 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib8(n-1) + fibfib8(n-2) + fibfib8(n -3);\n};\n\n/*\n  Write a function fibfib9 that computes the n -th element of the fibfib9 number sequence.\n  >>> fibfib9(2)\n  8\n  >>> fibfib9(5)\n  1000000\n  >>> fibfib9(8)\n  5000000\n  */\nconst fibfib9 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib9(n-1) + fibfib9(n-2) + fibfib9(n -3);\n};\n\n/*\n  Write a function fibfib10 that computes the n -th element of the fibfib10 number sequence.\n  >>> fibfib10(2)\n  9\n  >>> fibfib10(5)\n  10000000\n  >>> fibfib10(8)\n  50000000\n  */\nconst fibfib10 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib10(n-1) + fibfib10(n-2) + fibfib10(n -3);\n};\n\n/*\n  Write a function fibfib11 that computes the n -th element of the fibfib11 number sequence.\n  >>> fibfib11(2)\n  10\n  >>> fibfib11(5)\n  100000000\n  >>> fibfib11(8)\n  5000000000\n  */\nconst fibfib11 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib11(n-1) + fibfib11(n-2) + fibfib11(n -3);\n};\n\n/*\n  Write a function fibfib12 that computes the n -th element of the fibfib12 number sequence.\n  >>> fibfib12(2)\n  11\n  >>> fibfib12(5)\n  1000000000\n  >>> fibfib12(8)\n  50000000000\n  */\nconst fibfib12 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib12(n-1) + fibfib12(n-2) + fibfib12(n -3);\n};\n\n/*\n  Write a function fibfib13 that computes the n -th element of the fibfib13 number sequence.\n  >>> fibfib13(2)\n  12\n  >>> fibfib13(5)\n  100000000000\n  >>> fibfib13(8)\n  5000000000000\n  */\nconst fibfib13 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib13(n-1) + fibfib13(n-2) + fibfib13(n -3);\n};\n\n/*\n  Write a function fibfib14 that computes the n -th element of the fibfib14 number sequence.\n  >>> fibfib14(2)\n  13\n  >>> fibfib14(5)\n  1000000000000\n  >>> fibfib14(8)\n  50000000000000\n  */\nconst fibfib14 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib14(n-1) + fibfib14(n-2) + fibfib14(n -3);\n};\n\n/*\n  Write a function fibfib15 that computes the n -th element of the fibfib15 number sequence.\n  >>> fibfib15(2)\n  14\n  >>> fibfib15(5)\n  100000000000000\n  >>> fibfib15(8)\n  500000000000000\n  */\nconst fibfib15 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib15(n-1) + fibfib15(n-2) + fibfib15(n -3);\n};\n\n/*\n  Write a function fibfib", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g .\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n vowe l sCount  which ta kes a string represen ting\n  a word a s  input and returnsthe number of vowelsin the strin g.\n  Vowels in t his case a r e 'a', 'e', 'i','o', 'u'. H er e, 'y' is also a\n  vow el, but only when it is at the end of the given word.\n Ex ample:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let letter;\n  let i;\n  let l;\n  let s;\n  let sCount;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits , return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular sh iftthe di g its of  the inte ger x, shift the digi ts right by shi f t\n  and return theresult as a string.\n If shift >n umberof digits, return d i gits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let digits = Math.ceil(Math.log10(Math.abs(x)));\n  if (shift > digits) {\n    shift -= digits;\n  }\n  for (let i = 0; i < digits; i += 1) {\n    result += x.toString(10).slice(-shift);\n  }\n  return result;\n};\n\n/**\n Given a number x, return its decimal representation.\n >>> decimal(123)\n 123\n >>> decimal(123.456)\n 123.456\n >>> decimal(123.456789)\n 123.456789\n >>> decimal(123.4567890)\n 123.4567890\n >>> decimal(123.456789000)\n 123.456789000\n >>> decimal(123.456789001)\n 123.456789001\n >>> decimal(123.456789002)\n 123.456789002\n >>> decimal(123.456789003)\n 123.456789003\n >>> decimal(123.456789004)\n 123.456789004\n >>> decimal(123.456789005)\n 123.456789005\n >>> decimal(123.456789006)\n 123.456789006\n >>> decimal(123.456789007)\n 123.456789007\n >>> decimal(123.456789008)\n 123.456789008\n >>> decimal(123.456789009)\n 123.456789009\n >>> decimal(123.456789010)\n 123.456789010\n >>> decimal(123.456789011)\n 123.456789011\n >>> decimal(123.456789012)\n 123.456789012\n >>> decimal(123.456789013)\n 123.456789013\n >>> decimal(123.456789014)\n 123.456789014\n >>> decimal(123.456789015)\n 123.456789015\n >>> decimal(123.456789016)\n 123.456789016\n >>> decimal(123.456789017)\n 123.456789017\n >>> decimal(123.456789018)\n 123.456789018\n >>> decimal(123.456789019)\n 123.456789019\n >>> decimal(123.456789020)\n 123.456789020\n >>> decimal(123.456789021)\n 123.456789021\n >>> decimal(123.456789022)\n 123.456789022\n >>> decimal(123.456789023)\n 123.456789023\n >>> decimal(123.456789024)\n 123.456789024\n >>> decimal(123.456789025)\n 123.456789025\n >>> decimal(123.456789026)\n 123.456789026\n >>> decimal(123.456789027)\n 123.456789027\n >>> decimal(123.456789028)\n 123.456789028\n >>> decimal(123.456789029)\n 123.456789029\n >>> decimal(123.456789030)\n 123.456789030\n >>> decimal(123.456789031)\n 123.456789031\n >>> decimal(123.456789032)\n 123.456789032\n >>> decimal(123.456789033)\n 123.456789033\n >>> decimal(123.456789034)\n 123.456789034\n >>> decimal(123.456789035)\n 123.456789035\n >>> decimal(123.456789036)\n 123.456789036\n >>> decimal(123.456789037)\n 123.456789037\n >>> decimal(123.456789038)\n 123.456789038\n >>> decimal(123.456789039)\n 123.456789039\n >>> decimal(123.456789040) \n 123.456789040\n >>> decimal(123.456789041)\n 123.456789041\n >>> decimal(123.456789042)\n 123.456789042\n >>> decimal(123.456789043)\n 123.456789043\n >>> decimal(123.456789044)\n 123.456789044\n >>> decimal(123.456789045)\n 123.456789045\n >>> decimal(123.456789046)\n 123.456789046\n >>> decimal(123.456789047)\n 123.456789047\n >>> decimal(123.456789048)\n 123.456789048\n >>> decimal(123.456789049)\n 123.456789049\n >>> decimal(123.456789050)\n 123.456789050\n >>> decimal(123.456789051)\n 123.456789051\n >>> decimal(123.456789052)\n 123.456789052\n >>> decimal(123.456789053)\n 123.456789053\n >>> decimal(123.456789054)\n 123.456789054\n >>> decimal(123.456789055)\n 123.456789055\n >>> decimal(123.456789056)\n 123.456789056\n >>> decimal(123.456789057)\n 123.456789057\n >>> decimal(123.456789058)\n 123.456789058\n >>> decimal(123.456789059)\n 123.456789059\n >>> decimal(123.456789060)\n 123.456789060\n >>> decimal(123.456789061)\n 123.456789061\n >>> decimal(123.456789062) \n 123.456789062\n >>> decimal(123.456789063)\n 123.456789063\n >>> decimal(123.456789064)\n 123.456789064\n >>> decimal(123.456789065)\n 123.456789065\n >>> decimal(123.456789066)\n 123.456789066\n >>> decimal(123.456789067)\n 123.456789067\n >>> decimal(123.456789068)\n 123.456789068\n >>> decimal(123.456789069)\n 123.456789069\n >>> decimal(123.456789070) \n 123.456789070\n >>> decimal(123.456789071)\n 123.456789071\n >>> decimal(123.456789072)\n 123.456789072\n >>> decimal(123.456789073)\n 123.456789073\n >>> decimal(123.456789074)\n 123.456789074\n >>> decimal(123.456789075)\n 123.456789075\n >>> decimal(123.456789076)\n 123.456789076\n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Writ e afuncti o n that  takes astring as input and r eturns the sumo f the upper charact ers only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the sum of the numbers in the array\n  Example:\n      sum([1,2,3,4,5], 2) => 10\n      sum([1,2,3,4,5], 3) => 15\n      sum([1,2,3,4,5], 4) => 25\n      sum([1,2,3,4,5], 5) => 35\n  */\nconst sum = (arr, num) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i += 1) {\n    sum += arr[i];\n  }\n  return sum + num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      product([1,2,3,4,5], 2) => 6\n      product([1,2,3,4,5], 3) => 24\n      product([1,2,3,4,5], 4) => 120\n      product([1,2,3,4,5], 5) => 720\n  */\nconst product = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      difference([1,2,3,4,5], 2) => 1\n      difference([1,2,3,4,5], 3) => -1\n      difference([1,2,3,4,5], 4) => 0\n      difference([1,2,3,4,5], 5) => 1\n  */\nconst difference = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      productOf([1,2,3,4,5], 2) => 6\n      productOf([1,2,3,4,5], 3) => 24\n      productOf([1,2,3,4,5], 4) => 120\n      productOf([1,2,3,4,5], 5) => 720\n  */\nconst productOf = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      differenceOf([1,2,3,4,5], 2) => 1\n      differenceOf([1,2,3,4,5], 3) => -1\n      differenceOf([1,2,3,4,5], 4) => 0\n      differenceOf([1,2,3,4,5], 5) => 1\n  */\nconst differenceOf = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      productOf([1,2,3,4,5], 2) => 6\n      productOf([1,2,3,4,5], 3) => 24\n      productOf([1,2,3,4,5], 4) => 120\n      productOf([1,2,3,4,5], 5) => 720\n  */\nconst productOf = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      differenceOf([1,2,3,4,5], 2) => 1\n      differenceOf([1,2,3,4,5], 3) => -1\n      differenceOf([1,2,3,4,5], 4) => 0\n      differenceOf([1,2,3,4,5], 5) => 1\n  */\nconst differenceOf = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      productOf([1,2,3,4,5], 2) => 6\n      productOf([1,2,3,4,5], 3) => 24\n      productOf([1,2,3,4,5], 4) => 120\n      productOf([1,2,3,4,5], 5) => 720\n  */\nconst productOf = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      differenceOf([1,2,3,4,5], 2) => 1\n      differenceOf([1,2,3,4,5], 3) => -1\n      differenceOf([1,2,3,4,5], 4) => 0\n      differenceOf([1,2,3,4,5], 5) => 1\n  */\nconst differenceOf = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      productOf([1,2,3,4,5], 2) => 6\n      productOf([1,2,3,4,5], 3) => 24\n      productOf([1,2,3,4,5], 4) => 120\n      productOf([1,2,3,4,5], 5) => 720\n  */\nconst productOf = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      differenceOf([1,2,3,4,5], 2) => 1\n      differenceOf([1,2,3,4,5], 3) => -1\n      differenceOf([1,2,3,4,5], 4) => 0\n      differenceOf([1,2,3,4,5], 5) => 1\n  */\nconst differenceOf = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n      productOf([1,2,3,4,5], 2) => 6\n      productOf([1,2,3,4,5], 3) => 24\n      productOf([1,2,3,4,5], 4) => 120\n      productOf([1,2,3,4,5], 5) => 720\n  */\nconst productOf = (arr, num) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    prod *= arr[i];\n  }\n  return prod * num;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the difference of the numbers in the array\n  Example:\n      differenceOf([1,2,3,4,5], 2) => 1\n      differenceOf([1,2,3,4,5], 3) => -1\n      differenceOf([1,2,3,4,5], 4) => 0\n      differenceOf([1,2,3,4,5], 5) => 1\n  */\nconst differenceOf = (arr, num) => {\n  let diff = 1;\n  for (let i = 0; i < arr.length; i += 1) {\n    diff -= arr[i];\n  }\n  return diff;\n};\n\n/*Task\n  Write a function that takes an array and a number as input and returns the product of the numbers in the array\n  Example:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\" ,120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this ta sk,you wi l l be g iven a st ring that representsa number of app l es and oranges\n  th at are distributed in  a basket of fruitthis bask et contain s \n  apples, oranges, and mang ofruits. Given the stri ng that represents the total numbe r of\n  theoranges a nd ap ples and an intege r  thatrepresent the total number of thefruits\n  in the basket retur n the number of the mang o fruits in th e basket.\n  for e xamble:\n  fruitDistribution(\"5  apples and 6 oranges\", 19) -> 19- 5 - 6 = 8\n  fruitDistribution(\"0 a pples and 1  oranges\",3) -> 3  - 0 - 1 = 2\n  fruitDistribution (\"2 ap ples and 3oranges\", 100) -> 100- 2 - 3 = 95\n  fruitDistribution(\"1 00 apples and 1 oranges\",120) -> 120  -100 -1 =  19  */\nconstfruitDistribution = (s,n) =>{\n  let arr=s.split(\" \");\n  let sum=arr.reduce((a,b)=>a+parseInt(b));\n  let total=parseInt(n);\n  let count=0;\n  for(let i=0;i<arr.length;i++){\n    if(parseInt(arr[i])==total){\n      count++;\n    }\n  }\n  return count-arr.length+sum;\n}\nconstfruitDistribution(\"5  apples and 6 oranges\", 19)\nconstfruitDistribution(\"0 a pples and 1  oranges\",3)\nconstfruitDistribution(\"2 ap ples and 3oranges\", 100)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"1 00 apples and 1 oranges\", 120)\nconstfruitDistribution(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n  your t ask is to pluck one o f the nodesa nd return it.\n The pluck e d node should bethe node wi th  the smallest even val ue.\n  If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n\n  The pl ucked node should be returne d in a list, [ smalest_v alue, its inde x ],\n  If there a re no even values or the given  array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let result = [];\n  let even = 0;\n  let index = 0;\n  while (index < len) {\n    if (arr[index] % 2 === 0) {\n      even++;\n    } else {\n      even = 0;\n    }\n    if (even > max) {\n      max = even;\n    }\n    if (even < min) {\n      min = even;\n    }\n    index++;\n  }\n  if (min === max) {\n    return [];\n  }\n  if (min === max) {\n    return [arr[min]];\n  }\n  const index = Math.floor(min / 2);\n  const left = pluck(arr.slice(0, index));\n  const right = pluck(arr.slice(index));\n  return [arr[min],...left,...right];\n};\n\n// Given anarra y repr e sentin g a branc h of a tree that hasnon-negative in t eger nodes\n// your t ask is to pluck one o f the nodesa nd return it.\n// The pluck e d node should bethe node wi th  the smallest even val ue.\n// If multiple nodes with the s ame smallest even va lue a re found return th e  nodethat has smallest index.\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n// Follow up:\n//     What if there are multiple nodes with the same smallest even value?\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list .\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena non- e mpty l ist of po sitive integers. Retu rn the greatest integer that is gre ater than\n  zero, and  has a frequ e ncy greater tha n or equal to the value of the integerit self.\n  The frequencyof an integer isthe number of tim es it appears in the  list.\n  If no such a v a lue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndex = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - substring.length - 1 && str.indexOf(substring) === str.length - substring.length - 2);\n};\n\n/**\n * Filter aninpu t list of str ings only  for ones that contai n given substri n g\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithIndexAndLengthAndIndexAndLengthAndIndexAndLength = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1 && str.indexOf(substring) === str.length - substring.length && str.indexOf(substring) === str.length - ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value ,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let ret = []\n  let len = lst.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      ret[j++] = lst[j]\n    }\n    while (j < len && lst[j] > lst[j - 1]) {\n      ret[j++] = lst[j]\n    }\n    i++\n  }\n  return ret\n}\n\n/*\n  Given list  ofintege r s, ret urn listin strange order.\n  S trange sorting, is when you start w ith the minimum value,\n  then max i mum of the rema ining inte g ers, then minimum and so on. \n\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given theleng ths of the th ree sides  of a triangle. Retur n the area of\nthe triangle rounde d to 2 decimal points  if the thre e  sides form a v alid trian g le.\n  Otherwise return -1\n Th ree sides make a valid  triangle when the sum of any twosides is greater\n  t han t he third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  const a2 = a1 * a1;\n  const b2 = b1 * b1;\n  const c2 = c1 * c1;\n  const a3 = a2 * a2;\n  const b3 = b2 * b2;\n  const c3 = c2 * c2;\n  const a4 = a3 * a3;\n  const b4 = b3 * b3;\n  const c4 = c3 * c3;\n  const a5 = a4 * a4;\n  const b5 = b5 * b5;\n  const c5 = c5 * c5;\n  const a6 = a6 * a6;\n  const b6 = b6 * b6;\n  const c6 = c6 * c6;\n  const a7 = a7 * a7;\n  const b7 = b7 * b7;\n  const c7 = c7 * c7;\n  const a8 = a7 * a8;\n  const b8 = b7 * b8;\n  const c8 = c7 * c8;\n  const a9 = a8 * a8;\n  const b9 = b8 * b8;\n  const c9 = c8 * c8;\n  const a10 = a9 * a9;\n  const b10 = b9 * b9;\n  const c10 = c9 * c9;\n  const a11 = a10 * a10;\n  const b11 = b10 * b10;\n  const c11 = c10 * c10;\n  const a12 = a11 * a11;\n  const b12 = b11 * b11;\n  const c12 = c11 * c11;\n  const a13 = a12 * a12;\n  const b13 = b12 * b12;\n  const c13 = c12 * c12;\n  const a14 = a13 * a13;\n  const b14 = b13 * b13;\n  const c14 = c13 * c13;\n  const a15 = a14 * a14;\n  const b15 = b14 * b14;\n  const c15 = c14 * c14;\n  const a16 = a15 * a15;\n  const b16 = b15 * b15;\n  const c16 = c15 * c15;\n  const a17 = a16 * a16;\n  const b17 = b16 * b16;\n  const c17 = c16 * c16;\n  const a18 = a17 * a17;\n  const b18 = b17 * b17;\n  const c18 = c17 * c17;\n  const a19 = a18 * a18;\n  const b19 = b18 * b18;\n  const c19 = c18 * c18;\n  const a20 = a19 * a19;\n  const b20 = b19 * b19;\n  const c20 = c19 * c19;\n  const a21 = a20 * a20;\n  const b21 = b20 * b20;\n  const c21 = c20 * c20;\n  const a22 = a21 * a21;\n  const b22 = b21 * b21;\n  const c22 = c21 * c21;\n  const a23 = a22 * a22;\n  const b23 = b22 * b22;\n  const c23 = c22 * c22;\n  const a24 = a23 * a23;\n  const b24 = b23 * b23;\n  const c24 = c23 * c23;\n  const a25 = a24 * a24;\n  const b25 = b24 * b24;\n  const c25 = c24 * c24;\n  const a26 = a25 * a25;\n  const b26 = b25 * b25;\n  const c26 = c25 * c25;\n  const a27 = a26 * a26;\n  const b27 = b26 * b26;\n  const c27 = c26 * c26;\n  const a28 = a27 * a27;\n  const b28 = b27 * b27;\n  const c28 = c27 * c27;\n  const a29 = a28 * a28;\n  const b29 = b28 * b28;\n  const c29 = c28 * c28;\n  const a30 = a29 * a29;\n  const b30 = b29 * b29;\n  const c30 = c29 * c29;\n  const a31 = a30 * a30;\n  const b31 = b30 * b30;\n  const c31 = c30 * c30;\n  const a32 = a31 * a31;\n  const b32 = b31 * b31;\n  const c32 = c31 * c31;\n  const a33 = a32 * a32;\n  const b33 = b32 * b32;\n  const c33 = c32 * c32;\n  const a34 = a33 * a33;\n  const b34 = b33 * b33;\n  const c34 = c33 * c33;\n  const a35 = a34 * a34;\n  const b35 = b34 * b34;\n  const c35 = c34 * c34;\n  const a36 = a35 * a35;\n  const b36 = b35 * b35;\n  const c36 = c35 * c35;\n  const a37 = a36 * a36;\n  const b37 = b36 * b36;\n  const c37 = c36 * c36;\n  const a38 = a37 * a37;\n  const b38 = b37 * b37;\n  const c38 = c37 * c37;\n  const a39 = a38 * a38;\n  const b39 = b38 * b38;\n  const c39 = c38 * c38;\n  const a40 = a39 * a39;\n  const b40 = b39 * b39;\n  const c40 = c39 * c39;\n  const a41 = a40 * a40;\n  const b41 = a40 * b40;\n  const c41 = c40 * c40;\n  const a42 = a41 * a41;\n  const b42 = b41 * b41;\n  const c42 = c41 * c41;\n  const a43 = a42 * a42;\n  const b43 = b42 * b42;\n  const c43 = c42 * c42;\n  const a44 = a43 * a43;\n  const b44 = b43 * b43;\n  const c44 = c43 * c43;\n  const a45 = a44 * a44;\n  const b45 = b44 * b44;\n  const c45 = c44 * c44;\n  const a46 = a45 * a45;\n  const b46 = b45 * b45;\n  const c46 = c45 * c45;\n  const a47 = a46 * a46;\n  const b47 = b46 * b46;\n  const c47 = c46 * c46;\n  const a48 = a47 * a47;\n  const b48 = b47 * b47;\n  const c48 = c47 * c47;\n  const a49 = a48 * a48;\n  const b49 = b48 * b48;\n  const c49 = c48 * c48;\n  const a50 = a49 * a49;\n  const b50 = b49 * b49;\n  const c50 = c49 * c49;\n  const a51 = a50 * a50;\n  const b51 = b50 * b50;\n  const c51 = c50 * c51;\n  const a52 = a51 * a51;\n  const b52 = b51 * b51;\n  const c52 = c51 * c51;\n  const a53 = a52 * a52;\n  const b53 = b52 * b52;\n  const c53 = c52 * c52;\n  const a54 = a53 * a53;\n  const b54 = b53 * b53", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on tha t  retur ns true i f the object q will f ly, and false o t herwise.\n  The obje ct q will fly if it's  balanced (i t  is apalindrom ic list) a n d the sum of itselements is  l ess than or equal themaximum possibleweight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeight", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverseInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverseInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeInReverseInReverseInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any othe rele ment.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChangeInReverseInReverseInReverse = (arr) => {\n  let min = Number.MAX_VALUE;\n  let change = 0;\n  let len = arr.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] < min) {\n      change = arr[i];\n      min = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given ana rray  arr o f  integ ers, find  the minimum number o f elements that   need to be change d to make the array p alindromic.A  palindromic ar ray is ana rray that\n  is read the same  b ackwards and forwards.  In one change, you can change one element to any o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on tha t  accep ts two li sts of strings and re turns the listt hat has\n  total num ber of chars in the a ll stringso f  the list lessthan the o t her list.\n\n  if the two list shave the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n that return s true if  the given number isthe multiplicat i on of 3 prime numbe rs\n  andfalse otherw ise.\n  Knowi n g that (a) is l ess then 1 0 0.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiplyPrime = true;\n  let isMultiplyPrime2 = true;\n  let isMultiplyPrime3 = true;\n  let isMultiplyPrime4 = true;\n  let isMultiplyPrime5 = true;\n  let isMultiplyPrime6 = true;\n  let isMultiplyPrime7 = true;\n  let isMultiplyPrime8 = true;\n  let isMultiplyPrime9 = true;\n  let isMultiplyPrime10 = true;\n  let isMultiplyPrime11 = true;\n  let isMultiplyPrime12 = true;\n  let isMultiplyPrime13 = true;\n  let isMultiplyPrime14 = true;\n  let isMultiplyPrime15 = true;\n  let isMultiplyPrime16 = true;\n  let isMultiplyPrime17 = true;\n  let isMultiplyPrime18 = true;\n  let isMultiplyPrime19 = true;\n  let isMultiplyPrime20 = true;\n  let isMultiplyPrime21 = true;\n  let isMultiplyPrime22 = true;\n  let isMultiplyPrime23 = true;\n  let isMultiplyPrime24 = true;\n  let isMultiplyPrime25 = true;\n  let isMultiplyPrime26 = true;\n  let isMultiplyPrime27 = true;\n  let isMultiplyPrime28 = true;\n  let isMultiplyPrime29 = true;\n  let isMultiplyPrime30 = true;\n  let isMultiplyPrime31 = true;\n  let isMultiplyPrime32 = true;\n  let isMultiplyPrime33 = true;\n  let isMultiplyPrime34 = true;\n  let isMultiplyPrime35 = true;\n  let isMultiplyPrime36 = true;\n  let isMultiplyPrime37 = true;\n  let isMultiplyPrime38 = true;\n  let isMultiplyPrime39 = true;\n  let isMultiplyPrime40 = true;\n  let isMultiplyPrime41 = true;\n  let isMultiplyPrime42 = true;\n  let isMultiplyPrime43 = true;\n  let isMultiplyPrime44 = true;\n  let isMultiplyPrime45 = true;\n  let isMultiplyPrime46 = true;\n  let isMultiplyPrime47 = true;\n  let isMultiplyPrime48 = true;\n  let isMultiplyPrime49 = true;\n  let isMultiplyPrime50 = true;\n  let isMultiplyPrime51 = true;\n  let isMultiplyPrime52 = true;\n  let isMultiplyPrime53 = true;\n  let isMultiplyPrime54 = true;\n  let isMultiplyPrime55 = true;\n  let isMultiplyPrime56 = true;\n  let isMultiplyPrime57 = true;\n  let isMultiplyPrime58 = true;\n  let isMultiplyPrime59 = true;\n  let isMultiplyPrime60 = true;\n  let isMultiplyPrime61 = true;\n  let isMultiplyPrime62 = true;\n  let isMultiplyPrime63 = true;\n  let isMultiplyPrime64 = true;\n  let isMultiplyPrime65 = true;\n  let isMultiplyPrime66 = true;\n  let isMultiplyPrime67 = true;\n  let isMultiplyPrime68 = true;\n  let isMultiplyPrime69 = true;\n  let isMultiplyPrime70 = true;\n  let isMultiplyPrime71 = true;\n  let isMultiplyPrime72 = true;\n  let isMultiplyPrime73 = true;\n  let isMultiplyPrime74 = true;\n  let isMultiplyPrime75 = true;\n  let isMultiplyPrime76 = true;\n  let isMultiplyPrime77 = true;\n  let isMultiplyPrime78 = true;\n  let isMultiplyPrime79 = true;\n  let isMultiplyPrime80 = true;\n  let isMultiplyPrime81 = true;\n  let isMultiplyPrime82 = true;\n  let isMultiplyPrime83 = true;\n  let isMultiplyPrime84 = true;\n  let isMultiplyPrime85 = true;\n  let isMultiplyPrime86 = true;\n  let isMultiplyPrime87 = true;\n  let isMultiplyPrime88 = true;\n  let isMultiplyPrime89 = true;\n  let isMultiplyPrime90 = true;\n  let isMultiplyPrime91 = true;\n  let isMultiplyPrime92 = true;\n  let isMultiplyPrime93 = true;\n  let isMultiplyPrime94 = true;\n  let isMultiplyPrime95 = true;\n  let isMultiplyPrime96 = true;\n  let isMultiplyPrime97 = true;\n  let isMultiplyPrime98 = true;\n  let isMultiplyPrime99 = true;\n  let isMultiplyPrime100 = true;\n  let isMultiplyPrime101 = true;\n  let isMultiplyPrime102 = true;\n  let isMultiplyPrime103 = true;\n  let isMultiplyPrime104 = true;\n  let isMultiplyPrime105 = true;\n  let isMultiplyPrime106 = true;\n  let isMultiplyPrime107 = true;\n  let isMultiplyPrime108 = true;\n  let isMultiplyPrime109 = true;\n  let isMultiplyPrime110 = true;\n  let isMultiplyPrime111 = true;\n  let isMultiplyPrime112 = true;\n  let isMultiplyPrime113 = true;\n  let isMultiplyPrime114 = true;\n  let isMultiplyPrime115 = true;\n  let isMultiplyPrime116 = true;\n  let isMultiplyPrime117 = true;\n  let isMultiplyPrime118 = true;\n  let isMultiplyPrime119 = true;\n  let isMultiplyPrime120 = true;\n  let isMultiplyPrime121 = true;\n  let isMultiplyPrime122 = true;\n  let isMultiplyPrime123 = true;\n  let isMultiplyPrime124 = true;\n  let isMultiplyPrime125 = true;\n  let isMultiplyPrime126 = true;\n  let isMultiplyPrime127 = true;\n  let isMultiplyPrime128 = true;\n  let isMultiplyPrime129 = true;\n  let isMultiplyPrime130 = true;\n  let isMultiplyPrime131 = true;\n  let isMultiplyPrime132 = true;\n  let isMultiplyPrime133 = true;\n  let isMultiplyPrime134 = true;\n  let isMultiplyPrime135 = true;\n  let isMultiplyPrime136 = true;\n  let isMultiplyPrime137 = true;\n  let isMultiplyPrime138 = true;\n  let isMultiplyPrime139 = true;\n  let isMultiplyPrime140 = true;\n  let isMultiplyPrime141 = true;\n  let isMultiplyPrime142 = true;\n  let isMultiplyPrime143 = true;\n  let isMultiplyPrime144 = true;\n  let isMultiplyPrime145 = true;\n  let isMultiplyPrime146 = true;\n  let isMultiplyPrime147 = true;\n  let isMultiplyPrime148 = true;\n  let isMultiplyPrime149 = true;\n  let isMultiplyPrime150 = true;\n  let isMultiplyPrime151 = true;\n  let isMultiplyPrime152 = true;\n  let isMultiplyPrime153 = true;\n  let isMultiplyPrime154 = true;\n  let isMultiply", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases .\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your taski s to  write a func tion that  returns true if a nu mber x is a sim p le\n  power of n and  false in other cases.\n  x is as i mple power of n  if n**int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isSimple = true;\n  let power = Math.pow(x, n);\n  if (power === n) {\n    isSimple = false;\n  }\n  return isSimple;\n};\n\n/*\n  Write a func tion that returns true if a number is divisible by 2 and\n  false in other cases.\n  Examples:\n  isDivisibleBy(2, 2) => true\n  isDivisibleBy(2, 1) => false\n  isDivisibleBy(2, 3) => false\n  isDivisibleBy(2, 4) => false\n  isDivisibleBy(2, 5) => false\n  isDivisibleBy(2, 6) => false\n  isDivisibleBy(2, 7) => false\n  isDivisibleBy(2, 8) => false\n  isDivisibleBy(2, 9) => false\n  isDivisibleBy(2, 10) => false\n  isDivisibleBy(2, 11) => false\n  isDivisibleBy(2, 12) => false\n  isDivisibleBy(2, 13) => false\n  isDivisibleBy(2, 14) => false\n  isDivisibleBy(2, 15) => false\n  isDivisibleBy(2, 16) => false\n  isDivisibleBy(2, 17) => false\n  isDivisibleBy(2, 18) => false\n  isDivisibleBy(2, 19) => false\n  isDivisibleBy(2, 20) => false\n  isDivisibleBy(2, 21) => false\n  isDivisibleBy(2, 22) => false\n  isDivisibleBy(2, 23) => false\n  isDivisibleBy(2, 24) => false\n  isDivisibleBy(2, 25) => false\n  isDivisibleBy(2, 26) => false\n  isDivisibleBy(2, 27) => false\n  isDivisibleBy(2, 28) => false\n  isDivisibleBy(2, 29) => false\n  isDivisibleBy(2, 30) => false\n  isDivisibleBy(2, 31) => false\n  isDivisibleBy(2, 32) => false\n  isDivisibleBy(2, 33) => false\n  isDivisibleBy(2, 34) => false\n  isDivisibleBy(2, 35) => false\n  isDivisibleBy(2, 36) => false\n  isDivisibleBy(2, 37) => false\n  isDivisibleBy(2, 38) => false\n  isDivisibleBy(2, 39) => false\n  isDivisibleBy(2, 40) => false\n  isDivisibleBy(2, 41) => false\n  isDivisibleBy(2, 42) => false\n  isDivisibleBy(2, 43) => false\n  isDivisibleBy(2, 44) => false\n  isDivisibleBy(2, 45) => false\n  isDivisibleBy(2, 46) => false\n  isDivisibleBy(2, 47) => false\n  isDivisibleBy(2, 48) => false\n  isDivisibleBy(2, 49) => false\n  isDivisibleBy(2, 50) => false\n  isDivisibleBy(2, 51) => false\n  isDivisibleBy(2, 52) => false\n  isDivisibleBy(2, 53) => false\n  isDivisibleBy(2, 54) => false\n  isDivisibleBy(2, 55) => false\n  isDivisibleBy(2, 56) => false\n  isDivisibleBy(2, 57) => false\n  isDivisibleBy(2, 58) => false\n  isDivisibleBy(2, 59) => false\n  isDivisibleBy(2, 60) => false\n  isDivisibleBy(2, 61) => false\n  isDivisibleBy(2, 62) => false\n  isDivisibleBy(2, 63) => false\n  isDivisibleBy(2, 64) => false\n  isDivisibleBy(2, 65) => false\n  isDivisibleBy(2, 66) => false\n  isDivisibleBy(2, 67) => false\n  isDivisibleBy(2, 68) => false\n  isDivisibleBy(2, 69) => false\n  isDivisibleBy(2, 70) => false\n  isDivisibleBy(2, 71) => false\n  isDivisibleBy(2, 72) => false\n  isDivisibleBy(2, 73) => false\n  isDivisibleBy(2, 74) => false\n  isDivisibleBy(2, 75) => false\n  isDivisibleBy(2, 76) => false\n  isDivisibleBy(2, 77) => false\n  isDivisibleBy(2, 78) => false\n  isDivisibleBy(2, 79) => false\n  isDivisibleBy(2, 80) => false\n  isDivisibleBy(2, 81) => false\n  isDivisibleBy(2, 82) => false\n  isDivisibleBy(2, 83) => false\n  isDivisibleBy(2, 84) => false\n  isDivisibleBy(2, 85) => false\n  isDivisibleBy(2, 86) => false\n  isDivisibleBy(2, 87) => false\n  isDivisibleBy(2, 88) => false\n  isDivisibleBy(2, 89) => false\n  isDivisibleBy(2, 90) => false\n  isDivisibleBy(2, 91) => false\n  isDivisibleBy(2, 92) => false\n  isDivisibleBy(2, 93) => false\n  isDivisibleBy(2, 94) => false\n  isDivisibleBy(2, 95) => false\n  isDivisibleBy(2, 96) => false\n  isDivisibleBy(2, 97) => false\n  isDivisibleBy(2, 98) => false\n  isDivisibleBy(2, 99) => false\n  isDivisibleBy(2, 100) => false\n  isDivisibleBy(2, 101) => false\n  isDivisibleBy(2, 102) => false\n  isDivisibleBy(2, 103) => false\n  isDivisibleBy(2, 104) => false\n  isDivisibleBy(2, 105) => false\n  isDivisibleBy(2, 106) => false\n  isDivisibleBy(2, 107) => false\n  isDivisibleBy(2, 108) => false\n  isDivisibleBy(2, 109) => false\n  isDivisibleBy(2, 110) => false\n  isDivisibleBy(2, 111) => false\n  isDivisibleBy(2, 112) => false\n  isDivisibleBy(2, 113) => false\n  isDivisibleBy(2, 114) => false\n  isDivisibleBy(2, 115) => false\n  isDivisibleBy(2, 116) => false\n  isDivisibleBy(2, 117) => false\n  isDivisibleBy(2, 118) => false\n  isDivisibleBy(2, 119) => false\n  isDivisibleBy(2, 120) => false\n  isDivisibleBy(2, 121) => false\n  isDivisibleBy(2, 122) => false\n  isDivisibleBy(2, 123) => false\n  isDivisibleBy(2, 124) => false\n  isDivisibleBy(2, 125) => false\n  isDivisibleBy(2, 126) => false\n  isDivisibleBy(2, 127) => false\n  isDivisibleBy(2, 128) => false\n  isDivisibleBy(2, 129) => false\n  isDivisibleBy(2, 130) => false\n  isDivisibleBy(2, 131) => false\n  isDivisibleBy(2, 132) => false\n  isDivisibleBy(2, 133) => false\n  isDivisibleBy(2, 134) => false\n  isDivisibleBy(2, 135) => false\n  isDivisibleBy(2, 136) => false\n  isDivisibleBy(2, 137) => false\n  isDivisibleBy(2, 138) => false\n  isDivisibleBy(2, 139) => false\n  isDivisibleBy(2, 140) => false\n  isDivisibleBy(2, 141) => false\n  isDivisibleBy(2, 142) => false\n  isDivisibleBy(2, 143) => false\n  isDivisibleBy(2, 144) => false\n  isDivisibleBy(2, 145) => false\n  isDivisibleBy(2, 146) => false\n  isDivisibleBy(2, 147) => false\n  isDivisibleBy(2, 148) => false\n  isDivisibleBy(2, 149) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let t = a\n  let n = 1\n  let i = 2\n  while (t % i!== 0) {\n    n++\n    i++\n  }\n  return n === 3\n}\n\n/*\n  Write a fu ncti on tha t  takes  an integ er a and returns true \n  if this inge g er is a cube of som e integer number.\n  N ote: you may assume the inpu t is alway s  valid.\n  Examples:\n  iscube(3) ==> true\n  iscube(4) ==> false\n  iscube(5) ==> true\n  iscube(6) ==> false\n  iscube(7) ==> true\n  iscube(8) ==> false\n  iscube(9) ==> true\n  iscube(10) ==> false\n  iscube(11) ==> true\n  iscube(12) ==> false\n  iscube(13) ==> true\n  iscube(14) ==> false\n  iscube(15) ==> true\n  iscube(16) ==> false\n  iscube(17) ==> true\n  iscube(18) ==> false\n  iscube(19) ==> true\n  iscube(20) ==> false\n  iscube(21) ==> true\n  iscube(22) ==> false\n  iscube(23) ==> true\n  iscube(24) ==> false\n  iscube(25) ==> true\n  iscube(26) ==> false\n  iscube(27) ==> true\n  iscube(28) ==> false\n  iscube(29) ==> true\n  iscube(30) ==> false\n  iscube(31) ==> true\n  iscube(32) ==> false\n  iscube(33) ==> true\n  iscube(34) ==> false\n  iscube(35) ==> true\n  iscube(36) ==> false\n  iscube(37) ==> true\n  iscube(38) ==> false\n  iscube(39) ==> true\n  iscube(40) ==> false\n  iscube(41) ==> true\n  iscube(42) ==> false\n  iscube(43) ==> true\n  iscube(44) ==> false\n  iscube(45) ==> true\n  iscube(46) ==> false\n  iscube(47) ==> true\n  iscube(48) ==> false\n  iscube(49) ==> true\n  iscube(50) ==> false\n  iscube(51) ==> true\n  iscube(52) ==> false\n  iscube(53) ==> true\n  iscube(54) ==> false\n  iscube(55) ==> true\n  iscube(56) ==> false\n  iscube(57) ==> true\n  iscube(58) ==> false\n  iscube(59) ==> true\n  iscube(60) ==> false\n  iscube(61) ==> true\n  iscube(62) ==> false\n  iscube(63) ==> true\n  iscube(64) ==> false\n  iscube(65) ==> true\n  iscube(66) ==> false\n  iscube(67) ==> true\n  iscube(68) ==> false\n  iscube(69) ==> true\n  iscube(70) ==> false\n  iscube(71) ==> true\n  iscube(72) ==> false\n  iscube(73) ==> true\n  iscube(74) ==> false\n  iscube(75) ==> true\n  iscube(76) ==> false\n  iscube(77) ==> true\n  iscube(78) ==> false\n  iscube(79) ==> true\n  iscube(80) ==> false\n  iscube(81) ==> true\n  iscube(82) ==> false\n  iscube(83) ==> true\n  iscube(84) ==> false\n  iscube(85) ==> true\n  iscube(86) ==> false\n  iscube(87) ==> true\n  iscube(88) ==> false\n  iscube(89) ==> true\n  iscube(90) ==> false\n  iscube(91) ==> true\n  iscube(92) ==> false\n  iscube(93) ==> true\n  iscube(94) ==> false\n  iscube(95) ==> true\n  iscube(96) ==> false\n  iscube(97) ==> true\n  iscube(98) ==> false\n  iscube(99) ==> true\n  iscube(100) ==> false\n  iscube(101) ==> true\n  iscube(102) ==> false\n  iscube(103) ==> true\n  iscube(104) ==> false\n  iscube(105) ==> true\n  iscube(106) ==> false\n  iscube(107) ==> true\n  iscube(108) ==> false\n  iscube(109) ==> true\n  iscube(110) ==> false\n  iscube(111) ==> true\n  iscube(112) ==> false\n  iscube(113) ==> true\n  iscube(114) ==> false\n  iscube(115) ==> true\n  iscube(116) ==> false\n  iscube(117) ==> true\n  iscube(118) ==> false\n  iscube(119) ==> true\n  iscube(120) ==> false\n  iscube(121) ==> true\n  iscube(122) ==> false\n  iscube(123) ==> true\n  iscube(124) ==> false\n  iscube(125) ==> true\n  iscube(126) ==> false\n  iscube(127) ==> true\n  iscube(128) ==> false\n  iscube(129) ==> true\n  iscube(130) ==> false\n  iscube(131) ==> true\n  iscube(132) ==> false\n  iscube(133) ==> true\n  iscube(134) ==> false\n  iscube(135) ==> true\n  iscube(136) ==> false\n  iscube(137) ==> true\n  iscube(138) ==> false\n  iscube(139) ==> true\n  iscube(140) ==> false\n  iscube(141) ==> true\n  iscube(142) ==> false\n  iscube(143) ==> true\n  iscube(144) ==> false\n  iscube(145) ==> true\n  iscube(146) ==> false\n  iscube(147) ==> true\n  iscube(148) ==> false\n  iscube(149) ==> true\n  iscube(150) ==> false\n  iscube(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/78", "prompt": "/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===. ..\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase .\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have be en t askedt o writ e a funct ion that receives\n  a  hexadecimal nu m ber as a string and  counts the number of  hexadecimal   digits that a re primes( prime number=== or a prime== =is a natural number\n greater than 1 that is not a produ ct of two smaller na tural  numbers).\n  Hexad e cimaldigits are 0=== 1=== 2=== 3=== 4== =5=== 6=== 7=== 8=== 9=== A === B=== C===D=== E===F.\n Prime num bers are 2=== 3== = 5=== 7=== 11=== 13=== 17===...\n  So you have to determinea n umber of the following digits: 2===3=== 5=== 7 ===\n  B (=decimal  11)=== D (=decimal 13).\n  Note:  you m ay assume the input is always cor rect or empty string===\n  and symbo ls A===B===C===D===E===F  are alwaysuppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimalDigits = num.match(/[\\dA-F]+/g);\n  let hexadecimalDigitCount = hexadecimalDigits.length;\n  let hexadecimalDigitCountArray = [];\n  for (let i = 0; i < hexadecimalDigitCount; i++) {\n    hexadecimalDigitCountArray.push(parseInt(hexadecimalDigits[i], 16));\n  }\n  let hexadecimalDigitCountArraySum = hexadecimalDigitCountArray.reduce((a, b) => a + b);\n  let hexadecimalDigitCountArraySumArray = hexadecimalDigitCountArraySum.map(\n    (a) => a.toString()\n  );\n  let hexadecimalDigitCountArraySumArraySum = hexadecimalDigitCountArraySumArray.reduce(\n    (acc, cur) => acc + cur\n  );\n  let hexadecimalDigitCountArraySumArraySum = hexadecimalDigitCountArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySum = hexadecimalDigitCountArraySumArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySumArraySum = hexadecimalDigitCountArraySumArraySumArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySum = hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySumArraySum = hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySumArraySumArraySum = hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum.toString();\n  let hexadecimalDigitCountArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number .Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db '  at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be  giv en a n u mber i n decimal  form and your task i s to convert it to\n  binary format.  The function shouldreturn a str i ng, with each c haracter r e presenting a binary\n  number.Each character in thestring will be '0' or '1'.\n\n  Ther e will be an extra c ouple  of characters 'db' at the beginning and at the end of thestring.\n  Theextra characte rs are there to help wit h the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalIndex = 0;\n  let decimalDigit;\n  let decimalDigitIndex;\n  let decimalDigitLength;\n  let decimalDigitCount;\n  let decimalDigitCountIndex;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigitCountIndex = 0;\n  let decimalDigitCountLength;\n  let decimalDigitCountCount;\n  let decimalDigit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct3([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct4([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct5([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct6([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct7([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct8([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct9([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct10([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct11([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a give n li st ofi nteger s, return  a tuple consisting o f a sum and a p r oduct of all the in tegers in a list.\n  E mpty sum sho u ld beequal to0 and empt y  product should be equal to1. \n  >>> sumProduct12([1,2,3,4,5])\n  (10, 245)\n  */\nconst sumProduct12 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en a  strin g  s.\n Your task  is to check if the s tring is happyo r not.\n  A string i s happy if its length  is at least 3 andevery 3 c onsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let str = \"\";\n  let strLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let isHappyCount = 0;\n  let isHappyCount2 = 0;\n  let isHappyCount3 = 0;\n  let isHappyCount4 = 0;\n  let isHappyCount5 = 0;\n  let isHappyCount6 = 0;\n  let isHappyCount7 = 0;\n  let isHappyCount8 = 0;\n  let isHappyCount9 = 0;\n  let isHappyCount10 = 0;\n  let isHappyCount11 = 0;\n  let isHappyCount12 = 0;\n  let isHappyCount13 = 0;\n  let isHappyCount14 = 0;\n  let isHappyCount15 = 0;\n  let isHappyCount16 = 0;\n  let isHappyCount17 = 0;\n  let isHappyCount18 = 0;\n  let isHappyCount19 = 0;\n  let isHappyCount20 = 0;\n  let isHappyCount21 = 0;\n  let isHappyCount22 = 0;\n  let isHappyCount23 = 0;\n  let isHappyCount24 = 0;\n  let isHappyCount25 = 0;\n  let isHappyCount26 = 0;\n  let isHappyCount27 = 0;\n  let isHappyCount28 = 0;\n  let isHappyCount29 = 0;\n  let isHappyCount30 = 0;\n  let isHappyCount31 = 0;\n  let isHappyCount32 = 0;\n  let isHappyCount33 = 0;\n  let isHappyCount34 = 0;\n  let isHappyCount35 = 0;\n  let isHappyCount36 = 0;\n  let isHappyCount37 = 0;\n  let isHappyCount38 = 0;\n  let isHappyCount39 = 0;\n  let isHappyCount40 = 0;\n  let isHappyCount41 = 0;\n  let isHappyCount42 = 0;\n  let isHappyCount43 = 0;\n  let isHappyCount44 = 0;\n  let isHappyCount45 = 0;\n  let isHappyCount46 = 0;\n  let isHappyCount47 = 0;\n  let isHappyCount48 = 0;\n  let isHappyCount49 = 0;\n  let isHappyCount50 = 0;\n  let isHappyCount51 = 0;\n  let isHappyCount52 = 0;\n  let isHappyCount53 = 0;\n  let isHappyCount54 = 0;\n  let isHappyCount55 = 0;\n  let isHappyCount56 = 0;\n  let isHappyCount57 = 0;\n  let isHappyCount58 = 0;\n  let isHappyCount59 = 0;\n  let isHappyCount60 = 0;\n  let isHappyCount61 = 0;\n  let isHappyCount62 = 0;\n  let isHappyCount63 = 0;\n  let isHappyCount64 = 0;\n  let isHappyCount65 = 0;\n  let isHappyCount66 = 0;\n  let isHappyCount67 = 0;\n  let isHappyCount68 = 0;\n  let isHappyCount69 = 0;\n  let isHappyCount70 = 0;\n  let isHappyCount71 = 0;\n  let isHappyCount72 = 0;\n  let isHappyCount73 = 0;\n  let isHappyCount74 = 0;\n  let isHappyCount75 = 0;\n  let isHappyCount76 = 0;\n  let isHappyCount77 = 0;\n  let isHappyCount78 = 0;\n  let isHappyCount79 = 0;\n  let isHappyCount80 = 0;\n  let isHappyCount81 = 0;\n  let isHappyCount82 = 0;\n  let isHappyCount83 = 0;\n  let isHappyCount84 = 0;\n  let isHappyCount85 = 0;\n  let isHappyCount86 = 0;\n  let isHappyCount87 = 0;\n  let isHappyCount88 = 0;\n  let isHappyCount89 = 0;\n  let isHappyCount90 = 0;\n  let isHappyCount91 = 0;\n  let isHappyCount92 = 0;\n  let isHappyCount93 = 0;\n  let isHappyCount94 = 0;\n  let isHappyCount95 = 0;\n  let isHappyCount96 = 0;\n  let isHappyCount97 = 0;\n  let isHappyCount98 = 0;\n  let isHappyCount99 = 0;\n  let isHappyCount100 = 0;\n  let isHappyCount101 = 0;\n  let isHappyCount102 = 0;\n  let isHappyCount103 = 0;\n  let isHappyCount104 = 0;\n  let isHappyCount105 = 0;\n  let isHappyCount106 = 0;\n  let isHappyCount107 = 0;\n  let isHappyCount108 = 0;\n  let isHappyCount109 = 0;\n  let isHappyCount110 = 0;\n  let isHappyCount111 = 0;\n  let isHappyCount112 = 0;\n  let isHappyCount113 = 0;\n  let isHappyCount114 = 0;\n  let isHappyCount115 = 0;\n  let isHappyCount116 = 0;\n  let isHappyCount117 = 0;\n  let isHappyCount118 = 0;\n  let isHappyCount119 = 0;\n  let isHappyCount120 = 0;\n  let isHappyCount121 = 0;\n  let isHappyCount122 = 0;\n  let isHappyCount123 = 0;\n  let isHappyCount124 = 0;\n  let isHappyCount125 = 0;\n  let isHappyCount126 = 0;\n  let isHappyCount127 = 0;\n  let isHappyCount128 = 0;\n  let isHappyCount129 = 0;\n  let isHappyCount130 = 0;\n  let isHappyCount131 = 0;\n  let isHappyCount132 = 0;\n  let isHappyCount133 = 0;\n  let isHappyCount134 = 0;\n  let isHappyCount135 = 0;\n  let isHappyCount136 = 0;\n  let isHappyCount137 = 0;\n  let isHappyCount138 = 0;\n  let isHappyCount139 = 0;\n  let isHappyCount140 = 0;\n  let isHappyCount141 = 0;\n  let isHappyCount142 = 0;\n  let isHappyCount143 = 0;\n  let isHappyCount144 = 0;\n  let isHappyCount145 = 0;\n  let isHappyCount146 = 0;\n  let isHappyCount147 = 0;\n  let isHappyCount148 = 0;\n  let isHappyCount149 = 0;\n  let isHappyCount150 = 0;\n  let isHappyCount151 = 0;\n  let isHappyCount152 = 0;\n  let isHappyCount153 = 0;\n  let isHappyCount154", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is thel astweek o f  the s emester a nd the teacher has to  give the grade s \n  to students. The  teacherhas been mak ing her owna lgorithm for gr ading.\n  T h e only problem is, she has l os t the code she used fo r grading.\n  Shehas given you a l ist of GPAs for some  stud ents and you havet o write\n  a functionthat can output a l istof lettergrades using t he following table:\n         GPA      |    Letter gr ade\n            4.0              A+\n          > 3.7              A\n          > 3.3               A-\n         > 3.0               B+\n          > 2.7              B\n         > 2.3               B-\n          > 2.0             C+\n         > 1.7              C\n       >1.3              C-\n          > 1.0           D+\n          > 0.7              D\n          >0.0                D-\n          0.0             E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + 'A')\n  const letterGradeArray = letterGrades.split('')\n  const letterGradeArrayLength = letterGradeArray.length\n  const letterGradeArrayMap = new Map()\n  for (let i = 0; i < letterGradeArrayLength; i++) {\n    letterGradeArrayMap.set(letterGradeArray[i], i)\n  }\n  return letterGradeArrayMap.values\n}\n\n/*\n  Given an array of grades, return an array of letter grades.\n  Each letter grade is represented by a letter grade letter plus an 'A'.\n  If the letter grade is greater than the letter grade of the next letter, \n  then add an 'A' to the letter grade of the next letter.\n  If the letter grade is less than the letter grade of the next letter, \n  then subtract an 'A' from the letter grade of the next letter.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the previous letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter grade of the next letter, \n  then return that letter grade.\n  If the letter grade is equal to the letter gra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length;\n  let prime = true;\n  for (let i = 2; i <= len; i++) {\n    if (i % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a fun ctio n that takesa stringand returns true if t he string\n  len g th is a prime numbe r", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a po siti ve int e ger n,  return t he count of the numbe rs of n-digit\npositive integers t hat start or end with  1.\n  */\ncon s t startsOneEnds  = (n) =>{ \n  let rec countOneEnds = (n) =>{ \n    let rec countOneEnds = (n) =>{ \n      let rec countOneEnds = (n) =>{ \n        let rec countOneEnds = (n) =>{ \n          let rec countOneEnds = (n) =>{ \n            let rec countOneEnds = (n) =>{ \n              let rec countOneEnds = (n) =>{ \n                let rec countOneEnds = (n) =>{ \n                  let rec countOneEnds = (n) =>{ \n                    let rec countOneEnds = (n) =>{ \n                      let rec countOneEnds = (n) =>{ \n                        let rec countOneEnds = (n) =>{ \n                          let rec countOneEnds = (n) =>{ \n                            let rec countOneEnds = (n) =>{ \n                              let rec countOneEnds = (n) =>{ \n                                let rec countOneEnds = (n) =>{ \n                                  let rec countOneEnds = (n) =>{ \n                                    let rec countOneEnds = (n) =>{ \n                                      let rec countOneEnds = (n) =>{ \n                                        let rec countOneEnds = (n) =>{ \n                                          let rec countOneEnds = (n) =>{ \n                                            let rec countOneEnds = (n) =>{ \n                                              let rec countOneEnds = (n) =>{ \n                                                let rec countOneEnds = (n) =>{ \n                                                  let rec countOneEnds = (n) =>{ \n                                                    let rec countOneEnds = (n) =>{ \n                                                      let rec countOneEnds = (n) =>{ \n                                                        let rec countOneEnds = (n) =>{ \n                                                          let rec countOneEnds = (n) =>{ \n                                                            let rec countOneEnds = (n) =>{ \n                                                              let rec countOneEnds = (n) =>{ \n                                                                let rec countOneEnds = (n) =>{ \n                                                                  let rec countOneEnds = (n) =>{ \n                                                                    let rec countOneEnds = (n) =>{ \n                                                                        let rec countOneEnds = (n) =>{ \n                                                                          let rec countOneEnds = (n) =>{ \n                                                                            let rec countOneEnds = (n) =>{ \n                                                                              let rec countOneEnds = (n) =>{ \n                                                                                let rec countOneEnds = (n) =>{ \n                                                                                  let rec countOneEnds = (n) =>{ \n                                                                                    let rec countOneEnds = (n) =>{ \n                                                                                      let rec countOneEnds = (n) =>{ \n                                                                                        let rec countOneEnds = (n) =>{ \n                                                                                          let rec countOneEnds = (n) =>{ \n                                                                                            let rec countOneEnds = (n) =>{ \n                                                                                              let rec countOneEnds = (n) =>{ \n                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                  let rec countOneEnds = (n) =>{ \n                                                                                                    let rec countOneEnds = (n) =>{ \n                                                                                                      let rec countOneEnds = (n) =>{ \n                                                                                                        let rec countOneEnds = (n) =>{ \n                                                                                                          let rec countOneEnds = (n) =>{ \n                                                                                                            let rec countOneEnds = (n) =>{ \n                                                                                                              let rec countOneEnds = (n) =>{ \n                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                  let rec countOneEnds = (n) =>{ \n                                                                                                                    let rec countOneEnds = (n) =>{ \n                                                                                                                      let rec countOneEnds = (n) =>{ \n                                                                                                                        let rec countOneEnds = (n) =>{ \n                                                                                                                          let rec countOneEnds = (n) =>{ \n                                                                                                                            let rec countOneEnds = (n) =>{ \n                                                                                                                              let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec countOneEnds = (n) =>{ \n                                                                                                                                let rec count", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + i.toString(2);\n    sum = sum + parseInt(binary.substr(0, 2), 2);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in decimal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    decimal = decimal + i.toString(10);\n    sum = sum + parseInt(decimal.substr(0, 2), 10);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in hexadecimal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + i.toString(16);\n    sum = sum + parseInt(hexadecimal.substr(0, 2), 16);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in octal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  for (let i = 1; i <= N; i++) {\n    octal = octal + i.toString(8);\n    sum = sum + parseInt(octal.substr(0, 2), 8);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in hexadecimal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + i.toString(16);\n    sum = sum + parseInt(hexadecimal.substr(0, 2), 16);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in octal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  for (let i = 1; i <= N; i++) {\n    octal = octal + i.toString(8);\n    sum = sum + parseInt(octal.substr(0, 2), 8);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in hexadecimal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    hexadecimal = hexadecimal + i.toString(16);\n    sum = sum + parseInt(hexadecimal.substr(0, 2), 16);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in binary. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + i.toString(2);\n    sum = sum + parseInt(binary.substr(0, 2), 2);\n  }\n  return sum;\n};\n\n/*Given a pos itiv e inte g er N,return th e total sum of its di gits in decimal. \n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  for (let i = 1; i <= N; i++) {\n    decimal = decimal + i.toString(10);\n    sum = sum + parseInt(decimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non -emp ty lis t  of in tegers ls t. add the even eleme nts that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. remove the even eleme nts that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts removed..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 6, 7]\n  */\nconst removeOdd = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with even eleme nts removed..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst removeEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemove = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOdd = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addAndRemoveEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOdd([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOddEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveEvenOdd = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOddEvenEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOddEvenOdd([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOddEvenOddEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOddEvenEvenOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOddEvenEvenOddEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOddEvenEvenOddEvenOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst addAndRemoveOddEvenEvenOddEvenOddEven = (lst) => {\n  let evenElem = lst.filter(e => e % 2 === 0);\n  let oddElem = lst.filter(e => e % 2!== 0);\n  return evenElem.concat(oddElem);\n};\n\n/*Given a non -emp ty lis t  of in tegers ls t. return the list with odd eleme nts added and even eleme nts removed..\n\n\n  Examples:\n      addAndRemoveOddEvenEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t .\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on tha t  takes  a string  and returns an order ed version of i t.\n  Ordered version  of string, is a stri ng where all words(separate d by space ) \n  are replaced by a new wor dwhere all the characte rs arranged in\n ascending order b ased on ascii value. \n No te: You should kee p  the order of words and blank spaces inthesentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  let newWords = [];\n  let newStrWords = [];\n  let newStrWordsArr = [];\n  let newStrWordsArr2 = [];\n  let newStrWordsArr3 = [];\n  let newStrWordsArr4 = [];\n  let newStrWordsArr5 = [];\n  let newStrWordsArr6 = [];\n  let newStrWordsArr7 = [];\n  let newStrWordsArr8 = [];\n  let newStrWordsArr9 = [];\n  let newStrWordsArr10 = [];\n  let newStrWordsArr11 = [];\n  let newStrWordsArr12 = [];\n  let newStrWordsArr13 = [];\n  let newStrWordsArr14 = [];\n  let newStrWordsArr15 = [];\n  let newStrWordsArr16 = [];\n  let newStrWordsArr17 = [];\n  let newStrWordsArr18 = [];\n  let newStrWordsArr19 = [];\n  let newStrWordsArr20 = [];\n  let newStrWordsArr21 = [];\n  let newStrWordsArr22 = [];\n  let newStrWordsArr23 = [];\n  let newStrWordsArr24 = [];\n  let newStrWordsArr25 = [];\n  let newStrWordsArr26 = [];\n  let newStrWordsArr27 = [];\n  let newStrWordsArr28 = [];\n  let newStrWordsArr29 = [];\n  let newStrWordsArr30 = [];\n  let newStrWordsArr31 = [];\n  let newStrWordsArr32 = [];\n  let newStrWordsArr33 = [];\n  let newStrWordsArr34 = [];\n  let newStrWordsArr35 = [];\n  let newStrWordsArr36 = [];\n  let newStrWordsArr37 = [];\n  let newStrWordsArr38 = [];\n  let newStrWordsArr39 = [];\n  let newStrWordsArr40 = [];\n  let newStrWordsArr41 = [];\n  let newStrWordsArr42 = [];\n  let newStrWordsArr43 = [];\n  let newStrWordsArr44 = [];\n  let newStrWordsArr45 = [];\n  let newStrWordsArr46 = [];\n  let newStrWordsArr47 = [];\n  let newStrWordsArr48 = [];\n  let newStrWordsArr49 = [];\n  let newStrWordsArr50 = [];\n  let newStrWordsArr51 = [];\n  let newStrWordsArr52 = [];\n  let newStrWordsArr53 = [];\n  let newStrWordsArr54 = [];\n  let newStrWordsArr55 = [];\n  let newStrWordsArr56 = [];\n  let newStrWordsArr57 = [];\n  let newStrWordsArr58 = [];\n  let newStrWordsArr59 = [];\n  let newStrWordsArr60 = [];\n  let newStrWordsArr61 = [];\n  let newStrWordsArr62 = [];\n  let newStrWordsArr63 = [];\n  let newStrWordsArr64 = [];\n  let newStrWordsArr65 = [];\n  let newStrWordsArr66 = [];\n  let newStrWordsArr67 = [];\n  let newStrWordsArr68 = [];\n  let newStrWordsArr69 = [];\n  let newStrWordsArr70 = [];\n  let newStrWordsArr71 = [];\n  let newStrWordsArr72 = [];\n  let newStrWordsArr73 = [];\n  let newStrWordsArr74 = [];\n  let newStrWordsArr75 = [];\n  let newStrWordsArr76 = [];\n  let newStrWordsArr77 = [];\n  let newStrWordsArr78 = [];\n  let newStrWordsArr79 = [];\n  let newStrWordsArr80 = [];\n  let newStrWordsArr81 = [];\n  let newStrWordsArr82 = [];\n  let newStrWordsArr83 = [];\n  let newStrWordsArr84 = [];\n  let newStrWordsArr85 = [];\n  let newStrWordsArr86 = [];\n  let newStrWordsArr87 = [];\n  let newStrWordsArr88 = [];\n  let newStrWordsArr89 = [];\n  let newStrWordsArr90 = [];\n  let newStrWordsArr91 = [];\n  let newStrWordsArr92 = [];\n  let newStrWordsArr93 = [];\n  let newStrWordsArr94 = [];\n  let newStrWordsArr95 = [];\n  let newStrWordsArr96 = [];\n  let newStrWordsArr97 = [];\n  let newStrWordsArr98 = [];\n  let newStrWordsArr99 = [];\n  let newStrWordsArr100 = [];\n  let newStrWordsArr101 = [];\n  let newStrWordsArr102 = [];\n  let newStrWordsArr103 = [];\n  let newStrWordsArr104 = [];\n  let newStrWordsArr105 = [];\n  let newStrWordsArr106 = [];\n  let newStrWordsArr107 = [];\n  let newStrWordsArr108 = [];\n  let newStrWordsArr109 = [];\n  let newStrWordsArr110 = [];\n  let newStrWordsArr111 = [];\n  let newStrWordsArr112 = [];\n  let newStrWordsArr113 = [];\n  let newStrWordsArr114 = [];\n  let newStrWordsArr115 = [];\n  let newStrWordsArr116 = [];\n  let newStrWordsArr117 = [];\n  let newStrWordsArr118 = [];\n  let newStrWordsArr119 = [];\n  let newStrWordsArr120 = [];\n  let newStrWordsArr21 = [];\n  let newStrWordsArr121 = [];\n  let newStrWordsArr122 = [];\n  let newStrWordsArr123 = [];\n  let newStrWordsArr124 = [];\n  let newStrWordsArr125 = [];\n  let newStrWordsArr126 = [];\n  let newStrWordsArr127 = [];\n  let newStrWordsArr128 = [];\n  let newStrWordsArr129 = [];\n  let newStrWordsArr130 = [];\n  let newStrWordsArr131 = [];\n  let newStrWordsArr132 = [];\n  let newStrWordsArr133 = [];\n  let newStrWordsArr134 = [];\n  let newStrWordsArr135 = [];\n  let newStrWordsArr136 = [];\n  let newStrWordsArr137 = [];\n  let newStrWordsArr138 = [];\n  let newStrWordsArr139 = [];\n  let newStrWordsArr140 = [];\n  let newStrWordsArr141 = [];\n  let newStrWordsArr142 = [];\n  let newStrWordsArr143 = [];\n  let newStrWordsArr144 = [];\n  let newStrWordsArr145 = [];\n  let newStrWordsArr146 = [];\n  let newStr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however , unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2) ...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order .\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena 2 di m ension al data,as a nested lists,\n which is simila r  to matrix, however, unlikematrices,\n each row may contain a diffe rent numbe r  of columns.\n  Given lst, an dinteger x, find intege rs x in the list,\n  and return lis t of tuples, [(x1, y 1), ( x2, y2)...] sucht hat\n each tuple is a coordinate - (row,  columns), starting with 0.  Sort coordinates initi ally by rows i n ascending order.\n  Also, sort coordinates ofthe row by columns in descendi ngorder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let rs = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let zt = 0\n  let zu = 0\n  let zv = 0\n  let zw = 0\n  let zxi = 0\n  let zxj = 0\n  let zxk = 0\n  let zxl = 0\n  let zxm = 0\n  let zxn = 0\n  let zxp = 0\n  let zxq = 0\n  let zxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxp = 0\n  let zsxq = 0\n  let zsxr = 0\n  let zss = 0\n  let zst = 0\n  let zsu = 0\n  let zsv = 0\n  let zsw = 0\n  let zsxi = 0\n  let zsxj = 0\n  let zsxk = 0\n  let zsxl = 0\n  let zsxm = 0\n  let zsxn = 0\n  let zsxl = 0\n  let zsxm = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given ana rray  of no n -negat ive integ ers, return a copy of  the given arra y  after sorting,\n  y ou will sort the give n array ina s cending order i f the sum( first index value, last inde xvalue) is odd,\n  or so rt it in descending order if the s um( first index valu e, la st index value) is even.\n  Note:\n  * don't change the give narray.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closest = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqual = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqual = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqual = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqual = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqual = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.\n */\nconst closestToOrEqualToOrEqualToOrEqualTo = (array, target) => {\n  const index = array.indexOf(target);\n  return array.slice(0, index).concat(array.slice(index + 1));\n};\n\n/**\n * Given a sorted array and a target value, return all elements in the array which have a\n * value closest to the target value.\n *\n * Example:\n * Given sorted array [5, 3, 4, 2, 1] and target value 3, return [1, 3].\n *\n * Note:\n * The array is sorted in ascending order.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a fu ncti on enc r ypt th at takesa string as an argume nt and\n  return s  a string encrypted  with the alphabet be ing rotated. \n  The alphabet  should be rotated in a manner such tha tthe letters \n  shift d own by two multiplied to two place s.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let r = s.split('').map(x => x.charCodeAt(0) * 2);\n  let t = r.join('');\n  let tt = t.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.join('');\n  let tt = tt.split('').map(x => x.charCodeAt(0) * 2);\n  let tt = tt.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxNumbers = numbers.reduce((acc, cur) => Math.max(acc, cur), 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / maxNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const minNumbers = numbers.reduce((acc, cur) => Math.min(acc, cur), 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / minNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  maximum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const sumNumbers = numbers.reduce((acc, cur) => acc + cur, 0);\n  const rollingNumbers = numbers.map(n => Math.ceil(n / sumNumbers));\n  return rollingNumbers.reduce((acc, cur) => acc.concat(cur), []);\n};\n\n/* From a giv en l ist of intege rs, gener ate a list of rolling  minimum elemen t  found until givenmoment\n in the seque nce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1 , 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gi vena list of int egers.\n Write a function next Smallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest2 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest3 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest4 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest5 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest6 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest7 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there  is no suc h  element.\n  \n  nextSmallest( [1, 2, 3, 4, 5]) == 2\n nextSmallest([5,1, 4, 3, 2]) == 2   nextSmallest([])== nu ll\n  nextSmallest( [ 1, 1]) == null\n  */\nconst nextSmallest8 =  (lst) => {\n  let max = 0;\n  let min = lst[0];\n  let i = 1;\n  while(min < lst[i]){\n    if(min > lst[i]){\n      min = lst[i];\n      i++;\n    }\n  }\n  if(min > lst[i]){\n    return null;\n  }\n  if(min > max){\n    max = min;\n  }\n  return max;\n}\n\n/*\n  You are gi venlist of int egers.\n Write a function nextSmallest() that returns the 2nd sma llest element of thelist.\n  Retu r n null if there", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll begive n a st r ing of  words, a nd your task is to co unt the number of boredoms. A bor edom is a sentence th at starts wi t h theword \"I\". \n  Sentenc e s are delimited by '.', '?'or  '!'.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let sentences = S.split('.');\n  let sentence = sentences[0];\n  let sentences = sentences.slice(1);\n  let sentences = sentences.map((s) => s.trim());\n  let sentences = sentences.map((s) => s.toLowerCase());\n  let sentences = sentences.map((s) => s.trim());\n  let sentences = sentences.map((s) => s.split('?'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.map((s) => s.split('!'));\n  let sentences = sentences.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two , and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are intege rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n  return false;\n};\n\n/* Create af unct ion th a t take s 3 numbe rs.\n  Returns true if  one of the num b ers is equal to the  sum of the other two, and all nu m bers are integer rs.\n  Retu r ns false in any other cases. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z);\n  const num1 = Math.floor(sum / 3);\n  const num2 = Math.floor(sum / 3);\n  const num3 = Math.floor(sum / 3);\n  if (num1 === num2 && num1 === num3) {\n    return true;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fu ncti on tha t  takes  a messag e, and encodes in suc h a \n  way that it swaps case of al l letters, replaces a ll vowels in \n  the messagewith the l e tter that appears 2 places a he ad of that \n  vowel in  the english alphabet. \n  Assume o nly letters. \n  \n  E xampl es:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsArray = vowels.split('');\n  let vowelsArrayLength = vowelsArray.length;\n  let messageArray = message.split('');\n  let messageArrayLength = messageArray.length;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = messageArrayLength;\n  let messageArrayLength = message", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are giv en a  listo f inte gers.\n  Y ou need to find the l argest prime va l ue and return the s um of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxPrime = 0;\n  let maxDigit = 0;\n  let maxDigitPrime = 0;\n  let maxDigitPrime2 = 0;\n  let maxDigitPrime3 = 0;\n  let maxDigitPrime4 = 0;\n  let maxDigitPrime5 = 0;\n  let maxDigitPrime6 = 0;\n  let maxDigitPrime7 = 0;\n  let maxDigitPrime8 = 0;\n  let maxDigitPrime9 = 0;\n  let maxDigitPrime10 = 0;\n  let maxDigitPrime11 = 0;\n  let maxDigitPrime12 = 0;\n  let maxDigitPrime13 = 0;\n  let maxDigitPrime14 = 0;\n  let maxDigitPrime15 = 0;\n  let maxDigitPrime16 = 0;\n  let maxDigitPrime17 = 0;\n  let maxDigitPrime18 = 0;\n  let maxDigitPrime19 = 0;\n  let maxDigitPrime20 = 0;\n  let maxDigitPrime21 = 0;\n  let maxDigitPrime22 = 0;\n  let maxDigitPrime23 = 0;\n  let maxDigitPrime24 = 0;\n  let maxDigitPrime25 = 0;\n  let maxDigitPrime26 = 0;\n  let maxDigitPrime27 = 0;\n  let maxDigitPrime28 = 0;\n  let maxDigitPrime29 = 0;\n  let maxDigitPrime30 = 0;\n  let maxDigitPrime31 = 0;\n  let maxDigitPrime32 = 0;\n  let maxDigitPrime33 = 0;\n  let maxDigitPrime34 = 0;\n  let maxDigitPrime35 = 0;\n  let maxDigitPrime36 = 0;\n  let maxDigitPrime37 = 0;\n  let maxDigitPrime38 = 0;\n  let maxDigitPrime39 = 0;\n  let maxDigitPrime40 = 0;\n  let maxDigitPrime41 = 0;\n  let maxDigitPrime42 = 0;\n  let maxDigitPrime43 = 0;\n  let maxDigitPrime44 = 0;\n  let maxDigitPrime45 = 0;\n  let maxDigitPrime46 = 0;\n  let maxDigitPrime47 = 0;\n  let maxDigitPrime48 = 0;\n  let maxDigitPrime49 = 0;\n  let maxDigitPrime50 = 0;\n  let maxDigitPrime51 = 0;\n  let maxDigitPrime52 = 0;\n  let maxDigitPrime53 = 0;\n  let maxDigitPrime54 = 0;\n  let maxDigitPrime55 = 0;\n  let maxDigitPrime56 = 0;\n  let maxDigitPrime57 = 0;\n  let maxDigitPrime58 = 0;\n  let maxDigitPrime59 = 0;\n  let maxDigitPrime60 = 0;\n  let maxDigitPrime61 = 0;\n  let maxDigitPrime62 = 0;\n  let maxDigitPrime63 = 0;\n  let maxDigitPrime64 = 0;\n  let maxDigitPrime65 = 0;\n  let maxDigitPrime66 = 0;\n  let maxDigitPrime67 = 0;\n  let maxDigitPrime68 = 0;\n  let maxDigitPrime69 = 0;\n  let maxDigitPrime70 = 0;\n  let maxDigitPrime71 = 0;\n  let maxDigitPrime72 = 0;\n  let maxDigitPrime73 = 0;\n  let maxDigitPrime74 = 0;\n  let maxDigitPrime75 = 0;\n  let maxDigitPrime76 = 0;\n  let maxDigitPrime77 = 0;\n  let maxDigitPrime78 = 0;\n  let maxDigitPrime79 = 0;\n  let maxDigitPrime80 = 0;\n  let maxDigitPrime81 = 0;\n  let maxDigitPrime82 = 0;\n  let maxDigitPrime83 = 0;\n  let maxDigitPrime84 = 0;\n  let maxDigitPrime85 = 0;\n  let maxDigitPrime86 = 0;\n  let maxDigitPrime87 = 0;\n  let maxDigitPrime88 = 0;\n  let maxDigitPrime89 = 0;\n  let maxDigitPrime90 = 0;\n  let maxDigitPrime91 = 0;\n  let maxDigitPrime92 = 0;\n  let maxDigitPrime93 = 0;\n  let maxDigitPrime94 = 0;\n  let maxDigitPrime95 = 0;\n  let maxDigitPrime96 = 0;\n  let maxDigitPrime97 = 0;\n  let maxDigitPrime98 = 0;\n  let maxDigitPrime99 = 0;\n  let maxDigitPrime100 = 0;\n  let maxDigitPrime101 = 0;\n  let maxDigitPrime102 = 0;\n  let maxDigitPrime103 = 0;\n  let maxDigitPrime104 = 0;\n  let maxDigitPrime105 = 0;\n  let maxDigitPrime106 = 0;\n  let maxDigitPrime107 = 0;\n  let maxDigitPrime108 = 0;\n  let maxDigitPrime109 = 0;\n  let maxDigitPrime110 = 0;\n  let maxDigitPrime111 = 0;\n  let maxDigitPrime112 = 0;\n  let maxDigitPrime113 = 0;\n  let maxDigitPrime114 = 0;\n  let maxDigitPrime115 = 0;\n  let maxDigitPrime116 = 0;\n  let maxDigitPrime117 = 0;\n  let maxDigitPrime118 = 0;\n  let maxDigitPrime119 = 0;\n  let maxDigitPrime120 = 0;\n  let maxDigitPrime121 = 0;\n  let maxDigitPrime122 = 0;\n  let maxDigitPrime123 = 0;\n  let maxDigitPrime124 = 0;\n  let maxDigitPrime125 = 0;\n  let maxDigitPrime126 = 0;\n  let maxDigitPrime127 = 0;\n  let maxDigitPrime128 = 0;\n  let maxDigitPrime129 = 0;\n  let maxDigitPrime130 = 0;\n  let maxDigitPrime131 = 0;\n  let maxDigitPrime132 = 0;\n  let maxDigitPrime133 = 0;\n  let maxDigitPrime134 = 0;\n  let maxDigitPrime135 = 0;\n  let maxDigitPrime136 = 0;\n  let maxDigitPrime137 = 0;\n  let maxDigitPrime138 = 0;\n  let maxDigitPrime139 = 0;\n  let maxDigitPrime140 = 0;\n  let maxDigitPrime141 = 0;\n  let maxDigitPrime142 = 0;\n  let maxDigitPrime143 = 0;\n  let maxDigitPrime144 = 0;\n  let maxDigitPrime145 = 0;\n  let maxDigitPrime146 = 0;\n  let maxDigitPrime147 = 0;\n  let maxDigitPrime148 = 0;\n  let maxDigitPrime149 = 0;\n  let maxDigitPrime150 = 0;\n  let maxDigitPrime151 = 0;\n  let maxDigitPrime152 = 0;\n  let maxDigitPrime153 = 0;\n  let maxDigitPrime154 = 0;\n  let maxDigitPrime155 = 0;\n  let maxDigitPrime156 = 0;\n  let maxDigitPrime157 = 0;\n  let maxDigitPrime158 = 0;\n  let maxDigitPrime159 = 0;\n  let maxDigitPrime160 = 0;\n  let maxDigitPrime161 = 0;\n  let maxDigitPrime162 = 0;\n  let maxDigitPrime163 = 0;\n  let maxDigitPrime164 = 0;\n  let maxDigitPrime165 = 0;\n  let maxDigitPrime166 = 0;\n  let maxDigitPrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all keys are str ings in upper case, e lse returnf a lse.\n The func tion shoul d  return false isthe given d ic tionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => dict[key.toLowerCase()] === key);\n  let isAllKeysUpper = keys.every(key => dict[key.toUpperCase()] === key);\n  return isAllKeysLower || isAllKeysUpper;\n};\n\n/*\n  Given a di ctio nary,r eturntrue if a ll keys are strings i n lower \n  case or all key", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,3,5,7,11,13,17,19]\n  countTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countTo = (n) => {\n  let arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n) {\n    if (arr[j] === undefined) {\n      arr[j] = i;\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/*Implementa  fun ctiont hat ta kes an no n-negative integer an d returns an ar r ay of the first n\n integers that are pr ime numbersa nd less than n. \n  for example:\n  countTo(n) => [2,3]\n  countTo(n) => [2,3,5,7]\n  countTo(n) => [2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits .\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete th e fu nction that t akes twointegers and returns\n  the producto f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the divisor f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  divide(148, 412) should return 1.\n  divide(19, 28) should return 2.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 1.\n  */\nconst divide = (a, b) => {\n  const product = a / b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modulo(148, 412) should return 1.\n  modulo(19, 28) should return 2.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 1.\n  */\nconst modulo = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modulo(148, 412) should return 1.\n  modulo(19, 28) should return 2.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 1.\n  */\nconst modpow = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpow(148, 412) should return 1.\n  modpow(19, 28) should return 2.\n  modpow(2020, 1851) should return 0.\n  modpow(14,-15) should return 1.\n  */\nconst modpowmod = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod(148, 412) should return 1.\n  modpowmod(19, 28) should return 2.\n  modpowmod(2020, 1851) should return 0.\n  modpowmod(14,-15) should return 1.\n  */\nconst modpowmod2 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod2(148, 412) should return 1.\n  modpowmod2(19, 28) should return 2.\n  modpowmod2(2020, 1851) should return 0.\n  modpowmod2(14,-15) should return 1.\n  */\nconst modpowmod3 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod3(148, 412) should return 1.\n  modpowmod3(19, 28) should return 2.\n  modpowmod3(2020, 1851) should return 0.\n  modpowmod3(14,-15) should return 1.\n  */\nconst modpowmod4 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod4(148, 412) should return 1.\n  modpowmod4(19, 28) should return 2.\n  modpowmod4(2020, 1851) should return 0.\n  modpowmod4(14,-15) should return 1.\n  */\nconst modpowmod5 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod5(148, 412) should return 1.\n  modpowmod5(19, 28) should return 2.\n  modpowmod5(2020, 1851) should return 0.\n  modpowmod5(14,-15) should return 1.\n  */\nconst modpowmod6 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod6(148, 412) should return 1.\n  modpowmod6(19, 28) should return 2.\n  modpowmod6(2020, 1851) should return 0.\n  modpowmod6(14,-15) should return 1.\n  */\nconst modpowmod7 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod7(148, 412) should return 1.\n  modpowmod7(19, 28) should return 2.\n  modpowmod7(2020, 1851) should return 0.\n  modpowmod7(14,-15) should return 1.\n  */\nconst modpowmod8 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t akes twointegers and returns\n  the modulo f their unit digits.\n  Assume the inputis always va l id.\n  Examples:\n  modpowmod8(148, 412) should return 1.\n  modpowmod8(19, 28) should return 2.\n  modpowmod8(2020, 1851) should return 0.\n  modpowmod8(14,-15) should return 1.\n  */\nconst modpowmod9 = (a, b) => {\n  const product = a % b;\n  return product * product;\n};\n\n/*Complete th e fu nction that t ake", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a st ring  s, co u nt the  number o f uppercase vowels in  even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  let upperIndex = 0;\n  let upperIndex2 = 0;\n  let upperIndex3 = 0;\n  let upperIndex4 = 0;\n  let upperIndex5 = 0;\n  let upperIndex6 = 0;\n  let upperIndex7 = 0;\n  let upperIndex8 = 0;\n  let upperIndex9 = 0;\n  let upperIndex10 = 0;\n  let upperIndex11 = 0;\n  let upperIndex12 = 0;\n  let upperIndex13 = 0;\n  let upperIndex14 = 0;\n  let upperIndex15 = 0;\n  let upperIndex16 = 0;\n  let upperIndex17 = 0;\n  let upperIndex18 = 0;\n  let upperIndex19 = 0;\n  let upperIndex20 = 0;\n  let upperIndex21 = 0;\n  let upperIndex22 = 0;\n  let upperIndex23 = 0;\n  let upperIndex24 = 0;\n  let upperIndex25 = 0;\n  let upperIndex26 = 0;\n  let upperIndex27 = 0;\n  let upperIndex28 = 0;\n  let upperIndex29 = 0;\n  let upperIndex30 = 0;\n  let upperIndex31 = 0;\n  let upperIndex32 = 0;\n  let upperIndex33 = 0;\n  let upperIndex34 = 0;\n  let upperIndex35 = 0;\n  let upperIndex36 = 0;\n  let upperIndex37 = 0;\n  let upperIndex38 = 0;\n  let upperIndex39 = 0;\n  let upperIndex40 = 0;\n  let upperIndex41 = 0;\n  let upperIndex42 = 0;\n  let upperIndex43 = 0;\n  let upperIndex44 = 0;\n  let upperIndex45 = 0;\n  let upperIndex46 = 0;\n  let upperIndex47 = 0;\n  let upperIndex48 = 0;\n  let upperIndex49 = 0;\n  let upperIndex50 = 0;\n  let upperIndex51 = 0;\n  let upperIndex52 = 0;\n  let upperIndex53 = 0;\n  let upperIndex54 = 0;\n  let upperIndex55 = 0;\n  let upperIndex56 = 0;\n  let upperIndex57 = 0;\n  let upperIndex58 = 0;\n  let upperIndex59 = 0;\n  let upperIndex60 = 0;\n  let upperIndex61 = 0;\n  let upperIndex62 = 0;\n  let upperIndex63 = 0;\n  let upperIndex64 = 0;\n  let upperIndex65 = 0;\n  let upperIndex66 = 0;\n  let upperIndex67 = 0;\n  let upperIndex68 = 0;\n  let upperIndex69 = 0;\n  let upperIndex70 = 0;\n  let upperIndex71 = 0;\n  let upperIndex72 = 0;\n  let upperIndex73 = 0;\n  let upperIndex74 = 0;\n  let upperIndex75 = 0;\n  let upperIndex76 = 0;\n  let upperIndex77 = 0;\n  let upperIndex78 = 0;\n  let upperIndex79 = 0;\n  let upperIndex80 = 0;\n  let upperIndex81 = 0;\n  let upperIndex82 = 0;\n  let upperIndex83 = 0;\n  let upperIndex84 = 0;\n  let upperIndex85 = 0;\n  let upperIndex86 = 0;\n  let upperIndex87 = 0;\n  let upperIndex88 = 0;\n  let upperIndex89 = 0;\n  let upperIndex90 = 0;\n  let upperIndex91 = 0;\n  let upperIndex92 = 0;\n  let upperIndex93 = 0;\n  let upperIndex94 = 0;\n  let upperIndex95 = 0;\n  let upperIndex96 = 0;\n  let upperIndex97 = 0;\n  let upperIndex98 = 0;\n  let upperIndex99 = 0;\n  let upperIndex100 = 0;\n  let upperIndex101 = 0;\n  let upperIndex102 = 0;\n  let upperIndex103 = 0;\n  let upperIndex104 = 0;\n  let upperIndex105 = 0;\n  let upperIndex106 = 0;\n  let upperIndex107 = 0;\n  let upperIndex108 = 0;\n  let upperIndex109 = 0;\n  let upperIndex110 = 0;\n  let upperIndex111 = 0;\n  let upperIndex112 = 0;\n  let upperIndex113 = 0;\n  let upperIndex114 = 0;\n  let upperIndex115 = 0;\n  let upperIndex116 = 0;\n  let upperIndex117 = 0;\n  let upperIndex118 = 0;\n  let upperIndex119 = 0;\n  let upperIndex120 = 0;\n  let upperIndex121 = 0;\n  let upperIndex122 = 0;\n  let upperIndex123 = 0;\n  let upperIndex124 = 0;\n  let upperIndex125 = 0;\n  let upperIndex126 = 0;\n  let upperIndex127 = 0;\n  let upperIndex128 = 0;\n  let upperIndex129 = 0;\n  let upperIndex130 = 0;\n  let upperIndex131 = 0;\n  let upperIndex132 = 0;\n  let upperIndex133 = 0;\n  let upperIndex134 = 0;\n  let upperIndex135 = 0;\n  let upperIndex136 = 0;\n  let upperIndex137 = 0;\n  let upperIndex138 = 0;\n  let upperIndex139 = 0;\n  let upperIndex140 = 0;\n  let upperIndex141 = 0;\n  let upperIndex142 = 0;\n  let upperIndex143 = 0;\n  let upperIndex144 = 0;\n  let upperIndex145 = 0;\n  let upperIndex146 = 0;\n  let upperIndex147 = 0;\n  let upperIndex148 = 0;\n  let upperIndex149 = 0;\n  let upperIndex150 = 0;\n  let upperIndex151 = 0;\n  let upperIndex152 = 0;\n  let upperIndex153 = 0;\n  let upperIndex154 = 0;\n  let upperIndex155 = 0;\n  let upperIndex156 = 0;\n  let upperIndex157 = 0;\n  let upperIndex158 = 0;\n  let upperIndex159 = 0;\n  let upperIndex160 = 0;\n  let upperIndex161 = 0;\n  let upperIndex162 = 0;\n  let upperIndex163 = 0;\n  let upperIndex164 = 0;\n  let upperIndex165 = 0;\n  let upperIndex166 = 0;\n  let upperIndex167 = 0;\n  let upperIndex168 = 0;\n  let upperIndex169 = 0;\n  let upperIndex170 = 0;\n  let upperIndex171 = 0;\n  let upperIndex172 = 0;\n  let upperIndex173 = 0;\n  let upperIndex174 = 0;\n  let upperIndex175 = 0;\n  let upperIndex176 = 0;\n  let upperIndex177 = 0;\n  let upperIndex178 = 0;\n  let upperIndex179 = 0;\n  let upperIndex180 = 0;\n  let upperIndex181 = 0;\n  let upperIndex182 = 0;\n  let upperIndex183 = 0;\n  let upperIndex184 = 0;\n  let upperIndex185 = 0;\n  let upperIndex186 = 0;\n  let upperIndex187 = 0;\n  let upperIndex188 = 0;\n  let upperIndex189 = 0;\n  let upperIndex190 = 0;\n  let upperIndex191 = 0;\n  let upperIndex192 = 0;\n  let upperIndex193 = 0;\n  let upperIndex194 = 0;\n  let upperIndex195 = 0;\n  let upperIndex196 = 0;\n  let upperIndex197 = 0;\n  let upperIndex198 = 0;\n  let upperIndex199 = 0;\n  let upperIndex200 = 0;\n  let upperIndex201 = 0;\n  let upperIndex202 = 0;\n  let upperIndex203 = 0;\n  let upperIndex204 = 0;\n  let upperIndex205 = 0;\n  let upperIndex206 = 0;\n  let upperIndex207 = 0;\n  let upperIndex208 = 0;\n  let upperIndex209 = 0;\n  let upperIndex210 = 0;\n  let upperIndex211 = 0;\n  let upperIndex212 = 0;\n  let upperIndex213 = 0;\n  let upperIndex214 = 0;\n  let upperIndex215 = 0;\n  let upperIndex216 = 0;\n  let upperIndex217 = 0;\n  let upperIndex218 = 0;\n  let upperIndex219 = 0;\n  let upperIndex220 = 0;\n  let upperIndex221 = 0;\n  let upperIndex222 = 0;\n  let upperIndex223 = 0;\n  let upperIndex224 = 0;\n  let upperIndex225 = 0;\n  let upperIndex226 = 0;\n  let upperIndex227 = 0;\n  let upperIndex228 = 0;\n  let upperIndex229 = 0;\n  let upperIndex230 = 0;\n  let upperIndex231 = 0;\n  let upperIndex232 = 0;\n  let upperIndex233 = 0;\n  let upperIndex234 = 0;\n  let upperIndex235 = 0;\n  let upperIndex236 = 0;\n  let upperIndex237 = 0;\n  let upperIndex238 = 0;\n  let upperIndex239 = 0;\n  let upperIndex240 = 0;\n  let upperIndex241 = 0;\n  let upperIndex242 = 0;\n  let upperIndex243 = 0;\n  let upper", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro .\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create af unct ion th a t take s a value  (string) representin g a number\n  an d  returns the closes t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let t = Math.abs(value);\n  let d = Math.ceil(t / 2);\n  return t % 2 === 0? d : d - 1;\n};\n\n/* Create af unct ion th a t take s an integer (number) representin g a number\n  an d  returns the closes integer t integer to it. If t he number is equidistant\n  f rom two in t egers, round it away from ze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
