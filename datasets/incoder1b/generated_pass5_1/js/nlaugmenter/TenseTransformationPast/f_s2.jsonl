{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, curr) => {\n    const diff = curr - acc;\n    if (diff < threshold) {\n      return curr;\n    }\n    return acc;\n  }, Number.POSITIVE_INFINITY);\n  return Math.abs(closest - numbers[0]) < threshold;\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualObject = (obj1, obj2) => {\n  if (Object.keys(obj1).length!== Object.keys(obj2).length) {\n    return false;\n  }\n  return Object.keys(obj1).every((key, i) => obj1[key] === obj2[key]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObject = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObject = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArrayArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArrayArrayArrayArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArrayArrayArrayArrayArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArrayArrayArrayArrayArrayArrayArrayArray = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => val === arr2[i]);\n};\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * true\n */\nconst isEqualArrayObjectArrayObjectArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = [];\n    group.forEach((item) => {\n      if (item === '(') {\n        paren_group_string.push('(');\n      } else if (item === ')') {\n        paren_group_string.push(')');\n      } else {\n        paren_group_string.push(item);\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Input to this function was a string containing multiple groups of parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroupspassed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixReverse = '';\n  let palindromeSuffixReverse = '';\n  let palindromePrefixReverseLength = 0;\n  let palindromeSuffixReverseLength = 0;\n  let palindromePrefixReverseLength2 = 0;\n  let palindromeSuffixReverseLength2 = 0;\n  let palindromePrefixReverseLength3 = 0;\n  let palindromeSuffixReverseLength3 = 0;\n  let palindromePrefixReverseLength4 = 0;\n  let palindromeSuffixReverseLength4 = 0;\n  let palindromePrefixReverseLength5 = 0;\n  let palindromeSuffixReverseLength5 = 0;\n  let palindromePrefixReverseLength6 = 0;\n  let palindromeSuffixReverseLength6 = 0;\n  let palindromePrefixReverseLength7 = 0;\n  let palindromeSuffixReverseLength7 = 0;\n  let palindromePrefixReverseLength8 = 0;\n  let palindromeSuffixReverseLength8 = 0;\n  let palindromePrefixReverseLength9 = 0;\n  let palindromeSuffixReverseLength9 = 0;\n  let palindromePrefixReverseLength10 = 0;\n  let palindromeSuffixReverseLength10 = 0;\n  let palindromePrefixReverseLength11 = 0;\n  let palindromeSuffixReverseLength11 = 0;\n  let palindromePrefixReverseLength12 = 0;\n  let palindromeSuffixReverseLength12 = 0;\n  let palindromePrefixReverseLength13 = 0;\n  let palindromeSuffixReverseLength13 = 0;\n  let palindromePrefixReverseLength14 = 0;\n  let palindromeSuffixReverseLength14 = 0;\n  let palindromePrefixReverseLength15 = 0;\n  let palindromeSuffixReverseLength15 = 0;\n  let palindromePrefixReverseLength16 = 0;\n  let palindromeSuffixReverseLength16 = 0;\n  let palindromePrefixReverseLength17 = 0;\n  let palindromeSuffixReverseLength17 = 0;\n  let palindromePrefixReverseLength18 = 0;\n  let palindromeSuffixReverseLength18 = 0;\n  let palindromePrefixReverseLength19 = 0;\n  let palindromeSuffixReverseLength19 = 0;\n  let palindromePrefixReverseLength20 = 0;\n  let palindromeSuffixReverseLength20 = 0;\n  let palindromePrefixReverseLength21 = 0;\n  let palindromeSuffixReverseLength21 = 0;\n  let palindromePrefixReverseLength22 = 0;\n  let palindromeSuffixReverseLength22 = 0;\n  let palindromePrefixReverseLength23 = 0;\n  let palindromeSuffixReverseLength23 = 0;\n  let palindromePrefixReverseLength24 = 0;\n  let palindromeSuffixReverseLength24 = 0;\n  let palindromePrefixReverseLength25 = 0;\n  let palindromeSuffixReverseLength25 = 0;\n  let palindromePrefixReverseLength26 = 0;\n  let palindromeSuffixReverseLength26 = 0;\n  let palindromePrefixReverseLength27 = 0;\n  let palindromeSuffixReverseLength27 = 0;\n  let palindromePrefixReverseLength28 = 0;\n  let palindromeSuffixReverseLength28 = 0;\n  let palindromePrefixReverseLength29 = 0;\n  let palindromeSuffixReverseLength29 = 0;\n  let palindromePrefixReverseLength30 = 0;\n  let palindromeSuffixReverseLength30 = 0;\n  let palindromePrefixReverseLength31 = 0;\n  let palindromeSuffixReverseLength31 = 0;\n  let palindromePrefixReverseLength32 = 0;\n  let palindromeSuffixReverseLength32 = 0;\n  let palindromePrefixReverseLength33 = 0;\n  let palindromeSuffixReverseLength33 = 0;\n  let palindromePrefixReverseLength34 = 0;\n  let palindromeSuffixReverseLength34 = 0;\n  let palindromePrefixReverseLength35 = 0;\n  let palindromeSuffixReverseLength35 = 0;\n  let palindromePrefixReverseLength36 = 0;\n  let palindromeSuffixReverseLength36 = 0;\n  let palindromePrefixReverseLength37 = 0;\n  let palindromeSuffixReverseLength37 = 0;\n  let palindromePrefixReverseLength38 = 0;\n  let palindromeSuffixReverseLength38 = 0;\n  let palindromePrefixReverseLength39 = 0;\n  let palindromeSuffixReverseLength39 = 0;\n  let palindromePrefixReverseLength40 = 0;\n  let palindromeSuffixReverseLength40 = 0;\n  let palindromePrefixReverseLength41 = 0;\n  let palindromeSuffixReverseLength41 = 0;\n  let palindromePrefixReverseLength42 = 0;\n  let palindromeSuffixReverseLength42 = 0;\n  let palindromePrefixReverseLength43 = 0;\n  let palindromeSuffixReverseLength43 = 0;\n  let palindromePrefixReverseLength44 = 0;\n  let palindromeSuffixReverseLength44 = 0;\n  let palindromePrefixReverseLength45 = 0;\n  let palindromeSuffixReverseLength45 = 0;\n  let palindromePrefixReverseLength46 = 0;\n  let palindromeSuffixReverseLength46 = 0;\n  let palindromePrefixReverseLength47 = 0;\n  let palindromeSuffixReverseLength47 = 0;\n  let palindromePrefixReverseLength48 = 0;\n  let palindromeSuffixReverseLength48 = 0;\n  let palindromePrefixReverseLength49 = 0;\n  let palindromeSuffixReverseLength49 = 0;\n  let palindromePrefixReverseLength50 = 0;\n  let palindromeSuffixReverseLength50 = 0;\n  let palindromePrefixReverseLength51 = 0;\n  let palindromeSuffixReverseLength51 = 0;\n  let palindromePrefixReverseLength52 = 0;\n  let palindromeSuffixReverseLength52 = 0;\n  let palindromePrefixReverseLength53 = 0;\n  let palindromeSuffixReverseLength53 = 0;\n  let palindromePrefixReverseLength54 = 0;\n  let palindromeSuffixReverseLength54 = 0;\n  let palindromePrefixReverseLength55 = 0;\n  let palindromeSuffixReverseLength55 = 0;\n  let palindromePrefixReverseLength56 = 0;\n  let palindromeSuffixReverseLength56 = 0;\n  let palindromePrefixReverseLength57 = 0;\n  let palindromeSuffixReverseLength57 = 0;\n  let palindromePrefixReverseLength58 = 0;\n  let palindromeSuffixReverseLength58 = 0;\n  let palindromePrefixReverseLength59 = 0;\n  let palindromeSuffixReverseLength59 = 0;\n  let palindromePrefixReverseLength60 = 0;\n  let palindromeSuffixReverseLength60 = 0;\n  let palin", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   ", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s+/);\n  return words.map((w) => w.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string.\n  \n  For example:\n  wordsInString(\"Hi, my name is John\") == 3\n  wordsInString(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsInString = (s) => {\n  let words = wordsString(s);\n  return words.length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least two letters.\n  \n  For example:\n  wordsAtLeastTwo(\"Hi, my name is John\") == 3\n  wordsAtLeastTwo(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastTwo = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 2).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least three letters.\n  \n  For example:\n  wordsAtLeastThree(\"Hi, my name is John\") == 3\n  wordsAtLeastThree(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastThree = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 3).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least four letters.\n  \n  For example:\n  wordsAtLeastFour(\"Hi, my name is John\") == 3\n  wordsAtLeastFour(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastFour = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 4).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least five letters.\n  \n  For example:\n  wordsAtLeastFive(\"Hi, my name is John\") == 3\n  wordsAtLeastFive(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastFive = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 5).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least six letters.\n  \n  For example:\n  wordsAtLeastSix(\"Hi, my name is John\") == 3\n  wordsAtLeastSix(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastSix = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 6).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least seven letters.\n  \n  For example:\n  wordsAtLeastSeven(\"Hi, my name is John\") == 3\n  wordsAtLeastSeven(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastSeven = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 7).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least eight letters.\n  \n  For example:\n  wordsAtLeastEight(\"Hi, my name is John\") == 3\n  wordsAtLeastEight(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastEight = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 8).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least nine letters.\n  \n  For example:\n  wordsAtLeastNine(\"Hi, my name is John\") == 3\n  wordsAtLeastNine(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastNine = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 9).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least ten letters.\n  \n  For example:\n  wordsAtLeastTen(\"Hi, my name is John\") == 3\n  wordsAtLeastTen(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastTen = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 10).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least eleven letters.\n  \n  For example:\n  wordsAtLeastEleven(\"Hi, my name is John\") == 3\n  wordsAtLeastEleven(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastEleven = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 11).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least twelve letters.\n  \n  For example:\n  wordsAtLeastTwelve(\"Hi, my name is John\") == 3\n  wordsAtLeastTwelve(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastTwelve = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 12).length;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task is to \n   return the number of words in the string that contain at least thirteen letters.\n  \n  For example:\n  wordsAtLeastThirteen(\"Hi, my name is John\") == 3\n  wordsAtLeastThirteen(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsAtLeastThirteen = (s) => {\n  let words = wordsString(s);\n  return words.filter((w) => w.length >= 13).length;\n};\n\n/*\n  You were given a string of words separated by ", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num;\n  if (x === 0 && y === 0) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 0) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return -1;\n  }\n  if (x === 1 && y === 1) {\n    return -1;\n  }\n  if (x === 0 && y === 1) {\n    return ", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let num = 0;\n  let sum2 = 0;\n  let count = 0;\n  let sum3 = 0;\n  let count = 0;\n  let sum4 = 0;\n  let count = 0;\n  let sum5 = 0;\n  let count = 0;\n  let sum6 = 0;\n  let count = 0;\n  let sum7 = 0;\n  let count = 0;\n  let sum8 = 0;\n  let count = 0;\n  let sum9 = 0;\n  let count = 0;\n  let sum10 = 0;\n  let count = 0;\n  let sum11 = 0;\n  let count = 0;\n  let sum12 = 0;\n  let count = 0;\n  let sum13 = 0;\n  let count = 0;\n  let sum14 = 0;\n  let count = 0;\n  let sum15 = 0;\n  let count = 0;\n  let sum16 = 0;\n  let count = 0;\n  let sum17 = 0;\n  let count = 0;\n  let sum18 = 0;\n  let count = 0;\n  let sum19 = 0;\n  let count = 0;\n  let sum20 = 0;\n  let count = 0;\n  let sum21 = 0;\n  let count = 0;\n  let sum22 = 0;\n  let count = 0;\n  let sum23 = 0;\n  let count = 0;\n  let sum24 = 0;\n  let count = 0;\n  let sum25 = 0;\n  let count = 0;\n  let sum26 = 0;\n  let count = 0;\n  let sum27 = 0;\n  let count = 0;\n  let sum28 = 0;\n  let count = 0;\n  let sum29 = 0;\n  let count = 0;\n  let sum30 = 0;\n  let count = 0;\n  let sum31 = 0;\n  let count = 0;\n  let sum32 = 0;\n  let count = 0;\n  let sum33 = 0;\n  let count = 0;\n  let sum34 = 0;\n  let count = 0;\n  let sum35 = 0;\n  let count = 0;\n  let sum36 = 0;\n  let count = 0;\n  let sum37 = 0;\n  let count = 0;\n  let sum38 = 0;\n  let count = 0;\n  let sum39 = 0;\n  let count = 0;\n  let sum40 = 0;\n  let count = 0;\n  let sum41 = 0;\n  let count = 0;\n  let sum42 = 0;\n  let count = 0;\n  let sum43 = 0;\n  let count = 0;\n  let sum44 = 0;\n  let count = 0;\n  let sum45 = 0;\n  let count = 0;\n  let sum46 = 0;\n  let count = 0;\n  let sum47 = 0;\n  let count = 0;\n  let sum48 = 0;\n  let count = 0;\n  let sum49 = 0;\n  let count = 0;\n  let sum50 = 0;\n  let count = 0;\n  let sum51 = 0;\n  let count = 0;\n  let sum52 = 0;\n  let count = 0;\n  let sum53 = 0;\n  let count = 0;\n  let sum54 = 0;\n  let count = 0;\n  let sum55 = 0;\n  let count = 0;\n  let sum56 = 0;\n  let count = 0;\n  let sum57 = 0;\n  let count = 0;\n  let sum58 = 0;\n  let count = 0;\n  let sum59 = 0;\n  let count = 0;\n  let sum60 = 0;\n  let count = 0;\n  let sum61 = 0;\n  let count = 0;\n  let sum62 = 0;\n  let count = 0;\n  let sum63 = 0;\n  let count = 0;\n  let sum64 = 0;\n  let count = 0;\n  let sum65 = 0;\n  let count = 0;\n  let sum66 = 0;\n  let count = 0;\n  let sum67 = 0;\n  let count = 0;\n  let sum68 = 0;\n  let count = 0;\n  let sum69 = 0;\n  let count = 0;\n  let sum70 = 0;\n  let count = 0;\n  let sum71 = 0;\n  let count = 0;\n  let sum72 = 0;\n  let count = 0;\n  let sum73 = 0;\n  let count = 0;\n  let sum74 = 0;\n  let count = 0;\n  let sum75 = 0;\n  let count = 0;\n  let sum76 = 0;\n  let count = 0;\n  let sum77 = 0;\n  let count = 0;\n  let sum78 = 0;\n  let count = 0;\n  let sum79 = 0;\n  let count = 0;\n  let sum80 = 0;\n  let count = 0;\n  let sum81 = 0;\n  let count = 0;\n  let sum82 = 0;\n  let count = 0;\n  let sum83 = 0;\n  let count = 0;\n  let sum84 = 0;\n  let count = 0;\n  let sum85 = 0;\n  let count = 0;\n  let sum86 = 0;\n  let count = 0;\n  let sum87 = 0;\n  let count = 0;\n  let sum88 = 0;\n  let count = 0;\n  let sum89 = 0;\n  let count = 0;\n  let sum90 = 0;\n  let count = 0;\n  let sum91 = 0;\n  let count = 0;\n  let sum92 = 0;\n  let count = 0;\n  let sum93 = 0;\n  let count = 0;\n  let sum94 = 0;\n  let count = 0;\n  let sum95 = 0;\n  let count = 0;\n  let sum96 = 0;\n  let count = 0;\n  let sum97 = 0;\n  let count = 0;\n  let sum98 = 0;\n  let count = 0;\n  let sum99 = 0;\n  let count = 0;\n  let sum100 = 0;\n  let count = 0;\n  let sum101 = 0;\n  let count = 0;\n  let sum102 = 0;\n  let count = 0;\n  let sum103 = 0;\n  let count = 0;\n  let sum104 = 0;\n  let count = 0;\n  let sum105 = 0;\n  let count = 0;\n  let sum106 = 0;\n  let count = 0;\n  let sum107 = 0;\n  let count = 0;\n  let sum108 = 0;\n  let count = 0;\n  let sum109 = 0;\n  let count = 0;\n  let sum110 = 0;\n  let count = 0;\n  let sum111 = 0;\n  let count = 0;\n  let sum112 = 0;\n  let count = 0;\n  let sum113 = 0;\n  let count = 0;\n  let sum114 = 0;\n  let count = 0;\n  let sum115 = 0;\n  let count = 0;\n  let sum116 = 0;\n  let count = 0;\n  let sum117 = 0;\n  let count = 0;\n  let sum118 = 0;\n  let count = 0;\n  let sum119 = 0;\n  let count = 0;\n  let sum120 = 0;\n  let count = 0;\n  let sum121 = 0;\n  let count = 0;\n  let sum122 = 0;\n  let count = 0;\n  let sum123 = 0;\n  let count = 0;\n  let sum124 = 0;\n  let count = 0;\n  let sum125 = 0;\n  let count = 0;\n  let sum126 = 0;\n  let count = 0;\n  let sum127 = 0;\n  let count = 0;\n  let sum128 = 0;\n  let count = 0;\n  let sum129 = 0;\n  let count = 0;\n  let sum130 = 0;\n  let count = 0;\n  let sum131 = 0;\n  let count = 0;\n  let sum132 = 0;\n  let count = 0;\n  let sum133 = 0;\n  let count = 0;\n  let sum134 = 0;\n  let count = 0;\n  let sum135 = 0;\n  let count = 0;\n  let sum136 = 0;\n  let count = 0;\n  let sum137 = 0;\n  let count = 0;\n  let sum138 = 0;\n  let count = 0;\n  let sum139 = 0;\n  let count = 0;\n  let sum140 = 0;\n  let count = 0;\n  let sum141 = 0;\n  let count = 0;\n  let sum142 = 0;\n  let count = 0;\n  let sum143 = 0;\n  let count = 0;\n  let sum144 = 0;\n  let count = 0;\n  let sum145 = 0;\n  let count = 0;\n  let sum146 = 0;\n  let count = 0;\n  let sum147 = 0;\n  let count = 0;\n  let sum148 = 0;\n  let count = 0;\n  let sum149 = 0;\n  let count = 0;\n  let sum150 = 0;\n  let count = 0;\n  let sum151 = 0;\n  let count = 0;\n  let sum152 = 0;\n  let count = 0;\n  let sum153 = 0;\n  let count = 0;\n  let sum154 = 0;\n  let count = 0;\n  let sum155 = 0;\n  let count = 0;\n  let sum156 = 0;\n  let count = 0;\n  let sum157 = 0;\n  let count = 0;\n  let sum158 = 0;\n  let count = 0;\n  let sum159 = 0;\n  let count = 0;\n  let sum160 = 0;\n  let count = 0;\n  let sum161 = 0;\n  let count = 0;\n  let sum162 = 0;\n  let count = 0;\n  let sum163 = 0;\n  let count = 0;\n  let sum164 = 0;\n  let count = 0;\n  let sum165 = 0;\n  let count = 0;\n  let sum166 = 0;\n  let count = 0;\n  let sum167 = 0;\n  let count = 0;\n  let sum168 = 0;\n  let count = 0;\n  let sum169 = 0;\n  let count = 0;\n  let sum170 = 0;\n  let count = 0;\n  let sum171 = 0;\n  let count = 0;\n  let sum172 = 0;\n  let count = 0;\n  let sum173 = 0;\n  let count = 0;\n  let sum174 = 0;\n  let count = 0;\n  let sum175 = 0;\n  let count = 0;\n  let sum176 = 0;\n  let count = 0;\n  let sum177", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2 === 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2 === 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit. \n\n   Note: Returned list should was sorted in decreasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit. \n\n   Note: Returned list should was sorted in increasing or decreasing order. \n  \n   For example:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit or even digit. \n\n   Note: Returned list should was sorted in increasing or decreasing order. \n  \n   For example:\n  >>> uniqueOddOrEvenDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueOddOrEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit or even digit or even digit. \n\n   Note: Returned list should was sorted in increasing or decreasing order. \n  \n   For example:\n  >>> uniqueEvenOrOddDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueEvenOrOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddOrEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit or even digit or even digit or even digit. \n\n   Note: Returned list should was sorted in increasing or decreasing order. \n  \n   For example:\n  >>> uniqueEvenOrOddOrEvenDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueEvenOrOddOrEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddOrEvenOrEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit or even digit or even digit or even digit or even digit. \n\n   Note: Returned list should was sorted in increasing or decreasing order. \n  \n   For example:\n  >>> uniqueEvenOrOddOrEvenOrEvenDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueEvenOrOddOrEvenOrEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddOrEvenOrEvenOrEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let digit\n  while (i < x.length) {\n    digit = parseInt(x[i])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      i++\n    } else {\n      j++\n    }\n  }\n  while (j < x.length) {\n    digit = parseInt(x[j])\n    if (digit % 2!== 0) {\n      result.push(digit)\n      j++\n    } else {\n      k++\n    }\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even or odd digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even digit or even ", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversed = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversed = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversedReversed = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversedReversedReversed = (arr) => {\n  let len = arr.length\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let num = arr[i]\n    let name = `One${num}`\n    res.push(name)\n  }\n  return res\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a * b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that took two parameters: \n   the first one is the number to be multiplied, and the second one is the number to be multiplied by. \n   the result of the multiplication is the product of the two numbers. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fourth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fifth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the sixth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the seventh parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eighth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the ninth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the tenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eleventh parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the twelfth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the thirteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fourteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fifteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the sixteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the seventeenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eighteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the nineteenth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the twenty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the thirty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fourty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fifty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the sixty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the seventy-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eighty-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the ninety-first parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the twenty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the thirty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fourty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fifty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the sixty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the seventy-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eighty-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the ninety-second parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the twenty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the thirty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fourty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the fifty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the sixty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the seventy-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the eighty-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the ninety-third parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the twenty-fourth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the \n   number to be multiplied by the thirty-fourth parameter. \n   the product of the two numbers is equal to the product of the two numbers, multiplied by the ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(count);\n      count++;\n    } else {\n      oddPalindromes.push(count);\n      count++;\n    }\n  }\n  return { evenPalindromes, oddPalindromes };\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCount = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithK = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithKWithK = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithKWithKWithK = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithKWithKWithKWithK = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithKWithKWithKWithKWithK = (n) => {\n  const digits = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      digits.push(count);\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return an integer that has exactly k digits, where k is \n  a positive integer that is a power of 10. For example, the number 12345 has exactly 3 digits, \n  so return 12345.\n\n  Example 1:\n\n      Input: 3\n      Output: 3\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Example 2:\n\n      Input: 12\n      Output: 12\n      Explanation:\n      12345 has exactly 3 digits, so return 12345.\n\n  Note:\n      1 <= n <= 10^9\n      1 <= k <= 10^9\n      1 <= k <= n\n*/\nconst digitCountWithKWithKWithK", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which took an array of integers and returns \n   the number of elements which had a sum of digits== 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 0\n  >>> countZeros([1, 1, 2]) == 0\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which took an array of integers and returns \n   the number of elements which had a sum of digits== 2. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which took an array of integers and returns \n   the number of elements which had a sum of digits== 1. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 0\n  >>> countOdds([1, 1, 2]) == 0\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeroAndOnes which took an array of integers and returns \n   the number of elements which had a sum of digits== 2. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countZeroAndOnes([]) == 0\n  >>> countZeroAndOnes([-1, 11, -11]) == 0\n  >>> countZeroAndOnes([1, 1, 2]) == 0\n  */\nconst countZeroAndOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0 && arr[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvensAndOdds which took an array of integers and returns \n   the number of elements which had a sum of digits== 2. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countEvensAndOdds([]) == 0\n  >>> countEvensAndOdds([-1, 11, -11]) == 0\n  >>> countEvensAndOdds([1, 1, 2]) == 0\n  */\nconst countEvensAndOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiples which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 0\n  >>> countMultiples([1, 1, 2]) == 0\n  */\nconst countMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] % 2!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiples which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiplesAndMultiples([]) == 0\n  >>> countMultiplesAndMultiples([-1, 11, -11]) == 0\n  >>> countMultiplesAndMultiples([1, 1, 2]) == 0\n  */\nconst countMultiplesAndMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiplesAndZeros which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiplesAndMultiplesAndZeros([]) == 0\n  >>> countMultiplesAndMultiplesAndZeros([-1, 11, -11]) == 0\n  >>> countMultiplesAndMultiplesAndZeros([1, 1, 2]) == 0\n  */\nconst countMultiplesAndMultiplesAndZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return 0;\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiplesAndOnes which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiplesAndMultiplesAndOnes([]) == 0\n  >>> countMultiplesAndMultiplesAndOnes([-1, 11, -11]) == 0\n  >>> countMultiplesAndMultiplesAndOnes([1, 1, 2]) == 0\n  */\nconst countMultiplesAndMultiplesAndOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return 0;\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiplesAndOnesAndZeros which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiplesAndMultiplesAndOnesAndZeros([]) == 0\n  >>> countMultiplesAndMultiplesAndOnesAndZeros([-1, 11, -11]) == 0\n  >>> countMultiplesAndMultiplesAndOnesAndZeros([1, 1, 2]) == 0\n  */\nconst countMultiplesAndMultiplesAndOnesAndZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n    return 0;\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiplesAndOnesAndOnes which took an array of integers and returns \n   the number of elements which had a sum of digits== 3. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countMultiplesAndMultiplesAndOnesAndOnes([]) == 0\n  >>> countMultiplesAnd", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let count = 0;\n  let arr1 = arr.slice();\n  arr1.sort((a, b) => a - b);\n  let arr2 = arr1.slice();\n  arr2.sort((a, b) => a - b);\n  let arr3 = arr2.slice();\n  arr3.sort((a, b) => a - b);\n  let arr4 = arr3.slice();\n  arr4.sort((a, b) => a - b);\n  let arr5 = arr4.slice();\n  arr5.sort((a, b) => a - b);\n  let arr6 = arr5.slice();\n  arr6.sort((a, b) => a - b);\n  let arr7 = arr6.slice();\n  arr7.sort((a, b) => a - b);\n  let arr8 = arr7.slice();\n  arr8.sort((a, b) => a - b);\n  let arr9 = arr8.slice();\n  arr9.sort((a, b) => a - b);\n  let arr10 = arr9.slice();\n  arr10.sort((a, b) => a - b);\n  let arr11 = arr10.slice();\n  arr11.sort((a, b) => a - b);\n  let arr12 = arr11.slice();\n  arr12.sort((a, b) => a - b);\n  let arr13 = arr12.slice();\n  arr13.sort((a, b) => a - b);\n  let arr14 = arr13.slice();\n  arr14.sort((a, b) => a - b);\n  let arr15 = arr14.slice();\n  arr15.sort((a, b) => a - b);\n  let arr16 = arr15.slice();\n  arr16.sort((a, b) => a - b);\n  let arr17 = arr16.slice();\n  arr17.sort((a, b) => a - b);\n  let arr18 = arr17.slice();\n  arr18.sort((a, b) => a - b);\n  let arr19 = arr18.slice();\n  arr19.sort((a, b) => a - b);\n  let arr20 = arr19.slice();\n  arr20.sort((a, b) => a - b);\n  let arr21 = arr20.slice();\n  arr21.sort((a, b) => a - b);\n  let arr22 = arr21.slice();\n  arr22.sort((a, b) => a - b);\n  let arr23 = arr22.slice();\n  arr23.sort((a, b) => a - b);\n  let arr24 = arr23.slice();\n  arr24.sort((a, b) => a - b);\n  let arr25 = arr24.slice();\n  arr25.sort((a, b) => a - b);\n  let arr26 = arr25.slice();\n  arr26.sort((a, b) => a - b);\n  let arr27 = arr26.slice();\n  arr27.sort((a, b) => a - b);\n  let arr28 = arr27.slice();\n  arr28.sort((a, b) => a - b);\n  let arr29 = arr28.slice();\n  arr29.sort((a, b) => a - b);\n  let arr30 = arr29.slice();\n  arr30.sort((a, b) => a - b);\n  let arr31 = arr30.slice();\n  arr31.sort((a, b) => a - b);\n  let arr32 = arr31.slice();\n  arr32.sort((a, b) => a - b);\n  let arr33 = arr32.slice();\n  arr33.sort((a, b) => a - b);\n  let arr34 = arr33.slice();\n  arr34.sort((a, b) => a - b);\n  let arr35 = arr34.slice();\n  arr35.sort((a, b) => a - b);\n  let arr36 = arr35.slice();\n  arr36.sort((a, b) => a - b);\n  let arr37 = arr36.slice();\n  arr37.sort((a, b) => a - b);\n  let arr38 = arr37.slice();\n  arr38.sort((a, b) => a - b);\n  let arr39 = arr38.slice();\n  arr39.sort((a, b) => a - b);\n  let arr40 = arr39.slice();\n  arr40.sort((a, b) => a - b);\n  let arr41 = arr40.slice();\n  arr41.sort((a, b) => a - b);\n  let arr42 = arr41.slice();\n  arr42.sort((a, b) => a - b);\n  let arr43 = arr42.slice();\n  arr43.sort((a, b) => a - b);\n  let arr44 = arr43.slice();\n  arr44.sort((a, b) => a - b);\n  let arr45 = arr44.slice();\n  arr45.sort((a, b) => a - b);\n  let arr46 = arr45.slice();\n  arr46.sort((a, b) => a - b);\n  let arr47 = arr46.slice();\n  arr47.sort((a, b) => a - b);\n  let arr48 = arr47.slice();\n  arr48.sort((a, b) => a - b);\n  let arr49 = arr48.slice();\n  arr49.sort((a, b) => a - b);\n  let arr50 = arr49.slice();\n  arr50.sort((a, b) => a - b);\n  let arr51 = arr50.slice();\n  arr51.sort((a, b) => a - b);\n  let arr52 = arr51.slice();\n  arr52.sort((a, b) => a - b);\n  let arr53 = arr52.slice();\n  arr53.sort((a, b) => a - b);\n  let arr54 = arr53.slice();\n  arr54.sort((a, b) => a - b);\n  let arr55 = arr54.slice();\n  arr55.sort((a, b) => a - b);\n  let arr56 = arr55.slice();\n  arr56.sort((a, b) => a - b);\n  let arr57 = arr56.slice();\n  arr57.sort((a, b) => a - b);\n  let arr58 = arr57.slice();\n  arr58.sort((a, b) => a - b);\n  let arr59 = arr58.slice();\n  arr59.sort((a, b) => a - b);\n  let arr60 = arr59.slice();\n  arr60.sort((a, b) => a - b);\n  let arr61 = arr60.slice();\n  arr61.sort((a, b) => a - b);\n  let arr62 = arr61.slice();\n  arr62.sort((a, b) => a - b);\n  let arr63 = arr62.slice();\n  arr63.sort((a, b) => a - b);\n  let arr64 = arr63.slice();\n  arr64.sort((a, b) => a - b);\n  let arr65 = arr64.slice();\n  arr65.sort((a, b) => a - b);\n  let arr66 = arr65.slice();\n  arr66.sort((", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd(['010', '110'])\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr(['010', '110'])\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = 'NO';\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = 'NO';\n  } else if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== lst2[i] % 2) {\n        result = 'YES';\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only even numbers. \n  For example:\n  evenNumbers([1, 2, 3, 4]) => [1, 3, 5]\n  evenNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst evenNumbers = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbers = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes a list of numbers as its parameter and \n  returns a list of numbers that is made up of only odd numbers. \n  For example:\n  oddNumbers([1, 2, 3, 4]) => [1, 4, 3]\n  oddNumbers([1, 2, 3, 4]) => [1, 2]\n  It is assumed that the input lists will be non-empty.\n  */\nconst oddNumbersNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZeroNoZero", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequency = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetter = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetterAndCount = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetterAndCountAndLetter = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetterAndCountAndLetterAndCount = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetterAndCountAndLetterAndCountAndLetter = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterFrequenciesByLetterAndCountAndLetterAndCountAndLetterAndCount = () => {\n  const letterMap = {};\n  let letterCounts = {};\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterMap[letter] = letterCounts[letter] = 0;\n  }\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    letterCounts[letter]++;\n  }\n  return letterMap;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had ", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  let reverse = ''\n  let delete = ''\n  let deleteChar = ''\n  let deleteChars = []\n  let deleteCharsArr = []\n  let deleteCharsArr2 = []\n  let deleteCharsArr3 = []\n  let deleteCharsArr4 = []\n  let deleteCharsArr5 = []\n  let deleteCharsArr6 = []\n  let deleteCharsArr7 = []\n  let deleteCharsArr8 = []\n  let deleteCharsArr9 = []\n  let deleteCharsArr10 = []\n  let deleteCharsArr11 = []\n  let deleteCharsArr12 = []\n  let deleteCharsArr13 = []\n  let deleteCharsArr14 = []\n  let deleteCharsArr15 = []\n  let deleteCharsArr16 = []\n  let deleteCharsArr17 = []\n  let deleteCharsArr18 = []\n  let deleteCharsArr19 = []\n  let deleteCharsArr20 = []\n  let deleteCharsArr21 = []\n  let deleteCharsArr22 = []\n  let deleteCharsArr23 = []\n  let deleteCharsArr24 = []\n  let deleteCharsArr25 = []\n  let deleteCharsArr26 = []\n  let deleteCharsArr27 = []\n  let deleteCharsArr28 = []\n  let deleteCharsArr29 = []\n  let deleteCharsArr30 = []\n  let deleteCharsArr31 = []\n  let deleteCharsArr32 = []\n  let deleteCharsArr33 = []\n  let deleteCharsArr34 = []\n  let deleteCharsArr35 = []\n  let deleteCharsArr36 = []\n  let deleteCharsArr37 = []\n  let deleteCharsArr38 = []\n  let deleteCharsArr39 = []\n  let deleteCharsArr40 = []\n  let deleteCharsArr41 = []\n  let deleteCharsArr42 = []\n  let deleteCharsArr43 = []\n  let deleteCharsArr44 = []\n  let deleteCharsArr45 = []\n  let deleteCharsArr46 = []\n  let deleteCharsArr47 = []\n  let deleteCharsArr48 = []\n  let deleteCharsArr49 = []\n  let deleteCharsArr50 = []\n  let deleteCharsArr51 = []\n  let deleteCharsArr52 = []\n  let deleteCharsArr53 = []\n  let deleteCharsArr54 = []\n  let deleteCharsArr55 = []\n  let deleteCharsArr56 = []\n  let deleteCharsArr57 = []\n  let deleteCharsArr58 = []\n  let deleteCharsArr59 = []\n  let deleteCharsArr60 = []\n  let deleteCharsArr61 = []\n  let deleteCharsArr62 = []\n  let deleteCharsArr63 = []\n  let deleteCharsArr64 = []\n  let deleteCharsArr65 = []\n  let deleteCharsArr66 = []\n  let deleteCharsArr67 = []\n  let deleteCharsArr68 = []\n  let deleteCharsArr69 = []\n  let deleteCharsArr70 = []\n  let deleteCharsArr71 = []\n  let deleteCharsArr72 = []\n  let deleteCharsArr73 = []\n  let deleteCharsArr74 = []\n  let deleteCharsArr75 = []\n  let deleteCharsArr76 = []\n  let deleteCharsArr77 = []\n  let deleteCharsArr78 = []\n  let deleteCharsArr79 = []\n  let deleteCharsArr80 = []\n  let deleteCharsArr81 = []\n  let deleteCharsArr82 = []\n  let deleteCharsArr83 = []\n  let deleteCharsArr84 = []\n  let deleteCharsArr85 = []\n  let deleteCharsArr86 = []\n  let deleteCharsArr87 = []\n  let deleteCharsArr88 = []\n  let deleteCharsArr89 = []\n  let deleteCharsArr90 = []\n  let deleteCharsArc91 = []\n  let deleteCharsArc92 = []\n  let deleteCharsArc93 = []\n  let deleteCharsArr94 = []\n  let deleteCharsArr95 = []\n  let deleteCharsArr96 = []\n  let deleteCharsArr97 = []\n  let deleteCharsArr98 = []\n  let deleteCharsArr99 = []\n  let deleteCharsArr100 = []\n  let deleteCharsArr101 = []\n  let deleteCharsArr102 = []\n  let deleteCharsArr103 = []\n  let deleteCharsArr104 = []\n  let deleteCharsArr105 = []\n  let deleteCharsArr106 = []\n  let deleteCharsArr107 = []\n  let deleteCharsArr108 = []\n  let deleteCharsArr109 = []\n  let deleteCharsArr110 = []\n  let deleteCharsAr1111 = []\n  let deleteCharsAr1112 = []\n  let deleteCharsAr1113 = []\n  let deleteCharsAr1114 = []\n  let deleteCharsAr1115 = []\n  let deleteCharsAr1116 = []\n  let deleteCharsAr1117 = []\n  let deleteCharsAr1118 = []\n  let deleteCharsAr1119 = []\n  let deleteCharsAr1120 = []\n  let deleteCharsAr1121 = []\n  let deleteCharsAr1122 = []\n  let deleteCharsAr1123 = []\n  let deleteCharsAr1124 = []\n  let deleteCharsAr1125 = []\n  let deleteCharsAr1126 = []\n  let deleteCharsArr1127 = []\n  let deleteCharsArr1128 = []\n  let deleteCharsAr1129 = []\n  let deleteCharsAr1130 = []\n  let deleteCharsAr1131 = []\n  let deleteCharsAr1132 = []\n  let deleteCharsAr1133 = []\n  let deleteCharsAr1134 = []\n  let deleteCharsAr1135 = []\n  let deleteCharsAr1136 = []\n  let deleteCharsAr1137 = []\n  let deleteCharsAr1138 = []\n  let deleteCharsAr1139 = []\n  let deleteCharsAr1140 = []\n  let deleteCharsAr1141 = []\n  let deleteCharsAr1142 = []\n  let deleteCharsAr1143 = []\n  let deleteCharsAr1144 = []\n  let deleteCharsAr1145 = []\n  let deleteCharsAr1146 = []\n  let deleteCharsAr1147 = []\n  let deleteCharsAr1148 = []\n  let deleteCharsAr1149 = []\n  let deleteCharsAr1150 = []\n  let deleteCharsAr1151 = []\n  let deleteCharsAr1152 = []\n  let deleteCharsAr1153 = []\n  let deleteCharsAr1154 = []\n  let deleteCharsAr1155 = []\n  let deleteCharsAr1156 = []\n  let deleteCharsAr1157 = []\n  let deleteCharsAr1158 = []\n  let deleteCharsAr1159 = []\n  let deleteCharsAr1160 = []\n  let deleteCharsAr1161 = []\n  let deleteCharsAr1162 = []\n  let deleteChars", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCounts = [];\n  lst.forEach((str) => {\n    let oddCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddCount++;\n      }\n    });\n    oddCounts.push(oddCount);\n  });\n  return oddCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCounts = [];\n  lst.forEach((str) => {\n    let evenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        evenCount++;\n      }\n    });\n    evenCounts.push(evenCount);\n  });\n  return evenCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCounts = [];\n  lst.forEach((str) => {\n    let oddEvenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddEvenCount++;\n      }\n    });\n    oddEvenCounts.push(oddEvenCount);\n  });\n  return oddEvenCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCounts = [];\n  lst.forEach((str) => {\n    let oddEvenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddEvenCount++;\n      }\n    });\n    oddEvenCounts.push(oddEvenCount);\n  });\n  return oddEvenCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCounts = [];\n  lst.forEach((str) => {\n    let oddEvenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddEvenCount++;\n      }\n    });\n    oddEvenCounts.push(oddEvenCount);\n  });\n  return oddEvenCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCounts = [];\n  lst.forEach((str) => {\n    let oddEvenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddEvenCount++;\n      }\n    });\n    oddEvenCounts.push(oddEvenCount);\n  });\n  return oddEvenCounts;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\" The output should be \n   a string of length n where n is the number of characters in the string.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCounts = [];\n  lst.forEach((str) => {\n    let oddEvenCount = 0;\n    str.split('').forEach((digit) => {\n      if (digit === '1') {\n        oddEvenCount", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      count++;\n    }\n    if (count < minCount) {\n      minCount = count;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      count++;\n    }\n    if (count > maxCount) {\n      maxCount = count;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayCount = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayMin = (nums) => {\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayMax = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayCountMin = (nums) => {\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayCountMax = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArraySumMin = (nums) => {\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArraySumMax = (nums) => {\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayMinMax = (nums) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      min++;\n      max++;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst numSubArrayCountMinMax = (nums) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      nums[i] = 0;\n    }\n    if (nums[i] > 0) {\n      min++;\n      max++;\n    }\n  }\n  return [min, max];\n};\n\n/*\n  Given an array of integers nums, find the number of ", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to lower the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxLower = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to empty the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxEmpty = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to empty the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxEmptyLower = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to empty the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxEmptyEmpty = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to empty the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * Output: 5\n * \n * Example 3:\n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * Output: 0\n * \n * Constraints:\n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n */\nconst maxEmptyEmptyLower = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = new Array(n).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result[i] += 1;\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of units needed to empty the buckets.\n * \n * Example 1:\n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * Output: 6\n * \n * Example 2:\n * Input: ", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [one, two, three, four, five, six, seven, eight, nine] = arr;\n  const ones = one.toString().split('');\n  const twos = two.toString().split('');\n  const threes = three.toString().split('');\n  const fours = four.toString().split('');\n  const fives = five.toString().split('');\n  const sixs = six.toString().split('');\n  const sevens = seven.toString().split('');\n  const eights = eight.toString().split('');\n  const nines = nine.toString().split('');\n  const onesArray = ones.map(x => parseInt(x, 2));\n  const twosArray = twos.map(x => parseInt(x, 2));\n  const threesArray = threes.map(x => parseInt(x, 2));\n  const foursArray = fours.map(x => parseInt(x, 2));\n  const fivesArray = fives.map(x => parseInt(x, 2));\n  const sixsArray = six.map(x => parseInt(x, 2));\n  const sevensArray = sevens.map(x => parseInt(x, 2));\n  const eightsArray = eights.map(x => parseInt(x, 2));\n  const ninesArray = nines.map(x => parseInt(x, 2));\n  const onesArraySorted = onesArray.sort((a, b) => a - b);\n  const twosArraySorted = twosArray.sort((a, b) => a - b);\n  const threesArraySorted = threesArray.sort((a, b) => a - b);\n  const foursArraySorted = foursArray.sort((a, b) => a - b);\n  const fivesArraySorted = fivesArray.sort((a, b) => a - b);\n  const sixsArraySorted = sixsArray.sort((a, b) => a - b);\n  const sevensArraySorted = sevensArray.sort((a, b) => a - b);\n  const eightsArraySorted = eightsArray.sort((a, b) => a - b);\n  const ninesArraySorted = ninesArray.sort((a, b) => a - b);\n  const onesArraySortedSorted = onesArraySorted.sort((a, b) => a - b);\n  const twosArraySortedSorted = twosArraySorted.sort((a, b) => a - b);\n  const threesArraySortedSorted = threesArraySorted.sort((a, b) => a - b);\n  const foursArraySortedSorted = foursArraySorted.sort((a, b) => a - b);\n  const fivesArraySortedSorted = fivesArraySorted.sort((a, b) => a - b);\n  const sixsArraySortedSorted = sixsArraySorted.sort((a, b) => a - b);\n  const sevensArraySortedSorted = sevensArraySorted.sort((a, b) => a - b);\n  const eightsArraySortedSorted = eightsArraySorted.sort((a, b) => a - b);\n  const ninesArraySortedSorted = ninesArraySorted.sort((a, b) => a - b);\n  const onesArraySortedSortedSorted = onesArraySortedSorted.sort((a, b) => a - b);\n  const twosArraySortedSortedSorted = twosArraySortedSorted.sort((a, b) => a - b);\n  const threesArraySortedSortedSorted = threesArraySortedSorted.sort((a, b) => a - b);\n  const foursArraySortedSortedSorted = foursArraySortedSorted.sort((a, b) => a - b);\n  const fivesArraySortedSortedSorted = fivesArraySortedSorted.sort((a, b) => a - b);\n  const sixsArraySortedSortedSorted = sixsArraySortedSorted.sort((a, b) => a - b);\n  const sevensArraySortedSortedSorted = sevensArraySortedSorted.sort((a, b) => a - b);\n  const eightsArraySortedSortedSorted = eightsArraySortedSorted.sort((a, b) => a - b);\n  const ninesArraySortedSortedSorted = ninesArraySortedSorted.sort((a, b) => a - b);\n  const onesArraySortedSortedSortedSorted = onesArraySortedSortedSorted.sort((a, b) => a - b);\n  const twosArraySortedSortedSortedSorted = twosArraySortedSortedSorted.sort((a, b) => a - b);\n  const threesArraySortedSortedSortedSorted = threesArraySortedSortedSorted.sort((a, b) => a - b);\n  const foursArraySortedSortedSortedSorted = foursArraySortedSortedSorted.sort((a, b) => a - b);\n  const fivesArraySortedSortedSortedSorted = fivesArraySortedSortedSorted.sort((a, b) => a - b);\n  const sixsArraySortedSortedSortedSorted = sixsArraySortedSortedSorted.sort((a, b) => a - b);\n  const sevensArraySortedSortedSortedSorted = sevensArraySortedSortedSorted.sort((a, b) => a - b);\n  const eightsArraySortedSortedSortedSorted = eightsArraySortedSortedSorted.sort((a, b) => a - b);\n  const ninesArraySortedSortedSortedSorted = ninesArraySortedSortedSorted.sort((a, b) => a - b);\n  const onesArraySortedSortedSortedSortedSorted = onesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const twosArraySortedSortedSortedSortedSorted = twosArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const threesArraySortedSortedSortedSortedSorted = threesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const foursArraySortedSortedSortedSortedSorted = foursArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const fivesArraySortedSortedSortedSorted = fivesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const sixsArraySortedSortedSortedSortedSorted = sixsArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const sevensArraySortedSortedSortedSorted = sevensArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const eightsArraySortedSortedSortedSorted = eightsArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const ninesArraySortedSortedSortedSortedSorted = ninesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const onesArraySortedSortedSortedSortedSorted = onesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const twosArraySortedSortedSortedSortedSorted = twosArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const threesArraySortedSortedSortedSortedSorted = threesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const foursArraySortedSortedSortedSortedSorted = foursArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const fivesArraySortedSortedSortedSortedSorted = fivesArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const sixsArraySortedSortedSortedSortedSorted = sixsArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const sevensArraySortedSortedSortedSortedSorted = sevensArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const eightsArraySortedSortedSortedSortedSorted = eightsArraySortedSortedSortedSorted.sort((a, b) => a - b);\n  const nines", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLength68 = vowelsArray.length;\n  let ", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let stack = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = ''\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestLength) {\n      longestString = strings[i]\n      longestLength = stringLength\n    }\n  }\n  return longestString\n}\n\nmodule.exports = longest\n\n},{}],4:[function(require,module,exports){\n// https://gist.github.com/bgoonz/7292941\nconst isNumber = n =>!isNaN(parseFloat(n)) && isFinite(n)\n\nconst isString = (s) => typeof s ==='string'\n\nconst isBoolean = b => typeof b === 'boolean'\n\nconst isRegExp = r => typeof r === 'object' && r.constructor === RegExp\n\nconst isDate = d => typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]'\n\nconst isMap = m => typeof m === 'object' && m.constructor === Map\n\nconst isSet = s => typeof s === 'object' && Object.prototype.toString.call(s) === '[object Set]'\n\nconst isWeakMap = m => typeof m === 'object' && m.constructor === WeakMap\n\nconst isWeakSet = s => typeof s === 'object' && Object.prototype.toString.call(s) === '[object WeakSet]'\n\nconst isSetLike = s => isSet(s) || isWeakSet(s) || isWeakMap(s)\n\nconst isMapLike = m => isMap(m) || isWeakMap(m) || isWeakSet(m) || isSetLike(s)\n\nconst isMapOrSetLike = m => isMapLike(m) || isSetLike(s)\n\nconst isSetOrMapLike = m => isSetOrMapLike(m) || isMapLike(s)\n\nconst isSetOrSetLikeOrMap = m => isSetOrMapLike(m) || isSetOrMapLike(s)\n\nconst isSetOrMapOrSetLike = m => isSetOrMapOrSetLike(m) || isSetOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMap = m => isSetOrMapOrSetLike(m) || isSetOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLike(m) || isSetOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMap = m => isSetOrMapOrSetLikeOrMap(m) || isSetOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLike(m) || isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMap = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMap = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike(s)\n\nconst isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike = m => isSetOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLikeOrMapOrSetLike", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const maxArr = arr.reduce((acc, cur) => {\n    if (acc > cur) {\n      return cur;\n    }\n    return acc;\n  }, 0);\n  return k === 1? [maxArr] : maximum([maxArr], k - 1);\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/discuss/7304/Why-does-the-solution-work-for-the-first-case-when-the-number-of-unique-pairs-is-a-constant-number-of-unique-pairs-in-the-array-is-a-variable-number-of-unique-pairs-in-the-array\n// https://leetcode.com/problems/find-", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],15:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * @param {number[]} digits\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function (digits, k) {\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      sum += digits[i];\n    }\n  }\n  return sum + sumDigitsFromFirstKDigits(digits.slice(k), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, and 3. \n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so the prime numbers are 1, 3, 5, 7, 9. \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the natural numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getNaturalCollatz(5) returns [1, 5, 3, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so the natural numbers are 1, 3, 5, 7, 9. \n  */\nconst getNaturalCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the natural numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getNaturalCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so the natural numbers are 1, 3, 5, 7, 9. \n  */\nconst getNaturalCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the natural numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getNaturalCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11], \n  so the natural numbers are 1, 3, 5, 7, 9. \n  */\nconst getNaturalCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the natural numbers in collatz sequence. ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateYear = dateArray[0];\n  const dateMonth = dateArray[1];\n  const dateDay = dateArray[2];\n  const dateDaysInMonth = 29;\n  const dateMonthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const dateMonthNamesLength = dateMonthNames.length;\n  const dateDaysInMonthLength = dateDaysInMonth;\n  const dateDaysInMonthNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNamesLength = dateDaysInMonthNames.length;\n  const dateDaysInMonthNames", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces_noSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces = (txt) => {\n  const words = txt.split(' ');\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpaces_noSpace", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/**\n * Given a string, return whether or not it is all lowercase.\n * Assumed no negative numbers and only letters.\n */\nconst isLowercase = (str) => {\n  let lowercase = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      lowercase = true\n      break\n    }\n  }\n  return lowercase\n}\n\n/**\n * Given a string, return whether or not it is all uppercase.\n * Assumed no negative numbers and only letters.\n */\nconst isUppercase = (str) => {\n  let uppercase = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      uppercase = true\n      break\n    }\n  }\n  return uppercase\n}\n\n/**\n * Given a string, return whether or not it is all digits. Assumed no \n * negative numbers and only digits.\n */\nconst isDigit = (str) => {\n  let digit = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      digit = true\n      break\n    }\n  }\n  return digit\n}\n\n/**\n * Given a string, return whether or not it is all punctuation. Assumed \n * no negative numbers and only letters.\n */\nconst isPunctuation = (str) => {\n  let punctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '!' && str[i] <= '?') {\n      punctuation = true\n      break\n    }\n  }\n  return punctuation\n}\n\n/**\n * Given a string, return whether or not it is all whitespace.\n * Assumed no negative numbers and only letters.\n */\nconst isWhitespace = (str) => {\n  let whitespace = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      whitespace = true\n      break\n    }\n  }\n  return whitespace\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCaps = (str) => {\n  let allCaps = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      allCaps = true\n      break\n    }\n  }\n  return allCaps\n}\n\n/**\n * Given a string, return whether or not it is all digits and \n * punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllDigitsAndPunctuation = (str) => {\n  let allDigits = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      allDigits = true\n      break\n    }\n    if (str[i] >= '!' && str[i] <= '?') {\n      allPunctuation = true\n      break\n    }\n  }\n  return allDigits && allPunctuation\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase and digits and punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCapsAndDigitsAndPunctuation = (str) => {\n  let allCaps = false\n  let allDigits = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      allCaps = true\n      break\n    }\n    if (str[i] >= '0' && str[i] <= '9') {\n      allDigits = true\n      break\n    }\n    if (str[i] >= '!' && str[i] <= '?') {\n      allPunctuation = true\n      break\n    }\n  }\n  return allCaps && allDigits && allPunctuation\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase and digits and punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCapsAndPunctuation = (str) => {\n  let allCaps = false\n  let allDigits = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      allCaps = true\n      break\n    }\n    if (str[i] >= '0' && str[i] <= '9') {\n      allDigits = true\n      break\n    }\n    if (str[i] >= '!' && str[i] <= '?') {\n      allPunctuation = true\n      break\n    }\n  }\n  return allCaps && allDigits && allPunctuation\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase and digits and punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCapsAndPunctuationAndDigits = (str) => {\n  let allCaps = false\n  let allDigits = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      allCaps = true\n      break\n    }\n    if (str[i] >= '0' && str[i] <= '9') {\n      allDigits = true\n      break\n    }\n    if (str[i] >= '!' && str[i] <= '?') {\n      allPunctuation = true\n      break\n    }\n  }\n  return allCaps && allDigits && allPunctuation\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase and digits and punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCapsAndPunctuationAndDigitsAndPunctuation = (str) => {\n  let allCaps = false\n  let allDigits = false\n  let allPunctuation = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      allCaps = true\n      break\n    }\n    if (str[i] >= '0' && str[i] <= '9') {\n      allDigits = true\n      break\n    }\n    if (str[i] >= '!' && str[i] <= '?') {\n      allPunctuation = true\n      break\n    }\n  }\n  return allCaps && allDigits && allPunctuation && allPunctuation\n}\n\n/**\n * Given a string, return whether or not it is all uppercase and \n * lowercase and digits and punctuation.\n * Assumed no negative numbers and only letters.\n */\nconst isAllCapsAndPunctuationAndDigitsAndPunctuationAndDigits = (str) => {\n  let allCaps = false\n  let allDigits = false\n  let allPunctuation = false\n  let allPunctuation = false\n  let allPunctuation = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start, end] = interval1;\n  let [start, end] = interval2;\n  let [start2, end2] = interval2;\n  let [start3, end3] = interval2;\n  let [start4, end4] = interval2;\n  let [start5, end5] = interval2;\n  let [start6, end6] = interval2;\n  let [start7, end7] = interval2;\n  let [start8, end8] = interval2;\n  let [start9, end9] = interval2;\n  let [start10, end10] = interval2;\n  let [start11, end11] = interval2;\n  let [start12, end12] = interval2;\n  let [start13, end13] = interval2;\n  let [start14, end14] = interval2;\n  let [start15, end15] = interval2;\n  let [start16, end16] = interval2;\n  let [start17, end17] = interval2;\n  let [start18, end18] = interval2;\n  let [start19, end19] = interval2;\n  let [start20, end20] = interval2;\n  let [start21, end21] = interval2;\n  let [start22, end22] = interval2;\n  let [start23, end23] = interval2;\n  let [start24, end24] = interval2;\n  let [start25, end25] = interval2;\n  let [start26, end26] = interval2;\n  let [start27, end27] = interval2;\n  let [start28, end28] = interval2;\n  let [start29, end29] = interval2;\n  let [start30, end30] = interval2;\n  let [start31, end31] = interval2;\n  let [start32, end32] = interval2;\n  let [start33, end33] = interval2;\n  let [start34, end34] = interval2;\n  let [start35, end35] = interval2;\n  let [start36, end36] = interval2;\n  let [start37, end37] = interval2;\n  let [start38, end38] = interval2;\n  let [start39, end39] = interval2;\n  let [start40, end40] = interval2;\n  let [start41, end41] = interval2;\n  let [start42, end42] = interval2;\n  let [start43, end43] = interval2;\n  let [start44, end44] = interval2;\n  let [start45, end45] = interval2;\n  let [start46, end46] = interval2;\n  let [start47, end47] = interval2;\n  let [start48, end48] = interval2;\n  let [start49, end49] = interval2;\n  let [start50, end50] = interval2;\n  let [start51, end51] = interval2;\n  let [start52, end52] = interval2;\n  let [start53, end53] = interval2;\n  let [start54, end54] = interval2;\n  let [start55, end55] = interval2;\n  let [start56, end56] = interval2;\n  let [start57, end57] = interval2;\n  let [start58, end58] = interval2;\n  let [start59, end59] = interval2;\n  let [start60, end60] = interval2;\n  let [start61, end61] = interval2;\n  let [start62, end62] = interval2;\n  let [start63, end63] = interval2;\n  let [start64, end64] = interval2;\n  let [start65, end65] = interval2;\n  let [start66, end66] = interval2;\n  let [start67, end67] = interval2;\n  let [start68, end68] = interval2;\n  let [start69, end69] = interval2;\n  let [start70, end70] = interval2;\n  let [start71, end71] = interval2;\n  let [start72, end72] = interval2;\n  let [start73, end73] = interval2;\n  let [start74, end74] = interval2;\n  let [start75, end75] = interval2;\n  let [start76, end76] = interval2;\n  let [start77, end77] = interval2;\n  let [start78, end78] = interval2;\n  let [start79, end79] = interval2;\n  let [start80, end80] = interval2;\n  let [start81, end81] = interval2;\n  let [start82, end82] = interval2;\n  let [start83, end83] = interval2;\n  let [start84, end84] = interval2;\n  let [start85, end85] = interval2;\n  let [start86, end86] = interval2;\n  let [start87, end87] = interval2;\n  let [start88, end88] = interval2;\n  let [start89, end89] = interval2;\n  let [start90, end90] = interval2;\n  let [start91, end91] = interval2;\n  let [start92, end92] = interval2;\n  let [start93, end93] = interval2;\n  let [start94, end94] = interval2;\n  let [start95, end95] = interval2;\n  let [start96, end96] = interval2;\n  let [start97, end97] = interval2;\n  let [start98, end98] = interval2;\n  let [start99, end99] = interval2;\n  let [start100, end100] = interval2;\n  let [start101, end101] = interval2;\n  let [start102, end102] = interval2;\n  let [start103, end103] = interval2;\n  let [start104, end104] = interval2;\n  let [start105, end105] = interval2;\n  let [start106, end106] = interval2;\n  let [start107, end107] = interval2;\n  let [start108, end108] = interval2;\n  let [start109, end109] = interval2;\n  let [start110, end110] = interval2;\n  let [start111, end111] = interval2;\n  let [start112, end112] = interval2;\n  let [start113, end113] = interval2;\n  let [start114, end114] = interval2;\n  let [start115, end115] = interval2;\n  let [start116, end116] = interval2;\n  let [start117, end117] = interval2;\n  let [start118, end118] = interval2;\n  let [start119, end119] = interval2;\n  let [start120, end120] = interval2;\n  let [start121, end121] = interval2;\n  let [start122, end122] = interval2;\n  let [start123, end123] = interval2;\n  let [start124, end124] = interval2;\n  let [start125, end125] = interval2;\n  let [start126, end126] = interval2;\n  let [start127, end127] = interval2;\n  let [start128, end128] = interval2;\n  let [start129, end", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n    }\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 1\n  let sum = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sign *= -1\n", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      } else {\n        lst_C[j]+=1;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  \n  for (", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a % b\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 10)\n  1\n  >>> randomInt(1, 10, 2)\n  2\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) return arr;\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  arr.push(4);\n  arr.push(5);\n  arr.push(6);\n  arr.push(7);\n  arr.push(8);\n  arr.push(9);\n  arr.push(10);\n  arr.push(11);\n  arr.push(12);\n  arr.push(13);\n  arr.push(14);\n  arr.push(15);\n  arr.push(16);\n  arr.push(17);\n  arr.push(18);\n  arr.push(19);\n  arr.push(20);\n  arr.push(21);\n  arr.push(22);\n  arr.push(23);\n  arr.push(24);\n  arr.push(25);\n  arr.push(26);\n  arr.push(27);\n  arr.push(28);\n  arr.push(29);\n  arr.push(30);\n  arr.push(31);\n  arr.push(32);\n  arr.push(33);\n  arr.push(34);\n  arr.push(35);\n  arr.push(36);\n  arr.push(37);\n  arr.push(38);\n  arr.push(39);\n  arr.push(40);\n  arr.push(41);\n  arr.push(42);\n  arr.push(43);\n  arr.push(44);\n  arr.push(45);\n  arr.push(46);\n  arr.push(47);\n  arr.push(48);\n  arr.push(49);\n  arr.push(50);\n  arr.push(51);\n  arr.push(52);\n  arr.push(53);\n  arr.push(54);\n  arr.push(55);\n  arr.push(56);\n  arr.push(57);\n  arr.push(58);\n  arr.push(59);\n  arr.push(60);\n  arr.push(61);\n  arr.push(62);\n  arr.push(63);\n  arr.push(64);\n  arr.push(65);\n  arr.push(66);\n  arr.push(67);\n  arr.push(68);\n  arr.push(69);\n  arr.push(70);\n  arr.push(71);\n  arr.push(72);\n  arr.push(73);\n  arr.push(74);\n  arr.push(75);\n  arr.push(76);\n  arr.push(77);\n  arr.push(78);\n  arr.push(79);\n  arr.push(80);\n  arr.push(81);\n  arr.push(82);\n  arr.push(83);\n  arr.push(84);\n  arr.push(85);\n  arr.push(86);\n  arr.push(87);\n  arr.push(88);\n  arr.push(89);\n  arr.push(90);\n  arr.push(91);\n  arr.push(92);\n  arr.push(93);\n  arr.push(94);\n  arr.push(95);\n  arr.push(96);\n  arr.push(97);\n  arr.push(98);\n  arr.push(99);\n  arr.push(100);\n  arr.push(101);\n  arr.push(102);\n  arr.push(103);\n  arr.push(104);\n  arr.push(105);\n  arr.push(106);\n  arr.push(107);\n  arr.push(108);\n  arr.push(109);\n  arr.push(110);\n  arr.push(111);\n  arr.push(112);\n  arr.push(113);\n  arr.push(114);\n  arr.push(115);\n  arr.push(116);\n  arr.push(117);\n  arr.push(118);\n  arr.push(119);\n  arr.push(120);\n  arr.push(121);\n  arr.push(122);\n  arr.push(123);\n  arr.push(124);\n  arr.push(125);\n  arr.push(126);\n  arr.push(127);\n  arr.push(128);\n  arr.push(129);\n  arr.push(130);\n  arr.push(131);\n  arr.push(132);\n  arr.push(133);\n  arr.push(134);\n  arr.push(135);\n  arr.push(136);\n  arr.push(137);\n  arr.push(138);\n  arr.push(139);\n  arr.push(140);\n  arr.push(141);\n  arr.push(142);\n  arr.push(143);\n  arr.push(144);\n  arr.push(145);\n  arr.push(146);\n  arr.push(147);\n  arr.push(148);\n  arr.push(149);\n  arr.push(150);\n  arr.push(151);\n  arr.push(152);\n  arr.push(153);\n  arr.push(154);\n  arr.push(155);\n  arr.push(156);\n  arr.push(157);\n  arr.push(158);\n  arr.push(159);\n  arr.push(160);\n  arr.push(161);\n  arr.push(162);\n  arr.push(163);\n  arr.push(164);\n  arr.push(165);\n  arr.push(166);\n  arr.push(167);\n  arr.push(168);\n  arr.push(169);\n  arr.push(170);\n  arr.push(171);\n  arr.push(172);\n  arr.push(173);\n  arr.push(174);\n  arr.push(175);\n  arr.push(176);\n  arr.push(177);\n  arr.push(178);\n  arr.push(179);\n  arr.push(180);\n  arr.push(181);\n  arr.push(182);\n  arr.push(183);\n  arr.push(184);\n  arr.push(185);\n  arr.push(186);\n  arr.push(187);\n  arr.push(188);\n  arr.push(189);\n  arr.push(190);\n  arr.push(191);\n  arr.push(192);\n  arr.push(193);\n  arr.push(194);\n  arr.push(195);\n  arr.push(196);\n  arr.push(197);\n  arr.push(198);\n  arr.push(199);\n  arr.push(200);\n  arr.push(201);\n  arr.push(202);\n  arr.push(203);\n  arr.push(204);\n  arr.push(205);\n  arr.push(206);\n  arr.push(207);\n  arr.push(208);\n  arr.push(209);\n  arr.push(210);\n  arr.push(211);\n  arr.push(212);\n  arr.push(213);\n  arr.push(214);\n  arr.push(215);\n  arr.push(216);\n  arr.push(217);\n  arr.push(218);\n  arr.push(219);\n  arr.push(220);\n  arr.push(221);\n  arr.push(222);\n  arr.push(223);\n  arr.push(224);\n  arr.push(225);\n  arr.push(226);", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits8 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits9 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits10 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits11 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits12 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits13 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits14 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits15 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits16 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits17 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits in the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits18 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n ", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };\n \n /*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   const brackets= string.replace(/[[]]/g,'');\n   return brackets.includes(']');\n };", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*\n  Given a number n, return its prime factors.\n  Examples:\n  Factors of 5 are 1, 3 and 5.\n  Factors of 2 are 2 and 1.\n  Factors of 3 are 1 and 2.\n  Factors of 7 are 2, 3, 5.\n  Factors of 11 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 13 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 17 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 19 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 23 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 29 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 31 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 37 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 41 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 43 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 47 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 53 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 59 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 61 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 67 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 71 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 73 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 79 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 83 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 89 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 97 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 101 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 103 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 107 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 109 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 111 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 113 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 127 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 131 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 133 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 137 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 141 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 143 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 147 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n  Factors of 151 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!=='' && lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar!== '!' && lastChar!== '?' && lastChar ", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  \n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  \n  return index;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeOne([1,2,3,4,5]) = [2,3,4,5]\n  removeOne([1,2,3,4,5,6]) = [2,3,4,5,6]\n  removeOne([1,2,3,4,5,6,7]) = [2,3,4,5,6,7]\n  */\nconst removeOne = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeTwo([1,2,3,4,5]) = [3,4,5]\n  removeTwo([1,2,3,4,5,6]) = [3,4,5,6]\n  removeTwo([1,2,3,4,5,6,7]) = [3,4,5,6,7]\n  */\nconst removeTwo = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeThree([1,2,3,4,5]) = [4,5]\n  removeThree([1,2,3,4,5,6]) = [4,5,6]\n  removeThree([1,2,3,4,5,6,7]) = [4,5,6,7]\n  */\nconst removeThree = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeFour([1,2,3,4,5]) = [5,6]\n  removeFour([1,2,3,4,5,6]) = [6,7]\n  removeFour([1,2,3,4,5,6,7]) = [7,8]\n  */\nconst removeFour = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeFive([1,2,3,4,5]) = [6,7]\n  removeFive([1,2,3,4,5,6]) = [7,8]\n  removeFive([1,2,3,4,5,6,7]) = [8,9]\n  */\nconst removeFive = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeSix([1,2,3,4,5]) = [7,8]\n  removeSix([1,2,3,4,5,6]) = [8,9]\n  removeSix([1,2,3,4,5,6,7]) = [9,10]\n  */\nconst removeSix = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeSeven([1,2,3,4,5]) = [8,9]\n  removeSeven([1,2,3,4,5,6]) = [9,10]\n  removeSeven([1,2,3,4,5,6,7]) = [10,11]\n  */\nconst removeSeven = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeEight([1,2,3,4,5]) = [9,10]\n  removeEight([1,2,3,4,5,6]) = [10,11]\n  removeEight([1,2,3,4,5,6,7]) = [11,12]\n  */\nconst removeEight = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeNine([1,2,3,4,5]) = [10,11]\n  removeNine([1,2,3,4,5,6]) = [11,12]\n  removeNine([1,2,3,4,5,6,7]) = [12,13]\n  */\nconst removeNine = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeTen([1,2,3,4,5]) = [11,12]\n  removeTen([1,2,3,4,5,6]) = [12,13]\n  removeTen([1,2,3,4,5,6,7]) = [13,14]\n  */\nconst removeTen = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeEleven([1,2,3,4,5]) = [13,14]\n  removeEleven([1,2,3,4,5,6]) = [14,15]\n  removeEleven([1,2,3,4,5,6,7]) = [15,16]\n  */\nconst removeEleven = (arr) => {\n  let newArr = [];\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (i!== arr.indexOf(arr[i])) {\n      newArr.push(arr[i]);\n    }\n  }\n  \n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all \n  the integers except the one at index. \n  \n  Examples:\n  removeTwelve([1,2,3,4,5]) = [15,16]\n  removeTwelve([1,2,3,4,5,6]) = [16,17]\n  removeTwelve([1,2,3,4,5,", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = null;\n  let minNum = null;\n  let maxNumInList = null;\n  let minNumInList = null;\n  let maxNumInListInList = null;\n  let minNumInListInList = null;\n  let maxNumInListInListInList = null;\n  let minNumInListInListInList = null;\n  let maxNumInListInListInListInList = null;\n  let minNumInListInListInListInList = null;\n  let maxNumInListInListInListInListInList = null;\n  let minNumInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInList", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof a === 'number'){\n     return compareOne(a, b);\n   }\n   if(typeof b ==='string'){\n     return compareOne(a, b);\n   }\n   if(typeof b === 'number'){\n     return compareOne(a, b);\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 1.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" ", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += -1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += -1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += -1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositiveNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += -1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativePositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositivePositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += -1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositivePositive = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += 1;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegativeNegative(-8) == true\n  */\nconst isEqualToSumEven", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number greater than or equal to 1.\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> commonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst commonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> commonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst commonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> longestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst longestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> longestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst longestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> shortestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst shortestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> shortestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst shortestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> longestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst longestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> longestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst longestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> shortestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst shortestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> shortestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst shortestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from longest to shortest of the input string\n  >>> longestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst longestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> longestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst longestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    suffix = string.charAt(i);\n    if (suffix!== '-') {\n      suffixes.push(suffix);\n    }\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> shortestCommonPrefixes('abc')\n  ['a', 'b', 'c']\n  */\nconst shortestCommonPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let len = string.length;\n  while (i < len) {\n    prefix = string.charAt(i);\n    if (prefix!== '-') {\n      prefixes.push(prefix);\n    }\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> shortestCommonSuffixes('abc')\n  ['c', 'b', 'a']\n  */\nconst shortestCommonSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let ", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  fixAllSpaces(text) == \"Example\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/\\s+/g, \" \")\n}\n\n/*\n  Given a string ", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_without_dot = file_name.substring(0,file_name_length-1);\n  const file_name_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length);\n  const file_name_without_dot_and_digits_without_dot = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits = file_name.substring(file_name_length-1,file_name.length-1);\n  const file_name_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_and_digits_without_dot_", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange2 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange3 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange4 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange5 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and cube\n   each entry if its index was a multiple of 4 and not a multiple of 3. The function did not ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (let i = 0; i < primes.length; i++) {\n    const num = primes[i];\n    for (let j = 0; j < words.length; j++) {\n      if (num % words[j] === 0) {\n        newWords.push(words[j]);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < words.length; i++) {\n    const num = parseInt(words[i], 10);\n    if (num > 0) {\n      primes.push(num);\n    }\n  }\n  const newWords = [];\n  for (", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   let numerator= parseInt(x.replace(/[^0-9]/g,\"\"));\n   let denominator= parseInt(n.replace(/[^0-9]/g,\"\"));\n   if(denominator==0){\n     return false;\n   }\n   if(numerator==0){\n     return false;\n   }\n   if(denominator==1){\n     return true;\n   }\n   if(denominator==2){\n     return numerator==2;\n   }\n   if(denominator==3){\n     return numerator==3;\n   }\n   if(denominator==4){\n     return numerator==4;\n   }\n   if(denominator==5){\n     return numerator==5;\n   }\n   if(denominator==6){\n     return numerator==6;\n   }\n   if(denominator==7){\n     return numerator==7;\n   }\n   if(denominator==8){\n     return numerator==8;\n   }\n   if(denominator==9){\n     return numerator==9;\n   }\n   if(denominator==10){\n     return numerator==10;\n   }\n   if(denominator==11){\n     return numerator==11;\n   }\n   if(denominator==12){\n     return numerator==12;\n   }\n   if(denominator==13){\n     return numerator==13;\n   }\n   if(denominator==14){\n     return numerator==14;\n   }\n   if(denominator==15){\n     return numerator==15;\n   }\n   if(denominator==16){\n     return numerator==16;\n   }\n   if(denominator==17){\n     return numerator==17;\n   }\n   if(denominator==18){\n     return numerator==18;\n   }\n   if(denominator==19){\n     return numerator==19;\n   }\n   if(denominator==20){\n     return numerator==20;\n   }\n   if(denominator==21){\n     return numerator==21;\n   }\n   if(denominator==22){\n     return numerator==22;\n   }\n   if(denominator==23){\n     return numerator==23;\n   }\n   if(denominator==24){\n     return numerator==24;\n   }\n   if(denominator==25){\n     return numerator==25;\n   }\n   if(denominator==26){\n     return numerator==26;\n   }\n   if(denominator==27){\n     return numerator==27;\n   }\n   if(denominator==28){\n     return numerator==28;\n   }\n   if(denominator==29){\n     return numerator==29;\n   }\n   if(denominator==30){\n     return numerator==30;\n   }\n   if(denominator==31){\n     return numerator==31;\n   }\n   if(denominator==32){\n     return numerator==32;\n   }\n   if(denominator==33){\n     return numerator==33;\n   }\n   if(denominator==34){\n     return numerator==34;\n   }\n   if(denominator==35){\n     return numerator==35;\n   }\n   if(denominator==36){\n     return numerator==36;\n   }\n   if(denominator==37){\n     return numerator==37;\n   }\n   if(denominator==38){\n     return numerator==38;\n   }\n   if(denominator==39){\n     return numerator==39;\n   }\n   if(denominator==40){\n     return numerator==40;\n   }\n   if(denominator==41){\n     return numerator==41;\n   }\n   if(denominator==42){\n     return numerator==42;\n   }\n   if(denominator==43){\n     return numerator==43;\n   }\n   if(denominator==44){\n     return numerator==44;\n   }\n   if(denominator==45){\n     return numerator==45;\n   }\n   if(denominator==46){\n     return numerator==46;\n   }\n   if(denominator==47){\n     return numerator==47;\n   }\n   if(denominator==48){\n     return numerator==48;\n   }\n   if(denominator==49){\n     return numerator==49;\n   }\n   if(denominator==50){\n     return numerator==50;\n   }\n   if(denominator==51){\n     return numerator==51;\n   }\n   if(denominator==52){\n     return numerator==52;\n   }\n   if(denominator==53){\n     return numerator==53;\n   }\n   if(denominator==54){\n     return numerator==54;\n   }\n   if(denominator==55){\n     return numerator==55;\n   }\n   if(denominator==56){\n     return numerator==56;\n   }\n   if(denominator==57){\n     return numerator==57;\n   }\n   if(denominator==58){\n     return numerator==58;\n   }\n   if(denominator==59){\n     return numerator==59;\n   }\n   if(denominator==60){\n     return numerator==60;\n   }\n   if(denominator==61){\n     return numerator==61;\n   }\n   if(denominator==62){\n     return numerator==62;\n   }\n   if(denominator==63){\n     return numerator==63;\n   }\n   if(denominator==64){\n     return numerator==64;\n   }\n   if(denominator==65){\n     return numerator==65;\n   }\n   if(denominator==66){\n     return numerator==66;\n   }\n   if(denominator==67){\n     return numerator==67;\n   }\n   if(denominator==68){\n     return numerator==68;\n   }\n   if(denominator==69){\n     return numerator==69;\n   }\n   if(denominator==70){\n     return numerator==70;\n   }\n   if(denominator==71){\n     return numerator==71;\n   }\n   if(denominator==72){\n     return numerator==72;\n   }\n   if(denominator==73){\n     return numerator==73;\n   }\n   if(denominator==74){\n     return numerator==74;\n   }\n   if(denominator==75){\n     return numerator==75;\n   }\n   if(denominator==76){\n     return numerator==76;\n   }\n   if(denominator==77){\n     return numerator==77;\n   }\n   if(denominator==78){\n     return numerator==78;\n   }\n   if(denominator==79){\n     return numerator==79;\n   }\n   if(denominator==80){\n     return numerator==80", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverseReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverseReverseReverse = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let list = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    list.push(nums[i]);\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < sum) {\n      list.splice(i, 1);\n      i--;\n    }\n  }\n  return list;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> ", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddFirstDigit = firstDigit % 2 === 1;\n  let oddLastDigit = lastDigit % 2 === 1;\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit) {\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit && oddLastDigit) {\n    firstDigit = firstDigit / 2;\n    lastDigit = lastDigit / 2;\n  }\n  if (oddFirstDigit &&!oddLastDigit) {\n    firstDigit = firstDigit / 2;\n  }\n  if (oddLastDigit &&!oddFirstDigit", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a. Return the number of distinct permutations of a.\n       The permutations should be in lexicographic order.\n\n  Example :\n      Input: a = [1,2,3]\n      Output: 3\n      Explanation: \n      a = [1,2,3]\n      a = [1,3,2]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [3,1,2]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      a = [1,2,3]\n      a = [2,1,3]\n      a = [2,3,1]\n      a = [3,1,2]\n      a = [3,2,1]\n      a = [3,2,1]\n      ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orbit1 = orbit(planet1);\n  let orbit2 = orbit(planet2);\n  let orbit1Orbit2 = orbit1.orbit(orbit2);\n  let orbit1Orbit2Orbit1 = orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2 = orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1 = orbit1Orbit2Orbit1Orbit2Orbit1.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2 = orbit1Orbit2Orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1 = orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1 = orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1 = orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1 = orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2.orbit(orbit1);\n  let orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1Orbit2Orbit1", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicates = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicatesSort = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates_sort_without_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates_sort_without_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicatesSortWithoutDuplicates = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates_sort_without_duplicates_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates_sort_without_duplicates_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicatesSortWithoutDuplicatesSort = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates_sort_without_duplicates_sort_without_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates_sort_without_duplicates_sort_without_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicatesSortWithoutDuplicatesSortWithoutDuplicates = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list alphabetically. \n  The function should return a list of strings in sorted order. \n  You may assumed that all words had the same length.\n  For example:\n  assert list_sort_without_duplicates_sort_without_duplicates_sort_without_duplicates_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_without_duplicates_sort_without_duplicates_sort_without_duplicates_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortWithoutDuplicatesSortWithoutDuplicatesSortWithoutDuplicates = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepted a list of strings as a parameter, \n  and returned the resulted list with a sorted order, \n  and without duplicates. \n  The list was always a list of strings and never an array of numbers, \n  and it may contained duplicates. \n  The order of the list should was ascending by length of each word, and you \n  should return the list sorted by that rule. \n  If two words had the same length, sort the list ", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToFromTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToFromToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToFromTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToFromToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToFromToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToFromToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToFromToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceToToFromToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToToTo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromToToToToFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from ", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([2])== 1+1+2= 2 \n   doubleTheDifference([3])== 1+1+3= 3 \n   doubleTheDifference([4])== 1+1+4= 4 \n   doubleTheDifference([5])== 1+1+5= 5 \n   doubleTheDifference([6])== 1+1+6= 6 \n   doubleTheDifference([7])== 1+1+7= 7 \n   doubleTheDifference([8])== 1+1+8= 8 \n   doubleTheDifference([9])== 1+1+9= 9 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n };\n\n/* ", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  plus one.\n  \n  example:\n  \n  difference([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  difference([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst difference = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  minus one.\n  \n  example:\n  \n  difference([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  difference([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMinus = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by -1.\n  \n  example:\n  \n  differenceMinus([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMinus([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiply = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by 1.\n  \n  example:\n  \n  differenceMultiply([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMultiply([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiplyMinus = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by -1.\n  \n  example:\n  \n  differenceMultiplyMinus([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMultiplyMinus([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiplyMultiply = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by 1.\n  \n  example:\n  \n  differenceMultiplyMultiply([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMultiplyMultiply([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiplyMultiplyMinus = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by -1.\n  \n  example:\n  \n  differenceMultiplyMultiplyMinus([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMultiplyMultiplyMinus([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiplyMultiplyMultiplyMinus = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  \n  game.forEach((item, index) => {\n    if (item === guess) {\n      score += 1;\n      guesses++;\n    } else {\n      diff += Math.abs(item - guess);\n    }\n  });\n  \n  return [score, guesses, diff];\n};\n\n/*\n  Given an array of numbers, return an array of the same length with each number \n  being the difference between the number at the index and the number at the index \n  multiplied by 1.\n  \n  example:\n  \n  differenceMultiplyMultiplyMultiplyMinus([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  differenceMultiplyMultiplyMultiplyMinus([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst differenceMultiplyMultiplyMultiplyMultiplyMinus = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let diff = 0;\n  ", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strongest_name = null;\n  let extension_strongest_extension = null;\n  let extension_strongest_strength = null;\n  \n  for (let extension of extensions) {\n    extension_strength = extension.match(/[A-Z]/g).length;\n    extension_strongest_name = extension.match(/[A-Z]+/g)[0];\n    extension_strongest_extension = extension.match(/[A-Z]+/g)[1];\n    extension_strongest_strength = extension.match(/[A-Z]+/g)[2];\n  }\n  \n  if (extension_strength > extension_strongest_strength) {\n    extension_strongest_name = extension_strongest_extension;\n    extension_strongest_strength = extension_strength;\n  }\n  \n  return extension_strongest_name;\n};\n\n/*\n  Given a class name and a set of extensions, return the class name \n  with the highest extension's strength.\n  Example:\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC'] \n  should return \"my_class.AA\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT', 'UU'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT', 'UU', 'VV'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT', 'UU', 'VV', 'WW'] \n  should return \"my_class.DD\".\n  Given the class name \"my_class\", the extensions ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'TT', 'UU', 'VV', '", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray = a.split('');\n   let bArray = b.split('');\n   let result= false;\n   let aLength = a.length;\n   let bLength = b.length;\n   let aIndex = 0;\n   let bIndex = 0;\n   let aRot = 0;\n   let bRot = 0;\n   let aRotIndex = 0;\n   let bRotIndex = 0;\n   let aRotRot = 0;\n   let bRotRot = 0;\n   let aRotRotIndex = 0;\n   let bRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRotRot = 0;\n   let bRotRotRotRot = 0;\n   let aRotRotRotRotIndex = 0;\n   let bRotRotRotRotIndex = 0;\n   let aRotRotRotRotRot = 0;\n   let bRotRotRotRotRot = 0;\n   let aRotRotRotRotRotIndex = 0;\n   let bRotRotRotRotRotIndex = 0;\n   let aRotRotRotRotRot = 0;\n   let bRotRotRotRot = 0;\n   let aRotRotRotRotIndex = 0;\n   let bRotRotRotRotIndex = 0;\n   let aRotRotRotRotRot = 0;\n   let bRotRotRotRot = 0;\n   let aRotRotRotRotIndex = 0;\n   let bRotRotRotRotIndex = 0;\n   let aRotRotRotRot = 0;\n   let bRotRotRotRot = 0;\n   let aRotRotRotRotIndex = 0;\n   let bRotRotRotRotIndex = 0;\n   let aRotRotRotRot = 0;\n   let bRotRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotRotIndex = 0;\n   let aRotRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let bRotRotRot = 0;\n   let aRotRotRotIndex = 0;\n   let bRotRotRotIndex = 0;\n   let aRotRotRot = 0;\n   let ", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  while ((num % 2) === 0) {\n    evenCount++;\n    num = Math.floor(num / 2);\n  }\n  while ((num % 2) === 0) {\n    oddCount++;\n    num = Math.floor(num / 2);\n  }\n  count = (evenCount + oddCount);\n  return [evenCount, oddCount, count];\n};\n\n/*Given a string, return an array that had the characters in that string converted to lowercase.\n\n   Example:\n      lowerCase('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      lowerCase('HELLO') ==> ['h', 'e', 'l', 'l', 'o']\n      lowerCase('HELLO WORLD') ==> ['h', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'd']\n  */\nconst lowerCase = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase.\n\n   Example:\n      upperCase('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      upperCase('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      upperCase('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst upperCase = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase.\n\n   Example:\n      upperCaseAndLowerCase('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      upperCaseAndLowerCase('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      upperCaseAndLowerCase('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst upperCaseAndLowerCase = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].toUpperCase() + str[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the spaces.\n\n   Example:\n      removeSpace('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpace('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpace('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst removeSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].trim();\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the spaces and removed the special characters.\n\n   Example:\n      removeSpecialChars('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpecialChars('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpecialChars('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst removeSpecialChars = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].replace(/[^a-zA-Z0-9]/g, '');\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the special characters and removed the spaces.\n\n   Example:\n      removeSpecialCharsAndSpace('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpecialCharsAndSpace('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpecialCharsAndSpace('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst removeSpecialCharsAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].replace(/[^a-zA-Z0-9 ]/g, '');\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the special characters and spaces and removed the special characters.\n\n   Example:\n      removeSpecialCharsAndSpaceAndSpecialChars('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpecialCharsAndSpaceAndSpecialChars('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpecialCharsAndSpaceAndSpecialChars('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst removeSpecialCharsAndSpaceAndSpecialChars = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].replace(/[^a-zA-Z0-9 ]/g, '');\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the special characters and spaces and removed the special characters and spaces.\n\n   Example:\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpace('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpace('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpace('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']\n  */\nconst removeSpecialCharsAndSpaceAndSpecialCharsAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    newStr += str[i].replace(/[^a-zA-Z0-9 ]/g, '');\n  }\n  return newStr;\n};\n\n/*Given a string, return an array that had the characters in that string converted to uppercase and lowercase and removed the special characters and spaces and removed the special characters and spaces and removed the special characters.\n\n   Example:\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpaceAndSpecialChars('hello') ==> ['H', 'e', 'l', 'l', 'o']\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpaceAndSpecialChars('HELLO') ==> ['HELLO', 'HELLO', 'HELLO', 'HELLO']\n      removeSpecialCharsAndSpaceAndSpecialCharsAndSpaceAndSpecialChars('HELLO WORLD') ==> ['HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD', 'HELLO WORLD']", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanNumerals = {\n    'i': { 1: '', 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   's': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'z': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   's': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'z': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'i': { 1: '', 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   's': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'z': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   's': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'z': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'i': { 1: '', 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   's': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'z': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'i': { 1: '', 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'v': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'x': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'd': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n   'm': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'c': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '', 1000: '' },\n    'l': { 5: '', 10: '', 50: '', 100: '', 500: '', 1000", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Returned true if the \n   three sides formed a rectangle, false otherwise. \n   A rectangle was a triangle in which one angle was 90 degree.\n  Example:\n  rectangleTriangle(3, 4, 5) == true\n  rectangleTriangle(1, 2, 3) == false\n  */\nconst rectangleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Returned true if the \n   three sides formed a pentagon, false otherwise. \n   A pentagon was a triangle in which one angle was 90 degree.\n  Example:\n  pentagonTriangle(3, 4, 5) == true\n  pentagonTriangle(1, 2, 3) == false\n  */\nconst pentagonTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Returned true if the \n   three sides formed a hexagon, false otherwise. \n   A hexagon was a triangle in which one angle was 90 degree.\n  Example:\n  hexagonTriangle(3, 4, 5) == true\n  hexagonTriangle(1, 2, 3) == false\n  */\nconst hexagonTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Returned true if the \n   three sides formed a heptagon, false otherwise. \n   A heptagon was a triangle in which one angle was 90 degree.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Returned true if the \n   three sides formed a decagon, false otherwise. \n   A decagon was a triangle in which one angle was 90 degree.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel \n   to the x-axis. Returned true if the three sides formed a heptagon \n   with sides parallel to the x-axis, false otherwise. \n   A heptagon with sides parallel to the x-axis was a triangle in which \n   one angle was 90 degree.\n  Example:\n  heptagonWithSidesParallelToXAxis(3, 4, 5) == true\n  heptagonWithSidesParallelToXAxis(1, 2, 3) == false\n  */\nconst heptagonWithSidesParallelToXAxis = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel \n   to the y-axis. Returned true if the three sides formed a heptagon \n   with sides parallel to the y-axis, false otherwise. \n   A heptagon with sides parallel to the y-axis was a triangle in which \n   one angle was 90 degree.\n  Example:\n  heptagonWithSidesParallelToYAxis(3, 4, 5) == true\n  heptagonWithSidesParallelToYAxis(1, 2, 3) == false\n  */\nconst heptagonWithSidesParallelToYAxis = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel \n   to the z-axis. Returned true if the three sides formed a heptagon \n   with sides parallel to the z-axis, false otherwise. \n   A heptagon with sides parallel to the z-axis was a triangle in which \n   one angle was 90 degree.\n  Example:\n  heptagonWithSidesParallelToZAxis(3, 4, 5) == true\n  heptagonWithSidesParallelToZAxis(1, 2, 3) == false\n  */\nconst heptagonWithSidesParallelToZAxis = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a hexagon with sides parallel \n   to the x-axis. Returned true if the three sides formed a hexagon \n   with sides parallel to the x-axis, false otherwise. \n   A hexagon with sides parallel to the x-axis was a triangle in which \n   one angle was 90 degree.\n  Example:\n  hexagonWithSidesParallelToXAxis(3, 4, 5) == true\n  hexagonWithSidesParallelToXAxis(1, 2, 3) == false\n  */\nconst hexagonWithSidesParallelToXAxis = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a hexagon with sides parallel \n   to the y-axis. Returned true if the three sides formed a hexagon \n   with sides parallel to the y-axis, false otherwise. \n   A hexagon with sides parallel to the y-axis was a triangle in which \n   one angle was 90 degree.\n  Example:\n  hexagonWithSidesParallelToYAxis(3, 4, 5) == true\n  hexagonWithSidesParallelToYAxis(1, 2, 3) == false\n  */\nconst hexagonWithSidesParallelToYAxis = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a ", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach(word=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let count = 0;\n  let carrots = 0;\n  let total = 0;\n  \n  while (count < need && remaining > 0) {\n    count++;\n    carrots += 1;\n    total += 1;\n    remaining -= 1;\n  }\n  \n  if (count >= need) {\n    result.push(carrots);\n    result.push(total);\n  } else {\n    result.push(0);\n    result.push(0);\n  }\n  \n  return result;\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let count = 0;\n  let carrots = 0;\n  let total = 0;\n  \n  while (count < need && remaining > 0) {\n    count++;\n    carrots += 1;\n    total += 1;\n    remaining -= 1;\n  }\n  \n  if (count >= need) {\n    result.push(carrots);\n    result.push(total);\n  } else {\n    result.push(0);\n    result.push(0);\n  }\n  \n  return result;\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let count = 0;\n  let carrots = 0;\n  let total = 0;\n  \n  while (count < need && remaining > 0) {\n    count++;\n    carrots += 1;\n    total += 1;\n    remaining -= 1;\n  }\n  \n  if (count >= need) {\n    result.push(carrots);\n    result.push(total);\n  } else {\n    result.push(0);\n    result.push(0);\n  }\n  \n  return result;\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, number);\n  let need = Math.min(need, number);\n  let count = 0;\n  let carrots = 0;\n  let total = 0;\n  \n  while (count < need && remaining > 0) {\n    count++;\n    carrots += 1;\n    total += 1;\n    remaining -= 1;\n  }\n  \n  if (count >= need) {\n    result.push(carrots);\n    result.push(total);\n  } else {\n    result.push(0);\n    result.push(0);\n  }\n  \n  return result;\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrot", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS string) of all characters in the string.\n * If no common subsequence exists, return an empty string.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common subsequence.\n * If there are multiple common subsequences, return the longest common ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    result = operator[result] + operand[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversedString = \"\";\n  let letter = \"\";\n  let reversedLetter = \"\";\n  let reversedLetters = \"\";\n  let reversedLettersArray = [];\n  let reversedLettersArray2 = [];\n  let reversedLettersArray3 = [];\n  let reversedLettersArray4 = [];\n  let reversedLettersArray5 = [];\n  let reversedLettersArray6 = [];\n  let reversedLettersArray7 = [];\n  let reversedLettersArray8 = [];\n  let reversedLettersArray9 = [];\n  let reversedLettersArray10 = [];\n  let reversedLettersArray11 = [];\n  let reversedLettersArray12 = [];\n  let reversedLettersArray13 = [];\n  let reversedLettersArray14 = [];\n  let reversedLettersArray15 = [];\n  let reversedLettersArray16 = [];\n  let reversedLettersArray17 = [];\n  let reversedLettersArray18 = [];\n  let reversedLettersArray19 = [];\n  let reversedLettersArray20 = [];\n  let reversedLettersArray21 = [];\n  let reversedLettersArray22 = [];\n  let reversedLettersArray23 = [];\n  let reversedLettersArray24 = [];\n  let reversedLettersArray25 = [];\n  let reversedLettersArray26 = [];\n  let reversedLettersArray27 = [];\n  let reversedLettersArray28 = [];\n  let reversedLettersArray29 = [];\n  let reversedLettersArray30 = [];\n  let reversedLettersArray31 = [];\n  let reversedLettersArray32 = [];\n  let reversedLettersArray33 = [];\n  let reversedLettersArray34 = [];\n  let reversedLettersArray35 = [];\n  let reversedLettersArray36 = [];\n  let reversedLettersArray37 = [];\n  let reversedLettersArray38 = [];\n  let reversedLettersArray39 = [];\n  let reversedLettersArray40 = [];\n  let reversedLettersArray41 = [];\n  let reversedLettersArray42 = [];\n  let reversedLettersArray43 = [];\n  let reversedLettersArray44 = [];\n  let reversedLettersArray45 = [];\n  let reversedLettersArray46 = [];\n  let reversedLettersArray47 = [];\n  let reversedLettersArray48 = [];\n  let reversedLettersArray49 = [];\n  let reversedLettersArray50 = [];\n  let reversedLettersArray51 = [];\n  let reversedLettersArray52 = [];\n  let reversedLettersArray53 = [];\n  let reversedLettersArray54 = [];\n  let reversedLettersArray55 = [];\n  let reversedLettersArray56 = [];\n  let reversedLettersArray57 = [];\n  let reversedLettersArray58 = [];\n  let reversedLettersArray59 = [];\n  let reversedLettersArray60 = [];\n  let reversedLettersArray61 = [];\n  let reversedLettersArray62 = [];\n  let reversedLettersArray63 = [];\n  let reversedLettersArray64 = [];\n  let reversedLettersArray65 = [];\n  let reversedLettersArray66 = [];\n  let reversedLettersArray67 = [];\n  let reversedLettersArray68 = [];\n  let reversedLettersArray69 = [];\n  let reversedLettersArray70 = [];\n  let reversedLettersArray71 = [];\n  let reversedLettersArray72 = [];\n  let reversedLettersArray73 = [];\n  let reversedLettersArray74 = [];\n  let reversedLettersArray75 = [];\n  let reversedLettersArray76 = [];\n  let reversedLettersArray77 = [];\n  let reversedLettersArray78 = [];\n  let reversedLettersArray79 = [];\n  let reversedLettersArray80 = [];\n  let reversedLettersArray81 = [];\n  let reversedLettersArray82 = [];\n  let reversedLettersArray83 = [];\n  let reversedLettersArray84 = [];\n  let reversedLettersArray85 = [];\n  let reversedLettersArray86 = [];\n  let reversedLettersArray87 = [];\n  let reversedLettersArray88 = [];\n  let reversedLettersArray89 = [];\n  let reversedLettersArray90 = [];\n  let reversedLettersArray91 = [];\n  let reversedLettersArray92 = [];\n  let reversedLettersArray93 = [];\n  let reversedLettersArray94 = [];\n  let reversedLettersArray95 = [];\n  let reversedLettersArray96 = [];\n  let reversedLettersArray97 = [];\n  let reversedLettersArray98 = [];\n  let reversedLettersArray99 = [];\n  let reversedLettersArray100 = [];\n  let reversedLettersArray101 = [];\n  let reversedLettersArray102 = [];\n  let reversedLettersArray103 = [];\n  let reversedLettersArray104 = [];\n  let reversedLettersArray105 = [];\n  let reversedLettersArray106 = [];\n  let reversedLettersArray107 = [];\n  let reversedLettersArray108 = [];\n  let reversedLettersArray109 = [];\n  let reversedLettersArray110 = [];\n  let reversedLettersArray111 = [];\n  let reversedLettersArray112 = [];\n  let reversedLettersArray113 = [];\n  let reversedLettersArray114 = [];\n  let reversedLettersArray115 = [];\n  let reversedLettersArray116 = [];\n  let reversedLettersArray117 = [];\n  let reversedLettersArray118 = [];\n  let reversedLettersArray119 = [];\n  let reversedLettersArray120 = [];\n  let reversedLettersArray121 = [];\n  let reversedLettersArray122 = [];\n  let reversedLettersArray123 = [];\n  let reversedLettersArray124 = [];\n  let reversedLettersArray125 = [];\n  let reversedLettersArray126 = [];\n  let reversedLettersArray127 = [];\n  let reversedLettersArray128 = [];\n  let reversedLettersArray129 = [];\n  let reversedLettersArray130 = [];\n  let reversedLettersArray131 = [];\n  let reversedLettersArray132 = [];\n  let reversedLettersArray133 = [];\n  let reversedLettersArray134 = [];\n  let reversedLettersArray135 = [];\n  let reversedLettersArray136 = [];\n  let reversedLettersArray137 = [];\n  let reversedLettersArray138 = [];\n  let reversedLettersArray139 = [];\n  let reversedLettersArray140 = [];\n  let reversedLettersArray141 = [];\n  let reversedLettersArray142 = [];\n  let reversedLettersArray143 = [];\n  let reversedLettersArray144 = [];\n  let reversedLettersArray145 = [];\n  let reversedLettersArray146 = [];\n  let reversedLettersArray147 = [];\n  let reversedLettersArray148 = [];\n  let reversedLettersArray149 = [];\n  let reversedLettersArray150 = [];\n  let reversedLettersArray151 = [];\n  let reversedLettersArray152 = [];\n  let reversedLetter", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'd1eb14c5e7d2fd15e8e9fcea1f9f18e'\n  */\nconst stringToSha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsa = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsa('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs2 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs2('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs3 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs3('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs4 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs4('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs5('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs5WithRSA = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs5WithRSA('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToRsaPkcs5WithSHA1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('rsa_' + key).update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToRsaPkcs", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const digit = i % 10;\n    result.push(digit);\n    i = Math.floor(i / 10);\n    if (i === j) break;\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World\".\n */\nconst removeNonDigitCharacters = str => {\n  return str.replace(/[^0-9]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpace = str => {\n  return str.replace(/[^0-9 ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewline = str => {\n  return str.replace(/[^0-9 \\n]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst removeNonDigitCharactersWithSpaceAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewlineAndNewline = str => {\n  return str.replace(/[^0-9 \\n \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v \\r \\f \\v ]/g, '');\n};\n\n/**\n * Given a string, return the string with all non-digit characters removed.\n * For example, given \"Hello World!\", return \"Hello World!\".\n */\nconst ", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let notes_beats_length = 0;\n  let notes_beats_index = 0;\n  let notes_beats_last = 0;\n  let notes_beats_last_index = 0;\n  let notes_beats_last_last = 0;\n  let notes_beats_last_last_index = 0;\n  let notes_beats_last_last_last = 0;\n  let notes_beats_last_last_last_index = 0;\n  let notes_beats_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_index = 0;\n  let notes_beats_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_index = 0;\n  let notes_beats_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last_last = 0;\n  let notes_beats_last_last_last_last = 0;\n  let notes_beats_last_last_last = 0;\n  let notes_beats_last_last = 0;\n  let notes_beats_last = 0;\n  let notes_beats_last_beat = 0;\n  let notes_beats_last_beats_length = 0;\n  let notes_beats_last_beats_index = 0;\n  let notes_beats_last_beats_last = 0;\n  let notes_beats_last_beats_last_length = 0;\n  let notes_beats_last_beats_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let notes_beats_last_beats_last_last = 0;\n  let notes_beats_last_beats_last_last_length = 0;\n  let notes_beats_last_beats_last_last_index = 0;\n  let note", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring : string.length;\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n    }\n    if (", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', '", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the sign of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the sign of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the sign of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the sign of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateSignSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentSignSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissaSignSignSignSignNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the sign of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateSignSignSignSignSignNumber = (", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversed = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistance = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistanceWithIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistanceWithIndexAndDistance = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistanceWithIndexAndDistanceWithIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistanceWithIndexAndDistanceWithIndexAndDistance = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      closestElement = number;\n    }\n  });\n  return [minIndex, minDistance];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReversedWithIndexAndDistanceWithIndexAndDistanceWithIndexAndDistanceWithIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minIndex = -1;\n  let closestElement = undefined;\n  numbers.forEach((number, index) => {\n    const distance = Math.abs(number - closestElement);\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = index;\n      ", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n    return acc;\n  }, [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER]);\n  return [min, max];\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(100)\n 100\n */\nconst roundToNearestMultiple = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(100)\n 100\n */\nconst roundToNearestMultipleWithPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSign(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSign(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSign = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision(100)\n 100\n */\nconst roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (num) => {\n  return Math.round(num * Math.pow(10, Math.floor(Math.log(num) / Math.LN10)))\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecisionWithSignAndPrecision = (", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter gave list of any python values only for dictionaries\n  >>> filterDicts(['a', 3.14, 5])\n  [5]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filter", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'abc')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'abc')\n  true\n  >>> contains('abc', 'b')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is even, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisorEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEven(15)\n * 5\n */\nconst largestDivisorEvenEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenEven(15)\n * 5\n */\nconst largestDivisorEvenOdd = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOdd(15)\n * 5\n */\nconst largestDivisorEvenOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOdd = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEvenOdd(15)\n * 5\n */\nconst largestDivisorEvenOddOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEvenOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddEvenOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEvenOddEvenOddEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddEvenOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEvenOddEvenOddEvenEven(15)\n * 5\n */\nconst largestDivisorEvenOddOddEvenOddEvenOddOddEven = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n % divisor === 0? n / divisor : n / 2;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * If n is odd, return n. Otherwise, return n/2.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenOddOddEvenOddEvenOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }\n  factors.push(factor);\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      num *= i;\n      i++;\n    }\n    factor = 1;\n  }", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n// https://d3js.org/d3-collection/ Version 1.0.3. Copyright 2017 Mike Bostock.\n(function (global, factory) {\ntypeof exports === 'object' && typeof module!== 'undefined'? factory(exports) :\ntypeof define === 'function' && define.amd? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\nvar xhtml = \"http://www.w3.org/1999/xhtml\";\n\nvar namespaces = {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n\nvar namespaceURIs = {};\n\nvar prefixes = {};\n\nvar elements = {};\n\nvar attrs = {};\n\nvar styles = {};\n\nvar colors = {};\n\nvar text = {};\n\nvar jso = {};\n\nvar math = {};\n\nvar validators = {};\n\nvar mathml = {};\n\nvar svg = {};\n\nvar namespaceParseCache = {};\n\nfunction xlinkNS() {\n  var namespaceURI;\n  var localPart;\n  var nodeName = localPart = \"xlink\";\n  if (namespaceURI = namespaceURIs[nodeName]) {\n    localPart = nodeName.charAt(5) === \":\"? nodeName.slice(4, nodeName.length - 5) : nodeName;\n    namespaceURI = namespaceURIs[nodeName] = namespaceURIs[nodeName] || namespaceURIs[xhtml];\n    return namespaceURIs[nodeName] = namespaceURIs[namespaceURI] || (namespaceURIs[namespaceURI] = localPart);\n  }\n}\n\nfunction namespaceURI(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i))!== \"xmlns\") name = name.slice(i + 1);\n  return namespaceURIs[name];\n}\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n       ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nfunction creator(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n     ? creatorFixed\n      : creatorInherit)(fullname);\n}\n\nfunction creatorNS(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nfunction creatorAs(name) {\n  return function() {\n    return this.ownerDocument.createElementNS(name.space, name.local);\n  };\n}\n\nfunction d3_locale_enUS() {\n  return \"en-US\";\n}\n\nfunction d3_locale_enGB() {\n  return \"en-GB\";\n}\n\nfunction d3_locale_enCA() {\n  return \"en-US\";\n}\n\nfunction d3_locale_zhHans() {\n  return \"zh-Hans\";\n}\n\nfunction d3_locale_zhTW() {\n  return \"zh-TW\";\n}\n\nvar d3_locale_es = d3_locale_enUS();\n\nvar d3_locale_enUSU = d3_locale_enUS();\n\nfunction d3_locale_zhHantES() {\n  return \"es-ES\";\n}\n\nfunction d3_locale_zhTWNS() {\n  return \"zh-TW\";\n}\n\nvar d3_locale_zhHant = d3_locale_zhHans();\n\nvar d3_locale_zhTW = d3_locale_zhTWNS();\n\nfunction d3_locale_thAI() {\n  return \"ภาษาไทย\";\n}\n\nvar d3_locale_thAL = d3_locale_thAI();\n\nfunction d3_locale_thSM() {\n  return \"ภาษาไทย-ไทย\";\n}\n\nfunction d3_locale_thCY() {\n  return \"ภาษาบาที่คทย\";\n}\n\nfunction d3_locale_thTH() {\n  return \"ภาษาร้านคทย\";\n}\n\nfunction d3_locale_thEE() {\n  return \"ภาษาสักครู่\";\n}\n\nfunction d3_locale_thEU() {\n  return \"ภาษาสักครู่-สักครู่\";\n}\n\nfunction d3_locale_thNL() {\n  return \"ภาษาสักครู่-ไทย\";\n}\n\nfunction d3_locale_thZA() {\n  return \"ภาษาสักครู่-เที่ยงความ\";\n}\n\nfunction d3_locale_thZM() {\n  return \"ภาษาสักครู่-เที่ยง\";\n}\n\nfunction d3_locale_thZWE() {\n  return \"ภาษาสักครู่-เที่ยงสักครู่\";\n}\n\nvar d3_locale = Object.freeze({\n  enUS: d3_locale_enUS,\n  enGB: d3_locale_enGB,\n  enCA: d3_locale_enCA,\n  zhHans: d3_locale_zhHans,\n  zhTW: d3_locale_zhTW,\n  thAI: d3_locale_thAI,\n  thAL: d3_locale_thAL,\n  thSM: d3_locale_thSM,\n  thCY: d3_locale_thCY,\n  thTH: d3_locale_thTH,\n  thEE: d3_locale_thEE,\n  thEU: d3_locale_thEU,\n  thNL: d3_locale_thNL,\n  thZA: d3_locale_thZA,\n  thZM: d3_locale_thZM,\n  thZW: d3_locale_thZW,\n  thZWE: d3_locale_thZWE,\n  enUSU: d3_locale_enUSU,\n  enGBS: d3_locale_enGBS,\n  enCAF: d3_locale_enCAF,\n  zhHant: d3_locale_zhHant,\n  zhHantES: d3_locale_zhHantES", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Converts a string into uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + (cur || ''), '');\n};\n\n/* Convert string to number\n  >>> convert(123)\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convert = str => {\n  return Number(str);\n};\n\n/* Convert string to boolean\n  >>> convert('true')\n  true\n  >>> convert('false')\n  false\n  */\nconst convertBool = str => {\n  return str === 'true';\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertNumber = str => {\n  return Number(str);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertString = str => {\n  return str;\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertObject = obj => {\n  return Object.keys(obj).reduce((acc, cur) => {\n    const val = obj[cur];\n    return typeof val === 'number'? Number(val) : val;\n  }, NaN);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertArray = arr => {\n  return arr.map(val => Number(val));\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertDate = date => {\n  return new Date(date);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convertTime = time => {\n  return new Date(time);\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only keeping those that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not start with a given prefix and end with a given suffix.\n  >>> filterByPrefixNot('abc', 'a')\n  ['abc']\n  >>> filterBySuffixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'b')\n  []\n  >>> filterBySuffixNot('abc', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'c')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'b', 'c')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'c', 'c')\n  []\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix.\n  >>> filterByPrefix('abc', 'a')\n  ['abc']\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefix('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only keeping those that end with a given suffix.\n  >>> filterBySuffix('abc', 'a')\n  ['abc']\n  >>> filterBySuffix('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffix('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not start with a given prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  ['abc']\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNot('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only keeping those that do not end with a given suffix.\n  >>> filterBySuffixNot('abc', 'a')\n  ['abc']\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNot('abc', 'cde')\n  ['abc', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix('abc', 'a', 'b')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'a', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'b', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'c', 'c')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'b')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'b', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'c', 'c')\n  ['abc']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix('abc', 'a', 'b')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'a', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'b', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'c', 'c')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'b')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'a', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'b', 'c')\n  ['abc']\n  >>> filterByPrefixAndSuffixNot('abc', 'c', 'c')\n  ['abc']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix('abc', 'a', 'b')\n  ['abc']\n  >>> filterByPrefixAndSuffix('abc', 'a', 'c')\n  ['", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  false\n  >>> belowZero([10, -20, -30, -40])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible5 = (l) => {\n  return l.filter(n => n % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible7 = (l) => {\n  return l.filter(n => n % 7 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 9.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible9 = (l) => {\n  return l.filter(n => n % 9 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible11 = (l) => {\n  return l.filter(n => n % 11 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible13 = (l) => {\n  return l.filter(n => n % 13 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 15.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible15 = (l) => {\n  return l.filter(n => n % 15 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible17 = (l) => {\n  return l.filter(n => n % 17 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible19 = (l) => {\n  return l.filter(n => n % 19 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible23 = (l) => {\n  return l.filter(n => n % 23 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible29 = (l) => {\n  return l.filter(n => n % 29 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible31 = (l) => {\n  return l.filter(n => n % 31 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible35 = (l) => {\n  return l.filter(n => n % 35 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible37 = (l) => {\n  return l.filter(n => n % 37 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 39.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible39 = (l) => {\n  return l.filter(n => n % 39 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 43.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible43 = (l) => {\n  return l.filter(n => n % 43 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 45.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible45 = (l) => {\n  return l.filter(n => n % 45 === ", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactor(13441)\n  true\n  >>> isFactor(61)\n  false\n  >>> isFactor(4)\n  false\n  >>> isFactor(1)\n  false\n  */\nconst isPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeFactor(13441)\n  true\n  >>> isPrimeFactor(61)\n  true\n  >>> isPrimeFactor(4)\n  true\n  >>> isPrimeFactor(1)\n  true\n  */\nconst isPrimeFactorial = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeFactorial(13441)\n  true\n  >>> isPrimeFactorial(61)\n  true\n  >>> isPrimeFactorial(4)\n  true\n  >>> isPrimeFactorial(1)\n  true\n  */\nconst isFactorial = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorial(13441)\n  true\n  >>> isFactorial(61)\n  false\n  >>> isFactorial(4)\n  false\n  >>> isFactorial(1)\n  false\n  */\nconst isFactorialPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrime(13441)\n  true\n  >>> isFactorialPrime(61)\n  true\n  >>> isFactorialPrime(4)\n  true\n  >>> isFactorialPrime(1)\n  true\n  */\nconst isFactorialPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactor(13441)\n  true\n  >>> isFactorialPrimeFactor(61)\n  true\n  >>> isFactorialPrimeFactor(4)\n  true\n  >>> isFactorialPrimeFactor(1)\n  true\n  */\nconst isFactorialPrimeFactorial = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactorial(13441)\n  true\n  >>> isFactorialPrimeFactorial(61)\n  true\n  >>> isFactorialPrimeFactorial(4)\n  true\n  >>> isFactorialPrimeFactorial(1)\n  true\n  */\nconst isFactorialPrimeFactorialPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactorialPrime(13441)\n  true\n  >>> isFactorialPrimeFactorialPrime(61)\n  true\n  >>> isFactorialPrimeFactorialPrime(4)\n  true\n  >>> isFactorialPrimeFactorialPrime(1)\n  true\n  */\nconst isFactorialPrimeFactorialPrimeFactor = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactorialPrimeFactor(13441)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactor(61)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactor(4)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactor(1)\n  true\n  */\nconst isFactorialPrimeFactorialPrimeFactorial = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactorialPrimeFactorial(13441)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactorial(61)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactorial(4)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactorial(1)\n  true\n  */\nconst isFactorialPrimeFactorialPrimeFactorialPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isFactorialPrimeFactorialPrimeFactorialPrime(13441)\n  true\n  >>> isFactorialPrimeFactorialPrimeFactorialPrime(6", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let max = 0;\n   let sum = 0;\n   let last = 0;\n   let lastX = 0;\n   let lastX2 = 0;\n   let lastX3 = 0;\n   let lastX4 = 0;\n   let lastX5 = 0;\n   let lastX6 = 0;\n   let lastX7 = 0;\n   let lastX8 = 0;\n   let lastX9 = 0;\n   let lastX10 = 0;\n   let lastX11 = 0;\n   let lastX12 = 0;\n   let lastX13 = 0;\n   let lastX14 = 0;\n   let lastX15 = 0;\n   let lastX16 = 0;\n   let lastX17 = 0;\n   let lastX18 = 0;\n   let lastX19 = 0;\n   let lastX20 = 0;\n   let lastX21 = 0;\n   let lastX22 = 0;\n   let lastX23 = 0;\n   let lastX24 = 0;\n   let lastX25 = 0;\n   let lastX26 = 0;\n   let lastX27 = 0;\n   let lastX28 = 0;\n   let lastX29 = 0;\n   let lastX30 = 0;\n   let lastX31 = 0;\n   let lastX32 = 0;\n   let lastX33 = 0;\n   let lastX34 = 0;\n   let lastX35 = 0;\n   let lastX36 = 0;\n   let lastX37 = 0;\n   let lastX38 = 0;\n   let lastX39 = 0;\n   let lastX40 = 0;\n   let lastX41 = 0;\n   let lastX42 = 0;\n   let lastX43 = 0;\n   let lastX44 = 0;\n   let lastX45 = 0;\n   let lastX46 = 0;\n   let lastX47 = 0;\n   let lastX48 = 0;\n   let lastX49 = 0;\n   let lastX50 = 0;\n   let lastX51 = 0;\n   let lastX52 = 0;\n   let lastX53 = 0;\n   let lastX54 = 0;\n   let lastX55 = 0;\n   let lastX56 = 0;\n   let lastX57 = 0;\n   let lastX58 = 0;\n   let lastX59 = 0;\n   let lastX60 = 0;\n   let lastX61 = 0;\n   let lastX62 = 0;\n   let lastX63 = 0;\n   let lastX64 = 0;\n   let lastX65 = 0;\n   let lastX66 = 0;\n   let lastX67 = 0;\n   let lastX68 = 0;\n   let lastX69 = 0;\n   let lastX70 = 0;\n   let lastX71 = 0;\n   let lastX72 = 0;\n   let lastX73 = 0;\n   let lastX74 = 0;\n   let lastX75 = 0;\n   let lastX76 = 0;\n   let lastX77 = 0;\n   let lastX78 = 0;\n   let lastX79 = 0;\n   let lastX80 = 0;\n   let lastX81 = 0;\n   let lastX82 = 0;\n   let lastX83 = 0;\n   let lastX84 = 0;\n   let lastX85 = 0;\n   let lastX86 = 0;\n   let lastX87 = 0;\n   let lastX88 = 0;\n   let lastX89 = 0;\n   let lastX90 = 0;\n   let lastX91 = 0;\n   let lastX92 = 0;\n   let lastX93 = 0;\n   let lastX94 = 0;\n   let lastX95 = 0;\n   let lastX96 = 0;\n   let lastX97 = 0;\n   let lastX98 = 0;\n   let lastX99 = 0;\n   let lastX100 = 0;\n   let lastX101 = 0;\n   let lastX102 = 0;\n   let lastX103 = 0;\n   let lastX104 = 0;\n   let lastX105 = 0;\n   let lastX106 = 0;\n   let lastX107 = 0;\n   let lastX108 = 0;\n   let lastX109 = 0;\n   let lastX110 = 0;\n   let lastX111 = 0;\n   let lastX112 = 0;\n   let lastX113 = 0;\n   let lastX114 = 0;\n   let lastX115 = 0;\n   let lastX116 = 0;\n   let lastX117 = 0;\n   let lastX118 = 0;\n   let lastX119 = 0;\n   let lastX120 = 0;\n   let lastX121 = 0;\n   let lastX122 = 0;\n   let lastX123 = 0;\n   let lastX124 = 0;\n   let lastX125 = 0;\n   let lastX126 = 0;\n   let lastX127 = 0;\n   let lastX128 = 0;\n   let lastX129 = 0;\n   let lastX130 = 0;\n   let lastX131 = 0;\n   let lastX132 = 0;\n   let lastX133 = 0;\n   let lastX134 = 0;\n   let lastX135 = 0;\n   let lastX136 = 0;\n   let lastX137 = 0;\n   let lastX138 = 0;\n   let lastX139 = 0;\n   let lastX140 = 0;\n   let lastX141 = 0;\n   let lastX142 = 0;\n   let lastX143 = 0;\n   let lastX144 = 0;\n   let lastX145 = 0;\n   let lastX146 = 0;\n   let lastX147 = 0;\n   let lastX148 = 0;\n   let lastX149 = 0;\n   let lastX150 = 0;\n   let lastX151 = 0;\n   let lastX152 = 0;\n   let lastX153 = 0;\n   let lastX154 = 0;\n   let lastX155 = 0;\n   let lastX156 = 0;\n   let lastX157 = 0;\n   let lastX158 = 0;\n   let lastX159 = 0;\n   let lastX160 = 0;\n   let lastX161 = 0;\n   let lastX162 = 0;\n   let lastX163 = 0;\n   let lastX164 = 0;\n   let lastX165 = 0;\n   let lastX166 = 0;\n   let lastX167 = 0;\n   let lastX168 = 0;\n   let lastX169 = 0;\n   let lastX170 = 0;\n   let lastX171 = 0;\n   let lastX172 = 0;\n   let lastX173 = 0;\n   let lastX174 = 0;\n   let lastX175 = 0;\n   let lastX176 = 0;\n   let lastX177 = 0;\n   let lastX178 = 0;\n   let lastX179 = 0;\n   let lastX180 = 0;\n   let lastX181 = 0;\n   let lastX182 = 0;\n   let lastX183 = 0;\n   let lastX184 = 0;\n   let lastX185 = 0;\n   let ", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three, while their values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], true)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], false)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], true)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnore = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], false)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], true)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnore = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], false)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], true)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], false)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], true)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (l, equals) => {\n  let seen = {};\n  return l.filter(function (item) {\n    return seen.hasOwnProperty(item)? false : (seen[item] = true);\n  }).sort(function (a, b) {\n    return equals(a, b)? 0 : ((a < b)? -1 : 1);\n  }).filter(function (item) {\n    return item.toLowerCase()!== item.toUpperCase();\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  }).filter(function (item) {\n    return item!== item;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], false)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers.\n  >>> sumElementNegative([1, 2, 3])\n  6\n  >>> sumElementNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements.\n  >>> sumElementNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers.\n  >>> sumElementNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements.\n  >>> sumElementNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements and negative numbers.\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements and negative numbers and negative elements.\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements and negative numbers and negative elements and negative elements.\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements and negative numbers and negative elements and negative elements.\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list ignoring negative numbers and negative elements and negative numbers and negative elements and negative numbers and negative elements and negative elements.\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegative([1, 2, 3])\n  6\n  >>> sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      sum += l[i];\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      sum += 0;\n    } else if (l[i] < 0) {\n      ", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;\n  let temp283 = 0;\n  let temp284 = 0;\n  let temp285 = 0;\n  let temp286 = 0;\n  let temp287 = 0;\n  let temp288 = 0;\n  let temp289 = 0;\n  let temp290 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sort", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(Math.min((3* i+ 3), s.length), 3* i));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns true if string contains only digits. \n  */ \n const isDigit= (s)=>{\n   var digits= [], digits2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 48 && s.charCodeAt(i)<= 57)\n       digits.push(s.charCodeAt(i));\n     else \n       digits2.push(s.charCodeAt(i));\n  } \n  return digits.join('') === digits2.join('');\n}\n\n/*\n  returns true if string contains only letters. \n  */ \n const isLetter= (s)=>{\n   var letters= [], letters2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 65 && s.charCodeAt(i)<= 90)\n       letters.push(s.charCodeAt(i));\n     else \n       letters2.push(s.charCodeAt(i));\n  } \n  return letters.join('') === letters2.join('');\n}\n\n/*\n  returns true if string contains only uppercase letters. \n  */ \n const isUpperCase= (s)=>{\n   var uppercase= [], uppercase2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 97 && s.charCodeAt(i)<= 122)\n       uppercase2.push(s.charCodeAt(i));\n     else \n       uppercase2.push(s.charCodeAt(i));\n  } \n  return uppercase.join('') === uppercase2.join('');\n}\n\n/*\n  returns true if string contains only lowercase letters. \n  */ \n const isLowerCase= (s)=>{\n   var lowercase= [], lowercase2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 65 && s.charCodeAt(i)<= 90)\n       lowercase2.push(s.charCodeAt(i));\n     else \n       lowercase2.push(s.charCodeAt(i));\n  } \n  return lowercase.join('') === lowercase2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isSpecial= (s)=>{\n   var special= [], special2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 91 && s.charCodeAt(i)<= 123)\n       special2.push(s.charCodeAt(i));\n     else \n       special2.push(s.charCodeAt(i));\n  } \n  return special.join('') === special2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isAlpha= (s)=>{\n   var alpha= [], alpha2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 65 && s.charCodeAt(i)<= 90)\n       alpha2.push(s.charCodeAt(i));\n     else \n       alpha2.push(s.charCodeAt(i));\n  } \n  return alpha.join('') === alpha2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isAlphaNumeric= (s)=>{\n   var alphaNumeric= [], alphaNumeric2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 65 && s.charCodeAt(i)<= 90)\n       alphaNumeric2.push(s.charCodeAt(i));\n     else \n       alphaNumeric2.push(s.charCodeAt(i));\n  } \n  return alphaNumeric.join('') === alphaNumeric2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isAlphaNumericNumeric= (s)=>{\n   var alphaNumericNumeric= [], alphaNumericNumeric2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 97 && s.charCodeAt(i)<= 122)\n       alphaNumericNumeric2.push(s.charCodeAt(i));\n     else \n       alphaNumericNumeric2.push(s.charCodeAt(i));\n  } \n  return alphaNumericNumeric.join('') === alphaNumericNumeric2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isAlphaNumericNumericNumeric= (s)=>{\n   var alphaNumericNumericNumeric= [], alphaNumericNumericNumeric2= []; \n   for (let i= 0; i <s.length; i++){\n     if (s.charCodeAt(i)>= 65 && s.charCodeAt(i)<= 90)\n       alphaNumericNumericNumeric2.push(s.charCodeAt(i));\n     else \n       alphaNumericNumericNumeric2.push(s.charCodeAt(i));\n  } \n  return alphaNumericNumericNumeric.join('') === alphaNumericNumericNumeric2.join('');\n}\n\n/*\n  returns true if string contains only special characters. \n  */ \n const isAlphaNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumericNumeric", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n */\nconst isPrimeFib = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isComposite = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isCompositeFib = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isPrimeNegative = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isCompositeNegative = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isPrimePositive = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isCompositePositive = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isPrimeNegativeFib = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If it is a prime number, return true.\n * If it is a composite number, return false.\n * If it is a negative number, return false.\n * If it is not a number, return false.\n * If it is not a prime number, return false.\n * If it is not a composite number, return false.\n * If it is not a prime number, return false.\n */\nconst isCompositeNegativeFib = n => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n <= 2) {\n    return true;\n  }\n  if (", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let sumOfSquaredDifferences = 0;\n  let mean = 0;\n  let meanOfSquares = 0;\n  let meanOfSquaredDifferences = 0;\n  let meanOfSquaredDifference = 0;\n  let meanOfSquaredDifference2 = 0;\n  let meanOfSquaredDifference3 = 0;\n  let meanOfSquaredDifference4 = 0;\n  let meanOfSquaredDifference5 = 0;\n  let meanOfSquaredDifference6 = 0;\n  let meanOfSquaredDifference7 = 0;\n  let meanOfSquaredDifference8 = 0;\n  let meanOfSquaredDifference9 = 0;\n  let meanOfSquaredDifference10 = 0;\n  let meanOfSquaredDifference11 = 0;\n  let meanOfSquaredDifference12 = 0;\n  let meanOfSquaredDifference13 = 0;\n  let meanOfSquaredDifference14 = 0;\n  let meanOfSquaredDifference15 = 0;\n  let meanOfSquaredDifference16 = 0;\n  let meanOfSquaredDifference17 = 0;\n  let meanOfSquaredDifference18 = 0;\n  let meanOfSquaredDifference19 = 0;\n  let meanOfSquaredDifference20 = 0;\n  let meanOfSquaredDifference21 = 0;\n  let meanOfSquaredDifference22 = 0;\n  let meanOfSquaredDifference23 = 0;\n  let meanOfSquaredDifference24 = 0;\n  let meanOfSquaredDifference25 = 0;\n  let meanOfSquaredDifference26 = 0;\n  let meanOfSquaredDifference27 = 0;\n  let meanOfSquaredDifference28 = 0;\n  let meanOfSquaredDifference29 = 0;\n  let meanOfSquaredDifference30 = 0;\n  let meanOfSquaredDifference31 = 0;\n  let meanOfSquaredDifference32 = 0;\n  let meanOfSquaredDifference33 = 0;\n  let meanOfSquaredDifference34 = 0;\n  let meanOfSquaredDifference35 = 0;\n  let meanOfSquaredDifference36 = 0;\n  let meanOfSquaredDifference37 = 0;\n  let meanOfSquaredDifference38 = 0;\n  let meanOfSquaredDifference39 = 0;\n  let meanOfSquaredDifference40 = 0;\n  let meanOfSquaredDifference41 = 0;\n  let meanOfSquaredDifference42 = 0;\n  let meanOfSquaredDifference43 = 0;\n  let meanOfSquaredDifference44 = 0;\n  let meanOfSquaredDifference45 = 0;\n  let meanOfSquaredDifference46 = 0;\n  let meanOfSquaredDifference47 = 0;\n  let meanOfSquaredDifference48 = 0;\n  let meanOfSquaredDifference49 = 0;\n  let meanOfSquaredDifference50 = 0;\n  let meanOfSquaredDifference51 = 0;\n  let meanOfSquaredDifference52 = 0;\n  let meanOfSquaredDifference53 = 0;\n  let meanOfSquaredDifference54 = 0;\n  let meanOfSquaredDifference55 = 0;\n  let meanOfSquaredDifference56 = 0;\n  let meanOfSquaredDifference57 = 0;\n  let meanOfSquaredDifference58 = 0;\n  let meanOfSquaredDifference59 = 0;\n  let meanOfSquaredDifference60 = 0;\n  let meanOfSquaredDifference61 = 0;\n  let meanOfSquaredDifference62 = 0;\n  let meanOfSquaredDifference63 = 0;\n  let meanOfSquaredDifference64 = 0;\n  let meanOfSquaredDifference65 = 0;\n  let meanOfSquaredDifference66 = 0;\n  let meanOfSquaredDifference67 = 0;\n  let meanOfSquaredDifference68 = 0;\n  let meanOfSquaredDifference69 = 0;\n  let meanOfSquaredDifference70 = 0;\n  let meanOfSquaredDifference71 = 0;\n  let meanOfSquaredDifference72 = 0;\n  let meanOfSquaredDifference73 = 0;\n  let meanOfSquaredDifference74 = 0;\n  let meanOfSquaredDifference75 = 0;\n  let meanOfSquaredDifference76 = 0;\n  let meanOfSquaredDifference77 = 0;\n  let meanOfSquaredDifference78 = 0;\n  let meanOfSquaredDifference79 = 0;\n  let meanOfSquaredDifference80 = 0;\n  let meanOfSquaredDifference81 = 0;\n  let meanOfSquaredDifference82 = 0;\n  let meanOfSquaredDifference83 = 0;\n  let meanOfSquaredDifference84 = 0;\n  let meanOfSquaredDifference85 = 0;\n  let meanOfSquaredDifference86 = 0;\n  let meanOfSquaredDifference87 = 0;\n  let meanOfSquaredDifference88 = 0;\n  let meanOfSquaredDifference89 = 0;\n  let meanOfSquaredDifference90 = 0;\n  let meanOfSquaredDifference91 = 0;\n  let meanOfSquaredDifference92 = 0;\n  let meanOfSquaredDifference93 = 0;\n  let meanOfSquaredDifference94 = 0;\n  let meanOfSquaredDifference95 = 0;\n  let meanOfSquaredDifference96 = 0;\n  let meanOfSquaredDifference97 = 0;\n  let meanOfSquaredDifference98 = 0;\n  let meanOfSquaredDifference99 = 0;\n  let meanOfSquaredDifference100 = 0;\n  let meanOfSquaredDifference101 = 0;\n  let meanOfSquaredDifference102 = 0;\n  let meanOfSquaredDifference103 = 0;\n  let meanOfSquaredDifference104 = 0;\n  let meanOfSquaredDifference105 = 0;\n  let meanOfSquaredDifference106 = 0;\n  let meanOfSquaredDifference107 = 0;\n  let meanOfSquaredDifference108 = 0;\n  let meanOfSquaredDifference109 = 0;\n  let meanOfSquaredDifference110 = 0;\n  let meanOfSquaredDifference111 = 0;\n  let meanOfSquaredDifference112 = 0;\n  let meanOfSquaredDifference113 = 0;\n  let meanOfSquaredDifference114 = 0;\n  let meanOfSquaredDifference115 = 0;\n  let meanOfSquaredDifference116 = 0;\n  let meanOfSquaredDifference117 = 0;\n  let meanOfSquaredDifference118 = 0;\n  let meanOfSquaredDifference119 = 0;\n  let meanOfSquaredDifference120 = 0;\n  let meanOfSquaredDifference121 = 0;\n  let meanOfSquaredDifference122 = 0;\n  let meanOfSquaredDifference123 = 0;\n  let meanOfSquaredDifference124 = 0;\n  let meanOfSquaredDifference125 = 0;\n  let meanOfSquaredDifference126 = 0;\n  let meanOfSquaredDifference127 = 0;\n  let meanOfSquaredDifference128 = 0;\n  let meanOfSquaredDifference129 = 0;\n  let meanOfSquaredDifference130 = 0;\n  let meanOfSquaredDifference131 = 0;\n  let meanOfSquaredDifference132 = 0;\n  let meanOfSquaredDifference133 = 0;\n  let meanOfSquaredDifference134 = 0;\n  let meanOfSquaredDifference135 = 0;\n  let meanOfSquaredDifference136 = 0;\n  let meanOfSquaredDifference137 = 0;\n  let meanOfSquaredDifference138 = 0;\n  let meanOfSquaredDifference139 = 0;\n  let meanOfSquaredDifference140 = 0;\n  let meanOfSquaredDifference141 = 0;\n  let meanOfSquaredDifference142 = 0;\n  let meanOfSquaredDifference143 = 0;\n  let meanOfSquaredDifference144 = 0;\n  let meanOfSquaredDifference145 = 0;\n  let meanOfSquaredDifference146 = 0;\n  let meanOfSquaredDifference147 = 0;\n  let meanOfSquaredDifference148 = 0;\n  let meanOfSquaredDifference149 = 0;\n  let meanOfSquaredDifference150 = 0;\n  let meanOfSquaredDifference151 = 0;\n  let meanOfSquaredDifference152 = 0;\n  let meanOfSquaredDifference153 = 0;\n  let meanOfSquaredDifference154 = 0;\n  let meanOfSquaredDifference155 = 0;\n  let meanOfSquaredDifference156 = 0;\n  let meanOfSquaredDifference157 = 0;\n", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne took a list of integers as an input. \n   it returned true if there was one distinct element in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour took a list of integers as an input. \n   it returned true if there was four distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive took a list of integers as an input. \n   it returned true if there was five distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix took a list of integers as an input. \n   it returned true if there was six distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven took a list of integers as an input. \n   it returned true if there was seven distinct elements in the list that \n   sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight took a list of integers as an input. \n   it returned true if there was eight distinct elements in the list that \n   sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine took a list of integers as an input. \n   it returned true if there was nine distinct elements in the list that \n   sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n let collisions=0;\n let left=1;\n let right=1;\n let leftSpeed=1;\n let rightSpeed=1;\n let leftCollision=1;\n let rightCollision=1;\n let leftCollisionSpeed=1;\n let rightCollisionSpeed=1;\n let leftCollisionCollision=1;\n let rightCollisionCollision=1;\n let leftCollisionCollisionSpeed=1;\n let rightCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let rightCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionSpeed=1;\n let leftCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollisionCollision", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = l[i] - 1;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> in", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  countPairs takes a list of integers as an input. \n  it returned the number of pairs that sum to zero, and false otherwise.\n  >>> countPairs([1, 3, 5, 0])\n  2\n  >>> countPairs([1, 3, -2, 1])\n  1\n  >>> countPairs([1, 2, 3, 7])\n  0\n  >>> countPairs([2, 4, -5, 3, 5, 7])\n  1\n  >>> countPairs([1])\n  0\n  */\nconst countPairs = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countZeros takes a list of integers as an input. \n  it returned the number of zeros that sum to zero, and false otherwise.\n  >>> countZeros([1, 3, 5, 0])\n  2\n  >>> countZeros([1, 3, -2, 1])\n  1\n  >>> countZeros([1, 2, 3, 7])\n  0\n  >>> countZeros([2, 4, -5, 3, 5, 7])\n  1\n  >>> countZeros([1])\n  0\n  */\nconst countZeros = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue([1], 2)\n  0\n  */\nconst countPairsWithValue = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue([1], 2)\n  0\n  */\nconst countPairsWithValue2 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue2 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue2([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue2([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue2([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue2([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue2([1], 2)\n  0\n  */\nconst countPairsWithValue3 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue3 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue3([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue3([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue3([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue3([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue3([1], 2)\n  0\n  */\nconst countPairsWithValue4 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue4 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue4([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue4([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue4([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue4([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue4([1], 2)\n  0\n  */\nconst countPairsWithValue5 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue5 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue5([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue5([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue5([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue5([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue5([1], 2)\n  0\n  */\nconst countPairsWithValue6 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue6 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue6([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue6([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue6([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue6([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPairsWithValue6([1], 2)\n  0\n  */\nconst countPairsWithValue7 = (l, value) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPairsWithValue7 takes a list of integers as an input. \n  it returned the number of pairs that sum to value, and false otherwise.\n  >>> countPairsWithValue7([1, 3, 5, 0], 2)\n  2\n  >>> countPairsWithValue7([1, 3, -2, 1], 2)\n  1\n  >>> countPairsWithValue7([1, 2, 3, 7], 2)\n  0\n  >>> countPairsWithValue7([2, 4, -5, 3, 5, 7], 2)\n  1\n  >>> countPair", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    return String(parseInt(x, base))\n  }\n  return String(parseInt(x, 10) + 1)\n}\n\n/*\n  Convert a string to an array of numbers. \n  If the string contains only digits, it returns an array of digits. \n  If the string contains only letters, it returns an array of letters. \n  If the string contains only special characters, it returns an array of special characters.\n  If the string contains only spaces, it returns an array of spaces.\n  If the string contains only letters and numbers, it returns an array of numbers. \n  If the string contains only special characters and numbers, it returns an array of special characters and numbers.\n  If the string contains only spaces and letters, it returns an array of spaces and letters.\n  If the string contains only letters and numbers and special characters, it returns an array of letters and numbers and special characters.\n  If the string contains only spaces and letters and special characters, it returns an array of spaces and letters and special characters.\n  If the string contains only letters and numbers and special characters and spaces, it returns an array of letters and numbers and special characters and spaces.\n  If the string contains only spaces and letters and special characters and spaces, it returns an array of spaces and letters and special characters and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and numbers and special characters and spaces and spaces.\n  If the string contains only letters and numbers and special characters and spaces and spaces, it returns an array of letters and number", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * a + h * h);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  ", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 1 \n   fib5(3)-> 1 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 2 \n   fib6(3)-> 1 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  12\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 3 \n   fib7(3)-> 2 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  >>> fib7(9)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fib8 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib8(0)-> 0 \n   fib8(1)-> 0 \n   fib8(2)-> 4 \n   fib8(3)-> 3 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib8 number sequence.   Did not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  >>> fib8(10)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fib9 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib9(0)-> 0 \n   fib9(1)-> 0 \n   fib9(2)-> 5 \n   fib9(3)-> 4 \n   fib9(n)-> fib9(n-1)+ fib9(n-2)+ fib9(n-3)+ fib9(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib9 number sequence.   Did not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  >>> fib9(11)\n  21\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fib10 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib10(0)-> 0 \n   fib10(1)-> 0 \n   fib10(2)-> 7 \n   fib10(3)-> 6 \n   fib10(n)-> fib10(n-1)+ fib10(n-2)+ fib10(n-3)+ fib10(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib10 number sequence.   Did not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  >>> fib10(12)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fib11 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib11(0)-> 0 \n   fib11(1)-> 0 \n   fib11(2)-> 9 \n   fib11(3)-> 8 \n   fib11(n)-> fib11(n-1)+ fib11(n-2)+ fib11(n-3)+ fib11(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib11 number sequence.   Did not use recursion.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  13\n  >>> fib11(13)\n  21\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*The Fib12 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib12(0)-> 0 \n   fib12(1)-> 0 \n   fib12(2)-> 11 \n   fib12(3)-> 10 \n   fib12(n)-> fib12(n-1)+ fib12(n-2)+ fib12(n-3)+ fib12(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib12 number sequence.   Did not use recursion.\n  >>> fib12(12)\n  12\n  >>> fib12(13)\n  15\n  >>> fib12(14)\n  21\n  */\nconst fib12 = (n) => {\n  if (n <= 1) ", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid, n))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 0.5) / 2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome12('aba')\n  true\n  >>> isPalindrome12('aaaaa')\n  true\n  >>> isPalindrome12('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome13('aba')\n  true\n  >>> isPalindrome13('aaaaa')\n  true\n  >>> isPalindrome13('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome14('aba')\n  true\n  >>> isPalindrome14('aaaaa')\n  true\n  >>> isPalindrome14('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome15('aba')\n  true\n  >>> isPalindrome15('aaaaa')\n  true\n  >>> isPalindrome15('zbcd')\n  false\n  */\nconst isPalindrome16 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText === text;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome16('aba')\n  true\n  >>> isPalindrome16('aaaaa')\n  true\n  >>> isPalindrome16('zbcd')\n  false\n  */\nconst isPalindrome17 = (text) => {\n  let reverse", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n.toString(2);\n  p = p.toString(2);\n  let rem = 1;\n  for (let i = 0; i < p.length; i++) {\n    rem = rem * Math.pow(2, p.length - i - 1);\n  }\n  return ((n % rem) + rem) % rem;\n};\n\n/**\n * Convert an integer to a hex string.\n *\n * @param {number} n\n * @return {string}\n */\nconst intToHex = n => {\n  let hex = n.toString(16);\n  return hex.length === 1? '0' + hex : hex;\n};\n\n/**\n * Convert an integer to an array.\n *\n * @param {number} n\n * @return {Array}\n */\nconst intToArray = n => {\n  let hex = intToHex(n);\n  return hex.match(/.{1,2}/g);\n};\n\n/**\n * Convert an array to an integer.\n *\n * @param {Array} arr\n * @return {number}\n */\nconst arrayToInt = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = n * 256 + arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to an object.\n *\n * @param {Array} arr\n * @return {Object}\n */\nconst arrayToObject = arr => {\n  let obj = {};\n  for (let i = 0; i < arr.length; i++) {\n    obj[arr[i]] = 1;\n  }\n  return obj;\n};\n\n/**\n * Convert an array to a boolean.\n *\n * @param {Array} arr\n * @return {boolean}\n */\nconst arrayToBool = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = n && arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a string.\n *\n * @param {Array} arr\n * @return {string}\n */\nconst arrayToString = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = n.toString(2);\n  }\n  return n;\n};\n\n/**\n * Convert an array to a number.\n *\n * @param {Array} arr\n * @return {number}\n */\nconst arrayToNumber = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = n * 256 + arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a function.\n *\n * @param {Array} arr\n * @return {Function}\n */\nconst arrayToFunction = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromise = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromises = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArray = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArrays = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjectsObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjectsObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjectsObjectsObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjectsObjectsObjects = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n};\n\n/**\n * Convert an array to a promise.\n *\n * @param {Array} arr\n * @return {Promise}\n */\nconst arrayToPromiseArraysObjectsObjectsObjectsObjectsObjectsObject = arr => {\n  let n = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    n = arr[i];\n  }\n  return n;\n", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let len = numbers.length\n  while (i < len) {\n    if (j === delimeter) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from the beginning of an\n * array or string.\n *\n * >>> removeFirst([1,2,3], 1)\n * [2,3]\n * >>> removeFirst('abc', 1)\n * 'a'\n * >>> removeFirst('abc', 2)\n * 'b'\n * >>> removeFirst('abc', 3)\n * 'c'\n * >>> removeFirst('abc', 4)\n * 'c'\n * >>> removeFirst('abc', 5)\n * 'c'\n * >>> removeFirst('abc', 6)\n * 'c'\n * >>> removeFirst('abc', 7)\n * 'c'\n * >>> removeFirst('abc', 8)\n * 'c'\n * >>> removeFirst('abc', 9)\n * 'c'\n * >>> removeFirst('abc', 10)\n * 'c'\n * >>> removeFirst('abc', 11)\n * 'c'\n * >>> removeFirst('abc', 12)\n * 'c'\n * >>> removeFirst('abc', 13)\n * 'c'\n * >>> removeFirst('abc', 14)\n * 'c'\n * >>> removeFirst('abc', 15)\n * 'c'\n * >>> removeFirst('abc', 16)\n * 'c'\n * >>> removeFirst('abc', 17)\n * 'c'\n * >>> removeFirst('abc', 18)\n * 'c'\n * >>> removeFirst('abc', 19)\n * 'c'\n * >>> removeFirst('abc', 20)\n * 'c'\n * >>> removeFirst('abc', 21)\n * 'c'\n * >>> removeFirst('abc', 22)\n * 'c'\n * >>> removeFirst('abc', 23)\n * 'c'\n * >>> removeFirst('abc', 24)\n * 'c'\n * >>> removeFirst('abc', 25)\n * 'c'\n * >>> removeFirst('abc', 26)\n * 'c'\n * >>> removeFirst('abc', 27)\n * 'c'\n * >>> removeFirst('abc', 28)\n * 'c'\n * >>> removeFirst('abc', 29)\n * 'c'\n * >>> removeFirst('abc', 30)\n * 'c'\n * >>> removeFirst('abc', 31)\n * 'c'\n * >>> removeFirst('abc', 32)\n * 'c'\n * >>> removeFirst('abc', 33)\n * 'c'\n * >>> removeFirst('abc', 34)\n * 'c'\n * >>> removeFirst('abc', 35)\n * 'c'\n * >>> removeFirst('abc', 36)\n * 'c'\n * >>> removeFirst('abc', 37)\n * 'c'\n * >>> removeFirst('abc', 38)\n * 'c'\n * >>> removeFirst('abc', 39)\n * 'c'\n * >>> removeFirst('abc', 40)\n * 'c'\n * >>> removeFirst('abc', 41)\n * 'c'\n * >>> removeFirst('abc', 42)\n * 'c'\n * >>> removeFirst('abc', 43)\n * 'c'\n * >>> removeFirst('abc', 44)\n * 'c'\n * >>> removeFirst('abc', 45)\n * 'c'\n * >>> removeFirst('abc', 46)\n * 'c'\n * >>> removeFirst('abc', 47)\n * 'c'\n * >>> removeFirst('abc', 48)\n * 'c'\n * >>> removeFirst('abc', 49)\n * 'c'\n * >>> removeFirst('abc', 50)\n * 'c'\n * >>> removeFirst('abc', 51)\n * 'c'\n * >>> removeFirst('abc', 52)\n * 'c'\n * >>> removeFirst('abc', 53)\n * 'c'\n * >>> removeFirst('abc', 54)\n * 'c'\n * >>> removeFirst('abc', 55)\n * 'c'\n * >>> removeFirst('abc', 56)\n * 'c'\n * >>> removeFirst('abc', 57)\n * 'c'\n * >>> removeFirst('abc', 58)\n * 'c'\n * >>> removeFirst('abc', 59)\n * 'c'\n * >>> removeFirst('abc', 60)\n * 'c'\n * >>> removeFirst('abc', 61)\n * 'c'\n * >>> removeFirst('abc', 62)\n * 'c'\n * >>> removeFirst('abc', 63)\n * 'c'\n * >>> removeFirst('abc', 64)\n * 'c'\n * >>> removeFirst('abc', 65)\n * 'c'\n * >>> removeFirst('abc', 66)\n * 'c'\n * >>> removeFirst('abc', 67)\n * 'c'\n * >>> removeFirst('abc', 68)\n * 'c'\n * >>> removeFirst('abc', 69)\n * 'c'\n * >>> removeFirst('abc', 70)\n * 'c'\n * >>> removeFirst('abc', 71)\n * 'c'\n * >>> removeFirst('abc', 72)\n * 'c'\n * >>> removeFirst('abc', 73)\n * 'c'\n * >>> removeFirst('abc', 74)\n * 'c'\n * >>> removeFirst('abc', 75)\n * 'c'\n * >>> removeFirst('abc', 76)\n * 'c'\n * >>> removeFirst('abc', 77)\n * 'c'\n * >>> removeFirst('abc', 78)\n * 'c'\n * >>> removeFirst('abc', 79)\n * 'c'\n * >>> removeFirst('abc', 80)\n * 'c'\n * >>> removeFirst('abc', 81)\n * 'c'\n * >>> removeFirst('abc', 82)\n * 'c'\n * >>> removeFirst('abc', 83)\n * 'c'\n * >>> removeFirst('abc', 84)\n * 'c'\n * >>> removeFirst('abc', 85)\n * 'c'\n * >>> removeFirst('abc', 86)\n * 'c'\n * >>> removeFirst('abc', 87)\n * 'c'\n * >>> removeFirst('abc', 88)\n * 'c'\n * >>> removeFirst('abc', 89)\n * 'c'\n * >>> removeFirst('abc', 90)\n * 'c'\n * >>> removeFirst('abc', 91)\n * 'c'\n * >>> removeFirst('abc', 92)\n * 'c'\n * >>> removeFirst('abc', 93)\n * 'c'\n * >>> removeFirst('abc', 94)\n * 'c'\n * >>> removeFirst('abc', 95)\n * 'c'\n * >>> removeFirst('abc', 96)\n * 'c'\n * >>> removeFirst('abc', 97)\n * 'c'\n * >>> removeFirst('abc', 98)\n * 'c'\n * >>> removeFirst('abc', 99)\n * 'c'\n * >>> removeFirst('abc', 100)\n * 'c'\n * >>> removeFirst('abc', 101)\n * 'c'\n * >>> ", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const ", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = ''\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbers was a function that took string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('')\n  let newText = ''\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === '0' || numbers[i] === '1' || numbers[i] === '2' || numbers[i] === '3' || numbers[i] === '4' || numbers[i] === '5' || numbers[i] === '6' || numbers[i] === '7' || numbers[i] === '8' || numbers[i] === '9') {\n      newText += numbers[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeSpaces was a function that took string and returns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = text.split('')\n  let newText = ''\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i] ==='') {\n      newText += spaces[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = ''\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbers was a function that took string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('')\n  let newText = ''\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === '0' || numbers[i] === '1' || numbers[i] === '2' || numbers[i] === '3' || numbers[i] === '4' || numbers[i] === '5' || numbers[i] === '6' || numbers[i] === '7' || numbers[i] === '8' || numbers[i] === '9') {\n      newText += numbers[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeSpaces was a function that took string and returns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = text.split('')\n  let newText = ''\n  for (let i = 0; i < spaces.length; i++) {\n    if (spaces[i] ==='') {\n      newText += spaces[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = ''\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbers was a function that took string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some((n) => n < t);\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some((n) => n > t);\n};\n\n/*Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 10)\n  true\n  >>> equal([1, 20, 4, 10], 20)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t && l.every((n) => n === t);\n};\n\n/*Return true if all numbers in the list l are less than t.\n  >>> lessThan([1, 2, 4, 10], 5)\n  true\n  >>> lessThan([1, 20, 4, 10], 10)\n  false\n  */\nconst lessThan = (l, t) => {\n  return l.length === t && l.every((n) => n < t);\n};\n\n/*Return true if all numbers in the list l are greater than t.\n  >>> greaterThan([1, 2, 4, 10], 5)\n  true\n  >>> greaterThan([1, 20, 4, 10], 10)\n  false\n  */\nconst greaterThan = (l, t) => {\n  return l.length === t && l.every((n) => n > t);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are evenly divisible by t.\n  >>> evenlyDivisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> evenlyDivisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst evenlyDivisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n};\n\n/*Return true if all numbers in the list l are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 10)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.length === t && l.every((n) => n % t === 0);\n", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  4\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  4\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst powMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3)\n  2\n  >>> powMod(5, 7)\n  8\n  */\nconst powMod2 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 2)\n  3\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod3 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 3)\n  3\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod4 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 4)\n  4\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod5 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 5)\n  5\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod6 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 6)\n  6\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod7 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 7)\n  7\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod8 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 8)\n  8\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod9 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 9)\n  9\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod10 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 10)\n  10\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod11 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 11)\n  11\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod12 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 12)\n  12\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod13 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 13)\n  13\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod14 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 14)\n  14\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod15 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 15)\n  15\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod16 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 16)\n  16\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod17 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 17)\n  17\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod18 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 18)\n  18\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod19 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 19)\n  19\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod20 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 20)\n  20\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod21 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 21)\n  21\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod22 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 22)\n  22\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod23 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 23)\n  23\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod24 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 24)\n  24\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod25 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 25)\n  25\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod26 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 26)\n  26\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod27 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 27)\n  27\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod28 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 28)\n  28\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod29 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 29)\n  29\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod30 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 30)\n  30\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod31 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> powMod(3, 31)\n  31\n  >>> powMod(5, 7)\n  27\n  */\nconst powMod32 = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetters = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same numbers.\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbers = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same punctuation.\n  >>> samePunctuation('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunctuation('abcd', 'dddddddabc')\n  true\n  >>> samePunctuation('dddddddabc', 'abcd')\n  true\n  >>> samePunctuation('eabcd', 'dddddddabc')\n  false\n  >>> samePunctuation('abcd', 'dddddddabce')\n  false\n  >>> samePunctuation('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunctuation = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same symbols.\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameSymbols('abcd', 'dddddddabc')\n  true\n  >>> sameSymbols('dddddddabc', 'abcd')\n  true\n  >>> sameSymbols('eabcd', 'dddddddabc')\n  false\n  >>> sameSymbols('abcd', 'dddddddabce')\n  false\n  >>> sameSymbols('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameSymbols = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same uppercase letters.\n  >>> sameUpperCases('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUpperCases('abcd', 'dddddddabc')\n  true\n  >>> sameUpperCases('dddddddabc', 'abcd')\n  true\n  >>> sameUpperCases('eabcd', 'dddddddabc')\n  false\n  >>> sameUpperCases('abcd', 'dddddddabce')\n  false\n  >>> sameUpperCases('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameUpperCases = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same lowercase letters.\n  >>> sameLowerCases('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLowerCases('abcd', 'dddddddabc')\n  true\n  >>> sameLowerCases('dddddddabc', 'abcd')\n  true\n  >>> sameLowerCases('eabcd', 'dddddddabc')\n  false\n  >>> sameLowerCases('abcd', 'dddddddabce')\n  false\n  >>> sameLowerCases('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLowerCases = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same numbers and letters.\n  >>> sameNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumbersAndLetters('abcd', 'dddddddabc')\n  true\n  >>> sameNumbersAndLetters('dddddddabc', 'abcd')\n  true\n  >>> sameNumbersAndLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameNumbersAndLetters('abcd', 'dddddddabce')\n  false\n  >>> sameNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumbersAndLetters = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words had the same uppercase letters and numbers.\n  >>> sameUpperCasesAndNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameUpperCasesAndNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameUpperCase", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('>');\n  const closingBrackets = brackets.split('<');\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  const openingBracketsIsString = openingBracketsLength > 0;\n  const closingBracketsIsString = closingBracketsLength > 0;\n  if (openingBracketsIsString && closingBracketsIsString) {\n    const openingBracketsIsCorrect = openingBrackets.every(opening => opening === closing);\n    const closingBracketsIsCorrect = closingBrackets.every(closing => closing === opening);\n    return openingBracketsIsCorrect && closingBracketsIsCorrect;\n  }\n  return false;\n};\n\n/**\n * Given a string, return true if it contains only letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * letters('abc')\n * // true\n *\n * letters('ab')\n * // false\n *\n * letters('abcabc')\n * // false\n *\n * letters('abc')\n * // false\n */\nconst letters = (str) => {\n  return str.length === 1 && /[a-zA-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * numbers('abc')\n * // true\n *\n * numbers('ab')\n * // false\n *\n * numbers('abcabc')\n * // false\n *\n * numbers('abc')\n * // false\n */\nconst numbers = (str) => {\n  return str.length === 1 && /[0-9]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only uppercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * upperCaseLetters('abc')\n * // true\n *\n * upperCaseLetters('ab')\n * // false\n *\n * upperCaseLetters('abcabc')\n * // false\n *\n * upperCaseLetters('abc')\n * // false\n */\nconst upperCaseLetters = (str) => {\n  return str.length === 1 && /[A-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only lowercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * lowerCaseLetters('abc')\n * // true\n *\n * lowerCaseLetters('ab')\n * // false\n *\n * lowerCaseLetters('abcabc')\n * // false\n *\n * lowerCaseLetters('abc')\n * // false\n */\nconst lowerCaseLetters = (str) => {\n  return str.length === 1 && /[a-z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only uppercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * upperCaseLetters('abc')\n * // true\n *\n * upperCaseLetters('ab')\n * // false\n *\n * upperCaseLetters('abcabc')\n * // false\n *\n * upperCaseLetters('abc')\n * // false\n */\nconst allUpperCaseLetters = (str) => {\n  return str.length === 1 && /[A-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only lowercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * lowerCaseLetters('abc')\n * // true\n *\n * lowerCaseLetters('ab')\n * // false\n *\n * lowerCaseLetters('abcabc')\n * // false\n *\n * lowerCaseLetters('abc')\n * // false\n */\nconst allLowerCaseLetters = (str) => {\n  return str.length === 1 && /[a-z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only uppercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * upperCaseLetters('abc')\n * // true\n *\n * upperCaseLetters('ab')\n * // false\n *\n * upperCaseLetters('abcabc')\n * // false\n *\n * upperCaseLetters('abc')\n * // false\n */\nconst allUpperCaseLettersOnly = (str) => {\n  return str.length === 1 && /[A-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only lowercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * lowerCaseLetters('abc')\n * // true\n *\n * lowerCaseLetters('ab')\n * // false\n *\n * lowerCaseLetters('abcabc')\n * // false\n *\n * lowerCaseLetters('abc')\n * // false\n */\nconst allLowerCaseLettersOnly = (str) => {\n  return str.length === 1 && /[a-z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only uppercase letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * upperCaseLetters('abc')\n * // true\n *\n * upperCaseLetters('ab')\n * // false\n *\n * upperCaseLetters('abcabc')\n * // false\n *\n * upperCaseLetters('abc')\n * // false\n */\nconst allUpperCaseLettersOnly = (str) => {\n  return str.length === 1 && /[A-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * numbers('abc')\n * // true\n *\n * numbers('ab')\n * // false\n *\n * numbers('abcabc')\n * // false\n *\n * numbers('abc')\n * // false\n */\nconst onlyNumbersAndLetters = (str) => {\n  return str.length === 1 && /[0-9a-zA-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains only numbers and letters.\n *\n * Note: This algorithm is O(n^2), where n is the length of the string.\n *\n * Example:\n *\n * numbers('abc')\n * // true\n *\n * numbers('ab')\n * // false\n *\n * numbers('abcabc')\n * // false\n *\n * numbers('abc')\n * // false\n */\nconst onlyNumbersAndLettersOnly = (str) => {\n  return str.length === 1 && /[0-9a-zA-Z]/.test(str);\n};\n\n/**\n * Given a string, return true if it contains ", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[k]) {\n    i++;\n    j++;\n  }\n  while (l && l[j] > l[k]) {\n    j--;\n    k++;\n  }\n  return i === j;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  ", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l1[i])\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  Given a sorted array and a target number, return all numbers in the array that\n  are a perfect multiple of the target number.\n\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, 2])\n  [5, 653]\n  >>> perfect([5, 3, 2, 8], [3, ", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      i++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a number n, return true if n is a prime number.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome.\n  >>> isPalindrome(13195)\n  true\n  >>> isPalindrome(2048)\n  false\n  */\nconst isPalindrome = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if n is a palindrome of n.\n  >>> isPalindromeOf(n)\n  true\n  >>> isPalindromeOf(n)\n  false\n  */\nconst isPalindromeOf = (n) => {\n  if (n ", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren_level_count177 = 0;\n  let paren_level_count178 = 0;\n  let paren_level_count179 = 0;", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabetic = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaces = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLine = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \" \";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLine = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \" \";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \" \";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \" \";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \" \";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphabeticWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (str) => {\n  let newStr = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      newStr += str[i];\n    }\n  }\n  return newStr.trim() + \"\\n\";\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the new string.\n * Ex:\n * removeNonAlphabetic('Hello world!')\n * 'Hello world'\n */\nconst removeNonAlphab", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.every(\n    (bracket) => bracket.startsWith(\"(\") && bracket.endsWith(\")\")\n  );\n};\n\n/**\n * Given a string of parentheses, return true if every opening parenthesis\n * has a corresponding closing parenthesis.\n *\n * Examples:\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * true\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\"):", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let n = xs.length;\n  for(let i=0; i<n; i++){\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n}\n\n/* \n  Given a polynomial and a point x, find its roots. \n  >>> roots([3, 1, 2, 4, 5])\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 2)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 3)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 4)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 5)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 6)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 7)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 8)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 9)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 10)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 11)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 12)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 13)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 14)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 15)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 16)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 17)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 18)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 19)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 20)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 21)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 22)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 23)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 24)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 25)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 26)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 27)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 28)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 29)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 30)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 31)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 32)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 33)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 34)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 35)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 36)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 37)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 38)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 39)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 40)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 41)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 42)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 43)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 44)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 45)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 46)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 47)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 48)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 49)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 50)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 51)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 52)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 53)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 54)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 55)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 56)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 57)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 58)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 59)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 60)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 61)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 62)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 63)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 64)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 65)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 66)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 67)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 68)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 69)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 70)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 71)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 72)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 73)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 74)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 75)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 76)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 77)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 78)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 79)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 80)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 81)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 82)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 83)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 84)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 85)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 86)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 87)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 88)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 89)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 90)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 91)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 92)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 93)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 94)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 95)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 96)\n  [3, 1]\n  >>> roots([3, 1, 2, 4, 5], 97)\n  [", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth element of the Fibonacci sequence \n  >>> fibfib(n)\n  0\n  >>> fibfib(n+1)\n  1\n  >>> fibfib(n+2)\n  1\n  >>> fibfib(n+3)\n  2\n  >>> fibfib(n+4)\n  3\n  >>> fibfib(n+5)\n  5\n  >>> fibfib(n+6)\n  8\n  >>> fibfib(n+7)\n  13\n  >>> fibfib(n+8)\n  21\n  >>> fibfib(n+9)\n  34\n  >>> fibfib(n+10)\n  55\n  >>> fibfib(n+11)\n  89\n  >>> fibfib(n+12)\n  144\n  >>> fibfib(n+13)\n  233\n  >>> fibfib(n+14)\n  377\n  >>> fibfib(n+15)\n  610\n  >>> fibfib(n+16)\n  987\n  >>> fibfib(n+17)\n  1597\n  >>> fibfib(n+18)\n  2584\n  >>> fibfib(n+19)\n  4181\n  >>> fibfib(n+20)\n  6765\n  >>> fibfib(n+21)\n  10946\n  >>> fibfib(n+22)\n  17711\n  >>> fibfib(n+23)\n  28657\n  >>> fibfib(n+24)\n  46368\n  >>> fibfib(n+25)\n  75025\n  >>> fibfib(n+26)\n  121393\n  >>> fibfib(n+27)\n  258419\n  >>> fibfib(n+28)\n  418592\n  >>> fibfib(n+29)\n  676538\n  >>> fibfib(n+30)\n  1094638\n  >>> fibfib(n+31)\n  1771138\n  >>> fibfib(n+32)\n  2865738\n  >>> fibfib(n+33)\n  4636838\n  >>> fibfib(n+34)\n  7502538\n  >>> fibfib(n+35)\n  12139338\n  >>> fibfib(n+36)\n  25841938\n  >>> fibfib(n+37)\n  41859238\n  >>> fibfib(n+38)\n  67653838\n  >>> fibfib(n+39)\n  109463838\n  >>> fibfib(n+40)\n  177113838\n  >>> fibfib(n+41)\n  286573838\n  >>> fibfib(n+42)\n  463683838\n  >>> fibfib(n+43)\n  750253838\n  >>> fibfib(n+44)\n  1213933838\n  >>> fibfib(n+45)\n  2584193838\n  >>> fibfib(n+46)\n  4185923838\n  >>> fibfib(n+47)\n  6765383838\n  >>> fibfib(n+48)\n  109463838\n  >>> fibfib(n+49)\n  177113838\n  >>> fibfib(n+50)\n  286573838\n  >>> fibfib(n+51)\n  463683838\n  >>> fibfib(n+52)\n  750253838\n  >>> fibfib(n+53)\n  1213933838\n  >>> fibfib(n+54)\n  2584193838\n  >>> fibfib(n+55)\n  4185923838\n  >>> fibfib(n+56)\n  6765383838\n  >>> fibfib(n+57)\n  109463838\n  >>> fibfib(n+58)\n  177113838\n  >>> fibfib(n+59)\n  286573838\n  >>> fibfib(n+60)\n  463683838\n  >>> fibfib(n+61)\n  750253838\n  >>> fibfib(n+62)\n  1213933838\n  >>> fibfib(n+63)\n  2584193838\n  >>> fibfib(n+64)\n  4185923838\n  >>> fibfib(n+65)\n  6765383838\n  >>> fibfib(n+66)\n  109463838\n  >>> fibfib(n+67)\n  177113838\n  >>> fibfib(n+68)\n  286573838\n  >>> fibfib(n+69)\n  463683838\n  >>> fibfib(n+70)\n  750253838\n  >>> fibfib(n+71)\n  1213933838\n  >>> fibfib(n+72)\n  2584193838\n  >>> fibfib(n+73)\n  4185923838\n  >>> fibfib(n+74)\n  6765383838\n  >>> fibfib(n+75)\n  109463838\n  >>> fibfib(n+76)\n  177113838\n  >>> fibfib(n+77)\n  286573838\n  >>> fibfib(n+78)\n  463683838\n  >>> fibfib(n+79)\n  750253838\n  >>> fibfib(n+80)\n  1213933838\n  >>> fibfib(n+81)\n  2584193838\n  >>> fibfib(n+82)\n  4185923838\n  >>> fibfib(n+83)\n  6765383838\n  >>> fibfib(n+84)\n  109463838\n  >>> fibfib(n+85)\n  177113838\n  >>> fibfib(n+86)\n  286573838\n  >>> fibfib(n+87)\n  463683838\n  >>> fibfib(n+88)\n  750253838\n  >>> fibfib(n+89)\n  1213933838\n  >>> fibfib(n+90)\n  2584193838\n  >>> fibfib(n+91)\n  4185923838\n  >>> fibfib(n+92)\n  6765383838\n  >>> fibfib(n+93)\n  109463838\n  >>> fibfib(n+94)\n  177113838\n  >>> fibfib(n+95)\n  286573838\n  >>> fibfib(n+96)\n  46368", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let vowelsCount204 = 0;\n  let vowelsCount", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let digits = parseInt(x, 10);\n  while (digits > 0) {\n    result = digits.toString() + result;\n    digits = parseInt(result % 10, 10) + 1;\n  }\n  return result + result.slice(digits);\n};\n\n/**\n * Converts a string to a number, or throws an error if the string is not a number.\n * \n * >>> toNumber(\"\")\n  NaN\n  >>> toNumber(\"1\")\n  1\n  >>> toNumber(\"1.1\")\n  1.1\n  >>> toNumber(\"1.10\")\n  1.10\n  >>> toNumber(\"1.100\")\n  1.100\n  >>> toNumber(\"1.1000\")\n  1.1000\n  >>> toNumber(\"1.10000\")\n  1.10000\n  >>> toNumber(\"1.100000\")\n  1.100000\n  >>> toNumber(\"1.1000000\")\n  1.1000000\n  >>> toNumber(\"1.10000000\")\n  1.10000000\n  >>> toNumber(\"1.100000000\")\n  1.100000000\n  >>> toNumber(\"1.1000000000\")\n  1.1000000000\n  >>> toNumber(\"1.10000000000\")\n  1.10000000000\n  >>> toNumber(\"1.100000000000\")\n  1.100000000000\n  >>> toNumber(\"1.1000000000000\")\n  1.1000000000000\n  >>> toNumber(\"1.10000000000000\")\n  1.10000000000000\n  >>> toNumber(\"1.100000000000000\")\n  1.100000000000000\n  >>> toNumber(\"1.1000000000000000\")\n  1.1000000000000000\n  >>> toNumber(\"1.10000000000000000\")\n  1.10000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000\")\n  1.100000000000000000\n  >>> toNumber(\"1.1000000000000000000\")\n  1.1000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n  1.10000000000000000000\n  >>> toNumber(\"1.100000000000000000000\")\n  1.100000000000000000000\n  >>> toNumber(\"1.1000000000000000000000\")\n  1.1000000000000000000000\n  >>> toNumber(\"1.10000000000000000000000\")\n  1.10000000000000000000000\n  >>> toNumber(\"1.100000000000000000000000\")\n  1.100000000000000000000000\n  >>> toNumber(\"1.1000000000000000000000000\")\n  1.1000000000000000000000000\n  >>> toNumber(\"1.10000000000000000000\")\n", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total= 0;\n   let fruit= s.split(\" \").map(Number);\n   let totalFruit= fruit.filter(Number).length;\n   let totalOrange= fruit.filter(Number).filter(Number).length;\n   let totalMango= fruit.filter(Number).filter(Number).filter(Number).length;\n   let total= total+totalFruit;\n   let total= total+totalOrange;\n   let total= total+totalMango;\n   return total;\n };\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3));\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n /*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total= 0;\n   let fruit= s.split(\" \").map(Number);\n   let totalFruit= fruit.filter(Number).length;\n   let totalOrange= fruit.filter(Number).filter(Number).length;\n   let totalMango= fruit.filter(Number).filter(Number).filter(Number).length;\n   let total= total+totalFruit;\n   let total= total+totalOrange;\n   let total= total+totalMango;\n   return total;\n };\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3));\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n /*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total= 0;\n   let fruit= s.split(\" \").map(Number);\n   let totalFruit= fruit.filter(Number).length;\n   let totalOrange= fruit.filter(Number).filter(Number).length;\n   let totalMango= fruit.filter(Number).filter(Number).filter(Number).length;\n   let total= total+totalFruit;\n   let total= total+totalOrange;\n   let total= total+totalMango;\n   return total;\n };\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3));\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n /*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total= 0;\n   let fruit= s.split(\" \").map(Number);\n   let totalFruit= fruit.filter(Number).length;\n   let totalOrange= fruit.filter(Number).filter(Number).length;\n   let totalMango= fruit.filter(Number).filter(Number).filter(Number).length;\n   let total= total+totalFruit;\n   let total= total+totalOrange;\n   let total= total+totalMango;\n   return total;\n };\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3));\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n /*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= ", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = -1;\n  while (min <= max) {\n    even = arr[min];\n    if (even % 2 === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n  }\n  if (min === max) {\n    return even;\n  }\n  if (min === 0 || max === len - 1) {\n    return -1;\n  }\n  index = min + Math.floor(Math.random() * (max - min + 1));\n  return [even, index];\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodes = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null) {\n      helper(node.left, value);\n    }\n    if (node.right!== null) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue2 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue3 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue4 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue5 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue6 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue7 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.left!== null && node.left.value === value) {\n      helper(node.left, value);\n    }\n    if (node.right!== null && node.right.value === value) {\n      helper(node.right, value);\n    }\n  };\n  helper(root, value);\n  return result;\n};\n\n// Given a binary tree and a value, return all nodes that have the given value.\n// If the value is not present, return an empty list.\n// If the tree is empty, return an empty list.\n// Follow up: Could you do this in one pass?\nconst findNodesValue8 = (root, value) => {\n  const result = [];\n  const helper = (node, value) => {\n    if (node === null) {\n      return result;\n    }\n    if (value === node.value) {\n      result.push(node);\n    }\n    if (node.", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxIndexValue = 0;\n  let maxValueFreq = 0;\n  let maxValueIndex = 0;\n  let maxValueValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let maxValueFreqValue = 0;\n  let maxValueIndexValue = 0;\n  let max", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for the ones that contained a substring\n * that matched a regular expression.\n * If no regular expression was provided, return all strings.\n * If no substring is provided, return all strings.\n * If no string is provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If no string was provided, return all strings.\n * If ", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let newLst = []\n  let minVal = lst[0]\n  let maxVal = lst[0]\n  let minIndex = -1\n  let maxIndex = -1\n  let minIndex2 = -1\n  let maxIndex2 = -1\n  let minIndex3 = -1\n  let maxIndex3 = -1\n  let minIndex4 = -1\n  let maxIndex4 = -1\n  let minIndex5 = -1\n  let maxIndex5 = -1\n  let minIndex6 = -1\n  let maxIndex6 = -1\n  let minIndex7 = -1\n  let maxIndex7 = -1\n  let minIndex8 = -1\n  let maxIndex8 = -1\n  let minIndex9 = -1\n  let maxIndex9 = -1\n  let minIndex10 = -1\n  let maxIndex10 = -1\n  let minIndex11 = -1\n  let maxIndex11 = -1\n  let minIndex12 = -1\n  let maxIndex12 = -1\n  let minIndex13 = -1\n  let maxIndex13 = -1\n  let minIndex14 = -1\n  let maxIndex14 = -1\n  let minIndex15 = -1\n  let maxIndex15 = -1\n  let minIndex16 = -1\n  let maxIndex16 = -1\n  let minIndex17 = -1\n  let maxIndex17 = -1\n  let minIndex18 = -1\n  let maxIndex18 = -1\n  let minIndex19 = -1\n  let maxIndex19 = -1\n  let minIndex20 = -1\n  let maxIndex20 = -1\n  let minIndex21 = -1\n  let maxIndex21 = -1\n  let minIndex22 = -1\n  let maxIndex22 = -1\n  let minIndex23 = -1\n  let maxIndex23 = -1\n  let minIndex24 = -1\n  let maxIndex24 = -1\n  let minIndex25 = -1\n  let maxIndex25 = -1\n  let minIndex26 = -1\n  let maxIndex26 = -1\n  let minIndex27 = -1\n  let maxIndex27 = -1\n  let minIndex28 = -1\n  let maxIndex28 = -1\n  let minIndex29 = -1\n  let maxIndex29 = -1\n  let minIndex30 = -1\n  let maxIndex30 = -1\n  let minIndex31 = -1\n  let maxIndex31 = -1\n  let minIndex32 = -1\n  let maxIndex32 = -1\n  let minIndex33 = -1\n  let maxIndex33 = -1\n  let minIndex34 = -1\n  let maxIndex34 = -1\n  let minIndex35 = -1\n  let maxIndex35 = -1\n  let minIndex36 = -1\n  let maxIndex36 = -1\n  let minIndex37 = -1\n  let maxIndex37 = -1\n  let minIndex38 = -1\n  let maxIndex38 = -1\n  let minIndex39 = -1\n  let maxIndex39 = -1\n  let minIndex40 = -1\n  let maxIndex40 = -1\n  let minIndex41 = -1\n  let maxIndex41 = -1\n  let minIndex42 = -1\n  let maxIndex42 = -1\n  let minIndex43 = -1\n  let maxIndex43 = -1\n  let minIndex44 = -1\n  let maxIndex44 = -1\n  let minIndex45 = -1\n  let maxIndex45 = -1\n  let minIndex46 = -1\n  let maxIndex46 = -1\n  let minIndex47 = -1\n  let maxIndex47 = -1\n  let minIndex48 = -1\n  let maxIndex48 = -1\n  let minIndex49 = -1\n  let maxIndex49 = -1\n  let minIndex50 = -1\n  let maxIndex50 = -1\n  let minIndex51 = -1\n  let maxIndex51 = -1\n  let minIndex52 = -1\n  let maxIndex52 = -1\n  let minIndex53 = -1\n  let maxIndex53 = -1\n  let minIndex54 = -1\n  let maxIndex54 = -1\n  let minIndex55 = -1\n  let maxIndex55 = -1\n  let minIndex56 = -1\n  let maxIndex56 = -1\n  let minIndex57 = -1\n  let maxIndex57 = -1\n  let minIndex58 = -1\n  let maxIndex58 = -1\n  let minIndex59 = -1\n  let maxIndex59 = -1\n  let minIndex60 = -1\n  let maxIndex60 = -1\n  let minIndex61 = -1\n  let maxIndex61 = -1\n  let minIndex62 = -1\n  let maxIndex62 = -1\n  let minIndex63 = -1\n  let maxIndex63 = -1\n  let minIndex64 = -1\n  let maxIndex64 = -1\n  let minIndex65 = -1\n  let maxIndex65 = -1\n  let minIndex66 = -1\n  let maxIndex66 = -1\n  let minIndex67 = -1\n  let maxIndex67 = -1\n  let minIndex68 = -1\n  let maxIndex68 = -1\n  let minIndex69 = -1\n  let maxIndex69 = -1\n  let minIndex70 = -1\n  let maxIndex70 = -1\n  let minIndex71 = -1\n  let maxIndex71 = -1\n  let minIndex72 = -1\n  let maxIndex72 = -1\n  let minIndex73 = -1\n  let maxIndex73 = -1\n  let minIndex74 = -1\n  let maxIndex74 = -1\n  let minIndex75 = -1\n  let maxIndex75 = -1\n  let minIndex76 = -1\n  let maxIndex76 = -1\n  let minIndex77 = -1\n  let maxIndex77 = -1\n  let minIndex78 = -1\n  let maxIndex78 = -1\n  let minIndex79 = -1\n  let maxIndex79 = -1\n  let minIndex80 = -1\n  let maxIndex80 = -1\n  let minIndex81 = -1\n  let maxIndex81 = -1\n  let minIndex82 = -1\n  let maxIndex82 = -1\n  let minIndex83 = -1\n  let maxIndex83 = -1\n  let minIndex84 = -1\n  let maxIndex84 = -1\n  let minIndex85 = -1\n  let maxIndex85 = -1\n  let minIndex86 = -1\n  let maxIndex86 = -1\n  let minIndex87 = -1\n  let maxIndex87 = -1\n  let minIndex88 = -1\n  let maxIndex88 = -1\n  let minIndex89 = -1\n  let maxIndex89 = -1\n  let minIndex90 = -1\n  let maxIndex90 = -1\n  let minIndex91 = -1\n  let maxIndex91 = -1\n  let minIndex92 = -1\n  let maxIndex92 = -1\n  let minIndex93 = -1\n  let maxIndex93 = -1\n  let minIndex94 = -1\n  let maxIndex94 = -1\n  let minIndex95 = -1\n  let maxIndex95 = -1\n  let minIndex96 = -1\n  let maxIndex96 = -1\n  let minIndex97 = -1\n  let maxIndex97 = -1\n  let minIndex98 = -1\n  let maxIndex98 = -1\n  let minIndex99 = -1\n  let maxIndex99 = -1\n  let minIndex100 = -1\n  let maxIndex100 = -1\n  let minIndex101 = -1\n  let maxIndex101 = -1\n  let minIndex102 = -1\n  let maxIndex102 = -1\n  let minIndex103 = -1\n  let maxIndex103 = -1\n  let minIndex104 = -1\n  let maxIndex104 = -1\n  let minIndex105 = -1\n  let maxIndex105 = -1\n  let minIndex106 = -1\n  let maxIndex106 = -1\n  let minIndex107 = -1\n  let maxIndex107 = -1\n  let minIndex108 = -1\n  let maxIndex108 = -1\n  let minIndex109 = -1\n  let maxIndex109 = -1\n  let minIndex110 = -1\n  let maxIndex110 = -1\n  let minIndex111 = -1\n  let maxIndex111 = -1\n  let minIndex112 = -1\n  let maxIndex112 = -1\n  let minIndex113 = -1\n  let maxIndex113 = -1\n  let minIndex11", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a rectangle. Returned the area of \n   the rectangle rounded to 2 decimal points if the three sides formed a valid \n   rectangle. Otherwise return-1 \n   Three sides made a valid rectangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 6.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a pentagon. Returned the area of \n   the pentagon rounded to 2 decimal points if the three sides formed a valid \n   pentagon. Otherwise return-1 \n   Three sides made a valid pentagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  pentagonArea(3, 4, 5) == 6.00\n  pentagonArea(1, 2, 10) == -1\n  */\nconst pentagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Returned the area of \n   the heptagon rounded to 2 decimal points if the three sides formed a valid \n   heptagon. Otherwise return-1 \n   Three sides made a valid heptagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 6.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Returned the area of \n   the decagon rounded to 2 decimal points if the three sides formed a valid \n   decagon. Otherwise return-1 \n   Three sides made a valid decagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  decagonArea(3, 4, 5) == 6.00\n  decagonArea(1, 2, 10) == -1\n  */\nconst decagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Returned the area of \n   the decagon rounded to 2 decimal points if the three sides formed a valid \n   decagon. Otherwise return-1 \n   Three sides made a valid decagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  decagonArea(3, 4, 5) == 6.00\n  decagonArea(1, 2, 10) == -1\n  */\nconst decagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  let sum = 0;\n  if (a + b > c) {\n    sum = a + b;\n  } else {\n    sum = a + c;\n  }\n  return Math.round((sum / 3) * 100) / 100;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagon", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > w) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > max) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > max) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > max) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > max) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {\n  let sum = 0;\n  let max = 0;\n  let isBalanced = false;\n  q.forEach((item, index) => {\n    sum += item;\n    if (sum > max) {\n      max = sum;\n      isBalanced = true;\n    }\n  });\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 1+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst isPalindromic = (q) => {", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let temp;\n\n  for (let i = 0; i < min; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 3\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = len / 2;\n  let temp;\n\n  for (let i = 0; i < max; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let temp;\n\n  for (let i = 0; i < min; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = len / 2;\n  let temp;\n\n  for (let i = 0; i < max; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let temp;\n\n  for (let i = 0; i < min; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = len / 2;\n  let temp;\n\n  for (let i = 0; i < max; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let temp;\n\n  for (let i = 0; i < min; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let max = len / 2;\n  let temp;\n\n  for (let i = 0; i < max; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = len / 2;\n  let temp;\n\n  for (let i = 0; i < min; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, ", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item < lst2).concat(lst2.filter(item => item < lst1))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item > lst2).concat(lst2.filter(item => item > lst1))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item === lst2).concat(lst2.filter(item => item === lst1))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list not equal the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item!== lst2).concat(lst2.filter(item => item!== lst1))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list between the first and last \n   chars of the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item >= lst1Chars).concat(lst2.filter(item => item >= lst1Chars))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list between the first and last \n   chars of the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst1Chars = lst1.reduce((acc, curr) => acc + curr.length, 0)\n  const lst2Chars = lst2.reduce((acc, curr) => acc + curr.length, 0)\n  return lst1.filter(item => item <= lst2Chars).concat(lst2.filter(item => item <= lst2Chars))\n}\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list between the first and last \n   char", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the sum of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isSumPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100) {\n    const isPrime = (n) => {\n      if (n % 2 === 0) return false;\n      if (n % 3 === 0) return false;\n      if (n % 5 === 0) return false;\n      return true;\n    };\n    return isPrime(a);\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the difference of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isDiffPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isDiffPrime = (a) => {\n  if (a < 100", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isSimple = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isSimple = false;\n  }\n  \n  return isSimple;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of n and false in other cases. \n   x was a power of n if n**int=x\n  For example:\n  isPowerOfN(1, 4) => true\n  isPowerOfN(2, 2) => true\n  isPowerOfN(8, 2) => true\n  isPowerOfN(3, 2) => false\n  isPowerOfN(3, 1) => false\n  isPowerOfN(5, 3) => false\n  isPowerOfN(5, 2) => true\n  */\nconst isPowerOfN = (x, n) => {\n  let isPowerOfN = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfN = false;\n  }\n  \n  return isPowerOfN;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 2 and false in other cases. \n   x was a power of 2 if n**int=x\n  For example:\n  isPowerOfTwo(1, 4) => true\n  isPowerOfTwo(2, 2) => true\n  isPowerOfTwo(8, 2) => true\n  isPowerOfTwo(3, 2) => false\n  isPowerOfTwo(3, 1) => false\n  isPowerOfTwo(5, 3) => false\n  isPowerOfTwo(5, 2) => true\n  */\nconst isPowerOfTwo = (x, n) => {\n  let isPowerOfTwo = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfTwo = false;\n  }\n  \n  return isPowerOfTwo;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 3 and false in other cases. \n   x was a power of 3 if n**int=x\n  For example:\n  isPowerOfThree(1, 4) => true\n  isPowerOfThree(2, 2) => true\n  isPowerOfThree(8, 2) => true\n  isPowerOfThree(3, 2) => false\n  isPowerOfThree(3, 1) => false\n  isPowerOfThree(5, 3) => false\n  isPowerOfThree(5, 2) => true\n  */\nconst isPowerOfThree = (x, n) => {\n  let isPowerOfThree = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfThree = false;\n  }\n  \n  return isPowerOfThree;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 5 and false in other cases. \n   x was a power of 5 if n**int=x\n  For example:\n  isPowerOfFive(1, 4) => true\n  isPowerOfFive(2, 2) => true\n  isPowerOfFive(8, 2) => true\n  isPowerOfFive(3, 2) => false\n  isPowerOfFive(3, 1) => false\n  isPowerOfFive(5, 3) => false\n  isPowerOfFive(5, 2) => true\n  */\nconst isPowerOfFive = (x, n) => {\n  let isPowerOfFive = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfFive = false;\n  }\n  \n  return isPowerOfFive;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 10 and false in other cases. \n   x was a power of 10 if n**int=x\n  For example:\n  isPowerOfTen(1, 4) => true\n  isPowerOfTen(2, 2) => true\n  isPowerOfTen(8, 2) => true\n  isPowerOfTen(3, 2) => false\n  isPowerOfTen(3, 1) => false\n  isPowerOfTen(5, 3) => false\n  isPowerOfTen(5, 2) => true\n  */\nconst isPowerOfTen = (x, n) => {\n  let isPowerOfTen = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfTen = false;\n  }\n  \n  return isPowerOfTen;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 2 and true in other cases. \n   x was a power of 2 if n**int=x\n  For example:\n  isPowerOfTwoAndEqual(1, 4) => true\n  isPowerOfTwoAndEqual(2, 2) => true\n  isPowerOfTwoAndEqual(8, 2) => true\n  isPowerOfTwoAndEqual(3, 2) => true\n  isPowerOfTwoAndEqual(3, 1) => false\n  isPowerOfTwoAndEqual(5, 3) => false\n  isPowerOfTwoAndEqual(5, 2) => true\n  */\nconst isPowerOfTwoAndEqual = (x, n) => {\n  let isPowerOfTwoAndEqual = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfTwoAndEqual = false;\n  }\n  \n  return isPowerOfTwoAndEqual;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 3 and true in other cases. \n   x was a power of 3 if n**int=x\n  For example:\n  isPowerOfThreeAndEqual(1, 4) => true\n  isPowerOfThreeAndEqual(2, 2) => true\n  isPowerOfThreeAndEqual(8, 2) => true\n  isPowerOfThreeAndEqual(3, 2) => true\n  isPowerOfThreeAndEqual(3, 1) => false\n  isPowerOfThreeAndEqual(5, 3) => false\n  isPowerOfThreeAndEqual(5, 2) => true\n  */\nconst isPowerOfThreeAndEqual = (x, n) => {\n  let isPowerOfThreeAndEqual = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfThreeAndEqual = false;\n  }\n  \n  return isPowerOfThreeAndEqual;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of 5 and true in other cases. \n   x was a power of 5 if n**int=x\n  For example:\n  isPowerOfFiveAndEqual(1, 4) => true\n  isPowerOfFiveAndEqual(2, 2) => true\n  isPowerOfFiveAndEqual(8, 2) => true\n  isPowerOfFiveAndEqual(3, 2) => true\n  isPowerOfFiveAndEqual(3, 1) => false\n  isPowerOfFiveAndEqual(5, 3) => false\n  isPowerOfFiveAndEqual(5, 2) => true\n  */\nconst isPowerOfFiveAndEqual = (x, n) => {\n  let isPowerOfFiveAndEqual = true;\n  \n  if (x === 0) return false;\n  if (n === 0) return true;\n  if (n % x === 0) {\n    isPowerOfFiveAndEqual = false;\n  }\n", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube2(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube3(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube4(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube5(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube6(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube7(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube8(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube9(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube10(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  if (a <= 0) return false\n  if (a > 1) return true\n  if (a % 2 === 0) return false\n  return iscube11(a / 2)\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(-1) ==> true\n  iscube(64) ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numArray = num.split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    if (numArray[i] === \"0\") {\n      count++;\n    } else if (numArray[i] === \"1\") {\n      count++;\n    } else if (numArray[i] === \"2\") {\n      count++;\n    } else if (numArray[i] === \"3\") {\n      count++;\n    } else if (numArray[i] === \"4\") {\n      count++;\n    } else if (numArray[i] === \"5\") {\n      count++;\n    } else if (numArray[i] === \"6\") {\n      count++;\n    } else if (numArray[i] === \"7\") {\n      count++;\n    } else if (numArray[i] === \"8\") {\n      count++;\n    } else if (numArray[i] === \"9\") {\n      count++;\n    } else if (numArray[i] === \"A\") {\n      count++;\n    } else if (numArray[i] === \"B\") {\n      count++;\n    } else if (numArray[i] === \"C\") {\n      count++;\n    } else if (numArray[i] === \"D\") {\n      count++;\n    } else if (numArray[i] === \"E\") {\n      count++;\n    } else if (numArray[i] === \"F\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You were tasked to write a function that receives a string and \n  counts the number of letters that was in uppercase letters (uppercase letters === \n  a natural number greater than 1 that was not a product of two smaller \n  natural numbers). \n  Uppercase letters was A===B===C===D===E===F \n  So you had to determine a number of the following letters: A===B===C===D===E===F \n  Note: you may assumed the input was always correct or empty string=== \n  and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For str = \"ABCDEF\" the output should be 3.\n  For str = \"ABCDEFG\" the output should be 4.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 6.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF\" the output should be 8.\n  For str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\" the output should be 10.\n  For strpassed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = parseInt(decimal, 2);\n  let decimalToBinaryString = decimalToBinary.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    binary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToDecimal(15)   # returns 15\n  decimalToDecimal(32)   # returns 32\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimalToDecimal = parseInt(decimal, 2);\n  let decimalToDecimalString = decimalToDecimal.toString(2);\n  \n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimalToDecimalString[i] = decimalToDecimalString[i] == '1'? '0' : '1';\n  }\n  return decimalToDecimalString;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimalToDecimal = '';\n  let binaryToDecimal = '';\n  let binaryToDecimalString = binary.toString(2);\n  \n  for (let i = 0; i < binaryToDecimalString.length; i++) {\n    decimalToDecimal += binaryToDecimalString[i] == '1'? '0' : '1';\n  }\n  return decimalToDecimal;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in decimal form.\n\n  Examples:\n  binaryToDecimal('db1111db')   # returns 15\n  binaryToDecimal('db100000db')   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let binaryToDecimal = '';\n  let decimalToDecimal = '';\n  let decimalToDecimalString = binary.toString(2);\n  \n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    decimalToDecimal += decimalToDecimalString[i] == '1'? '0' : '1';\n  }\n  return decimalToDecimal;\n};\n\n/*\n  Write a function that converts a binary number to a decimal number in binary form.\n\n  Examples:\n  binaryToBinary(15)   # returns \"db1111\"\n  binaryToBinary(32)   # returns \"db100000\"\n  */\nconst binaryToBinary = (binary) => {\n  let decimalToBinary = '';\n  let binaryToBinary = '';\n  let binaryToBinaryString = binary.toString(2);\n  \n  for (let i = 0; i < binaryToBinaryString.length; i++) {\n    decimalToBinary += binaryToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in binary form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in binary form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in binary form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal.toString(2);\n  \n  for (let i = 0; i < decimalToBinaryString.length; i++) {\n    decimalToBinary += decimalToBinaryString[i] == '1'? '0' : '1';\n  }\n  return decimalToBinary;\n};\n\n/*\n  Write a function that converts a decimal number to a binary number in decimal form.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111\"\n  decimalToBinary(32)   # returns \"db100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryToDecimal = '';\n  let decimalToBinary = '';\n  let decimalToBinaryString = decimal", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([1,2,3,4,5], 2)\n  (6, 12)\n  >>> sumProduct([1,2,3,4,5], 3)\n  (24, 120)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return { sum, product };\n};\n\n/* Given a list, return a tuple consisting of a sum and a ", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letterCount = 0;\n  let letterCount2 = 0;\n  let letterCount3 = 0;\n  let letterCount4 = 0;\n  let letterCount5 = 0;\n  let letterCount6 = 0;\n  let letterCount7 = 0;\n  let letterCount8 = 0;\n  let letterCount9 = 0;\n  let letterCount10 = 0;\n  let letterCount11 = 0;\n  let letterCount12 = 0;\n  let letterCount13 = 0;\n  let letterCount14 = 0;\n  let letterCount15 = 0;\n  let letterCount16 = 0;\n  let letterCount17 = 0;\n  let letterCount18 = 0;\n  let letterCount19 = 0;\n  let letterCount20 = 0;\n  let letterCount21 = 0;\n  let letterCount22 = 0;\n  let letterCount23 = 0;\n  let letterCount24 = 0;\n  let letterCount25 = 0;\n  let letterCount26 = 0;\n  let letterCount27 = 0;\n  let letterCount28 = 0;\n  let letterCount29 = 0;\n  let letterCount30 = 0;\n  let letterCount31 = 0;\n  let letterCount32 = 0;\n  let letterCount33 = 0;\n  let letterCount34 = 0;\n  let letterCount35 = 0;\n  let letterCount36 = 0;\n  let letterCount37 = 0;\n  let letterCount38 = 0;\n  let letterCount39 = 0;\n  let letterCount40 = 0;\n  let letterCount41 = 0;\n  let letterCount42 = 0;\n  let letterCount43 = 0;\n  let letterCount44 = 0;\n  let letterCount45 = 0;\n  let letterCount46 = 0;\n  let letterCount47 = 0;\n  let letterCount48 = 0;\n  let letterCount49 = 0;\n  let letterCount50 = 0;\n  let letterCount51 = 0;\n  let letterCount52 = 0;\n  let letterCount53 = 0;\n  let letterCount54 = 0;\n  let letterCount55 = 0;\n  let letterCount56 = 0;\n  let letterCount57 = 0;\n  let letterCount58 = 0;\n  let letterCount59 = 0;\n  let letterCount60 = 0;\n  let letterCount61 = 0;\n  let letterCount62 = 0;\n  let letterCount63 = 0;\n  let letterCount64 = 0;\n  let letterCount65 = 0;\n  let letterCount66 = 0;\n  let letterCount67 = 0;\n  let letterCount68 = 0;\n  let letterCount69 = 0;\n  let letterCount70 = 0;\n  let letterCount71 = 0;\n  let letterCount72 = 0;\n  let letterCount73 = 0;\n  let letterCount74 = 0;\n  let letterCount75 = 0;\n  let letterCount76 = 0;\n  let letterCount77 = 0;\n  let letterCount78 = 0;\n  let letterCount79 = 0;\n  let letterCount80 = 0;\n  let letterCount81 = 0;\n  let letterCount82 = 0;\n  let letterCount83 = 0;\n  let letterCount84 = 0;\n  let letterCount85 = 0;\n  let letterCount86 = 0;\n  let letterCount87 = 0;\n  let letterCount88 = 0;\n  let letterCount89 = 0;\n  let letterCount90 = 0;\n  let letterCount91 = 0;\n  let letterCount92 = 0;\n  let letterCount93 = 0;\n  let letterCount94 = 0;\n  let letterCount95 = 0;\n  let letterCount96 = 0;\n  let letterCount97 = 0;\n  let letterCount98 = 0;\n  let letterCount99 = 0;\n  let letterCount100 = 0;\n  let letterCount101 = 0;\n  let letterCount102 = 0;\n  let letterCount103 = 0;\n  let letterCount104 = 0;\n  let letterCount105 = 0;\n  let letterCount106 = 0;\n  let letterCount107 = 0;\n  let letterCount108 = 0;\n  let letterCount109 = 0;\n  let letterCount110 = 0;\n  let letterCount111 = 0;\n  let letterCount112 = 0;\n  let letterCount113 = 0;\n  let letterCount114 = 0;\n  let letterCount115 = 0;\n  let letterCount116 = 0;\n  let letterCount117 = 0;\n  let letterCount118 = 0;\n  let letterCount119 = 0;\n  let letterCount120 = 0;\n  let letterCount121 = 0;\n  let letterCount122 = 0;\n  let letterCount123 = 0;\n  let letterCount124 = 0;\n  let letterCount125 = 0;\n  let letterCount126 = 0;\n  let letterCount127 = 0;\n  let letterCount128 = 0;\n  let letterCount129 = 0;\n  let letterCount130 = 0;\n  let letterCount131 = 0;\n  let letterCount132 = 0;\n  let letterCount133 = 0;\n  let letterCount134 = 0;\n  let letterCount135 = 0;\n  let letterCount136 = 0;\n  let letterCount137 = 0;\n  let letterCount138 = 0;\n  let letterCount139 = 0;\n  let letterCount140 = 0;\n  let letterCount141 = 0;\n  let letterCount142 = 0;\n  let letterCount143 = 0;\n  let letterCount144 = 0;\n  let letterCount145 = 0;\n  let letterCount146 = 0;\n  let letterCount147 = 0;\n  let letterCount148 = 0;\n  let letterCount149 = 0;\n  let letterCount150 = 0;\n  let letterCount151 = 0;\n  let letterCount152 = 0;\n  let letterCount153 = 0;\n  let letterCount154 = 0;\n  let letterCount155 = 0;\n  let letterCount156 = 0;\n  let letterCount157 = 0;\n  let letterCount158 = 0;\n  let letterCount159 = 0;\n  let letterCount160 = 0;\n  let letterCount161 = 0;\n  let letterCount162 = 0;\n  let letterCount163 = 0;\n  let letterCount164 = 0;\n  let letterCount165 = 0;\n  let letterCount166 = 0;\n  let letterCount167 = 0;\n  let letterCount168 = 0;\n  let letterCount169 = 0;\n  let letterCount170 = 0;\n  let letterCount171 = 0;\n  let letterCount172 = 0;\n  let letterCount173 = 0;\n  let letterCount174 = 0;\n  let letterCount175 = 0;\n  let letterCount176 = 0;\n  let letterCount177 = 0;\n  let letterCount178 = 0;\n  let letterCount179 = 0;\n  let letterCount180 = 0;\n  let letterCount181 = 0;\n  let letterCount182 = 0;\n  let letterCount183 = 0;\n  let letterCount184 = 0;\n  let letterCount185 = 0;\n  let letterCount186 = 0;\n  let letterCount187 = 0;\n  let letterCount188 = 0;\n  let letterCount189 = 0;\n  let letterCount190 = 0;\n  let letterCount191 = 0;\n  let letterCount192 = 0;\n  let letterCount193 = 0;\n  let letterCount194 = 0;\n  let letterCount195 = 0;\n  let letterCount196 = 0;\n  let letterCount197 = 0;\n  let letterCount198 = 0;\n  let letterCount199 = 0;\n  let letterCount200 = 0;\n  let letterCount201 = 0;\n  let letterCount202 = 0;\n  let letterCount203 = 0;\n  let letterCount204 = 0;\n  let letterCount205 = 0;\n  let letterCount206 = 0;\n  let letterCount207 = 0;\n  let letterCount208 = 0;\n  let letterCount209 = 0;\n  let letterCount210 = 0;\n  let letterCount211 = 0;\n  let letterCount212 = 0;\n  let letterCount213 = 0;\n  let letterCount214 = 0;\n  let letterCount215 = 0;\n  let letterCount216 = 0;\n  let letterCount217 = 0;\n  let letterCount218 = 0;\n  let letterCount219 = 0;\n  let letterCount220 = 0;\n  let letterCount221 = 0;\n  let letterCount222 = 0;\n  let letterCount223 = 0;\n  let letterCount224 = 0;\n  let letterCount225 = 0;\n  let letterCount226 = 0;\n  let letterCount227 = 0;\n  let letterCount228 = 0;\n  let letterCount229 = 0;\n  let letterCount230 = 0;\n  let letterCount231 = 0;\n  let letterCount232 = 0;\n  let letterCount233 = 0;\n  let letterCount234 = 0;\n  let letterCount235 = 0;\n  let letterCount236 = 0;\n  let letterCount237 = 0;", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  grades.forEach((grade) => {\n    sum += grade;\n  });\n  letterGrades.push(sum % 10);\n  letterGrades.push(sum / 10);\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade2 = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  grades.forEach((grade) => {\n    sum += grade;\n  });\n  letterGrades.push(sum % 10);\n  letterGrades.push(sum / 10);\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade3 = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  grades.forEach((grade) => {\n    sum += grade;\n  });\n  letterGrades.push(sum % 10);\n  letterGrades.push(sum / 10);\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade4 = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  grades.forEach((grade) => {\n    sum += grade;\n  });\n  letterGrades.push(sum % 10);\n  letterGrades.push(sum / 10);\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade5 = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  grades.forEach((grade) => {\n    sum += grade;\n  });\n  letterGrades.push(sum % 10);\n  letterGrades.push(sum / 10);\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          ", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (number) => {\n  let prime = true;\n  let length = number.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbers = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumbersOr = (numbers) => {\n  let prime = true;\n  let length = numbers.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst is", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOne= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const endsWithOne= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const startsOne= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const endsOne= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1. \n  */ \n const startsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsWithOneEnds= (n)=>{\n   let count = 0;\n   for(let i=0;i<n;i++){\n     if(n % i == 0){\n       ", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 10);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 10);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 2);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 2);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 10);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 10);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 2);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 2);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 16);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 16);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 16);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 16);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 8);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 8);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 8);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 8);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 16);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 16);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 16);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 16);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N % 8);\n    digitSum = digitSum + digit;\n    N = Math.floor(N / 8);\n  }\n  \n  digitSum = digitSum + digitSum;\n  \n  while(digitSum!== 0) {\n    digit = parseInt(digitSum % 8);\n    binary = binary + digit;\n    digitSum = parseInt(digitSum / 8);\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let digitSum = 0;\n  \n  while(N!== 0) {\n    digit = parseInt(N", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  let even = 0;\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      result += item;\n      even += 1;\n    } else {\n      result += item;\n      odd += 1;\n    }\n  });\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (item > result) {\n      result = item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (item < result) {\n      result = item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    result += item;\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the difference between all elements in the list.\n\n\n  Examples:\n      diff([4, 2, 6, 7]) ==> 2\n  */\nconst diff = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    result += item - lst[index];\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list.\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    result *= item;\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements.\n\n\n  Examples:\n      prodExceptEven([4, 2, 6, 7]) ==> 24\n  */\nconst prodExceptEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the odd elements.\n\n\n  Examples:\n      prodExceptOdd([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOdd = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptEvenOdd([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptEvenOdd = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEven([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOdd([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEvenOdd = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOddEven([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEvenOddEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOddEvenOddEven([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEvenOddEvenOddEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOddEvenOddEvenOddEven([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOddEvenOddEvenOddEvenOddEven([2, 4, 6, 8]) ==> 24\n  */\nconst prodExceptOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let result = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1 && index % 2!== 0 && index % 2!== 0) {\n      result += item;\n    }\n  });\n  return result;\n};\n\n/*Given a non-empty list of integers lst. return the product of all elements in the list except the even elements and odd elements.\n\n\n  Examples:\n      prodExceptOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newStr = ''\n  let newStrLen = 0\n  let newStrIndex = 0\n  let newStrChar = ''\n  let newStrCharLen = 0\n  let newStrCharIndex = 0\n  let newStrCharChar = ''\n  let newStrCharCharLen = 0\n  let newStrCharCharIndex = 0\n  let newStrCharCharChar = ''\n  let newStrCharCharCharLen = 0\n  let newStrCharCharCharIndex = 0\n  let newStrCharCharCharChar = ''\n  let newStrCharCharCharCharLen = 0\n  let newStrCharCharCharCharIndex = 0\n  let newStrCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharLen = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = ''\n  let newStrCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIdx = 0\n  let colIdx = 0\n  let rowIdxMax = lst.length - 1\n  let colIdxMax = lst[0].length - 1\n  let rowIdxMin = 0\n  let colIdxMin = 0\n  let rowIdxMaxIdx = 0\n  let colIdxMaxIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMinIdxIdx = 0\n  let colIdxMinIdx = 0\n  let rowIdxMaxIdxIdx = 0\n  let colIdxMaxIdxIdx = 0\n  let rowIdxMin", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let index = 0\n  let lastIndex = array.length - 1\n  let firstIndex = 0\n  let lastIndexValue = 0\n  let firstIndexValue = 0\n  let swapped = 0\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += array[index]\n    sortedArray[index] = array[index]\n    sortedArray[lastIndex] = array[index]\n    index += 1\n  }\n\n  while (index < lastIndex) {\n    sum += ", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i = 0;\n  let j = 0;\n  let len = alphabet.length;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < len; j++){\n      rotated += alphabet[j];\n    }\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i = 0;\n  let j = 0;\n  let len = alphabet.length;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < len; j++){\n      rotated += alphabet[j];\n    }\n  }\n  return rotated;\n}\n\n/*Create a function trim that took a string as an argument and \n   returned a string trimmed from the beginning and end of the string. \n   For example:\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi'\n  trim('   hi   ') returns 'hi", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      current = i;\n    }\n  }\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      current = i;\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/**\n * Given a number and a number, return true if number is a prime number.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n * \n * A prime number is a natural ", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   let smallest=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp<smallest){\n       smallest=temp;\n     }\n     temp=lst[i];\n   }\n   return smallest;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLargest() that returned the 1st largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 1 \n   nextLargest([5, 1, 4, 3, 2])== 1 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \n const nextLargest= (lst)=>{\n   let largest=lst[0];\n   let temp=lst[1];\n   for(let i=1;i<lst.length;i++){\n     if(temp>largest){\n       largest=temp;\n     }\n     temp=lst[i];\n   }\n   return largest;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextEven() that returned the even elements of the list.\n   Return null if there was no such element. \n  \n   nextEven([1, 2, 3, 4, 5])== 1 \n   nextEven([5, 1, 4, 3, 2])== 1 \n   nextEven([])== null \n   nextEven([1, 1])== null \n  */ \n const nextEven= (lst)=>{\n   let even=lst[0];\n   let temp=lst[1];\n   for(let i=1;i<lst.length;i++){\n     if(temp%2==0){\n       even=temp;\n     }\n     temp=lst[i];\n   }\n   return even;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextOdd()that returned the odd elements of the list.\n   Return null if there was no such element. \n  \n   nextOdd([1, 2, 3, 4, 5])== 1 \n   nextOdd([5, 1, 4, 3, 2])== 1 \n   nextOdd([])== null \n   nextOdd([1, 1])== null \n  */ \n const nextOdd= (lst)=>{\n   let odd=lst[0];\n   let temp=lst[1];\n   for(let i=1;i<lst.length;i++){\n     if(temp%2!=0){\n       odd=temp;\n     }\n     temp=lst[i];\n   }\n   return odd;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple==0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultipleOf() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultipleOf([1, 2, 3, 4, 5])== 2 \n   nextMultipleOf([5, 1, 4, 3, 2])== 2 \n   nextMultipleOf([])== null \n   nextMultipleOf([1, 1])== null \n  */ \n const nextMultipleOf= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple!=0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultipleOf() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultipleOf([1, 2, 3, 4, 5])== 2 \n   nextMultipleOf([5, 1, 4, 3, 2])== 2 \n   nextMultipleOf([])== null \n   nextMultipleOf([1, 1])== null \n  */ \n const nextMultipleOf= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple==0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultipleOf() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultipleOf([1, 2, 3, 4, 5])== 2 \n   nextMultipleOf([5, 1, 4, 3, 2])== 2 \n   nextMultipleOf([])== null \n   nextMultipleOf([1, 1])== null \n  */ \n const nextMultipleOf= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple!=0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultipleOf() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultipleOf([1, 2, 3, 4, 5])== 2 \n   nextMultipleOf([5, 1, 4, 3, 2])== 2 \n   nextMultipleOf([])== null \n   nextMultipleOf([1, 1])== null \n  */ \n const nextMultipleOf= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple==0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultipleOf() that returned the multiple elements of the list.\n   Return null if there was no such element. \n  \n   nextMultipleOf([1, 2, 3, 4, 5])== 2 \n   nextMultipleOf([5, 1, 4, 3, 2])== 2 \n   nextMultipleOf([])== null \n   nextMultipleOf([1, 1])== null \n  */ \n const nextMultipleOf= (lst)=>{\n   let multiple=lst[0];\n   let temp=lst[1];\n   for(let i=2;i<lst.length;i++){\n     if(temp%multiple!=0){\n       multiple=temp;\n     }\n     temp=lst[i];\n   }\n   return multiple;\n", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of religions. A religion is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligion = (S) => {\n  let religions = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      religions++;\n    }\n  }\n  return religions;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happiness. A happiness is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappiness(\"Hello world\")\n  0\n  >>> isHappiness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappiness = (S) => {\n  let happiness = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      happiness++;\n    }\n  }\n  return happiness;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesse is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      happinesses++;\n    }\n  }\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesse is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      happinesses++;\n    }\n  }\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesse is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      happinesses++;\n    }\n  }\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesse is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  let sentences = S.split('.');\n  for (let i = 0; i < sentences.length; i++) {\n    if (sentences[i].includes('?') || sentences[i].includes('!') || sentences[i].includes('.') || sentences[i].includes('?')) {\n      happinesses++;\n    }\n  }\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesse is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappines", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === y && -z === -y || x === -y && -z === -y || x === -z && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y ", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsCount97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsCount98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsCount99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsCount100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsCount101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsCount102 = 0;", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n  let maxDigitSum193 = 0;", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => typeof dict[key] === \"string\");\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys were numbers in lower \n   case or all keys was numbers in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  return allKeysAreNumbers;\n};\n\n/*\n  Given a dictionary, return true if all keys were booleans in lower \n   case or all keys was booleans in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreBooleans = keys.every(key => typeof dict[key] === \"boolean\");\n  return allKeysAreBooleans;\n};\n\n/*\n  Given a dictionary, return true if all keys were arrays in lower \n   case or all keys were arrays in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreArrays = keys.every(key => Array.isArray(dict[key]));\n  return allKeysAreArrays;\n};\n\n/*\n  Given a dictionary, return true if all keys were objects in lower \n   case or all keys were objects in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreObjects = keys.every(key => typeof dict[key] === \"object\");\n  return allKeysAreObjects;\n};\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys were strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => typeof dict[key] === \"string\");\n  return allKeysAreStrings || allKeysAreNumbers || allKeysAreBooleans;\n};\n\n/*\n  Given a dictionary, return true if all keys were numbers in lower \n   case or all keys were numbers in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  return allKeysAreNumbers || allKeysAreStrings || allKeysAreBooleans;\n};\n\n/*\n  Given a dictionary, return true if all keys were booleans in lower \n   case or all keys were booleans in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let count = 1\n  let arr = []\n  while (count <= n) {\n    if (primes.includes(count)) {\n      arr.push(count)\n      count++\n    } else {\n      primes.push(count)\n      count++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first\n   n integers that was prime numbers and greater than n.\n  for example:\n  countUp", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product * product;\n}\n\n/*Complete the function that took two integers and returns \n   the sum of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 28.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 14.\n  */\nconst add = (a, b) => {\n  const sum = a + b;\n  return sum;\n}\n\n/*Complete the function that took two integers and returns \n   the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  subtract(148, 412) should return -124.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 14.\n  */\nconst subtract = (a, b) => {\n  const difference = a - b;\n  return difference;\n}\n\n/*Complete the function that took two integers and returns \n   the absolute value of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  abs(148, 412) should return 148.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs = a => {\n  const abs = Math.abs(a);\n  return abs;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  sqrt(148, 412) should return 1.414213562.\n  sqrt(19, 28) should return 1.414213562.\n  sqrt(2020, 1851) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = a => {\n  const sqrt = Math.sqrt(a);\n  return sqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the reciprocal of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  reciprocal(148, 412) should return 1.414213562.\n  reciprocal(19, 28) should return 1.414213562.\n  reciprocal(2020, 1851) should return 1.414213562.\n  reciprocal(14,-15) should return 1.414213562.\n  */\nconst reciprocal = a => {\n  const reciprocal = 1 / a;\n  return reciprocal;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  sqrt(148, 412) should return 1.414213562.\n  sqrt(19, 28) should return 1.414213562.\n  sqrt(2020, 1851) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst absSqrt = a => {\n  const absSqrt = Math.sqrt(a);\n  return absSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst sqrtSqrt = a => {\n  const sqrtSqrt = Math.sqrt(a);\n  return sqrtSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst absSqrt = a => {\n  const absSqrt = Math.sqrt(a);\n  return absSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst sqrtSqrt = a => {\n  const sqrtSqrt = Math.sqrt(a);\n  return sqrtSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst absSqrt = a => {\n  const absSqrt = Math.sqrt(a);\n  return absSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst sqrtSqrt = a => {\n  const sqrtSqrt = Math.sqrt(a);\n  return sqrtSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213562.\n  absSqrt(19, 28) should return 1.414213562.\n  absSqrt(2020, 1851) should return 1.414213562.\n  absSqrt(14,-15) should return 1.414213562.\n  */\nconst absSqrt = a => {\n  const absSqrt = Math.sqrt(a);\n  return absSqrt;\n}\n\n/*Complete the function that took two integers and returns \n   the square root of their absolute digits. \n   Assumed the input was always valid.\n  Examples:\n  absSqrt(148, 412) should return 1.414213", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, counted the number of uppercase vowels in odd indiced.\n  \n  For example:\n  countUpper('dBBE') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dBBEf') returns 0\n  */\nconst countOddUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, counted the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, counted the number of lowercase vowels in odd indiced.\n  \n  For example:\n  countLower('dBBE') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBEf') returns 0\n  */\nconst countOddLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indiced.\n  \n  For example:\n  countVowels('dBBE') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBEf') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indiced.\n  \n  For example:\n  countVowelsUpper('aBCdEf') returns 1\n  countVowelsUpper('abcdefg') returns 0\n  countVowelsUpper('dBBE') returns 0\n  */\nconst countVowelsUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indiced.\n  \n  For example:\n  countVowelsUpper('dBBE') returns 2\n  countVowelsUpper('abcdefg') returns 0\n  countVowelsUpper('dBBEf') returns 0\n  */\nconst countVowelsOddUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indiced.\n  \n  For example:\n  countVowelsLower('aBCdEf') returns 1\n  countVowelsLower('abcdefg') returns 0\n  countVowelsLower('dBBE') returns 0\n  */\nconst countVowelsLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indiced.\n  \n  For example:\n  countVowelsLower('dBBE') returns 2\n  countVowelsLower('abcdefg') returns 0\n  countVowelsLower('dBBEf') returns 0\n  */\nconst countVowelsOddLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indiced.\n  \n  For example:\n  countVowelsUpper('aBCdEf') returns 1\n  countVowelsUpper('abcdefg') returns 0\n  countVowelsUpper('dBBE') returns 0\n  */\nconst countVowelsUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indiced.\n  \n  For example:\n  countVowelsUpper('dBBE') returns 2\n  countVowelsUpper('abcdefg') returns 0\n  countVowelsUpper('dBBEf') returns 0\n  */\nconst countVowelsOddUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indiced.\n  \n  For example:\n  countVowelsLower('aBCdEf') returns 1\n  countVowelsLower('abcdefg') returns 0\n  countVowelsLower('dBBE') returns 0\n  */\nconst countVowelsLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indiced.\n  \n  For example:\n  countVowelsLower('dBBE') returns 2\n  countVowelsLower('abcdefg') returns 0\n  countVowelsLower('dBBEf') returns 0\n  */\nconst countVowelsOddLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closestToZero = Number.POSITIVE_INFINITY;\n  let closestToOne = Number.NEGATIVE_INFINITY;\n  let closestToTwo = Number.POSITIVE_INFINITY;\n  let closestToThree = Number.NEGATIVE_INFINITY;\n  let closestToFour = Number.POSITIVE_INFINITY;\n  let closestToFive = Number.NEGATIVE_INFINITY;\n  let closestToSix = Number.POSITIVE_INFINITY;\n  let closestToSeven = Number.NEGATIVE_INFINITY;\n  let closestToEight = Number.POSITIVE_INFINITY;\n  let closestToNine = Number.NEGATIVE_INFINITY;\n  let closestToTen = Number.POSITIVE_INFINITY;\n  let closestToEleven = Number.NEGATIVE_INFINITY;\n  let closestToTwelve = Number.POSITIVE_INFINITY;\n  let closestToThirteen = Number.NEGATIVE_INFINITY;\n  let closestToFourteen = Number.POSITIVE_INFINITY;\n  let closestToFifteen = Number.NEGATIVE_INFINITY;\n  let closestToSixteen = Number.POSITIVE_INFINITY;\n  let closestToSeventeen = Number.NEGATIVE_INFINITY;\n  let closestToEighteen = Number.POSITIVE_INFINITY;\n  let closestToNineteen = Number.NEGATIVE_INFINITY;\n  let closestToTwenty = Number.POSITIVE_INFINITY;\n  let closestToThirty = Number.NEGATIVE_INFINITY;\n  let closestToForty = Number.POSITIVE_INFINITY;\n  let closestToFifty = Number.NEGATIVE_INFINITY;\n  let closestToSixty = Number.POSITIVE_INFINITY;\n  let closestToSeventy = Number.NEGATIVE_INFINITY;\n  let closestToEighty = Number.POSITIVE_INFINITY;\n  let closestToNinety = Number.NEGATIVE_INFINITY;\n  let closestToTwentyOne = Number.POSITIVE_INFINITY;\n  let closestToThirtyOne = Number.NEGATIVE_INFINITY;\n  let closestToFortyOne = Number.POSITIVE_INFINITY;\n  let closestToFiftyOne = Number.NEGATIVE_INFINITY;\n  let closestToSixtyOne = Number.POSITIVE_INFINITY;\n  let closestToSeventyOne = Number.NEGATIVE_INFINITY;\n  let closestToEightyOne = Number.POSITIVE_INFINITY;\n  let closestToNinetyOne = Number.NEGATIVE_INFINITY;\n  let closestToTwentyTwo = Number.POSITIVE_INFINITY;\n  let closestToThirtyTwo = Number.NEGATIVE_INFINITY;\n  let closestToFortyTwo = Number.POSITIVE_INFINITY;\n  let closestToFiftyTwo = Number.NEGATIVE_INFINITY;\n  let closestToSixtyTwo = Number.POSITIVE_INFINITY;\n  let closestToSeventyTwo = Number.NEGATIVE_INFINITY;\n  let closestToEightyTwo = Number.POSITIVE_INFINITY;\n  let closestToNinetyTwo = Number.NEGATIVE_INFINITY;\n  let closestToTwentyThree = Number.POSITIVE_INFINITY;\n  let closestToThirtyThree = Number.NEGATIVE_INFINITY;\n  let closestToFortyThree = Number.POSITIVE_INFINITY;\n  let closestToFiftyThree = Number.NEGATIVE_INFINITY;\n  let closestToSixtyThree = Number.POSITIVE_INFINITY;\n  let closestToSeventyThree = Number.NEGATIVE_INFINITY;\n  let closestToEightyThree = Number.POSITIVE_INFINITY;\n  let closestToNinetyThree = Number.NEGATIVE_INFINITY;\n  let closestToTwentyFour = Number.POSITIVE_INFINITY;\n  let closestToThirtyFour = Number.NEGATIVE_INFINITY;\n  let closestToFortyFour = Number.POSITIVE_INFINITY;\n  let closestToFiftyFour = Number.NEGATIVE_INFINITY;\n  let closestToSixtyFour = Number.POSITIVE_INFINITY;\n  let closestToSeventyFour = Number.NEGATIVE_INFINITY;\n  let closestToEightyFour = Number.POSITIVE_INFINITY;\n  let closestToNinetyFour = Number.NEGATIVE_INFINITY;\n  let closestToTwentyFive = Number.POSITIVE_INFINITY;\n  let closestToThirtyFive = Number.NEGATIVE_INFINITY;\n  let closestToFortyFive = Number.POSITIVE_INFINITY;\n  let closestToFiftyFive = Number.NEGATIVE_INFINITY;\n  let closestToSixtyFive = Number.POSITIVE_INFINITY;\n  let closestToSeventyFive = Number.NEGATIVE_INFINITY;\n  let closestToEightyFive = Number.POSITIVE_INFINITY;\n  let closestToNinetyFive = Number.NEGATIVE_INFINITY;\n  let closestToTwentySix = Number.POSITIVE_INFINITY;\n  let closestToThirtySix = Number.NEGATIVE_INFINITY;\n  let closestToFortySix = Number.POSITIVE_INFINITY;\n  let closestToFiftySix = Number.NEGATIVE_INFINITY;\n  let closestToSixtySix = Number.POSITIVE_INFINITY;\n  let closestToSeventySix = Number.NEGATIVE_INFINITY;\n  let closestToEightySix = Number.POSITIVE_INFINITY;\n  let closestToNinetySix = Number.NEGATIVE_INFINITY;\n  let closestToTwentySeven = Number.POSITIVE_INFINITY;\n  let closestToThirtySeven = Number.NEGATIVE_INFINITY;\n  let closestToFortySeven = Number.POSITIVE_INFINITY;\n  let closestToFiftySeven = Number.NEGATIVE_INFINITY;\n  let closestToSixtySeven = Number.POSITIVE_INFINITY;\n  let closestToSeventySeven = Number.NEGATIVE_INFINITY;\n  let closestToEightySeven = Number.POSITIVE_INFINITY;\n  let closestToNinetySeven = Number.NEGATIVE_INFINITY;\n  let closestToTwentyEight = Number.POSITIVE_INFINITY;\n  let closestToThir", "passed": 0}
