{"task_id": "JavaScript/0", "prompt": "/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const numbersList = numbers.map(n => Number(n))\n  const numbersToCompare = numbersList.map(n => Math.abs(n - threshold))\n  const numbersToCompareSorted = numbersToCompare.sort((a, b) => a - b)\n  return numbersToCompareSorted.some(n => numbersToCompareSorted.indexOf(n) > -1)\n}\n\n/**\n * Check if two arrays are equal\n * \n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 5])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 6])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 7])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 8])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 9])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 10])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 11])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 12])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 13])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 14])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 15])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 16])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 17])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 18])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 19])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 20])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 21])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 22])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 23])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 24])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 25])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 26])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 27])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 28])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 29])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 30])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 31])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 32])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 33])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 34])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 35])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 36])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 37])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 38])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 39])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 40])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 41])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 42])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 43])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 44])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 45])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 46])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 47])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 48])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 49])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 50])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 51])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 52])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 53])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 54])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 55])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 56])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 57])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 58])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 59])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 60])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 61])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 62])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 63])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 64])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 65])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 66])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 67])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 68])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 69])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 70])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 71])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 72])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 73])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 74])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 75])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 76])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 77])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 78])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 79])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 80])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 81])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 82])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 83])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 84])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 85])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 86])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 87])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 88])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 89])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 90])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 91])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 92])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 93])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 94])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 95])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 96])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 97])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 98])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 99])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 100])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 101])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 102])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 103])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 104])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 105])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 106])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 107])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 108])\n * false\n * >>> isEqual([1, 2, 3], [1, 2, 109])\n * false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups6 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups7 = () => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item!== '') {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromePrefix = string;\n  let palindromeSuffix = string;\n  let palindromeSuffixReversed = string;\n  let palindromePrefixReversed = string;\n  let palindromePrefixReversedReversed = string;\n  let palindromeSuffixReversedReversed = string;\n  let palindromePrefixReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string;\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> permutations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst permutations = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      a.push([i, j]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible combinations of n elements.\n  Each combination is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> permutations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst permutations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible combinations of n elements.\n  Each combination is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> permutations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst permutations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible combinations of n elements.\n  Each combination is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> permutations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst permutations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible combinations of n elements.\n  Each combination is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> permutations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst permutations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible combinations of n elements.\n  Each combination is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, j, k]);\n      }\n    }\n  }\n  return a;\n};\n\n/*\n  Given a positive integer n, return all possible permutations of n elements.\n  Each permutation is a list with n elements.\n\n  Examples:\n  >>> combinations(3)\n  [[1, 2], [1, 3], [2, 3], [2, 1]]\n  */\nconst combinations_with_replacement = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        a.push([i, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\s]+/);\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest even number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest even number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 0) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const num = Math.floor(Math.sqrt(x) + Math.sqrt(y));\n  if (num % 2 === 1) return num;\n  return -1;\n}\n\n/*This function takes the biggest odd number that is in the range [x, y]\n  icnlusive. If three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let binary = \"\";\n  let count = 0;\n  let sumOfDigits = 0;\n  let sumOfDigitsOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinary = 0;\n  let sumOfDigitsOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOfBinaryOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = x.length;\n  \n  while (i < len) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n      i++;\n    } else {\n      j = i;\n      k = 0;\n      while (j < len) {\n        if (x[j] % 2 === 0) {\n          res.push(x[j]);\n          j++;\n        } else {\n          k++;\n        }\n      }\n      if (k === 0) {\n        res.push(x[i]);\n      }\n      i++;\n    }\n  }\n  return res;\n};\n\n/**\n  Given a string, return all possible permutations of its characters.\n  \n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> permutations([1, 2, 3])\n  [\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let result = [];\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((n % i) * i);\n  }\n  return result;\n};\n\n/* Implement the funtcion g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the factorial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\n/* Implement the funtcion h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the inverse of the factorial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the inverse of the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((1 / i) * i);\n  }\n  return result;\n};\n\n/* Implement the funtcion i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the square root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the square root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.sqrt(i)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 3)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 5)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 7)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 9)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 11)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 13)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the cube root of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push((Math.pow(i, 15)) * (i));\n  }\n  return result;\n};\n\n/* Implement the funtcion q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the cube root of i if i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 11],\n  ];\n  let oddEvenPalindromes = [];\n  for (let i = 0; i < evenOddPalindromes.length; i++) {\n    const evenPalindrome = evenOddPalindromes[i];\n    const oddPalindrome = evenPalindrome.filter((num) => num % 2 === 1);\n    if (oddPalindrome.length!== 0) {\n      oddEvenPalindromes.push(oddPalindrome);\n    }\n  }\n  return oddEvenPalindromes;\n};\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(2, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 11],\n  ];\n  let oddEvenPalindromes = [];\n  for (let i = 0; i < evenOddPalindromes.length; i++) {\n    const evenPalindrome = evenOddPalindromes[i];\n    const oddPalindrome = evenPalindrome.filter((num) => num % 2 === 0);\n    if (oddPalindrome.length!== 0) {\n      oddEvenPalindromes.push(oddPalindrome);\n    }\n  }\n  return oddEvenPalindromes;\n};\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(3, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 11],\n  ];\n  let oddEvenPalindromes = [];\n  for (let i = 0; i < evenOddPalindromes.length; i++) {\n    const evenPalindrome = evenOddPalindromes[i];\n    const oddPalindrome = evenPalindrome.filter((num) => num % 2 === 1);\n    if (oddPalindrome.length!== 0) {\n      oddEvenPalindromes.push(oddPalindrome);\n    }\n  }\n  return oddEvenPalindromes;\n};\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(4, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 11],\n  ];\n  let oddEvenPalindromes = [];\n  for (let i = 0; i < evenOddPalindromes.length; i++) {\n    const evenPalindrome = evenOddPalindromes[i];\n    const oddPalindrome = evenPalindrome.filter((num) => num % 2 === 1);\n    if (oddPalindrome.length!== 0) {\n      oddEvenPalindromes.push(oddPalindrome);\n    }\n  }\n  return oddEvenPalindromes;\n};\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(5, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 1)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [\n    [1, 2],\n    [3, 4],\n    [5, 6],\n    [7, 8],\n    [9, 11],\n  ];\n  let oddEvenPalindromes = [];\n  for (let i = 0; i < evenOddPalindromes.length; i++) {\n    const evenPalindrome = evenOddPalindromes[i];\n    const oddPalindrome = evenPalindrome.filter((num) => num % 2 === 1);\n    if (oddPalindrome.length!== 0) {\n      oddEvenPalindromes.push(oddPalindrome);\n    }\n  }\n  return oddEvenPalindromes;\n};\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroem", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let sign = 1;\n  let signNum = 0;\n  let signNum2 = 0;\n  let signNum3 = 0;\n  let signNum4 = 0;\n  let signNum5 = 0;\n  let signNum6 = 0;\n  let signNum7 = 0;\n  let signNum8 = 0;\n  let signNum9 = 0;\n  let signNum10 = 0;\n  let signNum11 = 0;\n  let signNum12 = 0;\n  let signNum13 = 0;\n  let signNum14 = 0;\n  let signNum15 = 0;\n  let signNum16 = 0;\n  let signNum17 = 0;\n  let signNum18 = 0;\n  let signNum19 = 0;\n  let signNum20 = 0;\n  let signNum21 = 0;\n  let signNum22 = 0;\n  let signNum23 = 0;\n  let signNum24 = 0;\n  let signNum25 = 0;\n  let signNum26 = 0;\n  let signNum27 = 0;\n  let signNum28 = 0;\n  let signNum29 = 0;\n  let signNum30 = 0;\n  let signNum31 = 0;\n  let signNum32 = 0;\n  let signNum33 = 0;\n  let signNum34 = 0;\n  let signNum35 = 0;\n  let signNum36 = 0;\n  let signNum37 = 0;\n  let signNum38 = 0;\n  let signNum39 = 0;\n  let signNum40 = 0;\n  let signNum41 = 0;\n  let signNum42 = 0;\n  let signNum43 = 0;\n  let signNum44 = 0;\n  let signNum45 = 0;\n  let signNum46 = 0;\n  let signNum47 = 0;\n  let signNum48 = 0;\n  let signNum49 = 0;\n  let signNum50 = 0;\n  let signNum51 = 0;\n  let signNum52 = 0;\n  let signNum53 = 0;\n  let signNum54 = 0;\n  let signNum55 = 0;\n  let signNum56 = 0;\n  let signNum57 = 0;\n  let signNum58 = 0;\n  let signNum59 = 0;\n  let signNum60 = 0;\n  let signNum61 = 0;\n  let signNum62 = 0;\n  let signNum63 = 0;\n  let signNum64 = 0;\n  let signNum65 = 0;\n  let signNum66 = 0;\n  let signNum67 = 0;\n  let signNum68 = 0;\n  let signNum69 = 0;\n  let signNum70 = 0;\n  let signNum71 = 0;\n  let signNum72 = 0;\n  let signNum73 = 0;\n  let signNum74 = 0;\n  let signNum75 = 0;\n  let signNum76 = 0;\n  let signNum77 = 0;\n  let signNum78 = 0;\n  let signNum79 = 0;\n  let signNum80 = 0;\n  let signNum81 = 0;\n  let signNum82 = 0;\n  let signNum83 = 0;\n  let signNum84 = 0;\n  let signNum85 = 0;\n  let signNum86 = 0;\n  let signNum87 = 0;\n  let signNum88 = 0;\n  let signNum89 = 0;\n  let signNum90 = 0;\n  let signNum91 = 0;\n  let signNum92 = 0;\n  let signNum93 = 0;\n  let signNum94 = 0;\n  let signNum95 = 0;\n  let signNum96 = 0;\n  let signNum97 = 0;\n  let signNum98 = 0;\n  let signNum99 = 0;\n  let signNum100 = 0;\n  let signNum101 = 0;\n  let signNum102 = 0;\n  let signNum103 = 0;\n  let signNum104 = 0;\n  let signNum105 = 0;\n  let signNum106 = 0;\n  let signNum107 = 0;\n  let signNum108 = 0;\n  let signNum109 = 0;\n  let signNum110 = 0;\n  let signNum111 = 0;\n  let signNum112 = 0;\n  let signNum113 = 0;\n  let signNum114 = 0;\n  let signNum115 = 0;\n  let signNum116 = 0;\n  let signNum117 = 0;\n  let signNum118 = 0;\n  let signNum119 = 0;\n  let signNum120 = 0;\n  let signNum121 = 0;\n  let signNum122 = 0;\n  let signNum123 = 0;\n  let signNum124 = 0;\n  let signNum125 = 0;\n  let signNum126 = 0;\n  let signNum127 = 0;\n  let signNum128 = 0;\n  let signNum129 = 0;\n  let signNum130 = 0;\n  let signNum131 = 0;\n  let signNum132 = 0;\n  let signNum133 = 0;\n  let signNum134 = 0;\n  let signNum135 = 0;\n  let signNum136 = 0;\n  let signNum137 = 0;\n  let signNum138 = 0;\n  let signNum139 = 0;\n  let signNum140 = 0;\n  let signNum141 = 0;\n  let signNum142 = 0;\n  let signNum143 = 0;\n  let signNum144 = 0;\n  let signNum145 = 0;\n  let signNum146 = 0;\n  let signNum147 = 0;\n  let signNum148 = 0;\n  let signNum149 = 0;\n  let signNum150 = 0;\n  let signNum151 = 0;\n  let signNum152 = 0;\n  let signNum153 = 0;\n  let signNum154 = 0;\n  let signNum155 = 0;\n  let signNum156 = 0;\n  let signNum157 = 0;\n  let signNum158 = 0;\n  let signNum159 = 0;\n  let signNum160 = 0;\n  let signNum161 = 0;\n  let signNum162 = 0;\n  let signNum163 = 0;\n  let signNum164 = 0;\n  let signNum165 = 0;\n  let signNum166 = 0;\n  let signNum167 = 0;\n  let signNum168 = 0;\n  let signNum169 = 0;\n  let signNum170 = 0;\n  let signNum171 = 0;\n  let signNum172 = 0;\n  let signNum173 = 0;\n  let signNum174 = 0;\n  let signNum175 = 0;\n  let signNum176 = 0;\n  let signNum177 = 0;\n  let signNum178 = 0;\n  let signNum179 = 0;\n  let signNum180 = 0;\n  let signNum181 = 0;\n  let signNum182 = 0;\n  let signNum183 = 0;\n  let signNum184 = 0;\n  let signNum185 = 0;\n  let signNum186 = 0;\n  let signNum187 = 0;\n  let signNum188 = 0;\n  let signNum189 = 0;\n  let signNum190 = 0;\n  let signNum191 = 0;\n  let signNum192 = 0;\n  let signNum193 = 0;\n  let signNum194 = 0;\n  let signNum195 = 0;\n  let signNum196 = 0;\n  let signNum197 = 0;\n  let signNum198 = 0;\n  let signNum199 = 0;\n  let signNum200 = 0;\n  let signNum201 = 0;\n  let signNum202 = 0;\n  let signNum203 = 0;\n  let signNum204 = 0;\n  let signNum205 = 0;\n  let signNum206 = 0;\n  let signNum207 = 0;\n  let signNum208 = 0;\n  let signNum209 = 0;\n  let signNum210 = 0;\n  let signNum211 = 0;\n  let signNum212 = 0;\n  let signNum213 = 0;\n  let signNum214 = 0;\n  let signNum215 = 0;\n  let signNum216 = 0;\n  let signNum217 = 0;\n  let signNum218 = 0;\n  let signNum219 = 0;\n  let signNum220 = 0;\n  let signNum221 = 0;\n  let signNum222 = 0;\n  let signNum223 = 0;\n  let signNum224 = 0;\n  let signNum225 = 0;\n  let signNum226 = 0;\n  let signNum227 = 0;\n  let signNum228 = 0;\n  let signNum229 = 0;\n  let signNum230 = 0;\n  let signNum231 = 0;\n  let signNum232 = 0;\n  let signNum233 = 0;\n  let signNum234 = 0;\n  let signNum235 = 0;\n  let signNum236 = 0;\n  let signNum237 = 0;\n  let signNum238", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inteegrs arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N inteegrs arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arr1 = arr.slice();\n  let arr2 = arr1.slice();\n  let arr3 = arr1.slice();\n  let arr4 = arr1.slice();\n  let arr5 = arr1.slice();\n  let arr6 = arr1.slice();\n  let arr7 = arr1.slice();\n  let arr8 = arr1.slice();\n  let arr9 = arr1.slice();\n  let arr10 = arr1.slice();\n  let arr11 = arr1.slice();\n  let arr12 = arr1.slice();\n  let arr13 = arr1.slice();\n  let arr14 = arr1.slice();\n  let arr15 = arr1.slice();\n  let arr16 = arr1.slice();\n  let arr17 = arr1.slice();\n  let arr18 = arr1.slice();\n  let arr19 = arr1.slice();\n  let arr20 = arr1.slice();\n  let arr21 = arr1.slice();\n  let arr22 = arr1.slice();\n  let arr23 = arr1.slice();\n  let arr24 = arr1.slice();\n  let arr25 = arr1.slice();\n  let arr26 = arr1.slice();\n  let arr27 = arr1.slice();\n  let arr28 = arr1.slice();\n  let arr29 = arr1.slice();\n  let arr30 = arr1.slice();\n  let arr31 = arr1.slice();\n  let arr32 = arr1.slice();\n  let arr33 = arr1.slice();\n  let arr34 = arr1.slice();\n  let arr35 = arr1.slice();\n  let arr36 = arr1.slice();\n  let arr37 = arr1.slice();\n  let arr38 = arr1.slice();\n  let arr39 = arr1.slice();\n  let arr40 = arr1.slice();\n  let arr41 = arr1.slice();\n  let arr42 = arr1.slice();\n  let arr43 = arr1.slice();\n  let arr44 = arr1.slice();\n  let arr45 = arr1.slice();\n  let arr46 = arr1.slice();\n  let arr47 = arr1.slice();\n  let arr48 = arr1.slice();\n  let arr49 = arr1.slice();\n  let arr50 = arr1.slice();\n  let arr51 = arr1.slice();\n  let arr52 = arr1.slice();\n  let arr53 = arr1.slice();\n  let arr54 = arr1.slice();\n  let arr55 = arr1.slice();\n  let arr56 = arr1.slice();\n  let arr57 = arr1.slice();\n  let arr58 = arr1.slice();\n  let arr59 = arr1.slice();\n  let arr60 = arr1.slice();\n  let arr61 = arr1.slice();\n  let arr62 = arr1.slice();\n  let arr63 = arr1.slice();\n  let arr64 = arr1.slice();\n  let arr65 = arr1.slice();\n  let arr66 = arr1.slice();\n  let arr67 = arr1.slice();\n  let arr68 = arr1.slice();\n  let arr69 = arr1.slice();\n  let arr70 = arr1.slice();\n  let arr71 = arr1.slice();\n  let arr72 = arr1.slice();\n  let arr73 = arr1.slice();\n  let arr74 = arr1.slice();\n  let arr75 = arr1.slice();\n  let arr76 = arr1.slice();\n  let arr77 = arr1.slice();\n  let arr78 = arr1.slice();\n  let arr79 = arr1.slice();\n  let arr80 = arr1.slice();\n  let arr81 = arr1.slice();\n  let arr82 = arr1.slice();\n  let arr83 = arr1.slice();\n  let arr84 = arr1.slice();\n  let arr85 = arr1.slice();\n  let arr86 = arr1.slice();\n  let arr87 = arr1.slice();\n  let arr88 = arr1.slice();\n  let arr89 = arr1.slice();\n  let arr90 = arr1.slice();\n  let arr91 = arr1.slice();\n  let arr92 = arr1.slice();\n  let arr93 = arr1.slice();\n  let arr94 = arr1.slice();\n  let arr95 = arr1.slice();\n  let arr96 = arr1.slice();\n  let arr97 = arr1.slice();\n  let arr98 = arr1.slice();\n  let arr99 = arr1.slice();\n  let arr100 = arr1.slice();\n  let arr101 = arr1.slice();\n  let arr102 = arr1.slice();\n  let arr103 = arr1.slice();\n  let arr104 = arr1.slice();\n  let arr105 = arr1.slice();\n  let arr106 = arr1.slice();\n  let arr107 = arr1.slice();\n  let arr108 = arr1.slice();\n  let arr109 = arr1.slice();\n  let arr110 = arr1.slice();\n  let arr111 = arr1.slice();\n  let arr112 = arr1.slice();\n  let arr113 = arr1.slice();\n  let arr114 = arr1.slice();\n  let arr115 = arr1.slice();\n  let arr116 = arr1.slice();\n  let arr117 = arr1.slice();\n  let arr118 = arr1.slice();\n  let arr119 = arr1.slice();\n  let arr120 = arr1.slice();\n  let arr121 = arr1.slice();\n  let arr122 = arr1.slice();\n  let arr123 = arr1.slice();\n  let arr124 = arr1.slice();\n  let arr125 = arr1.slice();\n  let arr126 = arr1.slice();\n  let arr127 = arr1.slice();\n  let arr128 = arr1.slice();\n  let arr129 = arr1.slice();\n  let arr130 = arr1.slice();\n  let arr131 = arr1.slice();\n  let arr132 = arr1.slice();\n  let arr133 = arr1.slice();\n  let arr134 = arr1.slice();\n  let arr135 = arr1.slice();\n  let arr136 = arr1.slice();\n  let arr137 = arr1.slice();\n  let arr138 = arr1.slice();\n  let arr139 = arr1.slice();\n  let arr140 = arr1.slice();\n  let arr141 = arr1.slice", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    let c = a[i] ^ b[i];\n    if (c === 0) {\n      result += String.fromCharCode(i);\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\n/**\n * Convert string to binary string.\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let isPossible = true;\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        isPossible = false;\n        break;\n      }\n    }\n  }\n  return isPossible;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum2 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum3 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum4 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum5 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum6 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum7 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum8 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (let j = 0; j < num2; j++) {\n      if (lst1[i]!== lst2[j]) {\n        count += num2 - j;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes as input two lists of numbers and returns the\n  number of elements that can be exchanged in lst1 with lst2.\n  For example:\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => 4\n  exchange([1, 2, 3, 4], [1, 5, 3, 5]) => 1\n  exchange([1, 2, 3, 4], [1, 5, 3, 6]) => 0\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeNum9 = (lst1, lst2) => {\n  let num1 = lst1.length;\n  let num2 = lst2.length;\n  let count = 0;\n  for (let i = 0; i < num1; i++) {\n    for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let histogram = {};\n  \n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0;\n    histogram[letter]++;\n  });\n  \n  return histogram;\n};\n\n/*Given a string of words, return a dictionary of the words with their \n  most frequent letters.\n  \n  Example:\n  words('a b c a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let reversed = '';\n  let reversedChar = '';\n  let reversedCharIndex = 0;\n  let reversedCharIndex2 = 0;\n  let reversedCharIndex3 = 0;\n  let reversedCharIndex4 = 0;\n  let reversedCharIndex5 = 0;\n  let reversedCharIndex6 = 0;\n  let reversedCharIndex7 = 0;\n  let reversedCharIndex8 = 0;\n  let reversedCharIndex9 = 0;\n  let reversedCharIndex10 = 0;\n  let reversedCharIndex11 = 0;\n  let reversedCharIndex12 = 0;\n  let reversedCharIndex13 = 0;\n  let reversedCharIndex14 = 0;\n  let reversedCharIndex15 = 0;\n  let reversedCharIndex16 = 0;\n  let reversedCharIndex17 = 0;\n  let reversedCharIndex18 = 0;\n  let reversedCharIndex19 = 0;\n  let reversedCharIndex20 = 0;\n  let reversedCharIndex21 = 0;\n  let reversedCharIndex22 = 0;\n  let reversedCharIndex23 = 0;\n  let reversedCharIndex24 = 0;\n  let reversedCharIndex25 = 0;\n  let reversedCharIndex26 = 0;\n  let reversedCharIndex27 = 0;\n  let reversedCharIndex28 = 0;\n  let reversedCharIndex29 = 0;\n  let reversedCharIndex30 = 0;\n  let reversedCharIndex31 = 0;\n  let reversedCharIndex32 = 0;\n  let reversedCharIndex33 = 0;\n  let reversedCharIndex34 = 0;\n  let reversedCharIndex35 = 0;\n  let reversedCharIndex36 = 0;\n  let reversedCharIndex37 = 0;\n  let reversedCharIndex38 = 0;\n  let reversedCharIndex39 = 0;\n  let reversedCharIndex40 = 0;\n  let reversedCharIndex41 = 0;\n  let reversedCharIndex42 = 0;\n  let reversedCharIndex43 = 0;\n  let reversedCharIndex44 = 0;\n  let reversedCharIndex45 = 0;\n  let reversedCharIndex46 = 0;\n  let reversedCharIndex47 = 0;\n  let reversedCharIndex48 = 0;\n  let reversedCharIndex49 = 0;\n  let reversedCharIndex50 = 0;\n  let reversedCharIndex51 = 0;\n  let reversedCharIndex52 = 0;\n  let reversedCharIndex53 = 0;\n  let reversedCharIndex54 = 0;\n  let reversedCharIndex55 = 0;\n  let reversedCharIndex56 = 0;\n  let reversedCharIndex57 = 0;\n  let reversedCharIndex58 = 0;\n  let reversedCharIndex59 = 0;\n  let reversedCharIndex60 = 0;\n  let reversedCharIndex61 = 0;\n  let reversedCharIndex62 = 0;\n  let reversedCharIndex63 = 0;\n  let reversedCharIndex64 = 0;\n  let reversedCharIndex65 = 0;\n  let reversedCharIndex66 = 0;\n  let reversedCharIndex67 = 0;\n  let reversedCharIndex68 = 0;\n  let reversedCharIndex69 = 0;\n  let reversedCharIndex70 = 0;\n  let reversedCharIndex71 = 0;\n  let reversedCharIndex72 = 0;\n  let reversedCharIndex73 = 0;\n  let reversedCharIndex74 = 0;\n  let reversedCharIndex75 = 0;\n  let reversedCharIndex76 = 0;\n  let reversedCharIndex77 = 0;\n  let reversedCharIndex78 = 0;\n  let reversedCharIndex79 = 0;\n  let reversedCharIndex80 = 0;\n  let reversedCharIndex81 = 0;\n  let reversedCharIndex82 = 0;\n  let reversedCharIndex83 = 0;\n  let reversedCharIndex84 = 0;\n  let reversedCharIndex85 = 0;\n  let reversedCharIndex86 = 0;\n  let reversedCharIndex87 = 0;\n  let reversedCharIndex88 = 0;\n  let reversedCharIndex89 = 0;\n  let reversedCharIndex90 = 0;\n  let reversedCharIndex91 = 0;\n  let reversedCharIndex92 = 0;\n  let reversedCharIndex93 = 0;\n  let reversedCharIndex94 = 0;\n  let reversedCharIndex95 = 0;\n  let reversedCharIndex96 = 0;\n  let reversedCharIndex97 = 0;\n  let reversedCharIndex98 = 0;\n  let reversedCharIndex99 = 0;\n  let reversedCharIndex100 = 0;\n  let reversedCharIndex101 = 0;\n  let reversedCharIndex102 = 0;\n  let reversedCharIndex103 = 0;\n  let reversedCharIndex104 = 0;\n  let reversedCharIndex105 = 0;\n  let reversedCharIndex106 = 0;\n  let reversedCharIndex107 = 0;\n  let reversedCharIndex108 = 0;\n  let reversedCharIndex109 = 0;\n  let reversedCharIndex110 = 0;\n  let reversedCharIndex111 = 0;\n  let reversedCharIndex112 = 0;\n  let reversedCharIndex113 = 0;\n  let reversedCharIndex114 = 0;\n  let reversedCharIndex115 = 0;\n  let reversedCharIndex116 = 0;\n  let reversedCharIndex117 = 0;\n  let reversedCharIndex118 = 0;\n  let reversedCharIndex119 = 0;\n  let reversedCharIndex120 = 0;\n  let reversedCharIndex121 = 0;\n  let reversedCharIndex122 = 0;\n  let reversedCharIndex123 = 0;\n  let reversedCharIndex124 = 0;\n  let reversedCharIndex125 = 0;\n  let reversedCharIndex126 = 0;\n  let reversedCharIndex127 = 0;\n  let reversedCharIndex128 = 0;\n  let reversedCharIndex129 = 0;\n  let reversedCharIndex130 = 0;\n  let reversedCharIndex131 = 0;\n  let reversedCharIndex132 = 0;\n  let reversedCharIndex133 = 0;\n  let reversedCharIndex134 = 0;\n  let reversedCharIndex135 = 0;\n  let reversedCharIndex136 = 0;\n  let reversedCharIndex137 = 0;\n  let reversedCharIndex138 = 0;\n  let reversedCharIndex139 = 0;\n  let reversedCharIndex140 = 0;\n  let reversedCharIndex141 = 0;\n  let reversedCharIndex142 = 0;\n  let reversedCharIndex143 = 0;\n  let reversedCharIndex144 = 0;\n  let reversedCharIndex145 = 0;\n  let reversedCharIndex146 = 0;\n  let reversedCharIndex147 = 0;\n  let reversedCharIndex148 = 0;\n  let reversedCharIndex149 = 0;\n  let reversedCharIndex150 = 0;\n  let reversedCharIndex151 = 0;\n  let reversedCharIndex152 = 0;\n  let reversedCharIndex153 = 0;\n  let reversedCharIndex154 = 0;\n  let reversedCharIndex155 = 0;\n  let reversedCharIndex156 = 0;\n  let reversedCharIndex157 = 0;\n  let reversedCharIndex158 = 0;\n  let reversedCharIndex159 = 0;\n  let reversedCharIndex160 = 0;\n  let reversedCharIndex161 = 0;\n  let reversedCharIndex162 = 0;\n  let reversedCharIndex163 = 0;\n  let reversedCharIndex164 = 0;\n  let reversedCharIndex165 = 0;\n  let reversedCharIndex166 = 0;\n  let reversedCharIndex167 = 0;\n  let reversedCharIndex168 = 0;\n  let reversedCharIndex169 = 0;\n  let reversedCharIndex170 = 0;\n  let reversedCharIndex171 = 0;\n  let reversedCharIndex17", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        oddCount++;\n      }\n    }\n    res.push(oddCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        evenCount++;\n      }\n    }\n    res.push(evenCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        oddCount++;\n      }\n    }\n    res.push(oddCount);\n    res.push(evenCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        oddCount++;\n      }\n    }\n    res.push(oddCount);\n    res.push(evenCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        oddCount++;\n      }\n    }\n    res.push(oddCount);\n    res.push(evenCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        evenCount++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        oddCount++;\n      }\n    }\n    res.push(oddCount);\n    res.push(evenCount);\n  }\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        even", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArray = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArray = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArray = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArray = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  maxSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArray = (nums) => {\n  const maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + maxSum;\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArray = (nums) => {\n  const minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const sum = nums[i] + minSum;\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n// Given an array of integers, return a new array where each element is\n// the product of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [6,24,120].\nconst product = (arr) => {\n  const products = [];\n  for (let i = 0; i < arr.length; i++) {\n    products.push(arr[i] * arr[i]);\n  }\n  return products;\n};\n\n// Given an array of integers, return a new array where each element is\n// the sum of all the elements of the original array.\n// For example, given [1,2,3], the function should return [6,10].\nconst sum = (arr) => {\n  const sums = [];\n  for (let i = 0; i < arr.length; i++) {\n    sums.push(arr[i]);\n  }\n  return sums;\n};\n\n// Given an array of integers, return a new array where each element is\n// the difference of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst difference = (arr) => {\n  const differences = [];\n  for (let i = 0; i < arr.length; i++) {\n    differences.push(arr[i] - arr[i]);\n  }\n  return differences;\n};\n\n// Given an array of integers, return a new array where each element is\n// the absolute value of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst absolute = (arr) => {\n  const absolutes = [];\n  for (let i = 0; i < arr.length; i++) {\n    absolutes.push(Math.abs(arr[i]));\n  }\n  return absolutes;\n};\n\n// Given an array of integers, return a new array where each element is\n// the square root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst squareRoot = (arr) => {\n  const squareRoots = [];\n  for (let i = 0; i < arr.length; i++) {\n    squareRoots.push(Math.sqrt(arr[i]));\n  }\n  return squareRoots;\n};\n\n// Given an array of integers, return a new array where each element is\n// the cube root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst cubeRoot = (arr) => {\n  const cubeRoots = [];\n  for (let i = 0; i < arr.length; i++) {\n    cubeRoots.push(Math.pow(arr[i], 3));\n  }\n  return cubeRoots;\n};\n\n// Given an array of integers, return a new array where each element is\n// the absolute value of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst absoluteValue = (arr) => {\n  const absoluteValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    absoluteValues.push(Math.abs(arr[i]));\n  }\n  return absoluteValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the square root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst squareRootValue = (arr) => {\n  const squareRootValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    squareRootValues.push(Math.sqrt(arr[i]));\n  }\n  return squareRootValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the cube root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst cubeRootValue = (arr) => {\n  const cubeRootValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    cubeRootValues.push(Math.pow(arr[i], 3));\n  }\n  return cubeRootValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the absolute value of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst absoluteValueValue = (arr) => {\n  const absoluteValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    absoluteValueValues.push(Math.abs(arr[i]));\n  }\n  return absoluteValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the square root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst squareRootValueValue = (arr) => {\n  const squareRootValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    squareRootValueValues.push(Math.sqrt(arr[i]));\n  }\n  return squareRootValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the cube root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst cubeRootValueValue = (arr) => {\n  const cubeRootValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    cubeRootValueValues.push(Math.pow(arr[i], 3));\n  }\n  return cubeRootValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the absolute value of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst absoluteValueValueValue = (arr) => {\n  const absoluteValueValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    absoluteValueValueValues.push(Math.abs(arr[i]));\n  }\n  return absoluteValueValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the square root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst squareRootValueValueValue = (arr) => {\n  const squareRootValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    squareRootValueValues.push(Math.sqrt(arr[i]));\n  }\n  return squareRootValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the cube root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst cubeRootValueValue = (arr) => {\n  const cubeRootValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    cubeRootValueValues.push(Math.pow(arr[i], 3));\n  }\n  return cubeRootValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the absolute value of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [-3,2].\nconst absoluteValueValueValue = (arr) => {\n  const absoluteValueValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    absoluteValueValueValues.push(Math.abs(arr[i]));\n  }\n  return absoluteValueValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the square root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst squareRootValueValueValue = (arr) => {\n  const squareRootValueValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    squareRootValueValueValues.push(Math.sqrt(arr[i]));\n  }\n  return squareRootValueValueValues;\n};\n\n// Given an array of integers, return a new array where each element is\n// the cube root of the corresponding elements of the original array.\n// For example, given [1,2,3], the function should return [3,4].\nconst cubeRootValueValueValue = (arr) => {\n  const cubeRootValueValueValues = [];\n  for (let i = 0; i < arr.length; i++) {\n    cubeRootValueValueValues.push(Math.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = []\n  let word = ''\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let wordIndex = 0\n  let wordLength = s.length\n  let wordCount = 0\n  let word", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  let vowelsLength = 0;\n  let vowelsIndex2 = 0;\n  let vowelsLength2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsLength3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsLength4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsLength5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsLength6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsLength7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsLength8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsLength9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsLength10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsLength11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsLength12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsLength13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsLength14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsLength15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsLength16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsLength17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsLength18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsLength19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsLength20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsLength21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsLength22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsLength23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsLength24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsLength25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsLength26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsLength27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsLength28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsLength29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsLength30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsLength31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsLength32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsLength33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsLength34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsLength35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsLength36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsLength37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsLength38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsLength39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsLength40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsLength41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsLength42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsLength43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsLength44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsLength45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsLength46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsLength47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsLength48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsLength49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsLength50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsLength51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsLength52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsLength53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsLength54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsLength55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsLength56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsLength57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsLength58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsLength59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsLength60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsLength61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsLength62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsLength63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsLength64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsLength65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsLength66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsLength67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsLength68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsLength69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsLength70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsLength71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsLength72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsLength73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsLength74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsLength75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsLength76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsLength77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsLength78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsLength79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsLength80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsLength81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsLength82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsLength83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsLength84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsLength85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsLength86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsLength87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsLength88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsLength89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsLength90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsLength91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsLength92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsLength93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsLength94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsLength95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsLength96 = 0;\n  let vowelsIndex97", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No';\n  let isBalanced = true;\n  let stack = [];\n  let isParenthesisOpen = false;\n  let isParenthesisClose = false;\n  let isParenthesisOpenParen = false;\n  let isParenthesisCloseParen = false;\n  let isParenthesisOpenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let isParenthesisOpenParenParenParen = false;\n  let isParenthesisCloseParenParen = false;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestLength = 0;\n  let longestString = '';\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestLength = strings[i].length;\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reverse = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversed = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedString = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStrings = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversed = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedString = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStrings = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversed = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversedString = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversedStrings = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversedStringsReversed = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversedStringsReversedString = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n\n  return reversedString;\n};\n\n/**\n * Given a string, return its reverse in case of multiple occurences.\n * If no reverse is found, return an empty string.\n * >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'abc'\n  >>> reverse('abc')\n  ''\n  */\nconst reversedStringsReversedStringsReversedStringsReversedStrings = (string) => {\n  let reversedString = '';\n\n  for (let i = string.length - 1; i >= 0; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let maxIndex = 0;\n  let maxValue = Number.MAX_VALUE;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n  let maxIndex137 = 0;\n  let maxIndex138 = 0;\n  let maxIndex139 = 0;\n  let maxIndex140 = 0;\n  let maxIndex141 = 0;\n  let maxIndex142 = 0;\n  let maxIndex143 = 0;\n  let maxIndex144 = 0;\n  let maxIndex145 = 0;\n  let maxIndex146 = 0;\n  let maxIndex147 = 0;\n  let maxIndex148 = 0;\n  let maxIndex149 = 0;\n  let maxIndex150 = 0;\n  let maxIndex151 = 0;\n  let maxIndex152 = 0;\n  let maxIndex153 = 0;\n  let maxIndex154 = 0;\n  let maxIndex155 = 0;\n  let maxIndex156 = 0;\n  let maxIndex157 = 0;\n  let maxIndex158 = 0;\n  let maxIndex159 = 0;\n  let maxIndex160 = 0;\n  let maxIndex161 = 0;\n  let maxIndex162 = 0;\n  let maxIndex163 = 0;\n  let maxIndex164 = 0;\n  let maxIndex165 = 0;\n  let maxIndex166 = 0;\n  let maxIndex167 = 0;\n  let maxIndex168 = 0;\n  let maxIndex169 = 0;\n  let maxIndex170 = 0;\n  let maxIndex171 = 0;\n  let maxIndex172 = 0;\n  let maxIndex173 = 0;\n  let maxIndex174 = 0;\n  let maxIndex175 = 0;\n  let maxIndex176 = 0;\n  let maxIndex177 = 0;\n  let maxIndex178 = 0;\n  let maxIndex179 = 0;\n  let maxIndex180 = 0;\n  let maxIndex181 = 0;\n  let maxIndex182 = 0;\n  let maxIndex183 = 0;\n  let maxIndex184 = 0;\n  let maxIndex185 = 0;\n  let maxIndex186 = 0;\n  let maxIndex187 = 0;\n  let maxIndex188 = 0;\n  let maxIndex189 = 0;\n  let maxIndex190 = 0;\n  let maxIndex191 = 0;\n  let maxIndex192 = 0;\n  let maxIndex193 = 0;\n  let maxIndex194 = 0;\n  let maxIndex195 = 0;\n  let maxIndex196 = 0;\n  let maxIndex197 = 0;\n  let maxIndex198 = 0;\n  let maxIndex199 = 0;\n  let maxIndex200 = 0;\n  let maxIndex201 = 0;\n  let maxIndex202 = 0;\n  let maxIndex203 = 0;\n  let maxIndex204 = 0;\n  let maxIndex205 = 0;\n  let maxIndex206 = 0;\n  let maxIndex207 = 0;\n  let maxIndex208 = 0;\n  let maxIndex209 = 0;\n  let maxIndex210 = 0;\n  let maxIndex211 = 0;\n  let maxIndex212 = 0;\n  let maxIndex213 = 0;\n  let maxIndex214 = 0;\n  let maxIndex215 = 0;\n  let maxIndex216 = 0;\n  let maxIndex217 = 0;\n  let maxIndex218 = 0;\n  let maxIndex219 = 0;\n  let maxIndex220 = 0;\n  let maxIndex221 = 0;\n  let maxIndex222 = 0;\n  let maxIndex223 = 0;\n  let maxIndex224 = 0;\n  let maxIndex225 = 0;\n  let maxIndex226 = 0;\n  let maxIndex227 = 0;\n  let maxIndex228 = 0;\n  let maxIndex229 = 0;\n  let maxIndex230 = 0;\n  let maxIndex23", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 0) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2!== 0) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((n) => {\n    if (n % 2 === 1) {\n      sum += n;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even eleemnts thta are in odd positions.\n  \n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 31 + 5 + 7\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most eleven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most twenty digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 3 + 5 + 7 + 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 + 25 + 27\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1] + 1;\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  iGven a positive integer n, return a sorted list that has teh even numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so even numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1] + 1;\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so odd numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1] + 1;\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  iGven a positive integer n, return a sorted list that has teh even numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so even numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1] + 1;\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so odd numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] <= n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1] + 1;\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  iGven a positive integer n, return a sorted list that has teh even numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collat", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDateMonthYear = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDateMonthYearDay = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDateMonthYearDayDay = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDateMonthYearDayDayDay = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDateMonthYearDayDayDayDay = (date) => {\n  const reg = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return reg.test(date);\n};\n\n/*\n  Validates if the date is valid for month and year\n  the date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let even = false;\n  let odd = false;\n  let letter;\n  let letter2;\n  let letter3;\n  let letter4;\n  let letter5;\n  let letter6;\n  let letter7;\n  let letter8;\n  let letter9;\n  let letter10;\n  let letter11;\n  let letter12;\n  let letter13;\n  let letter14;\n  let letter15;\n  let letter16;\n  let letter17;\n  let letter18;\n  let letter19;\n  let letter20;\n  let letter21;\n  let letter22;\n  let letter23;\n  let letter24;\n  let letter25;\n  let letter26;\n  let letter27;\n  let letter28;\n  let letter29;\n  let letter30;\n  let letter31;\n  let letter32;\n  let letter33;\n  let letter34;\n  let letter35;\n  let letter36;\n  let letter37;\n  let letter38;\n  let letter39;\n  let letter40;\n  let letter41;\n  let letter42;\n  let letter43;\n  let letter44;\n  let letter45;\n  let letter46;\n  let letter47;\n  let letter48;\n  let letter49;\n  let letter50;\n  let letter51;\n  let letter52;\n  let letter53;\n  let letter54;\n  let letter55;\n  let letter56;\n  let letter57;\n  let letter58;\n  let letter59;\n  let letter60;\n  let letter61;\n  let letter62;\n  let letter63;\n  let letter64;\n  let letter65;\n  let letter66;\n  let letter67;\n  let letter68;\n  let letter69;\n  let letter70;\n  let letter71;\n  let letter72;\n  let letter73;\n  let letter74;\n  let letter75;\n  let letter76;\n  let letter77;\n  let letter78;\n  let letter79;\n  let letter80;\n  let letter81;\n  let letter82;\n  let letter83;\n  let letter84;\n  let letter85;\n  let letter86;\n  let letter87;\n  let letter88;\n  let letter89;\n  let letter90;\n  let letter91;\n  let letter92;\n  let letter93;\n  let letter94;\n  let letter95;\n  let letter96;\n  let letter97;\n  let letter98;\n  let letter99;\n  let letter100;\n  let letter101;\n  let letter102;\n  let letter103;\n  let letter104;\n  let letter105;\n  let letter106;\n  let letter107;\n  let letter108;\n  let letter109;\n  let letter110;\n  let letter111;\n  let letter112;\n  let letter113;\n  let letter114;\n  let letter115;\n  let letter116;\n  let letter117;\n  let letter118;\n  let letter119;\n  let letter120;\n  let letter121;\n  let letter122;\n  let letter123;\n  let letter124;\n  let letter125;\n  let letter126;\n  let letter127;\n  let letter128;\n  let letter129;\n  let letter130;\n  let letter131;\n  let letter132;\n  let letter133;\n  let letter134;\n  let letter135;\n  let letter136;\n  let letter137;\n  let letter138;\n  let letter139;\n  let letter140;\n  let letter141;\n  let letter142;\n  let letter143;\n  let letter144;\n  let letter145;\n  let letter146;\n  let letter147;\n  let letter148;\n  let letter149;\n  let letter150;\n  let letter151;\n  let letter152;\n  let letter153;\n  let letter154;\n  let letter155;\n  let letter156;\n  let letter157;\n  let letter158;\n  let letter159;\n  let letter160;\n  let letter161;\n  let letter162;\n  let letter163;\n  let letter164;\n  let letter165;\n  let letter166;\n  let letter167;\n  let letter168;\n  let letter169;\n  let letter170;\n  let letter171;\n  let letter172;\n  let letter173;\n  let letter174;\n  let letter175;\n  let letter176;\n  let letter177;\n  let letter178;\n  let letter179;\n  let letter180;\n  let letter181;\n  let letter182;\n  let letter183;\n  let letter184;\n  let letter185;\n  let letter186;\n  let letter187;\n  let letter188;\n  let letter189;\n  let letter190;\n  let letter191;\n  let letter192;\n  let letter193;\n  let letter194;\n  let letter195;\n  let letter196;\n  let letter197;\n  let letter198;\n  let letter199;\n  let letter200;\n  let letter201;\n  let letter202;\n  let letter203;\n  let letter204;\n  let letter205;\n  let letter206;\n  let letter207;\n  let letter208;\n  let letter209;\n  let letter210;\n  let letter211;\n  let letter212;\n  let letter213;\n  let letter214;\n  let letter215;\n  let letter216;\n  let letter217;\n  let letter218;\n  let letter219;\n  let letter220;\n  let letter221;\n  let letter222;\n  let letter223;\n  let letter224;\n  let letter225;\n  let letter226;\n  let letter227;\n  let letter228;\n  let letter229;\n  let letter230;\n  let letter231;\n  let letter232;\n  let letter233;\n  let letter234;\n  let letter235;\n  let letter236;\n  let letter237;\n  let letter238;\n  let letter239;\n  let letter240;\n  let letter241;\n  let letter242;\n  let letter243;\n  let letter244;\n  let letter245;\n  let letter246;\n  let letter247;\n  let letter248;\n  let letter249;\n  let letter250;\n  let letter251;\n  let letter252;\n  let letter253;\n  let letter254;\n  let letter255;\n  let letter256;\n  let letter257;\n  let letter258;\n  let letter259;\n  let letter260;\n  let letter261;\n  let letter262;\n  let letter263;\n  let letter264;\n  let letter265;\n  let letter266;\n  let letter267;\n  let letter268;\n  let letter269;\n  let letter270;\n  let letter271;\n  let letter272;\n  let letter273;\n  let letter274;\n  let letter275;\n  let letter276;\n  let letter277;\n  let letter278;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const nub = lst.reduce((acc, nub) => acc.concat(nub), [])\n  const nubs = nub.filter(n => n >= 0)\n  if (nubs.length!== lst.length) {\n    return false\n  }\n  return nubs.every(n => lst[n] === nub.shift())\n}\n\n// Given a list of nubmers, return whethre or not they are soerdt\n// with equal nubmers. Assume no negative nubmers nad only integesr.\n// Examples\n// isSorted([5]) ➞ true\n// isSorted([1, 2, 3, 4, 5]) ➞ true\n// isSorted([1, 3, 2, 4, 5]) ➞ false\n// isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n// isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n// isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n// isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 5]) ➞ true\n// isSorted([1, 2, 2, 3, 3, 5, 6]) ➞ true\n// isSorted([1, 2, 2, 3, 3, 5, 6, 7]) ➞ true\n// isSorted([1, 2, 2, 3, 3, 5, 6, 7]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ true\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// isSorted([1, 2, 2, 3, 3, 3, 4, 5]) ➞ false\n// is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 > end2) return false;\n  if (start2 > end1) return false;\n  if (start1 < end2) return false;\n  if (start2 < end1) return false;\n  if (start1 == end1 && start2 == end2) return true;\n  if (start1 == end1 && start2 > end2) return true;\n  if (start2 > end1 && start1 == end2) return true;\n  if (start2 > end1 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > end2 && start2 > end2) return true;\n  if (start1 == end2 && start2 == end1) return true;\n  if (start2 == end2 && start1 > end1) return true;\n  if (start1 > ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += signs[arr[i]]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == -1\n  >>> absSigns([]) == null\n  */\nconst absSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSigns([1, 2, 2, -4]) == 9\n  >>> absSigns([0, 1]) == -1\n  >>> absSigns([]) == null\n  */\nconst absSignsMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMulti([0, 1]) == -1\n  >>> absSignsMulti([]) == null\n  */\nconst absSignsMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMultiMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMultiMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMultiMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMultiMultiMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMultiMultiMultiMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMultiMultiMultiMultiMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMultiMultiMultiMultiMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers absVal of numbers in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> absSignsMultiMultiMultiMultiMultiMultiMulti([1, 2, 2, -4]) == 9\n  >>> absSignsMultiMultiMultiMultiMultiMultiMultiMulti([0, 1]) == -1\n  >>> absSignsMultiMultiMultiMultiMultiMultiMultiMulti([]) == null\n  */\nconst absSignsMultiMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = [1, -1, 0]\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(signs[arr[i]] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i])\n  }\n  return sum\n}\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [minPaths, minPath] = [[0, []]];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const cell = [grid[i][j], i, j];\n      if (cell[0] === cell[1]) {\n        minPaths.push(cell);\n        minPath.push(cell);\n      } else if (cell[0] < cell[1]) {\n        minPath.push(cell);\n      }\n    }\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [minPaths, minPath] = [[0, []]];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const cell = [grid[i][j], i, j];\n      if (cell[0] === cell[1]) {\n        minPaths.push(cell);\n        minPath.push(cell);\n      } else if (cell[0] < cell[1]) {\n        minPath.push(cell);\n      }\n    }\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [minPaths, minPath] = [[0, []]];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const cell = [grid[i][j], i, j];\n      if (cell[0] === cell[1]) {\n        minPaths.push(cell);\n        minPath.push(cell);\n      } else if (cell[0] < cell[1]) {\n        minPath.push(cell);\n      }\n    }\n  }\n  return minPath;\n};\n\n/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const aIsNegative = a < 0;\n  const bIsNegative = -b < 0;\n  const aIsZero = a === 0;\n  const bIsZero = -b === 0;\n  const aIsOne = a === 1;\n  const bIsOne = -b === 1;\n  const aIsNegativeOne = a < 0 && b < 0;\n  const bIsNegativeOne = -b < 0 && a < 0;\n  const aIsPositive = a > 0;\n  const bIsPositive = -b > 0;\n  const aIsPositiveOne = a > 0 && b > 0;\n  const bIsPositiveOne = -b > 0 && a > 0;\n  const aIsNegativeOrZero = a < 0 || b < 0;\n  const bIsNegativeOrZero = -b < 0 || a < 0;\n  const aIsPositiveOrZero = a > 0 || b > 0;\n  const bIsPositiveOrZero = -b > 0 || a > 0;\n  const aIsNegativeOrOne = a < 0 || b > 0;\n  const bIsNegativeOrOne = -b < 0 || a > 0;\n  const aIsPositiveOrOne = a > 0 || b > 0;\n  const bIsPositiveOrOne = -b > 0 || a > 0;\n  const aIsNegativeOrTwo = a < 0 || b > 0;\n  const bIsNegativeOrTwo = -b < 0 || a > 0;\n  const aIsPositiveOrTwo = a > 0 || b > 0;\n  const bIsPositiveOrTwo = -b > 0 || a > 0;\n  const aIsNegativeOrThree = a < 0 || b > 0;\n  const bIsNegativeOrThree = -b < 0 || a > 0;\n  const aIsPositiveOrThree = a > 0 || b > 0;\n  const bIsPositiveOrThree = -b > 0 || a > 0;\n  const aIsNegativeOrFour = a < 0 || b > 0;\n  const bIsNegativeOrFour = -b < 0 || a > 0;\n  const aIsPositiveOrFour = a > 0 || b > 0;\n  const bIsPositiveOrFour = -b > 0 || a > 0;\n  const aIsNegativeOrFive = a < 0 || b > 0;\n  const bIsNegativeOrFive = -b < 0 || a > 0;\n  const aIsPositiveOrFive = a > 0 || b > 0;\n  const bIsPositiveOrFive = -b > 0 || a > 0;\n  const aIsNegativeOrSix = a < 0 || b > 0;\n  const bIsNegativeOrSix = -b < 0 || a > 0;\n  const aIsPositiveOrSix = a > 0 || b > 0;\n  const bIsPositiveOrSix = -b > 0 || a > 0;\n  const aIsNegativeOrSeven = a < 0 || b > 0;\n  const bIsNegativeOrSeven = -b < 0 || a > 0;\n  const aIsPositiveOrSeven = a > 0 || b > 0;\n  const bIsPositiveOrSeven = -b > 0 || a > 0;\n  const aIsNegativeOrEight = a < 0 || b > 0;\n  const bIsNegativeOrEight = -b < 0 || a > 0;\n  const aIsPositiveOrEight = a > 0 || b > 0;\n  const bIsPositiveOrEight = -b > 0 || a > 0;\n  const aIsNegativeOrNine = a < 0 || b > 0;\n  const bIsNegativeOrNine = -b < 0 || a > 0;\n  const aIsPositiveOrNine = a > 0 || b > 0;\n  const bIsPositiveOrNine = -b > 0 || a > 0;\n  const aIsNegativeOrTen = a < 0 || b > 0;\n  const bIsNegativeOrTen = -b < 0 || a > 0;\n  const aIsPositiveOrTen = a > 0 || b > 0;\n  const bIsPositiveOrTen = -b > 0 || a > 0;\n  const aIsNegativeOrEleven = a < 0 || b > 0;\n  const bIsNegativeOrEleven = -b < 0 || a > 0;\n  const aIsPositiveOrEleven = a > 0 || b > 0;\n  const bIsPositiveOrEleven = -b > 0 || a > 0;\n  const aIsNegativeOrTwelve = a < 0 || b > 0;\n  const bIsNegativeOrTwelve = -b < 0 || a > 0;\n  const aIsPositiveOrTwelve = a > 0 || b > 0;\n  const bIsPositiveOrTwelve = -b > 0 || a > 0;\n  const aIsNegativeOrThirteen = a < 0 || b > 0;\n  const bIsNegativeOrThirteen = -b < 0 || a > 0;\n  const aIsPositiveOrThirteen = a > 0 || b > 0;\n  const bIsPositiveOrThirteen = -b > 0 || a > 0;\n  const aIsNegativeOrFourteen = a < 0 || b > 0;\n  const bIsNegativeOrFourteen = -b < 0 || a > 0;\n  const aIsPositiveOrFourteen = a > 0 || b > 0;\n  const bIsPositiveOrFourteen = -b > 0 || a > 0;\n  const aIsNegativeOrFifteen = a < 0 || b > 0;\n  const bIsNegativeOrFifteen = -b < 0 || a > 0;\n  const aIsPositiveOrFifteen = a > 0 || b > 0;\n  const bIsPositiveOrFifteen = -b > 0 || a > 0;\n  const aIsNegativeOrSixteen = a < 0 || b > 0;\n  const bIsNegativeOrSixteen = -b < 0 || a > 0;\n  const aIsPositiveOrSixteen = a > 0 || b > 0;\n  const bIsPositiveOrSixteen = -b > 0 || a > 0;\n  const aIsNegativeOrSeventeen = a < 0 || b > 0;\n  const bIsNegativeOrSeventeen = -b < 0 || a > 0;\n  const aIsPositiveOrSeventeen = a > 0 || b > 0;\n  const bIsPositiveOrSeventeen = -b > 0 || a > 0;\n  const aIsNegativeOrEighteen = a < 0 || b > 0;\n  const bIsNegativeOrEighteen = -b < 0 || a > 0;\n  const aIsPositiveOrEighteen = a > 0 || b > 0;\n  const bIsPositiveOrEighteen = -b > 0 || a > 0;\n  const aIsNegativeOrNineteen = a < 0 || b > 0;\n  const bIsNegativeOrNineteen = -b < 0 || a > 0;\n  const aIsPositiveOrNineteen = a > 0 || b > 0;\n  const bIsPositiveOrNineteen = -b > 0 || a > 0;\n  const aIsNegativeOrTenteen = a < 0 || b > 0;\n  const bIsNegativeOrTenteen = -b < 0 || a > 0;\n  const aIsPositiveOrTenteen = a > 0 || b > 0;\n  const bIsPositiveOrTenteen = -b > 0 || a > 0;\n  const aIsNegativeOrEleventeen = a < 0 || b > 0;\n  const bIsNegativeOrEleventeen = -b < 0 || a > 0;\n  const aIsPositiveOrEleventeen = a > 0 || b > 0;\n  const bIsPositiveOrEleventeen = -b > 0 || a > 0;\n  const aIsNegativeOrTwelveteen = a < 0 || b > 0;\n  const bIsNegativeOrTwelveteen = -b < 0 || a > 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fibonacci(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fibonacci(100) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946]\n  fibonacci(1000) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10946,\n  4181, 6765, 10946,\n  6765, 10946,\n  2584, 4181, 6765, 10946,\n  987, 1597,\n  377, 610, 987, 1597,\n  233, 377, 610, 987, 1597,\n  135, 247, 377, 610, 987, 1597,\n  819, 543, 987, 1597,\n  413, 1213, 987, 1597,\n  203, 383, 987, 1597,\n  117, 181, 383, 987, 1597,\n  57, 131, 181, 383, 987, 1597,\n  3, 127, 181, 383, 987, 1597,\n  1, 91, 181, 383, 987, 1597,\n  7, 31, 181, 383, 987, 1597,\n  15, 61, 181, 383, 987, 1597,\n  31, 151, 181, 383, 987, 1597,\n  61, 151, 181, 383, 987, 1597,\n  127, 61, 181, 383, 987, 1597,\n  181, 31, 181, 383, 987, 1597,\n  247, 31, 181, 383, 987, 1597,\n  383, 247, 31, 181, 383, 987, 1597,\n  61, 247, 31, 181, 383, 987, 1597,\n  127, 61, 247, 31, 181, 383, 987, 1597,\n  247, 31, 61, 247, 31, 181, 383, 987, 1597,\n  127, 61, 247, 31, 61, 247, 31, 181, 383, 987, 1597,\n  247, 31, 31, 61, 247, 31, 61, 247, 31, 181, 383, 987, 1597,\n  127, 61, 247, 31, 31, 61, 247, 31, 31, 61, 247, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 61, 247, 31, 31, 31, 61, 247, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 61, 247, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,\n  247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 31, 61, 247, 31, 31, 31, 31, 31, 31, 181, 383, 987, 1597,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits8 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits9 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits10 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits11 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits12 = (n) => {\n  let result = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (n < 10) {\n    return n;\n  }\n\n  for (i = 0, j = n - 1; i < j; i += 1) {\n    digit = n % 10;\n    result += digit * digit;\n    n /= 10;\n  }\n\n  return result;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n  Return 0 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const nestedBrackets = string\n   .split(']')\n   .map(s => s.split(']').map(s => s.split('[')))\n   .flat()\n   .filter(s => s.length > 1)\n   .map(s => s[0].length)\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, 0))\n   .filter(s => s > 0)\n   .map(s => s.reduce((acc, cur) => acc + cur, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * roundingFactor;\n  sumSquare = sumSquare * roundingFactor;\n  return sum + sumSquare;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let roundingFactor = Ceiling(lst.length);\n  lst.forEach((num) => {\n    sum += num * num;\n    sumSquare += num * num;\n  });\n  sum = sum * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = /[aeiou]/;\n  let isLastCharInOwrd = owrd.test(lastChar);\n  return isLastCharInOwrd;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsVowel(\"apple pie e\") ➞ true\n  checkIfLastCharIsVowel(\"apple pie e \") ➞ false\n  checkIfLastCharIsVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsVowel = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let owrd = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return j;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the highest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTarget = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return j;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the lowest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetLow = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] < target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the highest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 11\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHigh = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the lowest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetLowHigh = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] < target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the highest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHighLow = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the lowest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHighLowHigh = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the highest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHighLowHigh = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the lowest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHighLowLowHigh = (arr, target) => {\n  let i = canArrange(arr);\n  let j = canArrange(arr);\n  while (i >= 0 && j >= 0) {\n    if (arr[i] === target) {\n      return i;\n    } else if (arr[i] > target) {\n      j = i - 1;\n    } else {\n      i = i - 1;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a sorted array and a target value, return the index at which the\n  target value can be found in the array. Return the highest index at which\n  the target value can be found in the array if there is no such index.\n  If the target value is not found in the array, the function returns -1.\n\n  Examples:\n  findTarget([1,2,3,4,5,6,7,8,9,10], 5) = 1\n  findTarget([1,2,3,4,5,6,7,8,9,10], 6) = -1\n  */\nconst findTargetHighLowLowHigh = (arr, target) => {\n  let i = canArrange(arr);\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = null;\n  let minNum = null;\n  let maxNumInList = null;\n  let minNumInList = null;\n  let maxNumInListInList = null;\n  let minNumInListInList = null;\n  let maxNumInListInListInList = null;\n  let minNumInListInListInList = null;\n  let maxNumInListInListInListInList = null;\n  let minNumInListInListInListInList = null;\n  let maxNumInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListInListInListInList = null;\n  let minNumInListInListInListInListInListInListInListInList = null;\n  let maxNumInListInListInListInListInListIn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n  let aFloat = parseFloat(a)\n  let bFloat = parseFloat(b)\n  let aInt = parseInt(a)\n  let bInt = parseInt(b)\n  let aStr = a.toString()\n  let bStr = b.toString()\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat\n  let aStr = aStr == bStr? aStr : aStr\n  let bStr = bStr == bStr? bStr : bStr\n  let aInt = aFloat == bFloat? aInt : aFloat\n  let bInt = bFloat == bFloat? bInt : bFloat", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEven(4) == true\n  isEqualToSumOddEven(6) == true\n  isEqualToSumOddEven(8) == false\n  */\nconst isEqualToSumOddEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenEven(4) == true\n  isEqualToSumOddEvenEven(6) == true\n  isEqualToSumOddEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOdd(4) == true\n  isEqualToSumOddEvenOdd(6) == true\n  isEqualToSumOddEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEven(4) == true\n  isEqualToSumOddEvenOddEven(6) == true\n  isEqualToSumOddEvenOddEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEvenOdd(4) == true\n  isEqualToSumOddEvenOddEvenOdd(6) == true\n  isEqualToSumOddEvenOddEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEvenOddEven(4) == true\n  isEqualToSumOddEvenOddEvenOddEven(6) == true\n  isEqualToSumOddEvenOddEvenOddEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEvenOddEvenOdd(4) == true\n  isEqualToSumOddEvenOddEvenOddEvenOdd(6) == true\n  isEqualToSumOddEvenOddEvenOddEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEvenOddEvenOddEven(4) == true\n  isEqualToSumOddEvenOddEvenOddEvenOddEven(6) == true\n  isEqualToSumOddEvenOddEvenOddEvenOddEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true if the given nubmer n can be written as the sum of exactly 2 positive odd numbesr\n  Example\n  isEqualToSumOddEvenOddEvenOddEvenOddEvenOdd(4) == true\n  isEqualToSumOddEvenOddEvenOddEvenOddEvenOdd(6) == true\n  isEqualToSumOddEvenOddEvenOddEvenOddEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0 && i % 2!== 0);\n  }\n  return sum === 2;\n};\n\n/*\n  Given a positive integer n, return true ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['ba', 'ca', 'cb', 'cc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    suffix = string.charAt(i)\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all common prefixes and suffixes from shortest to longest of the input string\n  >>> allCommonPrefixes('abc')\n  ['ab', 'ac', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  let suffixes = []\n  let suffix = ''\n  let j = 0\n  let len = prefixes.length\n  while (j < len) {\n    suffix = prefixes[j]\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> allCommonSuffixes('abc')\n  ['ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonSuffixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    suffix = string.charAt(i)\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    i++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common prefixes and suffixes from longest to shortest of the input string\n  >>> allCommonPrefixes('abc')\n  ['ab', 'ac', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonPrefixesAndSuffixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  let suffixes = []\n  let suffix = ''\n  let j = 0\n  let len = prefixes.length\n  while (j < len) {\n    suffix = prefixes[j]\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    j++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common suffixes from longest to shortest of the input string\n  >>> allCommonSuffixes('abc')\n  ['ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonSuffixesAndPrefixes = (string) => {\n  let suffixes = []\n  let suffix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    suffix = string.charAt(i)\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    i++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common prefixes and suffixes from shortest to longest of the input string\n  >>> allCommonPrefixesAndSuffixes('abc')\n  ['ab', 'ac', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonPrefixesAndSuffixesAndPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  let suffixes = []\n  let suffix = ''\n  let j = 0\n  let len = prefixes.length\n  while (j < len) {\n    suffix = prefixes[j]\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    j++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common prefixes and suffixes from shortest to longest of the input string\n  >>> allCommonPrefixesAndSuffixesAndPrefixes('abc')\n  ['ab', 'ac', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonPrefixesAndSuffixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  let suffixes = []\n  let suffix = ''\n  let j = 0\n  let len = prefixes.length\n  while (j < len) {\n    suffix = prefixes[j]\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    j++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common prefixes and suffixes from longest to shortest of the input string\n  >>> allCommonPrefixesAndSuffixesAndPrefixesAndPrefixes('abc')\n  ['ab', 'ac', 'ba', 'ca', 'cb', 'cc']\n  */\nconst allCommonPrefixesAndSuffixesAndPrefixesAndPrefixesAndPrefixes = (string) => {\n  let prefixes = []\n  let prefix = ''\n  let i = 0\n  let len = string.length\n  while (i < len) {\n    prefix = string.charAt(i)\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    i++\n  }\n  let suffixes = []\n  let suffix = ''\n  let j = 0\n  let len = prefixes.length\n  while (j < len) {\n    suffix = prefixes[j]\n    if (suffix) {\n      suffixes.push(suffix)\n    }\n    j++\n  }\n  let prefixes = []\n  let prefix = ''\n  let j = 0\n  let len = suffixes.length\n  while (j < len) {\n    prefix = suffixes[j]\n    if (prefix) {\n      prefixes.push(prefix)\n    }\n    j++\n  }\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all common prefixes and suffixes from shortest to longest of the input string\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_1\"\n  fixSpaces(text) == \" Example\"\n  fixSpaces(text) == \" Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'').trim();\n};\n\n/*\n  Given a string text, replace all spaces in it with underscores, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_letters = file_name_without_extension.charAt(0).toLowerCase();\n  const file_name_without_extension_letters_length = file_name_without_extension_letters.length;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension_letters_length - 1;\n  const file_name_without_extension_letters_length = file_name_without_extension", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall cube the intgeer entry if its index is a \n  multiple of 3 adn will square itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSquaresAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((item, index) => {\n    if (index % 3 === 0 || index % 4 === 0) {\n      sum += item * item;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  This funtcion will taek a list of integers. For all entries in the list, the function shall square itneger entry if its index is a \n  multiple of 3 adn will cube itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndSquaresAndSquaresAndSquaresAndSquaresAndSquares = (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWords.join(\" \");\n};\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWords.join(\" \");\n};\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWords.join(\" \");\n};\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWords.join(\" \");\n};\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWords.join(\" \");\n};\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const primeWords = [];\n  const primeLengths = [];\n  let primeLength = 0;\n  let primeWord = \"\";\n  let word = \"\";\n  let wordLength = 0;\n  for (let i = 0; i < words.length; i++) {\n    word = words[i];\n    wordLength = word.length;\n    if (wordLength > primeLength) {\n      primeLengths.push(wordLength);\n      primeWords.push(word);\n      primeLength = 0;\n    }\n    if (wordLength === primeLength) {\n      primeLength++;\n    }\n  }\n  return primeWord", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    const [numerator, denominator] = x.split(\"^\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    const [numerator, denominator] = x.split(\"%\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    const [numerator, denominator] = x.split(\"=\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"-\")!== -1) {\n    const [numerator, denominator] = x.split(\"-\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    const [numerator, denominator] = x.split(\"*\");\n    return simplify(numerator, denominator);\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    const [numerator, denominator] = x.split(\"/\");\n    return simplify(numerator, denominator);\n  }\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse.map((num) => {\n    return num * -1;\n  });\n  return numsSortedReversed;\n};\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const numsSortedReverse = numsSorted.reverse();\n  const numsSortedReversed = numsSortedReverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i].toString().length > 1) {\n      if (nums[i].toString().length === 1) {\n        filteredNums.push(nums[i]);\n      }\n    }\n  }\n  return filteredNums;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples8 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples9 = (n) => {\n  const a = [...Array(n - 1).keys()].map((_, i) => i * i - i + 1);\n  return a.filter((_, i) => i % 3 === 0).length;\n};\n\n/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let snu = snu(planet1, planet2);\n  let planetsOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];\n  let snuOrbits = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum)];\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst letters = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isLetter(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not numbers,\n  and returns the resulting string with only numbers.\n  The function should return an empty string if there is no numbers.\n  For example:\n  assert numbers(\"a\") => \"\"\n  assert numbers(\"ab\") => \"ab\"\n  assert numbers(\"aB\") => \"aB\"\n  */\nconst numbers = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isNumber(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst lettersAndNumbers = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isLetter(str[i]) &&!isNumber(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst lettersAndNumbersAndLetters = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isLetter(str[i]) &&!isNumber(str[i]) &&!isLetter(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst lettersAndNumbersAndLettersAndNumbers = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isLetter(str[i]) &&!isNumber(str[i]) &&!isLetter(str[i]) &&!isNumber(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst lettersAndNumbersAndLettersAndLettersAndNumbersAndLetters = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (!isLetter(str[i]) &&!isNumber(str[i]) &&!isLetter(str[i]) &&!isNumber(str[i]) &&!isLetter(str[i]) &&!isNumber(str[i])) {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a parameter,\n  deletes all the characters that are not letters,\n  and returns the resulting string with only letters.\n  The function should return an empty string if there is no letters.\n  For example:\n  assert letters(\"a\") => \"\"\n  assert letters(\"ab\") => \"ab\"\n  assert letters(\"aB\") => \"aB\"\n  */\nconst lettersAndNumbersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(`0${i}`);\n  }\n  return result.join(' ');\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithZero = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithZeroAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndZero = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 0';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndZeroAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 0 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndZero = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 0';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndZeroAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 0 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOneAndZero = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1 0';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOneAndZeroAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1 1 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOneAndZeroAndOneAndZero = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1 1 1 1 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOneAndOneAndZeroAndOneAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1 1 1 1 1 1';\n};\n\n/**\n * Turn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n * If n is undefined, returns an empty string.\n * If n is 0, returns '0'.\n * If n is greater than the length of the string, returns '0'.\n */\nconst stringSequenceWithOneAndOneAndOneAndOneAndOneAndOneAndOne = (n) => {\n  if (n === undefined) {\n    return '';\n  }\n  if (n === 0) {\n    return '0';\n  }\n  return stringSequence(n) +'1 1 1 1 1 1 1 1 1 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return x;\n  };\n  return xOrY;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let nprime = prime(n);\n  let hsuold = hsuf(n);\n  let xOrY = (n, x, y) => {\n    if (nprime % n === 0) {\n      return y;\n    }\n    return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum -= Math.pow(lst[i], 2);\n    } else {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map((score) => score);\n  const guessScores = guess.map((score) => score);\n  const gameScoreDifferences = gameScores.map((score) => Math.abs(score - guessScores[0]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifference", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_extensions = extensions;\n  let extension_length = extensions.length;\n  let extension_strength_counter = 0;\n  let extension_strength_max = 0;\n  let extension_strength_min = 0;\n  let extension_strength_max2 = 0;\n  let extension_strength_min2 = 0;\n  let extension_strength_max3 = 0;\n  let extension_strength_min3 = 0;\n  let extension_strength_max4 = 0;\n  let extension_strength_min4 = 0;\n  let extension_strength_max5 = 0;\n  let extension_strength_min5 = 0;\n  let extension_strength_max6 = 0;\n  let extension_strength_min6 = 0;\n  let extension_strength_max7 = 0;\n  let extension_strength_min7 = 0;\n  let extension_strength_max8 = 0;\n  let extension_strength_min8 = 0;\n  let extension_strength_max9 = 0;\n  let extension_strength_min9 = 0;\n  let extension_strength_max10 = 0;\n  let extension_strength_min10 = 0;\n  let extension_strength_max11 = 0;\n  let extension_strength_min11 = 0;\n  let extension_strength_max12 = 0;\n  let extension_strength_min12 = 0;\n  let extension_strength_max13 = 0;\n  let extension_strength_min13 = 0;\n  let extension_strength_max14 = 0;\n  let extension_strength_min14 = 0;\n  let extension_strength_max15 = 0;\n  let extension_strength_min15 = 0;\n  let extension_strength_max16 = 0;\n  let extension_strength_min16 = 0;\n  let extension_strength_max17 = 0;\n  let extension_strength_min17 = 0;\n  let extension_strength_max18 = 0;\n  let extension_strength_min18 = 0;\n  let extension_strength_max19 = 0;\n  let extension_strength_min19 = 0;\n  let extension_strength_max20 = 0;\n  let extension_strength_min20 = 0;\n  let extension_strength_max21 = 0;\n  let extension_strength_min21 = 0;\n  let extension_strength_max22 = 0;\n  let extension_strength_min22 = 0;\n  let extension_strength_max23 = 0;\n  let extension_strength_min23 = 0;\n  let extension_strength_max24 = 0;\n  let extension_strength_min24 = 0;\n  let extension_strength_max25 = 0;\n  let extension_strength_min25 = 0;\n  let extension_strength_max26 = 0;\n  let extension_strength_min26 = 0;\n  let extension_strength_max27 = 0;\n  let extension_strength_min27 = 0;\n  let extension_strength_max28 = 0;\n  let extension_strength_min28 = 0;\n  let extension_strength_max29 = 0;\n  let extension_strength_min29 = 0;\n  let extension_strength_max30 = 0;\n  let extension_strength_min30 = 0;\n  let extension_strength_max31 = 0;\n  let extension_strength_min31 = 0;\n  let extension_strength_max32 = 0;\n  let extension_strength_min32 = 0;\n  let extension_strength_max33 = 0;\n  let extension_strength_min33 = 0;\n  let extension_strength_max34 = 0;\n  let extension_strength_min34 = 0;\n  let extension_strength_max35 = 0;\n  let extension_strength_min35 = 0;\n  let extension_strength_max36 = 0;\n  let extension_strength_min36 = 0;\n  let extension_strength_max37 = 0;\n  let extension_strength_min37 = 0;\n  let extension_strength_max38 = 0;\n  let extension_strength_min38 = 0;\n  let extension_strength_max39 = 0;\n  let extension_strength_min39 = 0;\n  let extension_strength_max40 = 0;\n  let extension_strength_min40 = 0;\n  let extension_strength_max41 = 0;\n  let extension_strength_min41 = 0;\n  let extension_strength_max42 = 0;\n  let extension_strength_min42 = 0;\n  let extension_strength_max43 = 0;\n  let extension_strength_min43 = 0;\n  let extension_strength_max44 = 0;\n  let extension_strength_min44 = 0;\n  let extension_strength_max45 = 0;\n  let extension_strength_min45 = 0;\n  let extension_strength_max46 = 0;\n  let extension_strength_min46 = 0;\n  let extension_strength_max47 = 0;\n  let extension_strength_min47 = 0;\n  let extension_strength_max48 = 0;\n  let extension_strength_min48 = 0;\n  let extension_strength_max49 = 0;\n  let extension_strength_min49 = 0;\n  let extension_strength_max50 = 0;\n  let extension_strength_min50 = 0;\n  let extension_strength_max51 = 0;\n  let extension_strength_min51 = 0;\n  let extension_strength_max52 = 0;\n  let extension_strength_min52 = 0;\n  let extension_strength_max53 = 0;\n  let extension_strength_min53 = 0;\n  let extension_strength_max54 = 0;\n  let extension_strength_min54 = 0;\n  let extension_strength_max55 = 0;\n  let extension_strength_min55 = 0;\n  let extension_strength_max56 = 0;\n  let extension_strength_min56 = 0;\n  let extension_strength_max57 = 0;\n  let extension_strength_min57 = 0;\n  let extension_strength_max58 = 0;\n  let extension_strength_min58 = 0;\n  let extension_strength_max59 = 0;\n  let extension_strength_min59 = 0;\n  let extension_strength_max60 = 0;\n  let extension_strength_min60 = 0;\n  let extension_strength_max61 = 0;\n  let extension_strength_min61 = 0;\n  let extension_strength_max62 = 0;\n  let extension_strength_min62 = 0;\n  let extension_strength_max63 = 0;\n  let extension_strength_min63 = 0;\n  let extension_strength_max64 = 0;\n  let extension_strength_min64 = 0;\n  let extension_strength_max65 = 0;\n  let extension_strength_min65 = 0;\n  let extension_strength_max66 = 0;\n  let extension_strength_min66 = 0;\n  let extension_strength_max67 = 0;\n  let extension_strength_min67 = 0;\n  let extension_strength_max68 = 0;\n  let extension_strength_min68 = 0;\n  let extension_strength_max69 = 0;\n  let extension_strength_min69 = 0;\n  let extension_strength_max70 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.map((v, i) => v + i);\n  let b2 = b1.map((v, i) => v + i);\n  let a3 = a2.filter((v, i) => v === a1.shift());\n  let b3 = b2.filter((v, i) => v === b1.shift());\n  let a4 = a3.filter((v, i) => v === a1.shift());\n  let b4 = b3.filter((v, i) => v === b1.shift());\n  let a5 = a4.filter((v, i) => v === a1.shift());\n  let b5 = b4.filter((v, i) => v === b1.shift());\n  let a6 = a5.filter((v, i) => v === a1.shift());\n  let b6 = b5.filter((v, i) => v === b1.shift());\n  let a7 = a6.filter((v, i) => v === a1.shift());\n  let b7 = b6.filter((v, i) => v === b1.shift());\n  let a8 = a7.filter((v, i) => v === a1.shift());\n  let b8 = b7.filter((v, i) => v === b1.shift());\n  let a9 = a8.filter((v, i) => v === a1.shift());\n  let b9 = b8.filter((v, i) => v === b1.shift());\n  let a10 = a9.filter((v, i) => v === a1.shift());\n  let b10 = b9.filter((v, i) => v === b1.shift());\n  let a11 = a10.filter((v, i) => v === a1.shift());\n  let b11 = b10.filter((v, i) => v === b1.shift());\n  let a12 = a11.filter((v, i) => v === a1.shift());\n  let b12 = b11.filter((v, i) => v === b1.shift());\n  let a13 = a12.filter((v, i) => v === a1.shift());\n  let b13 = b12.filter((v, i) => v === b1.shift());\n  let a14 = a13.filter((v, i) => v === a1.shift());\n  let b14 = b13.filter((v, i) => v === b1.shift());\n  let a15 = a14.filter((v, i) => v === a1.shift());\n  let b15 = b14.filter((v, i) => v === b1.shift());\n  let a16 = a15.filter((v, i) => v === a1.shift());\n  let b16 = b15.filter((v, i) => v === b1.shift());\n  let a17 = a16.filter((v, i) => v === a1.shift());\n  let b17 = b16.filter((v, i) => v === b1.shift());\n  let a18 = a17.filter((v, i) => v === a1.shift());\n  let b18 = b17.filter((v, i) => v === b1.shift());\n  let a19 = a18.filter((v, i) => v === a1.shift());\n  let b19 = b18.filter((v, i) => v === b1.shift());\n  let a20 = a19.filter((v, i) => v === a1.shift());\n  let b20 = b19.filter((v, i) => v === b1.shift());\n  let a21 = a20.filter((v, i) => v === a1.shift());\n  let b22 = b20.filter((v, i) => v === b1.shift());\n  let a23 = a21.filter((v, i) => v === a1.shift());\n  let b23 = b21.filter((v, i) => v === b1.shift());\n  let a24 = a23.filter((v, i) => v === a1.shift());\n  let b24 = b23.filter((v, i) => v === b1.shift());\n  let a25 = a24.filter((v, i) => v === a1.shift());\n  let b25 = b24.filter((v, i) => v === b1.shift());\n  let a26 = a25.filter((v, i) => v === a1.shift());\n  let b26 = b25.filter((v, i) => v === b1.shift());\n  let a27 = a26.filter((v, i) => v === a1.shift());\n  let b27 = b26.filter((v, i) => v === b1.shift());\n  let a28 = a27.filter((v, i) => v === a1.shift());\n  let b28 = b27.filter((v, i) => v === b1.shift());\n  let a29 = a28.filter((v, i) => v === a1.shift());\n  let b29 = b28.filter((v, i) => v === b1.shift());\n  let a30 = a29.filter((v, i) => v === a1.shift());\n  let b30 = b29.filter((v, i) => v === b1.shift());\n  let a31 = a30.filter((v, i) => v === a1.shift());\n  let b32 = b30.filter((v, i) => v === b1.shift());\n  let a33 = a31.filter((v, i) => v === a1.shift());\n  let b33 = b31.filter((v, i) => v === b1.shift());\n  let a34 = a33.filter((v, i) => v === a1.shift());\n  let b34 = b33.filter((v, i) => v === b1.shift());\n  let a35 = a34.filter((v, i) => v === a1.shift());\n  let b35 = b34.filter((v, i) => v === b1.shift());\n  let a36 = a35.filter((v, i) => v === a1.shift());\n  let b36 = b35.filter((v, i) => v === b1.shift());\n  let a37 = a36.filter((v, i) => v === a1.shift());\n  let b37 = b36.filter((v, i) => v === b1.shift());\n  let a38 = a37.filter((v, i) => v === a1.shift());\n  let b38 = b37.filter((v, i) => v === b1.shift());\n  let a39 = a38.filter((v, i) => v === a1.shift());\n  let b39 = b38.filter((v, i) => v === b1.shift());\n  let a40 = a39.filter((v, i) => v === a1.shift());\n  let b40 = b39.filter((v, i) => v === b1.shift());\n  let a41 = a40.filter((v, i) => v === a1.shift());\n  let b41 = b40.filter((v, i) => v === b1.shift());\n  let a42 = a41.filter((v, i) => v === a1.shift());\n  let b42 = b41.filter((v, i) => v === b1.shift());\n  let a43 = a42.filter((v, i) => v === a1.shift());\n  let b43 = b42.filter((v, i) => v === b1.shift());\n  let a44 = a43.filter((v, i) => v === a1.shift());\n  let b44 = b43.filter((v, i) => v === b1.shift());\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  if (numString.length < 2) {\n    return evenOddCount(numString);\n  }\n  numString = numString.split('');\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has the length of the longest substring that starts with 'a'.\n\n   Example:\n      longestSubstringWithA('abc') ==> ['abc']\n      longestSubstringWithA('abcabc') ==> ['abc', 'abcabc']\n      longestSubstringWithA('abcabcabc') ==> ['abc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc') ==> ['abc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc', 'abcabc']\n      longestSubstringWithA('ab", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let str = String(number);\n  let len = str.length;\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a left-angled triangle, fales otherwise.\n  A left-angled triangel is a triangle in which one angle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= -Math.PI && angle <= Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isLeftAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= -Math.PI && angle <= Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngleOrLeftAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngleOrLeftAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngleOrLeftAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle or left-angled triangle, fales otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngleTriangleOrLeftAngleTriangleOrRightAngleOrLeftAngle = (a, b, c) => {\n  let angle = Math.atan2(b, a);\n  if (angle >= Math.PI && angle <= -Math.PI) {\n    return true;\n  }\n  return false;\n};\n\n/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let maxWordLengthLength = 0;\n  let maxWordLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(number * need / remaining);\n  const acrrots = Math.ceil(number * need / remaining);\n  const remainingCarrotsLeft = Math.ceil(number * need / remaining);\n  const acrrotsLeft = Math.ceil(number * need / remaining);\n  const acrrotsLeft = acrrots - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrots;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrotsLeft;\n  const acrrotsLeft = acrrotsLeft - remainingCarrot", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequence = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace_withCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace_withCaseAndSpace = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in it.\n * https://en.wikipedia.org/wiki/Longest_common_subsequence\n * >>> longestCommonSubsequence('abracadabra')\n  'ra'\n  */\nconst longestCommonSubsequenceWithCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCaseAndSpace_withCase = (string) => {\n  let lcs = '';\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    let middle = Math.floor((start + end) / 2);\n    if (string[middle] === string[middle].toUpperCase()) {\n      lcs += string[middle];\n      start = middle + 1;\n    } else {\n      end = middle;\n    }\n  }\n  return lcs;\n};\n\n/**\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra2 = (a, b) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra3 = (a, b, c) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra4 = (a, b, c, d) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra5 = (a, b, c, d, e) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra6 = (a, b, cd, e) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra7 = (a, b, c, d, e, f) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra8 = (a, b, c, d, e, f, g) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra9 = (a, b, c, d, e, f, g, h) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra10 = (a, b, c, d, e, f, g, h, i) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra11 = (a, b, c, d, e, f, g, h, i, j) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra12 = (a, b, c, d, e, f, g, h, i, j, k) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra13 = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra14 = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\nconst doAlgebra15 = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operand", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let lowre = 'a'\n  let upperre = 'z'\n  let visere = 'A'\n  let fnuctino = (s) => {\n    if (s.length === 0) {\n      return s\n    }\n    let low = lowre\n    let high = upperre\n    let vis = visere\n    let fnu = s\n    let res = []\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] >= low) {\n        low = s[i]\n      } else if (s[i] <= high) {\n        high = s[i]\n      } else if (s[i] === vis) {\n        res.push(s[i])\n      } else {\n        res.push(s[i])\n      }\n    }\n    return res\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= lowre) {\n      lowre = s[i]\n    } else if (s[i] <= upperre) {\n      upperre = s[i]\n    } else if (s[i] === visere) {\n      visere = s[i]\n    } else {\n      res.push(s[i])\n    }\n  }\n  lowre = fnuctino(lowre)\n  upperre = fnuctino(upperre)\n  visere = fnuctino(visere)\n  for (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f97eea4aae3edf32a14dab0c80e3c0a20bce'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cbb9a994c7bc0f3e10b334796abf96e644ac5'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f97eea4aae3edf32a14dab0c80e3c0a20bce'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cbb9a994c7bc0f3e10b334796abf96e644ac5'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f97eea4aae3edf32a14dab0c80e3c0a20bce'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cbb9a994c7bc0f3e10b334796abf96e644ac5'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a75c4f9dab9c29dfa0c44e16d90eadb0'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f97eea4aae3edf32a14dab0c80e3c0a20bce'\n  */\nconst stringTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/**\n * Given a number n, return its decimal representation in base 10.\n */\nconst decimalToBase10 = (n) => {\n  return n.toString().split('').reverse().join('');\n};\n\n/**\n * Given a number n, return its binary representation in base 10.\n */\nconst binaryToBase10 = (n) => {\n  return n.toString().split('').reverse().map(x => ('0' + x.charCodeAt(0).toString(2)).slice(-2)).join('');\n};\n\n/**\n * Given a number n, return its octal representation in base 10.\n */\nconst octalToBase10 = (n) => {\n  return n.toString().split('').reverse().map(x => ('0' + x.charCodeAt(0).toString(8)).slice(-2)).join('');\n};\n\n/**\n * Given a number n, return its hex representation in base 10.\n */\nconst hexToBase10 = (n) => {\n  return n.toString().split('').reverse().map(x => ('0' + x.charCodeAt(0).toString(16)).slice(-2)).join('');\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimal = (n) => {\n  return decimalToBase10(n);\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinary = (n) => {\n  return binaryToBase10(n);\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctal = (n) => {\n  return octalToBase10(n);\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHex = (n) => {\n  return hexToBase10(n);\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZeroOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZeroOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZeroOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZeroOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZeroOrZeroOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZeroOrZeroOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZeroOrZeroOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZeroOrZeroOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZeroOrZeroOrZeroOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZeroOrZeroOrZeroOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZeroOrZeroOrZeroOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return decimalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToBinaryOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return binaryToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToOctalOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return octalToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToHexOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n) => {\n  return hexToBase10(n) || 0;\n};\n\n/**\n * Given a number n, return its base 10 representation.\n */\nconst base10ToDecimalOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],3:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],4:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],5:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],6:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],7:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],8:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],9:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],10:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],11:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],12:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],13:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],14:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],15:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],16:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],17:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],18:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const result = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beats = note.match(/\\d+/g);\n    if (beats) {\n      result.push(beats.length);\n    }\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n\n},{}],19:[function(require,module,exports){\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Returns true if the given string is a palindrome.\n * Returns false otherwise.\n * Credits: https://stackoverflow.com/questions/434824/how-do-you-check-if-a-string-is-a-palindrome-without-using-a-library\n */\nconst isPalindrome = (string) => {\n  let reversedString = string.reverse();\n  let reversedStringLength = reversedString.length;\n  let stringLength = string.length;\n  let isPalindrome = true;\n  let i;\n  let j;\n  let k;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = numbers.sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    if (aNum < bNum) return -1;\n    if (aNum > bNum) return 1;\n    return 0;\n  });\n  return sorted.join(' ');\n};\n\n/* Given a string, return its reverse lexicographically sorted string.\n  >>> reverseLexicographically('one two three four')\n  'four three two one'\n  */\nconst reverseLexicographically = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse lexicographically sorted string.\n  >>> reverseLexicographically('one two three four')\n  'four three two one'\n  */\nconst reverseLexicographicallyReversed = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographically('one two three four')\n  'four three two one'\n  */\nconst lexicographically = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographically('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (string) => {\n  const lexicographicallySorted = string.split('').sort().join('');\n  return lexicographicallySorted;\n};\n\n/* Given a string, return its lexicographically sorted string.\n  >>> lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('one two three four')\n  'four three two one'\n  */\nconst lexicographicallyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateInteger(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimal(3.5)\n  3\n  */\nconst truncateDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimalDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimalDecimalDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimalPart + decimalRemainder;\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return integer part of the number.\n  >>> truncateIntegerDecimalDecimalDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number % 1;\n  const remainder = number - decimal;\n  const decimalPart = decimal === 0? 0 : Math.pow(10, decimal);\n  const decimalRemainder = remainder === 0? 0 : Math.pow(10, remainder);\n  return decimal", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = 0; i < numbers.length; i++) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse2 = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse3 = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse4 = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse5 = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minValue = undefined;\n  let index = undefined;\n  let value = undefined;\n\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    value = numbers[i];\n    index = i;\n    minDistance = Number.MAX_VALUE;\n    minElement = undefined;\n    minIndex = undefined;\n    minValue = undefined;\n    for (let j = i + 1; j < numbers.length; j++) {\n      value = numbers[j];\n      index = j;\n      distance = value - numbers[i];\n      if (distance < minDistance) {\n        minDistance = distance;\n        minElement = index;\n        minIndex = i;\n        minValue = value;\n      }\n    }\n  }\n  return [minElement, minValue];\n};\n\n/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const factor = Math.pow(10, Math.floor(Math.log(range) / Math.LN10));\n  return numbers.map((n) => n * factor);\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(3.141592653589793)\n * 4\n */\nconst roundToNearestMultiple = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultiple(3.141592653589793)\n * 3\n */\nconst roundToNearestMultipleWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecision(3.141592653589793)\n * 2\n */\nconst roundToNearestMultipleWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecision(3.141592653589793)\n * 1\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * 0\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * NaN\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * NaN\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * NaN\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision = (number) => {\n  const factor = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * Given a number, round it to the nearest multiple of 10\n * >>> roundToNearestMultipleWithPrecisionWithPrecisionWithPrecisionWithPrecision(3.141592653589793)\n * -Infinity\n */\nconst roundToNearestMultipleWith", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only of floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.2, 2.3, 3.4, 4.5]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only of strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only of booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only of None\n  >>> filterNones(['a', 3.14, 5])\n  [None, 3.14]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [None, 1, 2, 3, None, {}, []]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only of empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [[]]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only of empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/**\n * Filter given list of any python values only of empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  ['']\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  ['']\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only of empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only of empty iterable\n  >>> filterEmptyIterables(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyIterables([1, 2, 3, 'abc', {}, []])\n  [[]]\n  */\nconst filterEmptyIterables = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n  >>> filterEmptyGenerators([1, 2, 3, 'abc', {}, []])\n  [() => {}]\n  */\nconst filterEmptyGenerators = (values) => {\n  return values.filter(value => typeof value === 'function' && value!== null);\n};\n\n/**\n * Filter given list of any python values only of empty generator\n  >>> filterEmptyGenerators(['a', 3.14, 5])\n  [() => {}]\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'ab')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWith('abc', 'abc')\n  true\n  >>> endsWith('abc', 'ab')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let remainder = 1;\n  while (divisor <= n) {\n    remainder = n % divisor;\n    divisor = divisor + remainder;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactor(15)\n  2\n  */\nconst primeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactor(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2\n  */\nconst primeFactors = (num) => {\n  let factor = 1;\n  while (num % factor!== 0) {\n    factor = factor + 1;\n  }\n  return factor;\n};\n\n/**\n * Given a number n, return the largest prime factor of n\n * >>> primeFactors(15)\n  2", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let primeFactors = [];\n  let factor = 1;\n  let prime = 1;\n  let factorCount = 0;\n  let primeCount = 0;\n  let factorIndex = 1;\n  let primeIndex = 1;\n  let factorIndex2 = 1;\n  let primeIndex2 = 1;\n  let factorIndex3 = 1;\n  let primeIndex3 = 1;\n  let factorIndex4 = 1;\n  let primeIndex4 = 1;\n  let factorIndex5 = 1;\n  let primeIndex5 = 1;\n  let factorIndex6 = 1;\n  let primeIndex6 = 1;\n  let factorIndex7 = 1;\n  let primeIndex7 = 1;\n  let factorIndex8 = 1;\n  let primeIndex8 = 1;\n  let factorIndex9 = 1;\n  let primeIndex9 = 1;\n  let factorIndex10 = 1;\n  let primeIndex10 = 1;\n  let factorIndex11 = 1;\n  let primeIndex11 = 1;\n  let factorIndex12 = 1;\n  let primeIndex12 = 1;\n  let factorIndex13 = 1;\n  let primeIndex13 = 1;\n  let factorIndex14 = 1;\n  let primeIndex14 = 1;\n  let factorIndex15 = 1;\n  let primeIndex15 = 1;\n  let factorIndex16 = 1;\n  let primeIndex16 = 1;\n  let factorIndex17 = 1;\n  let primeIndex17 = 1;\n  let factorIndex18 = 1;\n  let primeIndex18 = 1;\n  let factorIndex19 = 1;\n  let primeIndex19 = 1;\n  let factorIndex20 = 1;\n  let primeIndex20 = 1;\n  let factorIndex21 = 1;\n  let primeIndex21 = 1;\n  let factorIndex22 = 1;\n  let primeIndex22 = 1;\n  let factorIndex23 = 1;\n  let primeIndex23 = 1;\n  let factorIndex24 = 1;\n  let primeIndex24 = 1;\n  let factorIndex25 = 1;\n  let primeIndex25 = 1;\n  let factorIndex26 = 1;\n  let primeIndex26 = 1;\n  let factorIndex27 = 1;\n  let primeIndex27 = 1;\n  let factorIndex28 = 1;\n  let primeIndex28 = 1;\n  let factorIndex29 = 1;\n  let primeIndex29 = 1;\n  let factorIndex30 = 1;\n  let primeIndex30 = 1;\n  let factorIndex31 = 1;\n  let primeIndex31 = 1;\n  let factorIndex32 = 1;\n  let primeIndex32 = 1;\n  let factorIndex33 = 1;\n  let primeIndex33 = 1;\n  let factorIndex34 = 1;\n  let primeIndex34 = 1;\n  let factorIndex35 = 1;\n  let primeIndex35 = 1;\n  let factorIndex36 = 1;\n  let primeIndex36 = 1;\n  let factorIndex37 = 1;\n  let primeIndex37 = 1;\n  let factorIndex38 = 1;\n  let primeIndex38 = 1;\n  let factorIndex39 = 1;\n  let primeIndex39 = 1;\n  let factorIndex40 = 1;\n  let primeIndex40 = 1;\n  let factorIndex41 = 1;\n  let primeIndex41 = 1;\n  let factorIndex42 = 1;\n  let primeIndex42 = 1;\n  let factorIndex43 = 1;\n  let primeIndex43 = 1;\n  let factorIndex44 = 1;\n  let primeIndex44 = 1;\n  let factorIndex45 = 1;\n  let primeIndex45 = 1;\n  let factorIndex46 = 1;\n  let primeIndex46 = 1;\n  let factorIndex47 = 1;\n  let primeIndex47 = 1;\n  let factorIndex48 = 1;\n  let primeIndex48 = 1;\n  let factorIndex49 = 1;\n  let primeIndex49 = 1;\n  let factorIndex50 = 1;\n  let primeIndex50 = 1;\n  let factorIndex51 = 1;\n  let primeIndex51 = 1;\n  let factorIndex52 = 1;\n  let primeIndex52 = 1;\n  let factorIndex53 = 1;\n  let primeIndex53 = 1;\n  let factorIndex54 = 1;\n  let primeIndex54 = 1;\n  let factorIndex55 = 1;\n  let primeIndex55 = 1;\n  let factorIndex56 = 1;\n  let primeIndex56 = 1;\n  let factorIndex57 = 1;\n  let primeIndex57 = 1;\n  let factorIndex58 = 1;\n  let primeIndex58 = 1;\n  let factorIndex59 = 1;\n  let primeIndex59 = 1;\n  let factorIndex60 = 1;\n  let primeIndex60 = 1;\n  let factorIndex61 = 1;\n  let primeIndex61 = 1;\n  let factorIndex62 = 1;\n  let primeIndex62 = 1;\n  let factorIndex63 = 1;\n  let primeIndex63 = 1;\n  let factorIndex64 = 1;\n  let primeIndex64 = 1;\n  let factorIndex65 = 1;\n  let primeIndex65 = 1;\n  let factorIndex66 = 1;\n  let primeIndex66 = 1;\n  let factorIndex67 = 1;\n  let primeIndex67 = 1;\n  let factorIndex68 = 1;\n  let primeIndex68 = 1;\n  let factorIndex69 = 1;\n  let primeIndex69 = 1;\n  let factorIndex70 = 1;\n  let primeIndex70 = 1;\n  let factorIndex71 = 1;\n  let primeIndex71 = 1;\n  let factorIndex72 = 1;\n  let primeIndex72 = 1;\n  let factorIndex73 = 1;\n  let primeIndex73 = 1;\n  let factorIndex74 = 1;\n  let primeIndex74 = 1;\n  let factorIndex75 = 1;\n  let primeIndex75 = 1;\n  let factorIndex76 = 1;\n  let primeIndex76 = 1;\n  let factorIndex77 = 1;\n  let primeIndex77 = 1;\n  let factorIndex78 = 1;\n  let primeIndex78 = 1;\n  let factorIndex79 = 1;\n  let primeIndex79 = 1;\n  let factorIndex80 = 1;\n  let primeIndex80 = 1;\n  let factorIndex81 = 1;\n  let primeIndex81 = 1;\n  let factorIndex82 = 1;\n  let primeIndex82 = 1;\n  let factorIndex83 = 1;\n  let primeIndex83 = 1;\n  let factorIndex84 = 1;\n  let primeIndex84 = 1;\n  let factorIndex85 = 1;\n  let primeIndex85 = 1;\n  let factorIndex86 = 1;\n  let primeIndex86 = 1;\n  let factorIndex87 = 1;\n  let primeIndex87 = 1;\n  let factorIndex88 = 1;\n  let primeIndex88 = 1;\n  let factorIndex89 = 1;\n  let primeIndex89 = 1;\n  let factorIndex90 = 1;\n  let primeIndex90 = 1;\n  let factorIndex91 = 1;\n  let primeIndex91 = 1;\n  let factorIndex92 = 1;\n  let primeIndex92 = 1;\n  let factorIndex93 = 1;\n  let primeIndex93 = 1;\n  let factorIndex94 = 1;\n  let primeIndex94 = 1;\n  let factorIndex95 = 1;\n  let primeIndex95 = 1;\n  let factorIndex96 = 1;\n  let primeIndex96 = 1;\n  let factorIndex97 = 1;\n  let primeIndex97 = 1;\n  let factorIndex98 = 1;\n  let primeIndex98 = 1;\n  let factorIndex99 = 1;\n  let primeIndex99 = 1;\n  let factorIndex100 = 1;\n  let primeIndex100 = 1;\n  let factorIndex101 = 1;\n  let primeIndex101 = 1;\n  let factorIndex102 = 1;\n  let primeIndex102 = 1;\n  let factorIndex103 = 1;\n  let primeIndex103 = 1;\n  let factorIndex104 = 1;\n  let primeIndex104 = 1;\n  let factorIndex105 = 1;\n  let primeIndex105 = 1;\n  let factorIndex106 = 1;\n  let primeIndex106 = 1;\n  let factorIndex107 = 1;\n  let primeIndex107 = 1;\n  let factorIndex108 = 1;\n  let primeIndex108 = 1;\n  let factorIndex109 = 1;\n  let primeIndex109 = 1;\n  let factorIndex110 = 1;\n  let primeIndex110 = 1;\n  let factorIndex111 = 1;\n  let primeIndex111 = 1;\n  let factorIndex112 = 1;\n  let primeIndex112 = 1;\n  let factorIndex113 = 1;\n  let primeIndex113 = 1;\n  let factorIndex114 = 1;\n  let primeIndex114 = 1;\n  let factorIndex115 = 1;\n  let primeIndex115 = 1;\n  let factorIndex116 = 1;\n  let primeIndex116 = 1;\n  let factorIndex117 = 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr);\n    } else {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],18:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],19:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],20:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],21:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],22:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],23:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],24:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],25:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],26:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],27:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],28:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],29:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],30:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],31:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],32:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],33:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],34:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],35:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],36:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],37:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],38:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],39:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],40:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('sha256');\n  hash.update(data);\n  return hash.digest('hex');\n};\n\nmodule.exports = hash;\n\n},{\"crypto\":1}],41:[function(require,module,exports){\n'use strict';\n\nconst { createHash } = require('crypto');\n\nconst hash = (data) => {\n  const hash = createHash('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/([a-z])|([A-Z])/g, (_, char) => char.toUpperCase());\n};\n\n/**\n * Given a string, return the first character of the string that is a letter, digit, or underscore.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a underscore, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a number, return the first letter of the string.\n * If the string starts with a letter, return the first letter of the string.\n * If the string starts with a underscore, return the first letter of the string.\n * If the string does not start with a letter, digit, or underscore, return the first letter of the string.\n * If the string does not start with a number, return the first letter of the string.\n * If the string does not start with a letter, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> number('abc')\n  3\n  >>> number('123')\n  123\n  >>> number('123.456')\n  123.456\n  >>> number('123.456.789')\n  123.456789\n  */\nconst number = (str) => {\n  const num = parseFloat(str);\n  return isNaN(num)? 0 : num;\n};\n\n/* Convert string to boolean\n  >>> boolean('true')\n  true\n  >>> boolean('false')\n  false\n  >>> boolean('1')\n  true\n  >>> boolean('0')\n  false\n  */\nconst boolean = (str) => {\n  return str === 'true' || str === 'false';\n};\n\n/* Convert string to object\n  >>> object('{\"a\":1, \"b\":2}')\n  {\"a\":1,\"b\":2}\n  >>> object('{\"a\":1, \"b\":2, \"c\":3}')\n  {\"a\":1,\"b\":2,\"c\":3}\n  >>> object('{\"a\":1, \"b\":2, \"c\":3, \"d\":4}')\n  {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n  */\nconst object = (str) => {\n  const obj = {};\n  str.split('&').forEach((pair) => {\n    const [key, val] = pair.split('=');\n    obj[key] = val;\n  });\n  return obj;\n};\n\n/* Convert string to array\n  >>> array('[\"a\", \"b\", \"c\"]')\n  [\"a\", \"b\", \"c\"]\n  >>> array('[\"a\", \"b\", \"c\", \"d\"]')\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> array('[\"a\", \"b\", \"c\", \"d\", \"e\"]')\n  [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst array = (str) => {\n  return str.split(',');\n};\n\n/* Convert string to date\n  >>> date('2015-01-31')\n  Mon Jan 31 2015\n  >>> date('2015-01-31T12:34:56')\n  Mon Jan 31 2015 12:34:56\n  >>> date('2015-01-31T12:34:56.123')\n  Mon Jan 31 2015 12:34:56.123\n  >>> date('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst date = (str) => {\n  const [year, month, day] = str.split('-');\n  return new Date(`${year}-${month}-${day}`);\n};\n\n/* Convert string to date\n  >>> date('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTime = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTime('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZNoTZNoTZNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZNoTZNoTZNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZ('2015-01-31T12:34:56.123Z')\n  Mon Jan 31 2015 12:34:56.123Z\n  */\nconst dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZ = (str) => {\n  const [year, month, day, hour, minute, second] = str.split('T');\n  return new Date(`${year}-${month}-${day} ${hour}:${minute}:${second}`);\n};\n\n/* Convert string to date\n  >>> dateTimeNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZNoTZ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Filter an input list fo strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n  Filter an input list fo strings only for ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n  Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNotNotNot = (strings, prefix, suffix) => {\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/**\n * Returns true if the list contains only positive numbers.\n * Returns false if the list contains negative numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the list contains any positive numbers.\n * Returns false if the list contains any non-positive numbers.\n * Returns false if the list contains any non-numbers.\n * Returns false if the list contains any negative numbers.\n * Returns false if the ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  A function to check if a number is divisible by another number.\n  >>> isDivisibleBy(2, 3)\n  true\n  >>> isDivisibleBy(2, 5)\n  false\n  >>> isDivisibleBy(2, 7)\n  false\n  >>> isDivisibleBy(3, 2)\n  false\n  >>> isDivisibleBy(3, 7)\n  true\n  >>> isDivisibleBy(5, 2)\n  false\n  >>> isDivisibleBy(5, 7)\n  false\n  >>> isDivisibleBy(7, 2)\n  true\n  >>> isDivisibleBy(7, 7)\n  false\n  >>> isDivisibleBy(7, 11)\n  false\n  >>> isDivisibleBy(7, 13441)\n  false\n  >>> isDivisibleBy(7, 61)\n  false\n  >>> isDivisibleBy(7, 4)\n  false\n  >>> isDivisibleBy(7, 1)\n  false\n  */\nconst isDivisibleBy = (n1, n2) => {\n  if (n1 === 0 || n2 === 0) {\n    return false;\n  }\n  return n1 % n2 === 0;\n};\n\n/*\n  A function to check if a number is divisible by another number and\n  is divisible by another number.\n  >>> isDivisibleByAndDivisibleBy(2, 3)\n  true\n  >>> isDivisibleByAndDivisibleBy(2, 5)\n  false\n  >>> isDivisibleByAndDivisibleBy(2, 7)\n  false\n  >>> isDivisibleByAndDivisibleBy(3, 2)\n  false\n  >>> isDivisibleByAndDivisibleBy(3, 7)\n  true\n  >>> isDivisibleByAndDivisibleBy(5, 2)\n  false\n  >>> isDivisibleByAndDivisibleBy(5, 7)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 2)\n  true\n  >>> isDivisibleByAndDivisibleBy(7, 7)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 11)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 13441)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 61)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 4)\n  false\n  >>> isDivisibleByAndDivisibleBy(7, 1)\n  false\n  */\nconst isDivisibleByAndDivisibleBy = (n1, n2) => {\n  if (n1 === 0 || n2 === 0) {\n    return false;\n  }\n  return isDivisibleBy(n1, n2) && isDivisibleBy(n2, n1);\n};\n\n/*\n  A function to check if a number is divisible by another number and\n  is divisible by another number and...\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(2, 3)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(2, 5)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(2, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(3, 2)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(3, 7)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(5, 2)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(5, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 2)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 11)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 13441)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 61)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 4)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleBy(7, 1)\n  false\n  */\nconst isDivisibleByAndDivisibleByAndDivisibleBy = (n1, n2) => {\n  if (n1 === 0 || n2 === 0) {\n    return false;\n  }\n  return isDivisibleByAndDivisibleBy(n1, n2) && isDivisibleByAndDivisibleBy(n2, n1) && isDivisibleByAndDivisibleBy(n2, n2);\n};\n\n/*\n  A function to check if a number is divisible by another number and\n  is divisible by another number and...\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(2, 3)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(2, 5)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(2, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(3, 2)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(3, 7)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(5, 2)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(5, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 2)\n  true\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 7)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 11)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 13441)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 61)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 4)\n  false\n  >>> isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy(7, 1)\n  false\n  */\nconst isDivisibleByAndDivisibleByAndDivisibleByAndDivisibleBy = (n1, n2) => {\n  if (n1 === 0 || n2 === 0) {\n    return false;\n  }\n  return isDivisibleByAndDivisibleByAndDivisibleBy(n1, n2) && isDivisibleByAndDivisibleByAndDivisibleBy(n2, n1) && isDivisibleByAndDivisibleByAndDivisibleBy(n2, n2);\n};\n\n/*\n  A function to check if a number is divisible by another number and\n  is divisible by another number and", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let n = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.map((x, i) => [x, i]);\n  l2.sort((a, b) => b[1] - a[1]);\n  return l2;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex = (arr) => {\n  const newArr = arr.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex2 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex3 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex4 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex5 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex6 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex7 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex8 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex9 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex10 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex11 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex12 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are replaced by their corresponding indices in the new array.\n  >>> sortThirdIndex([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdIndex13 = (x, i) => {\n  const newArr = x.map((x, i) => [x, i]);\n  newArr.sort((a, b) => b[1] - a[1]);\n  return newArr;\n};\n\n/**\n  A function that takes an array and returns a new array that is the same length as the original array except the elements that are divisible by three are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[el]) {\n      seen[el] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy = (key, l) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKey = (key, l) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSort = (key, l, sortBy) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortBy = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSort = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortBy = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseReverseAndSort = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseAndSortByReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseAndSortByReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseAndSortByReverseReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'qux'], [5, 3, 5, 2, 3, 3, 9, 0, 123], ['foo', 'bar', 'baz', 'qux'], (a, b) => a > b, false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByKeyAndSortByReverseAndSortByReverseAndSortByReverseReverse = (key, l, sortBy, reverse) => {\n  let seen = {}\n  return l.filter((el) => {\n    if (!seen[key]) {\n      seen[key] = 1\n      return el\n    }\n  })\n}\n\n/*Return sorted unique ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Return minimum leement in the list.\n * >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Return average leement in the list.\n * >>> averageElement([1, 2, 3])\n  2.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/**\n * Return median leement in the list.\n * >>> medianElement([1, 2, 3])\n  3\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst medianElement = (l) => {\n  let sortedList = l.sort((a, b) => a - b);\n  let middle = Math.floor(sortedList.length / 2);\n  let middleIndex = sortedList.indexOf(middle);\n  let middleValue = sortedList[middleIndex];\n  let left = sortedList.slice(0, middleIndex);\n  let right = sortedList.slice(middleIndex + 1);\n  return median(left, middleValue, right);\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middleValue, right) => {\n  let middleIndex = left.indexOf(middleValue);\n  let middle = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  return median(left, middle, right);\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n  let rightSum = right.reduce((acc, val) => acc + val, 0);\n  let middleSum = middleValue.reduce((acc, val) => acc + val, 0);\n  let leftMedian = leftSum / leftSum * 100;\n  let rightMedian = rightSum / rightSum * 100;\n  let middleMedian = middleSum / middleSum * 100;\n  return leftMedian.toFixed(2) + '%' + rightMedian.toFixed(2) + '%' + middleMedian.toFixed(2) + '%';\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n  let rightSum = right.reduce((acc, val) => acc + val, 0);\n  let middleSum = middleValue.reduce((acc, val) => acc + val, 0);\n  let leftMedian = leftSum / leftSum * 100;\n  let rightMedian = rightSum / rightSum * 100;\n  let middleMedian = middleSum / middleSum * 100;\n  return leftMedian.toFixed(2) + '%' + rightMedian.toFixed(2) + '%' + middleMedian.toFixed(2) + '%';\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n  let rightSum = right.reduce((acc, val) => acc + val, 0);\n  let middleSum = middleValue.reduce((acc, val) => acc + val, 0);\n  let leftMedian = leftSum / leftSum * 100;\n  let rightMedian = rightSum / rightSum * 100;\n  let middleMedian = middleSum / middleSum * 100;\n  return leftMedian.toFixed(2) + '%' + rightMedian.toFixed(2) + '%' + middleMedian.toFixed(2) + '%';\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n  let rightSum = right.reduce((acc, val) => acc + val, 0);\n  let middleSum = middleValue.reduce((acc, val) => acc + val, 0);\n  let leftMedian = leftSum / leftSum * 100;\n  let rightMedian = rightSum / rightSum * 100;\n  let middleMedian = middleSum / middleSum * 100;\n  return leftMedian.toFixed(2) + '%' + rightMedian.toFixed(2) + '%' + middleMedian.toFixed(2) + '%';\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n  let rightSum = right.reduce((acc, val) => acc + val, 0);\n  let middleSum = middleValue.reduce((acc, val) => acc + val, 0);\n  let leftMedian = leftSum / leftSum * 100;\n  let rightMedian = rightSum / rightSum * 100;\n  let middleMedian = middleSum / middleSum * 100;\n  return leftMedian.toFixed(2) + '%' + rightMedian.toFixed(2) + '%' + middleMedian.toFixed(2) + '%';\n};\n\n/**\n * Return median of left and right elements.\n * >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (left, middle, right) => {\n  let middleIndex = left.indexOf(middle);\n  let middleValue = left.slice(middleIndex + 1);\n  let right = right.slice(0, middleIndex);\n  let leftValue = left.slice(0, middleIndex);\n  let leftSum = leftValue.reduce((acc, val) => acc + val, 0);\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      sum += 1;\n    } else if (i % 11 === 0 || i % 3 === 0) {\n      sum += 2;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a number n, return its prime factorization\n  >>> primeFactorization(n)\n  [2, 3, 5, 7]\n  >>> primeFactorization(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primeFactorization(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primeFactorization(103)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primeFactorization(107)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primeFactorization(1099)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l2 = []\n  let l3 = []\n  let l4 = []\n  let l5 = []\n  let l6 = []\n  let l7 = []\n  let l8 = []\n  let l9 = []\n  let l10 = []\n  let l11 = []\n  let l12 = []\n  let l13 = []\n  let l14 = []\n  let l15 = []\n  let l16 = []\n  let l17 = []\n  let l18 = []\n  let l19 = []\n  let l20 = []\n  let l21 = []\n  let l22 = []\n  let l23 = []\n  let l24 = []\n  let l25 = []\n  let l26 = []\n  let l27 = []\n  let l28 = []\n  let l29 = []\n  let l30 = []\n  let l31 = []\n  let l32 = []\n  let l33 = []\n  let l34 = []\n  let l35 = []\n  let l36 = []\n  let l37 = []\n  let l38 = []\n  let l39 = []\n  let l40 = []\n  let l41 = []\n  let l42 = []\n  let l43 = []\n  let l44 = []\n  let l45 = []\n  let l46 = []\n  let l47 = []\n  let l48 = []\n  let l49 = []\n  let l50 = []\n  let l51 = []\n  let l52 = []\n  let l53 = []\n  let l54 = []\n  let l55 = []\n  let l56 = []\n  let l57 = []\n  let l58 = []\n  let l59 = []\n  let l60 = []\n  let l61 = []\n  let l62 = []\n  let l63 = []\n  let l64 = []\n  let l65 = []\n  let l66 = []\n  let l67 = []\n  let l68 = []\n  let l69 = []\n  let l70 = []\n  let l71 = []\n  let l72 = []\n  let l73 = []\n  let l74 = []\n  let l75 = []\n  let l76 = []\n  let l77 = []\n  let l78 = []\n  let l79 = []\n  let l80 = []\n  let l81 = []\n  let l82 = []\n  let l83 = []\n  let l84 = []\n  let l85 = []\n  let l86 = []\n  let l87 = []\n  let l88 = []\n  let l89 = []\n  let l90 = []\n  let l91 = []\n  let l92 = []\n  let l93 = []\n  let l94 = []\n  let l95 = []\n  let l96 = []\n  let l97 = []\n  let l98 = []\n  let l99 = []\n  let l100 = []\n  let l101 = []\n  let l102 = []\n  let l103 = []\n  let l104 = []\n  let l105 = []\n  let l106 = []\n  let l107 = []\n  let l108 = []\n  let l109 = []\n  let l110 = []\n  let l111 = []\n  let l112 = []\n  let l113 = []\n  let l114 = []\n  let l115 = []\n  let l116 = []\n  let l117 = []\n  let l118 = []\n  let l119 = []\n  let l120 = []\n  let l121 = []\n  let l122 = []\n  let l123 = []\n  let l124 = []\n  let l125 = []\n  let l126 = []\n  let l127 = []\n  let l128 = []\n  let l129 = []\n  let l130 = []\n  let l131 = []\n  let l132 = []\n  let l133 = []\n  let l134 = []\n  let l135 = []\n  let l136 = []\n  let l137 = []\n  let l138 = []\n  let l139 = []\n  let l140 = []\n  let l141 = []\n  let l142 = []\n  let l143 = []\n  let l144 = []\n  let l145 = []\n  let l146 = []\n  let l147 = []\n  let l148 = []\n  let l149 = []\n  let l150 = []\n  let l151 = []\n  let l152 = []\n  let l153 = []\n  let l154 = []\n  let l155 = []\n  let l156 = []\n  let l157 = []\n  let l158 = []\n  let l159 = []\n  let l160 = []\n  let l161 = []\n  let l162 = []\n  let l163 = []\n  let l164 = []\n  let l165 = []\n  let l166 = []\n  let l167 = []\n  let l168 = []\n  let l169 = []\n  let l170 = []\n  let l171 = []\n  let l172 = []\n  let l173 = []\n  let l174 = []\n  let l175 = []\n  let l176 = []\n  let l177 = []\n  let l178 = []\n  let l179 = []\n  let l180 = []\n  let l181 = []\n  let l182 = []\n  let l183 = []\n  let l184 = []\n  let l185 = []\n  let l186 = []\n  let l187 = []\n  let l188 = []\n  let l189 = []\n  let l190 = []\n  let l191 = []\n  let l192 = []\n  let l193 = []\n  let l194 = []\n  let l195 = []\n  let l196 = []\n  let l197 = []\n  let l198 = []\n  let l199 = []\n  let l200 = []\n  let l201 = []\n  let l202 = []\n  let l203 = []\n  let l204 = []\n  let l205 = []\n  let l206 = []\n  let l207 = []\n  let l208 = []\n  let l209 = []\n  let l210 = []\n  let l211 = []\n  let l212 = []\n  let l213 = []\n  let l214 = []\n  let l215 = []\n  let l216 = []\n  let l217 = []\n  let l218 = []\n  let l219 = []\n  let l220 = []\n  let l221 = []\n  let l222 = []\n  let l223 = []\n  let l224 = []\n  let l225 = []\n  let l226 = []\n  let l227 = []\n  let l228 = []\n  let l229 = []\n  let l230 = []\n  let l231 = []\n  let l232 = []\n  let l233 = []\n  let l234 = []\n  let l235 = []\n  let l236 = []\n  let l237 = []\n  let l238 = []\n  let l239 = []\n  let l240 = []\n  let l241 = []\n  let l242 = []\n  let l243 = []\n  let l244 = []\n  let l245 = []\n  let l246 = []\n  let l247 = []\n  let l248 = []\n  let l249 = []\n  let l250 = []\n  let l251 = []\n  let l252 = []\n  let l253 = []\n  let l254 = []\n  let l255 = []\n  let l256 = []\n  let l257 = []\n  let l258 = []\n  let l259 = []\n  let l260 = []\n  let l261 = []\n  let l262 = []\n  let l263 = []\n  let l264 = []\n  let l265 = []\n  let l266 = []\n  let l267 = []\n  let l268 = []\n  let l269 = []\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicStringStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicStringStringStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicStringStringStringStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicStringStringStringStringStringStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2;\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst encodeCyclicStringStringStringStringStringStringStringStringString = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns encoded string.\n  */\nconst decodeCyclicStringStringStringStringStringStringStringStringStringStringStringStringString = (s) => {\n  var group", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrime returns n-th numebr taht is a prime number dan it's also prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  11\n  >>> primePrime(5)\n  13\n  >>> primePrime(6)\n  21\n  >>> primePrime(7)\n  29\n  */\nconst primePrime = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrimeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrimePrime returns n-th numebr taht is a prime number dan it's also prime.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  11\n  >>> primePrimePrime(5)\n  13\n  >>> primePrimePrime(6)\n  21\n  >>> primePrimePrime(7)\n  29\n  */\nconst primePrimePrime = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrimeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrimePrime returns n-th numebr taht is a prime number dan it's also prime.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  11\n  >>> primePrimePrime(5)\n  13\n  >>> primePrimePrime(6)\n  21\n  >>> primePrimePrime(7)\n  29\n  */\nconst primePrimePrime = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrime returns n-th numebr taht is a prime number dan it's also prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  11\n  >>> primePrime(5)\n  13\n  >>> primePrime(6)\n  21\n  >>> primePrime(7)\n  29\n  */\nconst primePrime = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  while (n) {\n    const d = n % 2;\n    if (d === 0) {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    } else {\n      a = b;\n      b = c;\n      c = d;\n      n = n / 2;\n    }\n  }\n  return [a, b, c, d];\n};\n\n/*\n  primePrimeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Squared Deviation\n  around the mean of htis dataset.\n  Mean Squared Deviation is the average squared difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MSD = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a gvien list of input numbers, caluclate Root Mean Squared Deviation\n  around the mean of htis dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation\n  between each eleemnt and a centerpoint (mean in this caes):\n  RMSE = sqrt(mean ^ 2 - x_mean ^ 2)\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Squared Error\n  around the mean of htis dataset.\n  Mean Squared Error is the average squared error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MSE = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Error\n  around the mean of htis dataset.\n  Mean Absolute Error is the average absolute error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAE = average | x - x_mean |\n  >>> meanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Percentage Error\n  around the mean of htis dataset.\n  Mean Absolute Percentage Error is the average percentage error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAPE = average | x - x_mean |\n  >>> meanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsolutePercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean) / mean);\n};\n\n/* For a gvien list of input numbers, caluclate Mean Squared Percentage Error\n  around the mean of htis dataset.\n  Mean Squared Percentage Error is the average percentage error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MSRP = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredPercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a gvien list of input numbers, caluclate Root Mean Squared Percentage Error\n  around the mean of htis dataset.\n  Root Mean Squared Percentage Error is the square root of the mean squared percentage\n  error between each eleemnt and a centerpoint (mean in this caes):\n  RMSP = sqrt(mean ^ 2 - x_mean ^ 2)\n  >>> rootMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredPercentageError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.sqrt(val - mean));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Squared Log Error\n  around the mean of htis dataset.\n  Mean Squared Log Error is the average squared log error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MSLE = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredLogError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredLogError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Log Error\n  around the mean of htis dataset.\n  Mean Absolute Log Error is the average absolute log error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MALE = average | x - x_mean |\n  >>> meanAbsoluteLogError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteLogError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a gvien list of input numbers, caluclate Mean Squared Log Error\n  around the mean of htis dataset.\n  Mean Squared Log Error is the average squared log error between each\n  eleemnt and a centerpoint (mean in this caes):\n  MSLE = average ^ 2 - x_mean ^ 2\n  >>> meanSquaredLogError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredLogError = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* For a gvien list of input numbers, caluclate Root Mean Squared Log Error\n  around the mean of htis dataset.\n  Root Mean Squared Log Error ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],13:[function(require,module,exports){\nconst { isArray } = Array;\n\n/**\n * Returns true if a is equal to b\n */\nconst equal = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (isArray(a) && isArray(b)) {\n    return a.length === b.length && a.every((item, index) => equal(item, b[index]));\n  }\n  return false;\n};\n\nmodule.exports = equal;\n\n},{\"./isArray\":14}],14:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],15:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],16:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],17:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],18:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],19:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],20:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],21:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],22:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],23:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],24:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],25:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],26:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],27:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],28:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],29:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],30:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],31:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],32:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a === 'number' &&!isNaN(a) && isFinite(a);\n};\n\nmodule.exports = isNumber;\n\n},{\"./isNumber\":15}],33:[function(require,module,exports){\nconst isNumber = require('./isNumber');\n\n/**\n * Returns true if a is a number\n */\nconst isNumber = a => {\n  return typeof a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],\n          cars[cars.length - 2],\n          cars[cars.length - 3],\n          cars[cars.length - 4],\n          cars[cars.length - 5]\n        )\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],\n          cars[cars.length - 2],\n          cars[cars.length - 3],\n          cars[cars.length - 4],\n          cars[cars.length - 5]\n        )\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],\n          cars[cars.length - 2],\n          cars[cars.length - 3],\n          cars[cars.length - 4],\n          cars[cars.length - 5]\n        )\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],\n          cars[cars.length - 2],\n          cars[cars.length - 3],\n          cars[cars.length - 4],\n          cars[cars.length - 5]\n        )\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],\n          cars[cars.length - 2],\n          cars[cars.length - 3],\n          cars[cars.length - 4],\n          cars[cars.length - 5]\n        )\n      ) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        carCollision(\n          cars[cars.length - 1],\n          cars[j],", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (yb < l[i]) {\n      yb++;\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMaxIndex = (l) => {\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxIndex) {\n      maxIndex = l[i];\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  findMinIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the smallest element in the list.\n  >>> findMinIndex([1, 3, 5, 0])\n  0\n  >>> findMinIndex([1, 3, -2, 1])\n  1\n  >>> findMinIndex([1, 2, 3, 7])\n  7\n  >>> findMinIndex([2, 4, -5, 3, 5, 7])\n  4\n  >>> findMinIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMaxIndex = (l) => {\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxIndex) {\n      maxIndex = l[i];\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  findMinIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the smallest element in the list.\n  >>> findMinIndex([1, 3, 5, 0])\n  0\n  >>> findMinIndex([1, 3, -2, 1])\n  1\n  >>> findMinIndex([1, 2, 3, 7])\n  7\n  >>> findMinIndex([2, 4, -5, 3, 5, 7])\n  4\n  >>> findMinIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMaxIndex = (l) => {\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxIndex) {\n      maxIndex = l[i];\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMinIndex = (l) => {\n  let minIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < minIndex) {\n      minIndex = l[i];\n    }\n  }\n  return minIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, 7])\n  7\n  >>> findMaxIndex([2, 4, -5, 3, 5, 7])\n  5\n  >>> findMaxIndex([1])\n  -1\n  */\nconst findMaxIndex = (l) => {\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > maxIndex) {\n      maxIndex = l[i];\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  findMaxIndex taeks a list of itnegres as an ipnut.\n  it returns the index of the largest element in the list.\n  >>> findMaxIndex([1, 3, 5, 0])\n  2\n  >>> findMaxIndex([1, 3, -2, 1])\n  3\n  >>> findMaxIndex([1, 2, 3, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    return x.toString(base);\n  }\n  return x.toString(base).replace(/(?=(?!\\d)\\d)/g, '');\n};\n\n/*\n  Convert a string to hexadecimal representation\n  >>> hexToHex('0xff')\n  'ff'\n  >>> hexToHex('0xff00')\n  'ff00'\n  >>> hexToHex('0xff0000')\n  'ff0000'\n  >>> hexToHex('0xff000000')\n  'ff000000'\n  >>> hexToHex('0xff00000000')\n  'ff00000000'\n  >>> hexToHex('0xff0000000000')\n  'ff0000000000'\n  >>> hexToHex('0xff000000000000')\n  'ff000000000000'\n  >>> hexToHex('0xff00000000000000')\n  'ff00000000000000'\n  >>> hexToHex('0xff000000000000000')\n  'ff000000000000000'\n  >>> hexToHex('0xff0000000000000000')\n  'ff0000000000000000'\n  >>> hexToHex('0xff000000000000000000')\n  'ff000000000000000000'\n  >>> hexToHex('0xff00000000000000000000')\n  'ff00000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000')\n  'ff0000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000')\n  'ff00000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000')\n  'ff000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('0xff000000000000000000000000000000')\n  'ff000000000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000000')\n  'ff0000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000000000')\n  'ff00000000000000000000000000000000'\n  >>> hexToHex('0xff00000000000000000000000000')\n  'ff00000000000000000000000000'\n  >>> hexToHex('0xff0000000000000000000000000000')\n  'ff0000000000000000000000000000'\n  >>> hexToHex('", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea2 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea3 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea4 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea5 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea6 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea7 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea8 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea9 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea10 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea11 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea12 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea13 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea14 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea15 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea16 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea17 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea18 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea19 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea20 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea21 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea22 = (a, h) => {\n  const hi = h / 2;\n  const lo = a / 2;\n  return h * (hi - lo) + lo * (hi - lo);\n};\n\n/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea23 = (a, h) => {\n  const hi = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*The Fib5 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 2\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a function to effciiently compute the n-th eleemtn of the fib5 number sequence.  Do not use reucrsion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  9\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\n/*The Fib6 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 2\n  fib6(3) -> 0\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write a function to effciiently compute the n-th eleemtn of the fib6 number sequence.  Do not use reucrsion.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  12\n  >>> fib6(7)\n  18\n  */\nconst fib6 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\n/*The Fib7 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 2\n  fib7(3) -> 0\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write a function to effciiently compute the n-th eleemtn of the fib7 number sequence.  Do not use reucrsion.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  13\n  >>> fib7(7)\n  19\n  */\nconst fib7 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\n/*The Fib8 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 2\n  fib8(3) -> 0\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write a function to effciiently compute the n-th eleemtn of the fib8 number sequence.  Do not use reucrsion.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  13\n  >>> fib8(7)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\n/*The Fib9 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 2\n  fib9(3) -> 0\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write a function to effciiently compute the n-th eleemtn of the fib9 number sequence.  Do not use reucrsion.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  15\n  >>> fib9(7)\n  23\n  */\nconst fib9 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\n/*The Fib10 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib10(0) -> 0\n  fib10(1) -> 0\n  fib10(2) -> 2\n  fib10(3) -> 0\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write a function to effciiently compute the n-th eleemtn of the fib10 number sequence.  Do not use reucrsion.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  15\n  >>> fib10(7)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 0) {\n    return 0\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10)\n}\n\n/*The Fib11 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolow", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return median(l.slice(0, mid)) + (l[mid]? median(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  const mid = Math.floor((n - 1) / 2)\n  return medianOf(l.slice(0, mid)) + (l[mid]? medianOf(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('').reverse().join('').length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 18", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      j++\n      if (j === delimeter) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible permutations of an input list `numbers`.\n *\n * >>> permutations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst permutations = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible combinations of an input list `numbers`.\n *\n * >>> combinations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst combinations = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible combinations of an input list `numbers`.\n *\n * >>> combinations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst combinations_with_replacement = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible combinations of an input list `numbers`.\n *\n * >>> combinations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst combinations_with_replacement2 = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible combinations of an input list `numbers`.\n *\n * >>> combinations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst combinations_with_replacement3 = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }\n    }\n  }\n  return result\n}\n\n/**\n * Returns a list of all possible combinations of an input list `numbers`.\n *\n * >>> combinations([1, 2, 3])\n * [\n *   [1, 1, 1],\n *   [1, 1, 2],\n *   [1, 1, 3],\n *   [1, 2, 1],\n *   [1, 2, 2],\n *   [1, 2, 3],\n *   [1, 3, 1],\n *   [1, 3, 2],\n *   [1, 3, 3],\n *   [2, 1, 1],\n *   [2, 1, 2],\n *   [2, 1, 3],\n *   [2, 3, 1],\n *   [2, 3, 2],\n *   [2, 3, 3],\n *   [3, 1, 1],\n *   [3, 1, 2],\n *   [3, 1, 3],\n *   [3, 2, 1],\n *   [3, 2, 2],\n *   [3, 2, 3],\n *   [3, 3, 1],\n *   [3, 3, 2],\n *   [3, 3, 3]\n * ]\n */\nconst combinations_with_replacement4 = (numbers) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n      if (j === numbers.length) {\n        result.push(numbers[i])\n        j = 0\n        i++\n      }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAll = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAll = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAll;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAll;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst encodeAllInt = encodeAllInt;\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeAllInt = decodeAllInt;\n\n/*\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.includes(text[i])) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a function taht takes stirng and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!?') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function taht takes stirng and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!?') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpace is a function taht takes stirng and returns string without white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhiteSpace('abcdef')\n  'abcdef'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuationsAndWhiteSpace is a function taht takes stirng and returns string without punctuations and white space.\n  >>> removePunctuationsAndWhiteSpace('')\n  ''\n  >>> removePunctuationsAndWhiteSpace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuationsAndWhiteSpace('abcdef')\n  'abcdef'\n  >>> removePunctuationsAndWhiteSpace('aaaaa')\n  ''\n  >>> removePunctuationsAndWhiteSpace('aaBAA')\n  'B'\n  >>> removePunctuationsAndWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removePunctuationsAndWhiteSpace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      newText += text[i];\n    }\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!?') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuationsAndNumbers is a function taht takes stirng and returns string without punctuations and numbers.\n  >>> removePunctuationsAndNumbers('')\n  ''\n  >>> removePunctuationsAndNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuationsAndNumbers('abcdef')\n  'abcdef'\n  >>> removePunctuationsAndNumbers('aaaaa')\n  ''\n  >>> removePunctuationsAndNumbers('aaBAA')\n  'B'\n  >>> removePunctuationsAndNumbers('zbcd')\n  'zbcd'\n  */\nconst removePunctuationsAndNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      newText += text[i];\n    }\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!?') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuationsAndNumbersAndWhiteSpace is a function taht takes stirng and returns string without punctuations and numbers and white space.\n  >>> removePunctuationsAndNumbersAndWhiteSpace('')\n  ''\n  >>> removePunctuationsAndNumbersAndWhiteSpace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuationsAndNumbersAndWhiteSpace('abcdef')\n  'abcdef'\n  >>> removePunctuationsAndNumbersAndWhiteSpace('aaaaa')\n  ''\n  >>> removePunctuationsAndNumbersAndWhiteSpace('aaBAA')\n  'B'\n  >>> removePunctuationsAndNumbersAndWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removePunctuationsAndNumbersAndWhiteSpace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      newText += text[i];\n    }\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!?') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuationsAndNumbersAndPunctuations is a function taht takes stirng and returns string without punctuations and numbers and punctuations.\n  >>> removePunctuationsAndNumbersAndPunctuations('')\n  ''\n  >>> removePunctuationsAndNumbersAndPunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuationsAndNumbersAndPunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuationsAndNumbersAndPunctuations('aaaaa')\n  ''\n  >>> removePunctuationsAndNumbersAndPunctuations('aaBAA')\n  'B'\n  >>> removePunctuationsAndNumbersAndPunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuationsAndNumbersAndPunctuations = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      newText += text[i];\n    }\n    if (text[i] === '.' || text[i] === '!' || text[i] === '?' || text[i] === '!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isEven([2, 3, 4, 5])\n  true\n  >>> isEven([2, 4, 6, 8])\n  false\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0.5\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0.5\n  */\nconst modInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modInv(2, 3)\n  2\n  >>> modInv(5, 7)\n  0.5\n  */\nconst modInvInvInvInvInvInvInvInvInvInvInvInvInvInvInvInv = (x, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0 === '') return s1 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === '';\n  if (s0 === '') return s0 === '';\n  if (s1 === '') return s0 === '';\n  if (s0 === '') return s1 === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator using recursion.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * Valid tags are those that start with a letter and are followed by letters, digits, hyphens, underscores, or periods.\n *\n * Valid tags are case-insensitive.\n *\n * Valid tags are case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case-sensitive.\n *\n * Valid tags are case-insensitive and case", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] < l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] > l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] < l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] > l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically decreasing.\n  >>> monotonicDecreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicDecreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicDecreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] < l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] > l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] < l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] > l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] < l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst are monotonically increasing.\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  false\n  >>> monotonicIncreasingDecreasingDecreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncreasingDecreasingDecreasing = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let res = true;\n  while (i > 0) {\n    if (l[j] > l[k]) {\n      res = false;\n      break;\n    }\n    k = j;\n    j = i;\n    i = i - 1;\n  }\n  return res;\n};\n\n/**\n * Return true if list eleemnst ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      res[i++] = l1[i]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> unique([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst unique = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique common elements for two lists.\n  >>> uniqueCommon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> uniqueCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> uniqueElements([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElements = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5]\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let res = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1.indexOf(l2[j]) === -1) {\n      res[i++] = l2[j]\n      j++\n    } else {\n      i++\n    }\n  }\n  return res\n}\n\n/*Return soredt unique elements for two lists.\n  >>> uniqueElementsCommon([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n\n  */\nconst uniqueElementsCommon = (l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    n /= factor;\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(456)\n  false\n  >>> isPalindrome(89)\n  false\n  >>> isPalindrome(891)\n  true\n*/\nconst isPalindrome = (n) => {\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome\n  and also a number k such that k is divisible by n.\n  >>> isPalindromeAndDivisibleByN(123, 3)\n  true\n  >>> isPalindromeAndDivisibleByN(456, 3)\n  true\n  >>> isPalindromeAndDivisibleByN(89, 3)\n  true\n  >>> isPalindromeAndDivisibleByN(891, 3)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 4)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 5)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 6)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 7)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 8)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 9)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 10)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 11)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 12)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 13)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 14)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 15)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 16)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 17)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 18)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 19)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 20)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 21)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 22)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 23)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 24)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 25)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 26)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 27)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 28)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 29)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 30)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 31)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 32)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 33)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 34)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 35)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 36)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 37)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 38)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 39)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 40)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 41)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 42)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 43)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 44)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 45)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 46)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 47)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 48)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 49)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 50)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 51)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 52)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 53)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 54)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 55)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 56)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 57)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 58)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 59)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 60)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 61)\n  false\n  >>> isPalindromeAndDivisibleByN(891, 62)\n  false\n  >>> isPalindromeAndDi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/);\n    if (nesting && nesting.length > 1) {\n      current_nesting++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      nested_groups.push(current_group);\n    }\n    if (nesting && nesting.length > 0) {\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n    }\n  }\n  return nested_groups;\n};\n\n/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensRecursive = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/);\n    if (nesting && nesting.length > 1) {\n      current_nesting++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      nested_groups.push(current_group);\n    }\n    if (nesting && nesting.length > 0) {\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n    }\n  }\n  return nested_groups;\n};\n\n/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensRecursiveWithGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/);\n    if (nesting && nesting.length > 1) {\n      current_nesting++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      nested_groups.push(current_group);\n    }\n    if (nesting && nesting.length > 0) {\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n    }\n  }\n  return nested_groups;\n};\n\n/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensRecursiveWithGroupsRecursive = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/);\n    if (nesting && nesting.length > 1) {\n      current_nesting++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      nested_groups.push(current_group);\n    }\n    if (nesting && nesting.length > 0) {\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n    }\n  }\n  return nested_groups;\n};\n\n/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensRecursiveWithGroupsRecursiveWithGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/);\n    if (nesting && nesting.length > 1) {\n      current_nesting++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      nested_groups.push(current_group);\n    }\n    if (nesting && nesting.length > 0) {\n      current_group++;\n    }\n    if (nesting && nesting.length > 0) {\n      current_level++;\n    }\n  }\n  return nested_groups;\n};\n\n/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParensRecursiveWithGroupsRecursiveWithGroupsRecursive = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s*\\(\\s*/g);\n  const nested_groups = [];\n  let current_level = 0;\n  let current_group = 0;\n  let current_nesting = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const nesting = group.match(/\\s*\\)\\s*$/", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAllToN(5)\n  15\n  >>> sumAllToN(10)\n  55\n  >>> sumAllToN(1)\n  1\n  */\nconst sumAllToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sumAllToN(30)\n  465\n  >>> sumAllToN(100)\n  5050\n  >>> sumAll", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = /[\\(\\)]/g\n  const bracketingMatches = bracketingRegex.exec(brackets)\n  if (bracketingMatches) {\n    const lastBracket = bracketingMatches[0]\n    const lastBracketIndex = bracketingMatches.index(brackets)\n    const lastBracketLength = brackets.length - lastBracketIndex\n    const lastBracketIsOpeningBracket = brackets[lastBracketIndex] === ')'\n    const lastBracketIsClosingBracket = brackets[lastBracketIndex] === ')'\n    const lastBracketIsOpeningParen = brackets[lastBracketIndex] === ')'\n    const lastBracketIsClosingParen = brackets[lastBracketIndex] === ')'\n    const lastBracketIsOpeningBracketOrParen = brackets[lastBracketIndex] === ')' || brackets[lastBracketIndex] === ')('\n    const lastBracketIsClosingBracketOrParen = brackets[lastBracketIndex] === ')' || brackets[lastBracketIndex] === ')('\n    const lastBracketIsOpeningBracketOrParenOrParen = brackets[lastBracketIndex] === ')' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')('\n    const lastBracketIsClosingBracketOrParenOrParen = brackets[lastBracketIndex] === ')' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[lastBracketIndex] === ')(' || brackets[last", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  let x = 0;\n  let dx = 0;\n  let dy = 0;\n  for (let i = 1; i < n; i++) {\n    dx = xs[i] - xs[i - 1];\n    dy = xs[i - 1] - xs[i];\n    x += dx;\n    y += dy;\n  }\n  return [x, y];\n};\n\n/**\n * Calculate the area of a polygon.\n * Polygon area is defined as the sum of all sides lengths.\n * >>> area([3, 1, 2, 4, 5])\n * 10\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, 4, 5])\n * 15\n * >>> area([3, 1, 2, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the Fibonacci sequence up to n.\n  >>> fibfib(0)\n  0\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  13\n  >>> fibfib(13)\n  34\n  >>> fibfib(21)\n  55\n  >>> fibfib(34)\n  89\n  >>> fibfib(55)\n  144\n  >>> fibfib(89)\n  233\n  >>> fibfib(144)\n  377\n  >>> fibfib(233)\n  610\n  >>> fibfib(377)\n  987\n  >>> fibfib(610)\n  1597\n  >>> fibfib(987)\n  2584\n  >>> fibfib(1597)\n  4181\n  >>> fibfib(2584)\n  6765\n  >>> fibfib(4181)\n  10946\n  >>> fibfib(6765)\n  17711\n  >>> fibfib(10946)\n  28657\n  >>> fibfib(17711)\n  46368\n  >>> fibfib(28657)\n  75025\n  >>> fibfib(46368)\n  121621\n  >>> fibfib(75025)\n  157854\n  >>> fibfib(121621)\n  252965\n  >>> fibfib(157854)\n  439413\n  >>> fibfib(252965)\n  703857\n  >>> fibfib(439413)\n  1258999\n  >>> fibfib(703857)\n  1597646\n  >>> fibfib(1258999)\n  2584524\n  >>> fibfib(1597646)\n  4188752\n  >>> fibfib(2584524)\n  6765824\n  >>> fibfib(4188752)\n  10946144\n  >>> fibfib(6765824)\n  17711496\n  >>> fibfib(10946144)\n  28657824\n  >>> fibfib(17711496)\n  46368224\n  >>> fibfib(28657824)\n  75025184\n  >>> fibfib(46368224)\n  121621104\n  >>> fibfib(75025184)\n  157854184\n  >>> fibfib(121621104)\n  252965184\n  >>> fibfib(157854184)\n  439413184\n  >>> fibfib(252965184)\n  703857184\n  >>> fibfib(439413184)\n  1258999184\n  >>> fibfib(703857184)\n  1597646184\n  >>> fibfib(1258999184)\n  2584524184\n  >>> fibfib(1597646184)\n  4188752184\n  >>> fibfib(2584524184)\n  6765824184\n  >>> fibfib(418875228)\n  10946144432\n  >>> fibfib(67658244432)\n  17711496336\n  >>> fibfib(10946144432)\n  286578244432\n  >>> fibfib(17711496336)\n  463682244432\n  >>> fibfib(286578244432)\n  7502518432\n  >>> fibfib(463682244432)\n  121621104432\n  >>> fibfib(7502518432)\n  15785418432\n  >>> fibfib(121621104432)\n  25296518432\n  >>> fibfib(15785418432)\n  43941318432\n  >>> fibfib(25296518432)\n  70385718432\n  >>> fibfib(43941318432)\n  125899918432\n  >>> fibfib(70385718432)\n  159764618432\n  >>> fibfib(125899918432)\n  258452418432\n  >>> fibfib(159764618432)\n  418875218432\n  >>> fibfib(258452418432)\n  676582418432\n  >>> fibfib(418875228)\n  109461444336\n  >>> fibfib(676582444336)\n  17711496337\n  >>> fibfib(109461444336)\n  2865782444336\n  >>> fibfib(17711496337)\n  4636822444336\n  >>> fibfib(2865782444336)\n  75025184336\n  >>> fibfib(4636822444336)\n  1216211044336\n  >>> fibfib(75025184336)\n  157854184336\n  >>> fibfib(1216211044336)\n  252965184336\n  >>> fibfib(157854184336)\n  439413184336\n  >>> fibfib(252965184336)\n  703857184336\n  >>> fibfib(439413184336)\n  1258999184336\n  >>> fibfib(703857184336)\n  1597646184336\n  >>> fibfib(1258999184336)\n  2584524184336\n  >>> fibfib(1597646184336)\n  4188752184336\n  >>> fibfib(2584524184336)\n  6765824184336\n  >>> fibfib(418875228)\n  109461444337\n  >>> fibfib(676582444337)\n  17711496338\n  >>> fibfib(109461444337)\n  2865782444337\n  >>> fibfib(17711496338)\n  4636822444337\n  >>> fibfib(2865782444337)\n  75025184337\n  >>> fibfib(4636822444337)\n  1216211044337\n  >>> fibfib(7502518433", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCountVowel = 0;\n  let vowelsCountVowelVowel = 0;\n  let vowelsCountVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowel = 0;\n  let vowelsCountVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelVowelV", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  let len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i += shift) {\n    res += str.substring(i, i + shift);\n  }\n  return res;\n};\n\n/*\n  Convert a number to a string in base 10\n  >>> toBase10(123)\n  \"100\"\n  >>> toBase10(123)\n  \"1000\"\n  >>> toBase10(123)\n  \"10000\"\n  >>> toBase10(123)\n  \"100000\"\n  >>> toBase10(123)\n  \"1000000\"\n  >>> toBase10(123)\n  \"10000000\"\n  >>> toBase10(123)\n  \"100000000\"\n  >>> toBase10(123)\n  \"1000000000\"\n  >>> toBase10(123)\n  \"10000000000\"\n  >>> toBase10(123)\n  \"100000000000\"\n  >>> toBase10(123)\n  \"1000000000000\"\n  >>> toBase10(123)\n  \"100000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) sum += s.charCodeAt(i);\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let fruits = [];\n  let apples = 0, oranges = 0;\n  let mango = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let totalApples = 0;\n  let totalOranges = 0;\n  let totalMango = 0;\n  let totalCount = 0;\n  let totalAppleCount = 0;\n  let totalOrangeCount = 0;\n  let totalMangoCount = 0;\n  let totalCount2 = 0;\n  let totalAppleCount2 = 0;\n  let totalOrangeCount2 = 0;\n  let totalMangoCount2 = 0;\n  let totalCount3 = 0;\n  let totalAppleCount3 = 0;\n  let totalOrangeCount3 = 0;\n  let totalMangoCount3 = 0;\n  let totalCount4 = 0;\n  let totalAppleCount4 = 0;\n  let totalOrangeCount4 = 0;\n  let totalMangoCount4 = 0;\n  let totalCount5 = 0;\n  let totalAppleCount5 = 0;\n  let totalOrangeCount5 = 0;\n  let totalMangoCount5 = 0;\n  let totalCount6 = 0;\n  let totalAppleCount6 = 0;\n  let totalOrangeCount6 = 0;\n  let totalMangoCount6 = 0;\n  let totalCount7 = 0;\n  let totalAppleCount7 = 0;\n  let totalOrangeCount7 = 0;\n  let totalMangoCount7 = 0;\n  let totalCount8 = 0;\n  let totalAppleCount8 = 0;\n  let totalOrangeCount8 = 0;\n  let totalMangoCount8 = 0;\n  let totalCount9 = 0;\n  let totalAppleCount9 = 0;\n  let totalOrangeCount9 = 0;\n  let totalMangoCount9 = 0;\n  let totalCount10 = 0;\n  let totalAppleCount10 = 0;\n  let totalOrangeCount10 = 0;\n  let totalMangoCount10 = 0;\n  let totalCount11 = 0;\n  let totalAppleCount11 = 0;\n  let totalOrangeCount11 = 0;\n  let totalMangoCount11 = 0;\n  let totalCount12 = 0;\n  let totalAppleCount12 = 0;\n  let totalOrangeCount12 = 0;\n  let totalMangoCount12 = 0;\n  let totalCount13 = 0;\n  let totalAppleCount13 = 0;\n  let totalOrangeCount13 = 0;\n  let totalMangoCount13 = 0;\n  let totalCount14 = 0;\n  let totalAppleCount14 = 0;\n  let totalOrangeCount14 = 0;\n  let totalMangoCount14 = 0;\n  let totalCount15 = 0;\n  let totalAppleCount15 = 0;\n  let totalOrangeCount15 = 0;\n  let totalMangoCount15 = 0;\n  let totalCount16 = 0;\n  let totalAppleCount16 = 0;\n  let totalOrangeCount16 = 0;\n  let totalMangoCount16 = 0;\n  let totalCount17 = 0;\n  let totalAppleCount17 = 0;\n  let totalOrangeCount17 = 0;\n  let totalMangoCount17 = 0;\n  let totalCount18 = 0;\n  let totalAppleCount18 = 0;\n  let totalOrangeCount18 = 0;\n  let totalMangoCount18 = 0;\n  let totalCount19 = 0;\n  let totalAppleCount19 = 0;\n  let totalOrangeCount19 = 0;\n  let totalMangoCount19 = 0;\n  let totalCount20 = 0;\n  let totalAppleCount20 = 0;\n  let totalOrangeCount20 = 0;\n  let totalMangoCount20 = 0;\n  let totalCount21 = 0;\n  let totalAppleCount21 = 0;\n  let totalOrangeCount21 = 0;\n  let totalMangoCount21 = 0;\n  let totalCount22 = 0;\n  let totalAppleCount22 = 0;\n  let totalOrangeCount22 = 0;\n  let totalMangoCount22 = 0;\n  let totalCount23 = 0;\n  let totalAppleCount23 = 0;\n  let totalOrangeCount23 = 0;\n  let totalMangoCount23 = 0;\n  let totalCount24 = 0;\n  let totalAppleCount24 = 0;\n  let totalOrangeCount24 = 0;\n  let totalMangoCount24 = 0;\n  let totalCount25 = 0;\n  let totalAppleCount25 = 0;\n  let totalOrangeCount25 = 0;\n  let totalMangoCount25 = 0;\n  let totalCount26 = 0;\n  let totalAppleCount26 = 0;\n  let totalOrangeCount26 = 0;\n  let totalMangoCount26 = 0;\n  let totalCount27 = 0;\n  let totalAppleCount27 = 0;\n  let totalOrangeCount27 = 0;\n  let totalMangoCount27 = 0;\n  let totalCount28 = 0;\n  let totalAppleCount28 = 0;\n  let totalOrangeCount28 = 0;\n  let totalMangoCount28 = 0;\n  let totalCount29 = 0;\n  let totalAppleCount29 = 0;\n  let totalOrangeCount29 = 0;\n  let totalMangoCount29 = 0;\n  let totalCount30 = 0;\n  let totalAppleCount30 = 0;\n  let totalOrangeCount30 = 0;\n  let totalMangoCount30 = 0;\n  let totalCount31 = 0;\n  let totalAppleCount31 = 0;\n  let totalOrangeCount31 = 0;\n  let totalMangoCount31 = 0;\n  let totalCount32 = 0;\n  let totalAppleCount32 = 0;\n  let totalOrangeCount32 = 0;\n  let totalMangoCount32 = 0;\n  let totalCount33 = 0;\n  let totalAppleCount33 = 0;\n  let totalOrangeCount33 = 0;\n  let totalMangoCount33 = 0;\n  let totalCount34 = 0;\n  let totalAppleCount34 = 0;\n  let totalOrangeCount34 = 0;\n  let totalMangoCount34 = 0;\n  let totalCount35 = 0;\n  let totalAppleCount35 = 0;\n  let totalOrangeCount35 = 0;\n  let totalMangoCount35 = 0;\n  let totalCount36 = 0;\n  let totalAppleCount36 = 0;\n  let totalOrangeCount36 = 0;\n  let totalMangoCount36 = 0;\n  let totalCount37 = 0;\n  let totalAppleCount37 = 0;\n  let totalOrangeCount37 = 0;\n  let totalMangoCount37 = 0;\n  let totalCount38 = 0;\n  let totalAppleCount38 = 0;\n  let totalOrangeCount38 = 0;\n  let totalMangoCount38 = 0;\n  let totalCount39 = 0;\n  let totalAppleCount39 = 0;\n  let totalOrangeCount39 = 0;\n  let totalMangoCount39 = 0;\n  let totalCount40 = 0;\n  let totalAppleCount40 = 0;\n  let totalOrangeCount40 = 0;\n  let totalMangoCount40 = 0;\n  let totalCount41 = 0;\n  let totalAppleCount41 = 0;\n  let totalOrangeCount41 = 0;\n  let totalMangoCount41 = 0;\n  let totalCount42 = 0;\n  let totalAppleCount42 = 0;\n  let totalOrangeCount42 = 0;\n  let totalMangoCount42 = 0;\n  let totalCount43 = 0;\n  let totalAppleCount43 = 0;\n  let totalOrangeCount43 = 0;\n  let totalMangoCount43 = 0;\n  let totalCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  if (k === 0) {\n    return [];\n  }\n  return result;\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your stak is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest odd value.\n// fI multiple nodes with the smae smallest odd value are fuond return the node that has smallest index.\n\n// The pulcked node should be returned in a list, [ smalest_value, its index ],\n// If there rae no odd values or hte given array is empty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckOdd = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  if (k === 0) {\n    return [];\n  }\n  return result;\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your stak is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest positive value.\n// fI multiple nodes with the smae smallest positive value are fuond return the node that has smallest index.\n\n// The pulcked node should be returned in a list, [ smalest_value, its index ],\n// If there rae no positive values or hte given array is empty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckPositive = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  if (k === 0) {\n    return [];\n  }\n  return result;\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your stak is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest negative value.\n// fI multiple nodes with the smae smallest negative value are fuond return the node that has smallest index.\n\n// The pulcked node should be returned in a list, [ smalest_value, its index ],\n// If there rae no negative values or hte given array is empty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest negative value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest negative value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckNegative = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  if (k === 0) {\n    return [];\n  }\n  return result;\n};\n\n// Given an array representing a tree with non-negative integer nodes,\n// your stak is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest positive value.\n// fI multiple nodes with the smae smallest positive value are fuond return the node that has smallest index.\n\n// The pulcked node should be returned in a list, [ smalest_value, its index ],\n// If there rae no ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greatest than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNot = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterBySubstringNot([], 'a')\n  []\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstringNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstringNotNotNot = (strings, substring) => {\n  return strings.filter(string =>!string.indexOf(substring))\n}\n\n/**\n * Filter an input list of strings only for ones that do not cotnain given substring\n  >>> filterByNotSubstringNot([], 'a')\n  []\n  >>> filterByNotSubstringNo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList.concat(sortedList2);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList2 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList3 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList4 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList5 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList6 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList7 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList8 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList9 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList10 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList11 = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedList2 = lst.sort((a, b) => b - a);\n  return sortedList2.concat(sortedList);\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sort", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  const aArea = a * a;\n  const bArea = b * b;\n  const cArea = c * c;\n  const areaSum = aArea + bArea + cArea;\n  return areaSum >= 0? areaSum / 2 : -1;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirections = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInReverseInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirections = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInReverseInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInBothDirectionsInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInBothDirectionsInReverseInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInBothDirectionsInBothDirectionsInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInBothDirectionsInBothDirectionsInReverseInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > minElement) {\n      change++;\n    }\n  }\n  return change;\n};\n\nconst smallestChangeInBothDirectionsInBothDirectionsInBothDirectionsInBothDirectionsInBothDirectionsInReverse = (arr) => {\n  let change = 0;\n  let minChange = arr.length - 1;\n  let minElement = arr[0];\n  let minElementIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minElementIndex = i;\n    }\n  }\n  for (let i = minElementIndex + 1; i < arr.length; i++) {\n    if (arr[i] > ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        total += lst1[i].length;\n        match.push(lst1[i]);\n      }\n    }\n  }\n  return match;\n};\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  prime number in other cases.\n  x is a simple prime number if n**int=x\n  For example:\n  isSimplePrime(2) => true\n  isSimplePrime(3) => true\n  isSimplePrime(5) => true\n  isSimplePrime(7) => true\n  isSimplePrime(11) => false\n  isSimplePrime(13) => false\n  isSimplePrime(17) => false\n  isSimplePrime(19) => false\n  isSimplePrime(23) => false\n  isSimplePrime(29) => false\n  isSimplePrime(31) => false\n  isSimplePrime(37) => false\n  isSimplePrime(39) => false\n  isSimplePrime(43) => false\n  isSimplePrime(47) => false\n  isSimplePrime(53) => false\n  isSimplePrime(59) => false\n  isSimplePrime(63) => false\n  isSimplePrime(67) => false\n  isSimplePrime(69) => false\n  isSimplePrime(73) => false\n  isSimplePrime(79) => false\n  isSimplePrime(83) => false\n  isSimplePrime(89) => false\n  isSimplePrime(97) => false\n  isSimplePrime(99) => false\n  isSimplePrime(107) => false\n  isSimplePrime(109) => false\n  isSimplePrime(117) => false\n  isSimplePrime(121) => false\n  isSimplePrime(123) => false\n  isSimplePrime(127) => false\n  isSimplePrime(129) => false\n  isSimplePrime(131) => false\n  isSimplePrime(133) => false\n  isSimplePrime(137) => false\n  isSimplePrime(139) => false\n  isSimplePrime(141) => false\n  isSimplePrime(143) => false\n  isSimplePrime(145) => false\n  isSimplePrime(147) => false\n  isSimplePrime(149) => false\n  isSimplePrime(151) => false\n  isSimplePrime(153) => false\n  isSimplePrime(155) => false\n  isSimplePrime(157) => false\n  isSimplePrime(159) => false\n  isSimplePrime(161) => false\n  isSimplePrime(163) => false\n  isSimplePrime(165) => false\n  isSimplePrime(167) => false\n  isSimplePrime(169) => false\n  isSimplePrime(171) => false\n  isSimplePrime(173) => false\n  isSimplePrime(175) => false\n  isSimplePrime(177) => false\n  isSimplePrime(179) => false\n  isSimplePrime(181) => false\n  isSimplePrime(183) => false\n  isSimplePrime(185) => false\n  isSimplePrime(187) => false\n  isSimplePrime(189) => false\n  isSimplePrime(191) => false\n  isSimplePrime(193) => false\n  isSimplePrime(195) => false\n  isSimplePrime(197) => false\n  isSimplePrime(199) => false\n  isSimplePrime(201) => false\n  isSimplePrime(203) => false\n  isSimplePrime(205) => false\n  isSimplePrime(207) => false\n  isSimplePrime(209) => false\n  isSimplePrime(211) => false\n  isSimplePrime(213) => false\n  isSimplePrime(215) => false\n  isSimplePrime(217) => false\n  isSimplePrime(219) => false\n  isSimplePrime(221) => false\n  isSimplePrime(223) => false\n  isSimplePrime(225) => false\n  isSimplePrime(227) => false\n  isSimplePrime(229) => false\n  isSimplePrime(231) => false\n  isSimplePrime(233) => false\n  isSimplePrime(235) => false\n  isSimplePrime(237) => false\n  isSimplePrime(239) => false\n  isSimplePrime(241) => false\n  isSimplePrime(243) => false\n  isSimplePrime(245) => false\n  isSimplePrime(247) => false\n  isSimplePrime(249) => false\n  isSimplePrime(251) => false\n  isSimplePrime(253) => false\n  isSimplePrime(255) => false\n  isSimplePrime(257) => false\n  isSimplePrime(259) => false\n  isSimplePrime(261) => false\n  isSimplePrime(263) => false\n  isSimplePrime(265) => false\n  isSimplePrime(267) => false\n  isSimplePrime(269) => false\n  isSimplePrime(271) => false\n  isSimplePrime(273) => false\n  isSimplePrime(275) => false\n  isSimplePrime(277) => false\n  isSimplePrime(279) => false\n  isSimplePrime(281) => false\n  isSimplePrime(283) => false\n  isSimplePrime(285) => false\n  isSimplePrime(287) => false\n  isSimplePrime(289) => false\n  isSimplePrime(291) => false\n  isSimplePrime(293) => false\n  isSimplePrime(295) => false\n  isSimplePrime(297) => false\n  isSimplePrime(299) => false\n  isSimplePrime(301) => false\n  isSimplePrime(303) => false\n  isSimplePrime(305) => false\n  isSimplePrime(307) => false\n  isSimplePrime(309) => false\n  isSimplePrime(311) => false\n  isSimplePrime(313) => false\n  isSimplePrime(315) => false\n  isSimplePrime(317) => false\n  isSimplePrime(319) => false\n  isSimplePrime(321) => false\n  isSimplePrime(323) => false\n  isSimplePrime(325) => false\n  isSimplePrime(327) => false\n  isSimplePrime(329) => false\n  isSimplePrime(331) => false\n  isSimplePrime(333) => false\n  isSimplePrime(335) => false\n  isSimplePrime(337) => false\n  isSimplePrime(339) => false\n  isSimplePrime(341) => false\n  isSimplePrime(343) => false\n  isSimplePrime(345) => false\n  isSimplePrime(347) => false\n  isSimplePrime(349) => false\n  isSimplePrime(351) => false\n  isSimplePrime(353) => false\n  isSimplePrime(355) => false\n  isSimplePrime(357) => false\n  isSimplePrime", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimal = num;\n  let hexadecimalArray = hexadecimal.split('');\n  let hexadecimalArrayLength = hexadecimalArray.length;\n  let hexadecimalArrayIndex = 0;\n  let hexadecimalArrayIndex2 = 0;\n  let hexadecimalArrayIndex3 = 0;\n  let hexadecimalArrayIndex4 = 0;\n  let hexadecimalArrayIndex5 = 0;\n  let hexadecimalArrayIndex6 = 0;\n  let hexadecimalArrayIndex7 = 0;\n  let hexadecimalArrayIndex8 = 0;\n  let hexadecimalArrayIndex9 = 0;\n  let hexadecimalArrayIndex10 = 0;\n  let hexadecimalArrayIndex11 = 0;\n  let hexadecimalArrayIndex12 = 0;\n  let hexadecimalArrayIndex13 = 0;\n  let hexadecimalArrayIndex14 = 0;\n  let hexadecimalArrayIndex15 = 0;\n  let hexadecimalArrayIndex16 = 0;\n  let hexadecimalArrayIndex17 = 0;\n  let hexadecimalArrayIndex18 = 0;\n  let hexadecimalArrayIndex19 = 0;\n  let hexadecimalArrayIndex20 = 0;\n  let hexadecimalArrayIndex21 = 0;\n  let hexadecimalArrayIndex22 = 0;\n  let hexadecimalArrayIndex23 = 0;\n  let hexadecimalArrayIndex24 = 0;\n  let hexadecimalArrayIndex25 = 0;\n  let hexadecimalArrayIndex26 = 0;\n  let hexadecimalArrayIndex27 = 0;\n  let hexadecimalArrayIndex28 = 0;\n  let hexadecimalArrayIndex29 = 0;\n  let hexadecimalArrayIndex30 = 0;\n  let hexadecimalArrayIndex31 = 0;\n  let hexadecimalArrayIndex32 = 0;\n  let hexadecimalArrayIndex33 = 0;\n  let hexadecimalArrayIndex34 = 0;\n  let hexadecimalArrayIndex35 = 0;\n  let hexadecimalArrayIndex36 = 0;\n  let hexadecimalArrayIndex37 = 0;\n  let hexadecimalArrayIndex38 = 0;\n  let hexadecimalArrayIndex39 = 0;\n  let hexadecimalArrayIndex40 = 0;\n  let hexadecimalArrayIndex41 = 0;\n  let hexadecimalArrayIndex42 = 0;\n  let hexadecimalArrayIndex43 = 0;\n  let hexadecimalArrayIndex44 = 0;\n  let hexadecimalArrayIndex45 = 0;\n  let hexadecimalArrayIndex46 = 0;\n  let hexadecimalArrayIndex47 = 0;\n  let hexadecimalArrayIndex48 = 0;\n  let hexadecimalArrayIndex49 = 0;\n  let hexadecimalArrayIndex50 = 0;\n  let hexadecimalArrayIndex51 = 0;\n  let hexadecimalArrayIndex52 = 0;\n  let hexadecimalArrayIndex53 = 0;\n  let hexadecimalArrayIndex54 = 0;\n  let hexadecimalArrayIndex55 = 0;\n  let hexadecimalArrayIndex56 = 0;\n  let hexadecimalArrayIndex57 = 0;\n  let hexadecimalArrayIndex58 = 0;\n  let hexadecimalArrayIndex59 = 0;\n  let hexadecimalArrayIndex60 = 0;\n  let hexadecimalArrayIndex61 = 0;\n  let hexadecimalArrayIndex62 = 0;\n  let hexadecimalArrayIndex63 = 0;\n  let hexadecimalArrayIndex64 = 0;\n  let hexadecimalArrayIndex65 = 0;\n  let hexadecimalArrayIndex66 = 0;\n  let hexadecimalArrayIndex67 = 0;\n  let hexadecimalArrayIndex68 = 0;\n  let hexadecimalArrayIndex69 = 0;\n  let hexadecimalArrayIndex70 = 0;\n  let hexadecimalArrayIndex71 = 0;\n  let hexadecimalArrayIndex72 = 0;\n  let hexadecimalArrayIndex73 = 0;\n  let hexadecimalArrayIndex74 = 0;\n  let hexadecimalArrayIndex75 = 0;\n  let hexadecimalArrayIndex76 = 0;\n  let hexadecimalArrayIndex77 = 0;\n  let hexadecimalArrayIndex78 = 0;\n  let hexadecimalArrayIndex79 = 0;\n  let hexadecimalArrayIndex80 = 0;\n  let hexadecimalArrayIndex81 = 0;\n  let hexadecimalArrayIndex82 = 0;\n  let hexadecimalArrayIndex83 = 0;\n  let hexadecimalArrayIndex84 = 0;\n  let hexadecimalArrayIndex85 = 0;\n  let hexadecimalArrayIndex86 = 0;\n  let hexadecimalArrayIndex87 = 0;\n  let hexadecimalArrayIndex88 = 0;\n  let hexadecimalArrayIndex89 = 0;\n  let hexadecimalArrayIndex90 = 0;\n  let hexadecimalArrayIndex91 = 0;\n  let hexadecimalArrayIndex92 = 0;\n  let hexadecimalArrayIndex93 = 0;\n  let hexadecimalArrayIndex94 = 0;\n  let hexadecimalArrayIndex95 = 0;\n  let hexadecimalArrayIndex96 = 0;\n  let hexadecimalArrayIndex97 = 0;\n  let hexadecimalArrayIndex98 = 0;\n  let hexadecimalArrayIndex99 = 0;\n  let hexadecimalArrayIndex100 = 0;\n  let hexadecimalArrayIndex101 = 0;\n  let hexadecimalArrayIndex102 = 0;\n  let hexadecimalArrayIndex103 = 0;\n  let hexadecimalArrayIndex104 = 0;\n  let hexadecimalArrayIndex105 = 0;\n  let hexadecimalArrayIndex106 = 0;\n  let hexadecimalArrayIndex107 = 0;\n  let hexadecimalArrayIndex108 = 0;\n  let hexadecimalArrayIndex109 = 0;\n  let hexadecimalArrayIndex110 = 0;\n  let hexadecimalArrayIndex111 = 0;\n  let hexadecimalArrayIndex112 = 0;\n  let hexadecimalArrayIndex113 = 0;\n  let hexadecimalArrayIndex114 = 0;\n  let hexadecimalArrayIndex115 = 0;\n  let hexadecimalArrayIndex116 = 0;\n  let hexadecimalArrayIndex117 = 0;\n  let hexadecimalArrayIndex118 = 0;\n  let hexadecimalArrayIndex119 = 0;\n  let hexadecimalArrayIndex120 = 0;\n  let hexadecimalArrayIndex121 = 0;\n  let hexadecimalArrayIndex122 = 0;\n  let hexadecimalArrayIndex123 = 0;\n  let hexadecimalArrayIndex124 = 0;\n  let hexadecimalArrayIndex125 = 0;\n  let hexadecimalArrayIndex126 = 0;\n  let hexadecimalArrayIndex127 = 0;\n  let hexadecimalArrayIndex128 = 0;\n  let hexadecimalArrayIndex129 = 0;\n  let hexadecimalArrayIndex130 = 0;\n  let hexadecimalArrayIndex131 = 0;\n  let hexadecimalArrayIndex132 = 0;\n  let hexadecimalArrayIndex133 = 0;\n  let hexadecimalArrayIndex134 = 0;\n  let hexadecimalArrayIndex135 = 0;\n  let hexadecimalArrayIndex136 = 0;\n  let hexadecimalArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let carry = 0;\n  let numDigits = Math.floor(Math.log10(decimal));\n  let decimalDigits = decimal.toString(2).split('');\n  for (let i = 0; i < numDigits; i++) {\n    binary += decimalDigits[numDigits - i - 1];\n    num = parseInt(decimalDigits[numDigits - i - 1]);\n    if (num > 9) {\n      num -= 9;\n      carry = 1;\n    }\n  }\n  binary += carry? '1' : '0';\n  return binary;\n};\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  hexadecimal format. The function should return a strnig, with ecah hcaracter representing a hexadecimal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let num = 0;\n  let carry = 0;\n  let numDigits = Math.floor(Math.log10(decimal));\n  let decimalDigits = decimal.toString(2).split('');\n  for (let i = 0; i < numDigits; i++) {\n    hex += decimalDigits[numDigits - i - 1];\n    num = parseInt(decimalDigits[numDigits - i - 1]);\n    if (num > 9) {\n      num -= 9;\n      carry = 1;\n    }\n  }\n  hex += carry? '1' : '0';\n  return hex;\n};\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  octal format. The function should return a strnig, with ecah hcaracter representing an octal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let num = 0;\n  let carry = 0;\n  let numDigits = Math.floor(Math.log10(decimal));\n  let decimalDigits = decimal.toString(2).split('');\n  for (let i = 0; i < numDigits; i++) {\n    octal += decimalDigits[numDigits - i - 1];\n    num = parseInt(decimalDigits[numDigits - i - 1]);\n    if (num > 9) {\n      num -= 9;\n      carry = 1;\n    }\n  }\n  octal += carry? '1' : '0';\n  return octal;\n};\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = decimalToOctal;\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  hexadecimal format. The function should return a strnig, with ecah hcaracter representing a hexadecimal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = decimalToOctal;\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  octal format. The function should return a strnig, with ecah hcaracter representing an octal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = decimalToBinary;\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = decimalToHex;\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  hexadecimal format. The function should return a strnig, with ecah hcaracter representing a hexadecimal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = decimalToOctal;\n\n/*\n  You will be given a unmber in decimal ofrm and your task is to convert it to\n  octal format. The function should return a strnig, with ecah hcaracter representing an octal\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToOct", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct2 = ([sum, product]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct2([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct3([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct4([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct5([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct6([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct7([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct8([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct9([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct10([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct11([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct12 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct12([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct13 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct13([2, 5, 7, 9], 3)\n  (3, 9)\n  */\nconst sumProduct14 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade, i) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return `${grade}${gradesArray.length + 1}`;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade2 = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade, i) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return `${grade}${gradesArray.length + 1}`;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade3 = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade, i) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return `${grade}${gradesArray.length + 1}`;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade4 = (grades) => {\n  const gradesArray = grades.map(grade => parseFloat(grade));\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade, i) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return `${grade}${gradesArray.length + 1}`;\n  });\n  return letterGrades;\n};\n\n/*\n  It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade5 = (grades) => {\n  const gradesArray = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string[i] === string[length - i]) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  Function: isPrime\n  Description: Determines if a number is prime\n  Parameters: number - a number to be checked\n  Returns: boolean - true if number is prime, false otherwise\n  Examples\n  isPrime(2) == true\n  isPrime(5) == false\n  isPrime(7) == true\n  isPrime(8) == false\n  isPrime(9) == false\n  isPrime(10) == true\n  isPrime(11) == false\n  isPrime(12) == false\n  isPrime(13) == false\n  isPrime(14) == false\n  isPrime(15) == false\n  isPrime(16) == true\n  isPrime(17) == false\n  isPrime(18) == false\n  isPrime(19) == false\n  isPrime(20) == true\n  isPrime(21) == false\n  isPrime(22) == false\n  isPrime(23) == false\n  isPrime(24) == false\n  isPrime(25) == false\n  isPrime(26) == false\n  isPrime(27) == false\n  isPrime(28) == false\n  isPrime(29) == false\n  isPrime(30) == false\n  isPrime(31) == false\n  isPrime(32) == false\n  isPrime(33) == false\n  isPrime(34) == false\n  isPrime(35) == false\n  isPrime(36) == false\n  isPrime(37) == false\n  isPrime(38) == false\n  isPrime(39) == false\n  isPrime(40) == false\n  isPrime(41) == false\n  isPrime(42) == false\n  isPrime(43) == false\n  isPrime(44) == false\n  isPrime(45) == false\n  isPrime(46) == false\n  isPrime(47) == false\n  isPrime(48) == false\n  isPrime(49) == false\n  isPrime(50) == false\n  isPrime(51) == false\n  isPrime(52) == false\n  isPrime(53) == false\n  isPrime(54) == false\n  isPrime(55) == false\n  isPrime(56) == false\n  isPrime(57) == false\n  isPrime(58) == false\n  isPrime(59) == false\n  isPrime(60) == false\n  isPrime(61) == false\n  isPrime(62) == false\n  isPrime(63) == false\n  isPrime(64) == false\n  isPrime(65) == false\n  isPrime(66) == false\n  isPrime(67) == false\n  isPrime(68) == false\n  isPrime(69) == false\n  isPrime(70) == false\n  isPrime(71) == false\n  isPrime(72) == false\n  isPrime(73) == false\n  isPrime(74) == false\n  isPrime(75) == false\n  isPrime(76) == false\n  isPrime(77) == false\n  isPrime(78) == false\n  isPrime(79) == false\n  isPrime(80) == false\n  isPrime(81) == false\n  isPrime(82) == false\n  isPrime(83) == false\n  isPrime(84) == false\n  isPrime(85) == false\n  isPrime(86) == false\n  isPrime(87) == false\n  isPrime(88) == false\n  isPrime(89) == false\n  isPrime(90) == false\n  isPrime(91) == false\n  isPrime(92) == false\n  isPrime(93) == false\n  isPrime(94) == false\n  isPrime(95) == false\n  isPrime(96) == false\n  isPrime(97) == false\n  isPrime(98) == false\n  isPrime(99) == false\n  isPrime(100) == false\n  isPrime(101) == false\n  isPrime(102) == false\n  isPrime(103) == false\n  isPrime(104) == false\n  isPrime(105) == false\n  isPrime(106) == false\n  isPrime(107) == false\n  isPrime(108) == false\n  isPrime(109) == false\n  isPrime(110) == false\n  isPrime(111) == false\n  isPrime(112) == false\n  isPrime(113) == false\n  isPrime(114) == false\n  isPrime(115) == false\n  isPrime(116) == false\n  isPrime(117) == false\n  isPrime(118) == false\n  isPrime(119) == false\n  isPrime(120) == false\n  isPrime(121) == false\n  isPrime(122) == false\n  isPrime(123) == false\n  isPrime(124) == false\n  isPrime(125) == false\n  isPrime(126) == false\n  isPrime(127) == false\n  isPrime(128) == false\n  isPrime(129) == false\n  isPrime(130) == false\n  isPrime(131) == false\n  isPrime(132) == false\n  isPrime(133) == false\n  isPrime(134) == false\n  isPrime(135) == false\n  isPrime(136) == false\n  isPrime(137) == false\n  isPrime(138) == false\n  isPrime(139) == false\n  isPrime(140) == false\n  isPrime(141) == false\n  isPrime(142) == false\n  isPrime(143) == false\n  isPrime(144) == false\n  isPrime(145) == false\n  isPrime(146) == false\n  isPrime(147) == false\n  isPrime(148) == false\n  isPrime(149) == false\n  isPrime(150) == false\n  isPrime(151) == false\n  isPrime(152) == false\n  isPrime(153) == false\n  isPrime(154) == false\n  isPrime(155) == false\n  isPrime(156) == false\n  isPrime(157) == false\n  isPrime(158) == false\n  isPrime(159) == false\n  isPrime(160) == false\n  isPrime(161) == false\n  isPrime(162) == false\n  isPrime(163) == false\n  isPrime(164) == false\n  isPrime(165) == false\n  isPrime(166) == false\n  isPrime(167) == false\n  isPrime(168) == false\n  isPrime(169) == false\n  isPrime(170) == false\n  isPrime(171) == false\n  isPrime(172) == false\n  isPrime(173) == false\n  isPrime(174) == false\n  isPrime(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === 0;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -1.\n  */\nconst startsNegativeEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -2.\n  */\nconst startsTwoEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -2;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -3.\n  */\nconst startsThreeEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -3;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -4.\n  */\nconst startsFourEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -4;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -5.\n  */\nconst startsFiveEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -5;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -6.\n  */\nconst startsSixEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -6;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -7.\n  */\nconst startsSevenEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -7;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -8.\n  */\nconst startsEightEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -8;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -9.\n  */\nconst startsNineEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -9;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -1.\n  */\nconst startsZeroEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -2.\n  */\nconst startsTwoEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -2;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -3.\n  */\nconst startsThreeEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -3;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -4.\n  */\nconst startsFourEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -4;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -5.\n  */\nconst startsFiveEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -5;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -6.\n  */\nconst startsSixEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -6;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -7.\n  */\nconst startsSevenEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -7;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -8.\n  */\nconst startsEightEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -8;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with -9.\n  */\nconst startsNineEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    i = Math.floor(i / 10);\n    count += i === -9;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i = 1;\n  let digit;\n  let digits = \"\";\n  let sumDigits = \"\";\n  let sumDigit = \"\";\n  \n  while(i <= N) {\n    digit = parseInt(binary.charAt(i));\n    digits = digits + digit;\n    sum += digit;\n    i++;\n  }\n  \n  while(sum > 0) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > 0 && sumDigit < 10) {\n    sumDigit = parseInt(sumDigits.charAt(sumDigits.length - 1));\n    sumDigits = sumDigits + sumDigit;\n    sum -= sumDigit;\n  }\n  \n  while(sumDigits > 0 && sumDigit > ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = lst.filter(x => x > lst.findIndex(y => y > x));\n  return max[0];\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = lst.filter(x => x < lst.findIndex(y => y < x));\n  return min[0];\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach(x => sum += x);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  lst.forEach(x => product *= x);\n  return product;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x % 2 === 0) ==> 2\n  */\nconst filterSum = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x % 2!== 0) ==> 6\n  */\nconst filterNotSum = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterMin = (lst, predicate) => {\n  let min = 0;\n  lst.forEach(x => min = predicate(x)? x : min);\n  return min;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x < 2) ==> 6\n  */\nconst filterMax = (lst, predicate) => {\n  let max = 0;\n  lst.forEach(x => max = predicate(x)? x : max);\n  return max;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterProduct = (lst, predicate) => {\n  let product = 1;\n  lst.forEach(x => product *= predicate(x)? x : 1);\n  return product;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterSumProduct = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterSumNotProduct = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterMinProduct = (lst, predicate) => {\n  let min = 0;\n  lst.forEach(x => min = predicate(x)? x : min);\n  return min;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x < 2) ==> 6\n  */\nconst filterMaxProduct = (lst, predicate) => {\n  let max = 0;\n  lst.forEach(x => max = predicate(x)? x : max);\n  return max;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterProductProduct = (lst, predicate) => {\n  let product = 1;\n  lst.forEach(x => product *= predicate(x)? x : 1);\n  return product;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterSumNotProductProduct = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterMinNotProduct = (lst, predicate) => {\n  let min = 0;\n  lst.forEach(x => min = predicate(x)? x : min);\n  return min;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x < 2) ==> 6\n  */\nconst filterMaxNotProduct = (lst, predicate) => {\n  let max = 0;\n  lst.forEach(x => max = predicate(x)? x : max);\n  return max;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterProductNotProduct = (lst, predicate) => {\n  let product = 1;\n  lst.forEach(x => product *= predicate(x)? x : 1);\n  return product;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      filterSum([4, 2, 6, 7], x => x > 2) ==> 4\n  */\nconst filterSumNotProductNotProduct = (lst, predicate) => {\n  let sum = 0;\n  lst.forEach(x => sum += predicate(x)? x : 0);\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that satisfy the given predicate.\n\n\n  Examples:\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newStr = ''\n  let newStrArr = []\n  let newStrArrArr = []\n  let newStrArrArrArr = []\n  let newStrArrArrArrArr = []\n  let newStrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = []\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rowIndex = 0\n  let columnIndex = 0\n  let columns = []\n  let coordinates = []\n  let coordinateIndex = 0\n  let coordinateIndex1 = 0\n  let coordinateIndex2 = 0\n  let coordinateIndex3 = 0\n  let coordinateIndex4 = 0\n  let coordinateIndex5 = 0\n  let coordinateIndex6 = 0\n  let coordinateIndex7 = 0\n  let coordinateIndex8 = 0\n  let coordinateIndex9 = 0\n  let coordinateIndex10 = 0\n  let coordinateIndex11 = 0\n  let coordinateIndex12 = 0\n  let coordinateIndex13 = 0\n  let coordinateIndex14 = 0\n  let coordinateIndex15 = 0\n  let coordinateIndex16 = 0\n  let coordinateIndex17 = 0\n  let coordinateIndex18 = 0\n  let coordinateIndex19 = 0\n  let coordinateIndex20 = 0\n  let coordinateIndex21 = 0\n  let coordinateIndex22 = 0\n  let coordinateIndex23 = 0\n  let coordinateIndex24 = 0\n  let coordinateIndex25 = 0\n  let coordinateIndex26 = 0\n  let coordinateIndex27 = 0\n  let coordinateIndex28 = 0\n  let coordinateIndex29 = 0\n  let coordinateIndex30 = 0\n  let coordinateIndex31 = 0\n  let coordinateIndex32 = 0\n  let coordinateIndex33 = 0\n  let coordinateIndex34 = 0\n  let coordinateIndex35 = 0\n  let coordinateIndex36 = 0\n  let coordinateIndex37 = 0\n  let coordinateIndex38 = 0\n  let coordinateIndex39 = 0\n  let coordinateIndex40 = 0\n  let coordinateIndex41 = 0\n  let coordinateIndex42 = 0\n  let coordinateIndex43 = 0\n  let coordinateIndex44 = 0\n  let coordinateIndex45 = 0\n  let coordinateIndex46 = 0\n  let coordinateIndex47 = 0\n  let coordinateIndex48 = 0\n  let coordinateIndex49 = 0\n  let coordinateIndex50 = 0\n  let coordinateIndex51 = 0\n  let coordinateIndex52 = 0\n  let coordinateIndex53 = 0\n  let coordinateIndex54 = 0\n  let coordinateIndex55 = 0\n  let coordinateIndex56 = 0\n  let coordinateIndex57 = 0\n  let coordinateIndex58 = 0\n  let coordinateIndex59 = 0\n  let coordinateIndex60 = 0\n  let coordinateIndex61 = 0\n  let coordinateIndex62 = 0\n  let coordinateIndex63 = 0\n  let coordinateIndex64 = 0\n  let coordinateIndex65 = 0\n  let coordinateIndex66 = 0\n  let coordinateIndex67 = 0\n  let coordinateIndex68 = 0\n  let coordinateIndex69 = 0\n  let coordinateIndex70 = 0\n  let coordinateIndex71 = 0\n  let coordinateIndex72 = 0\n  let coordinateIndex73 = 0\n  let coordinateIndex74 = 0\n  let coordinateIndex75 = 0\n  let coordinateIndex76 = 0\n  let coordinateIndex77 = 0\n  let coordinateIndex78 = 0\n  let coordinateIndex79 = 0\n  let coordinateIndex80 = 0\n  let coordinateIndex81 = 0\n  let coordinateIndex82 = 0\n  let coordinateIndex83 = 0\n  let coordinateIndex84 = 0\n  let coordinateIndex85 = 0\n  let coordinateIndex86 = 0\n  let coordinateIndex87 = 0\n  let coordinateIndex88 = 0\n  let coordinateIndex89 = 0\n  let coordinateIndex90 = 0\n  let coordinateIndex91 = 0\n  let coordinateIndex92 = 0\n  let coordinateIndex93 = 0\n  let coordinateIndex94 = 0\n  let coordinateIndex95 = 0\n  let coordinateIndex96 = 0\n  let coordinateIndex97 = 0\n  let coordinateIndex98 = 0\n  let coordinateIndex99 = 0\n  let coordinateIndex100 = 0\n  let coordinateIndex101 = 0\n  let coordinateIndex102 = 0\n  let coordinateIndex103 = 0\n  let coordinateIndex104 = 0\n  let coordinateIndex105 = 0\n  let coordinateIndex106 = 0\n  let coordinateIndex107 = 0\n  let coordinateIndex108 = 0\n  let coordinateIndex109 = 0\n  let coordinateIndex110 = 0\n  let coordinateIndex111 = 0\n  let coordinateIndex112 = 0\n  let coordinateIndex113 = 0\n  let coordinateIndex114 = 0\n  let coordinateIndex115 = 0\n  let coordinateIndex116 = 0\n  let coordinateIndex117 = 0\n  let coordinateIndex118 = 0\n  let coordinateIndex119 = 0\n  let coordinateIndex120 = 0\n  let coordinateIndex121 = 0\n  let coordinateIndex122 = 0\n  let coordinateIndex123 = 0\n  let coordinateIndex124 = 0\n  let coordinateIndex125 = 0\n  let coordinateIndex126 = 0\n  let coordinateIndex127 = 0\n  let coordinateIndex128 = 0\n  let coordinateIndex129 = 0\n  let coordinateIndex130 = 0\n  let coordinateIndex131 = 0\n  let coordinateIndex132 = 0\n  let coordinateIndex133 = 0\n  let coordinateIndex134 = 0\n  let coordinateIndex135 = 0\n  let coordinateIndex136 = 0\n  let coordinateIndex137 = 0\n  let coordinateIndex138 = 0\n  let coordinateIndex139 = 0\n  let coordinateIndex140 = 0\n  let coordinateIndex141 = 0\n  let coordinateIndex142 = 0\n  let coordinateIndex143 = 0\n  let coordinateIndex144 = 0\n  let coordinateIndex145 = 0\n  let coordinateIndex146 = 0\n  let coordinateIndex147 = 0\n  let coordinateIndex148 = 0\n  let coordinateIndex149 = 0\n  let coordinateIndex150 = 0\n  let coordinateIndex151 = 0\n  let coordinateIndex152 = 0\n  let coordinateIndex153 = 0\n  let coordinateIndex154 = 0\n  let coordinateIndex155 = 0\n  let coordinateIndex156 = 0\n  let coordinateIndex157 = 0\n  let coordinateIndex158 = 0\n  let coordinateIndex159 = 0\n  let coordinateIndex160 = 0\n  let coordinateIndex161 = 0\n  let coordinateIndex162 = 0\n  let coordinateIndex163 = 0\n  let coordinateIndex164 = 0\n  let coordinateIndex165 = 0\n  let coordinateIndex166 = 0\n  let coordinateIndex167 = 0\n  let coordinateIndex168 = 0\n  let coordinateIndex169 = 0\n  let coordinateIndex170 = 0\n  let coordinateIndex171 = 0\n  let coordinateIndex172 = 0\n  let coordinateIndex173 = 0\n  let coordinateIndex174 = 0\n  let coordinateIndex175 = 0\n  let coordinateIndex176 = 0\n  let coordinateIndex177 = 0\n  let coordinateIndex178 = 0\n  let coordinateIndex179 = 0\n  let coordinateIndex180 = 0\n  let coordinateIndex181 = 0\n  let coordinateIndex182 = 0\n  let coordinateIndex183 = 0\n  let coordinateIndex184 = 0\n  let coordinateIndex185 = 0\n  let coordinateIndex186 = 0\n  let coordinateIndex187 = 0\n  let coordinateIndex188 = 0\n  let coordinateIndex189 = 0\n  let coordinateIndex190 = 0\n  let coordinateIndex191 = 0\n  let coordinateIndex192 = 0\n  let coordinateIndex193 = 0\n  let coordinateIndex194 = 0\n  let coordinateIndex195 = 0\n  let coordinateIndex196 = 0\n  let coordinateIndex197 = 0\n  let coordinateIndex198 = 0\n  let coordinateIndex199 = 0\n  let coordinateIndex200 = 0\n  let coordinateIndex201 = 0\n  let coordinateIndex202 = 0\n  let coordinateIndex203 = 0\n  let coordinateIndex204 = 0\n  let coordinateIndex205 = 0\n  let coordinateIndex206 = 0\n  let coordinateIndex207 = 0\n  let coordinateIndex208 = 0\n  let coordinateIndex209 = 0\n  let coordinateIndex210 = 0\n  let coordinateIndex211 = 0\n  let coordinateIndex212 = 0\n  let coordinateIndex213 = 0\n  let coordinateIndex214 = 0\n  let coordinateIndex215 = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice();\n  let sum = 0;\n  let last = 0;\n  let first = 0;\n  let lastIndx = 0;\n  let firstIndx = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxInc = 0;\n  let lastIndxInc = 0;\n  let firstIndxIn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newStr = '';\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n    i++;\n  }\n  while (j < numbers.length) {\n    if (numbers[j] > max) {\n      max = numbers[j];\n      result.push(max);\n    }\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a sorted array and a value, return all elements that have a value closest to the value.\n * If no such elements exist, return an empty array.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple elements that have a value closest to the value, the one with the smallest distance will be returned.\n * If there are multiple ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minIndexValue = null;\n  let minIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || min > lst[i]) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n      minIndexValue = i;\n      minIndexValueIndex = i;\n    }\n  }\n  \n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 3\n  findSmallest([5, 1, 4, 3, 2]) == 3\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minIndexValue = null;\n  let minIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n      minIndexValue = i;\n      minIndexValueIndex = i;\n    }\n  }\n  \n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest leement of the list.\n  Return null if tehre is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([5, 1, 4, 3, 2]) == 5\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxValue = null;\n  let maxIndexValue = null;\n  let maxIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max == null || max < lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n      maxIndexValue = i;\n      maxIndexValueIndex = i;\n    }\n  }\n  \n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest leement of the list.\n  Return null if tehre is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 4\n  findLargestIndex([5, 1, 4, 3, 2]) == 4\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxValue = null;\n  let maxIndexValue = null;\n  let maxIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max == null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n      maxIndexValue = i;\n      maxIndexValueIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minIndexValue = null;\n  let minIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n      minIndexValue = i;\n      minIndexValueIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest leement of the list.\n  Return null if tehre is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 5\n  findLargestIndex([5, 1, 4, 3, 2]) == 5\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxValue = null;\n  let maxIndexValue = null;\n  let maxIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max == null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n      maxIndexValue = i;\n      maxIndexValueIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minIndexValue = null;\n  let minIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || min < lst[i]) {\n      min = lst[i];\n      minIndex = i;\n      minValue = lst[i];\n      minIndexValue = i;\n      minIndexValueIndex = i;\n    }\n  }\n  \n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest leement of the list.\n  Return null if tehre is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 5\n  findLargestIndex([5, 1, 4, 3, 2]) == 5\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let max = null;\n  let maxIndex = null;\n  let maxValue = null;\n  let maxIndexValue = null;\n  let maxIndexValueIndex = null;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (max == null || max > lst[i]) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n      maxIndexValue = i;\n      maxIndexValueIndex = i;\n    }\n  }\n  \n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyFloat = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyFloat(5, 2, 7) ➞ true\n  anyFloat(3, -2, 1) ➞ true\n  anyFloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyBoolean = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyBoolean(5, 2, 7) ➞ true\n  anyBoolean(3, -2, 1) ➞ true\n  anyBoolean(3.6, -2.2, 2) ➞ false\n  */\nconst anyString = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyString(5, 2, 7) ➞ true\n  anyString(3, 2, 2) ➞ false\n  anyString(3, -2, 1) ➞ true\n  anyString(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anyObject = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyObject(5, 2, 7) ➞ true\n  anyObject(3, 2, 2) ➞ false\n  anyObject(3, -2, 1) ➞ true\n  anyObject(3.6, -2.2, 2) ➞ false\n  */\nconst anyFunction = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyFunction(5, 2, 7) ➞ true\n  anyFunction(3, 2, 2) ➞ false\n  anyFunction(3, -2, 1) ➞ true\n  anyFunction(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfNumbers = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyArrayOfNumbers(5, 2, 7) ➞ true\n  anyArrayOfNumbers(3, 2, 2) ➞ false\n  anyArrayOfNumbers(3, -2, 1) ➞ true\n  anyArrayOfNumbers(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfNumbersOfNumbers = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyArrayOfNumbersOfNumbers(5, 2, 7) ➞ true\n  anyArrayOfNumbersOfNumbers(3, 2, 2) ➞ false\n  anyArrayOfNumbersOfNumbers(3, -2, 1) ➞ true\n  anyArrayOfNumbersOfNumbers(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfNumbersOfNumbersOfNumbers = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyArrayOfNumbersOfNumbersOfNumbers(5, 2, 7) ➞ true\n  anyArrayOfNumbersOfNumbersOfNumbers(3, 2, 2) ➞ false\n  anyArrayOfNumbersOfNumbersOfNumbers(3, -2, 1) ➞ true\n  anyArrayOfNumbersOfNumbersOfNumbers(3.6, -2.2, 2) ➞ false\n  */\nconst anyArrayOfNumbersOfNumbersOfNumbersOfNumbers = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return isInteger(x) && isInteger(y) && isInteger(z);\n};\n\n/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let encoded = message\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxPrime = 0;\n  let maxDigit = 0;\n  let maxDigitPrime = 0;\n  let maxDigitPrime2 = 0;\n  let maxDigitPrime3 = 0;\n  let maxDigitPrime4 = 0;\n  let maxDigitPrime5 = 0;\n  let maxDigitPrime6 = 0;\n  let maxDigitPrime7 = 0;\n  let maxDigitPrime8 = 0;\n  let maxDigitPrime9 = 0;\n  let maxDigitPrime10 = 0;\n  let maxDigitPrime11 = 0;\n  let maxDigitPrime12 = 0;\n  let maxDigitPrime13 = 0;\n  let maxDigitPrime14 = 0;\n  let maxDigitPrime15 = 0;\n  let maxDigitPrime16 = 0;\n  let maxDigitPrime17 = 0;\n  let maxDigitPrime18 = 0;\n  let maxDigitPrime19 = 0;\n  let maxDigitPrime20 = 0;\n  let maxDigitPrime21 = 0;\n  let maxDigitPrime22 = 0;\n  let maxDigitPrime23 = 0;\n  let maxDigitPrime24 = 0;\n  let maxDigitPrime25 = 0;\n  let maxDigitPrime26 = 0;\n  let maxDigitPrime27 = 0;\n  let maxDigitPrime28 = 0;\n  let maxDigitPrime29 = 0;\n  let maxDigitPrime30 = 0;\n  let maxDigitPrime31 = 0;\n  let maxDigitPrime32 = 0;\n  let maxDigitPrime33 = 0;\n  let maxDigitPrime34 = 0;\n  let maxDigitPrime35 = 0;\n  let maxDigitPrime36 = 0;\n  let maxDigitPrime37 = 0;\n  let maxDigitPrime38 = 0;\n  let maxDigitPrime39 = 0;\n  let maxDigitPrime40 = 0;\n  let maxDigitPrime41 = 0;\n  let maxDigitPrime42 = 0;\n  let maxDigitPrime43 = 0;\n  let maxDigitPrime44 = 0;\n  let maxDigitPrime45 = 0;\n  let maxDigitPrime46 = 0;\n  let maxDigitPrime47 = 0;\n  let maxDigitPrime48 = 0;\n  let maxDigitPrime49 = 0;\n  let maxDigitPrime50 = 0;\n  let maxDigitPrime51 = 0;\n  let maxDigitPrime52 = 0;\n  let maxDigitPrime53 = 0;\n  let maxDigitPrime54 = 0;\n  let maxDigitPrime55 = 0;\n  let maxDigitPrime56 = 0;\n  let maxDigitPrime57 = 0;\n  let maxDigitPrime58 = 0;\n  let maxDigitPrime59 = 0;\n  let maxDigitPrime60 = 0;\n  let maxDigitPrime61 = 0;\n  let maxDigitPrime62 = 0;\n  let maxDigitPrime63 = 0;\n  let maxDigitPrime64 = 0;\n  let maxDigitPrime65 = 0;\n  let maxDigitPrime66 = 0;\n  let maxDigitPrime67 = 0;\n  let maxDigitPrime68 = 0;\n  let maxDigitPrime69 = 0;\n  let maxDigitPrime70 = 0;\n  let maxDigitPrime71 = 0;\n  let maxDigitPrime72 = 0;\n  let maxDigitPrime73 = 0;\n  let maxDigitPrime74 = 0;\n  let maxDigitPrime75 = 0;\n  let maxDigitPrime76 = 0;\n  let maxDigitPrime77 = 0;\n  let maxDigitPrime78 = 0;\n  let maxDigitPrime79 = 0;\n  let maxDigitPrime80 = 0;\n  let maxDigitPrime81 = 0;\n  let maxDigitPrime82 = 0;\n  let maxDigitPrime83 = 0;\n  let maxDigitPrime84 = 0;\n  let maxDigitPrime85 = 0;\n  let maxDigitPrime86 = 0;\n  let maxDigitPrime87 = 0;\n  let maxDigitPrime88 = 0;\n  let maxDigitPrime89 = 0;\n  let maxDigitPrime90 = 0;\n  let maxDigitPrime91 = 0;\n  let maxDigitPrime92 = 0;\n  let maxDigitPrime93 = 0;\n  let maxDigitPrime94 = 0;\n  let maxDigitPrime95 = 0;\n  let maxDigitPrime96 = 0;\n  let maxDigitPrime97 = 0;\n  let maxDigitPrime98 = 0;\n  let maxDigitPrime99 = 0;\n  let maxDigitPrime100 = 0;\n  let maxDigitPrime101 = 0;\n  let maxDigitPrime102 = 0;\n  let maxDigitPrime103 = 0;\n  let maxDigitPrime104 = 0;\n  let maxDigitPrime105 = 0;\n  let maxDigitPrime106 = 0;\n  let maxDigitPrime107 = 0;\n  let maxDigitPrime108 = 0;\n  let maxDigitPrime109 = 0;\n  let maxDigitPrime110 = 0;\n  let maxDigitPrime111 = 0;\n  let maxDigitPrime112 = 0;\n  let maxDigitPrime113 = 0;\n  let maxDigitPrime114 = 0;\n  let maxDigitPrime115 = 0;\n  let maxDigitPrime116 = 0;\n  let maxDigitPrime117 = 0;\n  let maxDigitPrime118 = 0;\n  let maxDigitPrime119 = 0;\n  let maxDigitPrime120 = 0;\n  let maxDigitPrime121 = 0;\n  let maxDigitPrime122 = 0;\n  let maxDigitPrime123 = 0;\n  let maxDigitPrime124 = 0;\n  let maxDigitPrime125 = 0;\n  let maxDigitPrime126 = 0;\n  let maxDigitPrime127 = 0;\n  let maxDigitPrime128 = 0;\n  let maxDigitPrime129 = 0;\n  let maxDigitPrime130 = 0;\n  let maxDigitPrime131 = 0;\n  let maxDigitPrime132 = 0;\n  let maxDigitPrime133 = 0;\n  let maxDigitPrime134 = 0;\n  let maxDigitPrime135 = 0;\n  let maxDigitPrime136 = 0;\n  let maxDigitPrime137 = 0;\n  let maxDigitPrime138 = 0;\n  let maxDigitPrime139 = 0;\n  let maxDigitPrime140 = 0;\n  let maxDigitPrime141 = 0;\n  let maxDigitPrime142 = 0;\n  let maxDigitPrime143 = 0;\n  let maxDigitPrime144 = 0;\n  let maxDigitPrime145 = 0;\n  let maxDigitPrime146 = 0;\n  let maxDigitPrime147 = 0;\n  let maxDigitPrime148 = 0;\n  let maxDigitPrime149 = 0;\n  let maxDigitPrime150 = 0;\n  let maxDigitPrime151 = 0;\n  let maxDigitPrime152 = 0;\n  let maxDigitPrime153 = 0;\n  let maxDigitPrime154 = 0;\n  let maxDigitPrime155 = 0;\n  let maxDigitPrime156 = 0;\n  let maxDigitPrime157 = 0;\n  let maxDigitPrime158 = 0;\n  let maxDigitPrime159 = 0;\n  let maxDigitPrime160 = 0;\n  let maxDigitPrime161 = 0;\n  let maxDigitPrime162 = 0;\n  let maxDigitPrime163 = 0;\n  let maxDigitPrime164 = 0;\n  let maxDigitPrime165 = 0;\n  let maxDigitPrime166 = 0;\n  let maxDigitPrime167 = 0;\n  let maxDigitPrime168 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreStrings = false;\n  keys.forEach((key) => {\n    if (dict[key] instanceof String) {\n      allKeysAreStrings = true;\n    }\n  });\n  return allKeysAreStrings;\n};\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function shoudl return fales is the given string is empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"aB\") should return false.\n  checkStringCase(\"Aa\") should return false.\n  checkStringCase(\"aBb\") should return false.\n  checkStringCase(\"aBbC\") should return false.\n  checkStringCase(\"aBbCd\") should return false.\n  checkStringCase(\"aBbCdE\") should return false.\n  checkStringCase(\"aBbCdEf\") should return false.\n  checkStringCase(\"aBbCdEfG\") should return false.\n  checkStringCase(\"aBbCdEfGh\") should return false.\n  checkStringCase(\"aBbCdEfGhI\") should return false.\n  checkStringCase(\"aBbCdEfGhIj\") should return false.\n  checkStringCase(\"aBbCdEfGhIjK\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKl\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlM\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMn\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnO\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOo\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoP\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoPq\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoQ\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoQr\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRs\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRt\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtA\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAa\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAb\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbc\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcD\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDg\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgH\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHj\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjK\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKl\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlM\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMn\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnO\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOo\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoP\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoPq\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoQ\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoQr\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoRs\") should return false.\n  checkStringCase(\"aBbCdEfGhIjKlMnOoRtAbcDgHjKlMnOoRt\") should return false.\n  check", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 1;\n  let prime = 1;\n  while (i <= n) {\n    if (prime) {\n      primes.push(prime);\n      prime = 1;\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*\n  Implement a function that takes an array of integers and returns an array of the sum\n  of the integers in the array.\n  for example:\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 11\n  sumOf([2,3,5,7,11,13,17]) => 13\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => 17\n  sumOf([2,3,5,7,11,13,17]) => ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let res = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp290;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of lowercase vowels in veen indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowelsIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCases = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCases = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCasesIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(i)) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowelsIgnoreCase('aBCdEf') returns 1\n  countVowelsIgnoreCase('abcdefg') returns 0\n  countVowelsIgnoreCase('dBBE') returns 0\n  */\nconst countVowelsIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCasesIgnoreCase = (s) => {\n  let count = 0;\n  let vowels = 'aeiouAEIOU';\n  for (let i = 0; i < s.length; i++){\n    if (vowels.indexOf(s.charAt(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the biggest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> biggestInteger(\"10\")\n  10\n  >>> biggestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example biggestInteger(\"14.5\") should\n  return 15 and biggestInteger(\"-14.5\") should return -15.\n  */\nconst biggestInteger = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the smallest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> smallestInteger(\"10\")\n  10\n  >>> smallestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example smallestInteger(\"14.5\") should\n  return 15 and smallestInteger(\"-14.5\") should return -15.\n  */\nconst smallestInteger = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the biggest integer that is less than the given number\n  If the unmber is euiqdsitant from two integres, round it away from zero.\n  Examples\n  >>> biggestIntegerLessThan(\"10\")\n  10\n  >>> biggestIntegerLessThan(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example biggestIntegerLessThan(\"14.5\") should\n  return 15 and biggestIntegerLessThan(\"-14.5\") should return -15.\n  */\nconst biggestIntegerLessThan = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the smallest integer that is less than the given number\n  If the unmber is euiqdsitant from two integres, round it away from zero.\n  Examples\n  >>> smallestIntegerLessThan(\"10\")\n  10\n  >>> smallestIntegerLessThan(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example smallestIntegerLessThan(\"14.5\") should\n  return 15 and smallestIntegerLessThan(\"-14.5\") should return -15.\n  */\nconst smallestIntegerLessThan = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the biggest integer that is greater than the given number\n  If the unmber is euiqdsitant from two integres, round it away from zero.\n  Examples\n  >>> biggestIntegerGreaterThan(\"10\")\n  10\n  >>> biggestIntegerGreaterThan(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example biggestIntegerGreaterThan(\"14.5\") should\n  return 15 and biggestIntegerGreaterThan(\"-14.5\") should return -15.\n  */\nconst biggestIntegerGreaterThan = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === numValue2) {\n    return numValue;\n  }\n  const numValue3 = numValue - numValue2;\n  const numValue4 = numValue2 + numValue2;\n  if (numValue3 === numValue4) {\n    return numValue3;\n  }\n  return numValue4;\n};\n\n/* Create a funciton that takes a value (string) representing a numbre\n  and returns the smallest integer that is greater than the given number\n  If the unmber is euiqdsitant from two integres, round it away from zero.\n  Examples\n  >>> smallestIntegerGreaterThan(\"10\")\n  10\n  >>> smallestIntegerGreaterThan(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example smallestIntegerGreaterThan(\"14.5\") should\n  return 15 and smallestIntegerGreaterThan(\"-14.5\") should return -15.\n  */\nconst smallestIntegerGreaterThan = (value) => {\n  const numValue = parseInt(value, 10);\n  const numValue2 = parseInt(value, 10);\n  if (numValue === num", "passed": 0, "run_status": 1}
