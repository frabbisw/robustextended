{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, aer any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, curr) => {\n    const diff = curr - acc;\n    if (diff < threshold) {\n      return curr;\n    }\n    return acc;\n  }, Number.POSITIVE_INFINITY);\n  return numbers.indexOf(closest) > -1;\n};\n\n/**\n * Check if given array contains all elements from given list.\n * If any element from given list is not in given array, then return false.\n * If any element from given list is equal to given array, then return true.\n * If any element from given list is not equal to given array, then return false.\n * If any element from given list is less than given array, then return true.\n * If any element from given list is greater than given array, then return false.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is less than given array,\n * then return false.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return false.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is equal to given array and any element from given list is less than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is less than given array and any element from given list is greater than given array,\n * then return true.\n * If any element from given list is equal to given array and any element from given list\n * is greater than given array and any element from given list is equal to given array,\n * then return true.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thsi function is a string containing multiple groups of sneted parentheses. Your ogal is to\n  sepaarte thsoe group into separate strings and return the list of those.\n  Separate groups rea balanecd (each open brace is properly closed) and not nested withni each other\n  Ingore any spaces in the niput string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(/\\((?!\\))/);\n  return paren_groups.map((group) => {\n    const paren_group_string = group.replace(/\\)|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\(|\\)|\\", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palidnroem */\ncosnt isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  lAgorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindorme.\n  - Append to the end of teh string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixReversed = '';\n  let longestPalindromeSuffixReversed = '';\n  let longestPalindromePrefixReversedLength = 0;\n  let longestPalindromeSuffixReversedLength = 0;\n  let longestPalindromePrefixReversedReversed = '';\n  let longestPalindromeSuffixReversedReversed = '';\n  let longestPalindromePrefixReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  Return the number of stonse in each level in a list, hwere elemnet at index\n  i represetns the number of stones in teh level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive niteger n, you have to make a pile of n levels of stones.\n  The fisrt elvel has n stones.\n  Teh number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even unmber if n is even.\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of wrods separated by commsa or spaces. Your tsak is\n  to split the string into words and return an raray of the wodrs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes tow opsitive numbers x and y and returns teh\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 0) return x;\n  if (y % 2 === 0) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0 || x >= y || y === 0) return -1;\n  if (x % 2 === 1) return x;\n  if (y % 2 === 1) return y;\n  return chooseNum(y / 2, x / 2);\n};\n\n/*This function takes tow opsitive numbers x and y and returns teh\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst choose", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your taks is to compute the\n  average of teh itnegers from n through m (including n and m). \n  Round hte answer to the nearest integer and cnovert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let result = '';\n  let binary = n % 2;\n  let remainder = n % 2;\n  let remainder2 = m % 2;\n  let remainder3 = m % 3;\n  let remainder4 = m % 4;\n  let remainder5 = m % 5;\n  let remainder6 = m % 6;\n  let remainder7 = m % 7;\n  let remainder8 = m % 8;\n  let remainder9 = m % 9;\n  let remainder10 = m % 10;\n  let remainder11 = m % 11;\n  let remainder12 = m % 12;\n  let remainder13 = m % 13;\n  let remainder14 = m % 14;\n  let remainder15 = m % 15;\n  let remainder16 = m % 16;\n  let remainder17 = m % 17;\n  let remainder18 = m % 18;\n  let remainder19 = m % 19;\n  let remainder20 = m % 20;\n  let remainder21 = m % 21;\n  let remainder22 = m % 22;\n  let remainder23 = m % 23;\n  let remainder24 = m % 24;\n  let remainder25 = m % 25;\n  let remainder26 = m % 26;\n  let remainder27 = m % 27;\n  let remainder28 = m % 28;\n  let remainder29 = m % 29;\n  let remainder30 = m % 30;\n  let remainder31 = m % 31;\n  let remainder32 = m % 32;\n  let remainder33 = m % 33;\n  let remainder34 = m % 34;\n  let remainder35 = m % 35;\n  let remainder36 = m % 36;\n  let remainder37 = m % 37;\n  let remainder38 = m % 38;\n  let remainder39 = m % 39;\n  let remainder40 = m % 40;\n  let remainder41 = m % 41;\n  let remainder42 = m % 42;\n  let remainder43 = m % 43;\n  let remainder44 = m % 44;\n  let remainder45 = m % 45;\n  let remainder46 = m % 46;\n  let remainder47 = m % 47;\n  let remainder48 = m % 48;\n  let remainder49 = m % 49;\n  let remainder50 = m % 50;\n  let remainder51 = m % 51;\n  let remainder52 = m % 52;\n  let remainder53 = m % 53;\n  let remainder54 = m % 54;\n  let remainder55 = m % 55;\n  let remainder56 = m % 56;\n  let remainder57 = m % 57;\n  let remainder58 = m % 58;\n  let remainder59 = m % 59;\n  let remainder60 = m % 60;\n  let remainder61 = m % 61;\n  let remainder62 = m % 62;\n  let remainder63 = m % 63;\n  let remainder64 = m % 64;\n  let remainder65 = m % 65;\n  let remainder66 = m % 66;\n  let remainder67 = m % 67;\n  let remainder68 = m % 68;\n  let remainder69 = m % 69;\n  let remainder70 = m % 70;\n  let remainder71 = m % 71;\n  let remainder72 = m % 72;\n  let remainder73 = m % 73;\n  let remainder74 = m % 74;\n  let remainder75 = m % 75;\n  let remainder76 = m % 76;\n  let remainder77 = m % 77;\n  let remainder78 = m % 78;\n  let remainder79 = m % 79;\n  let remainder80 = m % 80;\n  let remainder81 = m % 81;\n  let remainder82 = m % 82;\n  let remainder83 = m % 83;\n  let remainder84 = m % 84;\n  let remainder85 = m % 85;\n  let remainder86 = m % 86;\n  let remainder87 = m % 87;\n  let remainder88 = m % 88;\n  let remainder89 = m % 89;\n  let remainder90 = m % 90;\n  let remainder91 = m % 91;\n  let remainder92 = m % 92;\n  let remainder93 = m % 93;\n  let remainder94 = m % 94;\n  let remainder95 = m % 95;\n  let remainder96 = m % 96;\n  let remainder97 = m % 97;\n  let remainder98 = m % 98;\n  let remainder99 = m % 99;\n  let remainder100 = m % 100;\n  let remainder101 = m % 101;\n  let remainder102 = m % 102;\n  let remainder103 = m % 103;\n  let remainder104 = m % 104;\n  let remainder105 = m % 105;\n  let remainder106 = m % 106;\n  let remainder107 = m % 107;\n  let remainder108 = m % 108;\n  let remainder109 = m % 109;\n  let remainder110 = m % 110;\n  let remainder111 = m % 111;\n  let remainder112 = m % 112;\n  let remainder113 = m % 113;\n  let remainder114 = m % 114;\n  let remainder115 = m % 115;\n  let remainder116 = m % 116;\n  let remainder117 = m % 117;\n  let remainder118 = m % 118;\n  let remainder119 = m % 119;\n  let remainder120 = m % 120;\n  let remainder121 = m % 121;\n  let remainder122 = m % 122;\n  let remainder123 = m % 123;\n  let remainder124 = m % 124;\n  let remainder125 = m % 125;\n  let remainder126 = m % 126;\n  let remainder127 = m % 127;\n  let remainder128 = m % 128;\n  let remainder129 = m % 129;\n  let remainder130 = m % 130;\n  let remainder131 = m % 131;\n  let remainder132 = m % 132;\n  let remainder133 = m % 133;\n  let remainder134 = m % 134;\n  let remainder135 = m % 135;\n  let remainder136 = m % 136;\n  let remainder137 = m % 137;\n  let remainder138 = m % 138;\n  let remainder139 = m % 139;\n  let remainder140 = m % 140;\n  let remainder141 = m % 141;\n  let remainder142 = m % 142;\n  let remainder143 = m % 143;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any evne idgit.\n\n  Note: Returned list should be sroted in icnreasnig odrer.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  const seen = new Set();\n  x.forEach((x) => {\n    if (seen.has(x)) {\n      result.push(x);\n    } else {\n      seen.add(x);\n    }\n  });\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the inteegrs that are bewteen 1 and 9 inclusive,\n  reverse the resutling array, and tehn replace aech digti by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`One`);\n    } else if (num === 9) {\n      res.push(`Nine`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\nconst byLengthReversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\nconst byLengthReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `Nine${num}`);\n};\n\nconst byLengthReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `Nine${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversed = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `Nine${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `Nine${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `Nine${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num === 1) {\n      res.push(`Nine`);\n    } else if (num === 9) {\n      res.push(`One`);\n    } else {\n      res.push(num);\n    }\n  }\n  return res.map((num) => `One${num}`);\n};\n\nconst byLengthReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByNameReversedByName = (arr) => {\n  const len = arr.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the factorial of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is hte multilpiaction of the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [2, 3, 5, 7, 11]\n  */\nconst g = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [2, 3, 5, 7, 11]\n  */\nconst h = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [2, 3, 5, 7, 11]\n  */\nconst i = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [2, 3, 5, 7, 11]\n  */\nconst j = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [2, 3, 5, 7, 11]\n  */\nconst k = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [2, 3, 5, 7, 11]\n  */\nconst l = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [2, 3, 5, 7, 11]\n  */\nconst m = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [2, 3, 5, 7, 11]\n  */\nconst n = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [2, 3, 5, 7, 11]\n  */\nconst o = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of isze n, such that teh valeu of the element at index i is the greatest common divisor of i if i is even\n  or the sum fo unmbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is hte multiplication of i and the nmubesr from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [2, 3, 5, 7, 11]\n  */\nconst p = (n) => {\n  let result = [];\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), niclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenInclusivePalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), exclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenExclusivePalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddInclusivePalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), exclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddExclusivePalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    }\n    if (oddCount % 2 === 0) {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the nbumer of eevn and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits > 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 0.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 0\n  */\nconst countZeros = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOnes which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 1.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 1\n  */\nconst countOnes = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTwos which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 2.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 2\n  */\nconst countTwos = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countThrees which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 3.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 3) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFours which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 4.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 4\n  */\nconst countFours = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 4) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFives which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 5.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 5\n  */\nconst countFives = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSixs which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 6.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSixs([]) == 0\n  >>> countSixs([-1, 11, -11]) == 1\n  >>> countSixs([1, 1, 2]) == 6\n  */\nconst countSixs = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 6) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSevens which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 7.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSevens([]) == 0\n  >>> countSevens([-1, 11, -11]) == 1\n  >>> countSevens([1, 1, 2]) == 7\n  */\nconst countSevens = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEights which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 8.\n  If a number is negative, hten its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEights([]) == 0\n  >>> countEights([-1, 11, -11]) == 1\n  >>> countEights([1, 1, 2]) == 8\n  */\nconst countEights = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum === 8) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNines which takes an array of integers adn returns\n  the numebr of elements whihc has a sum of digits == 9.\n  If a number is negative, hten ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integesr arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integesr arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordeedr. Your task is to determine if\n  it is possilbe to get an array sorted in non-cdereasing order by prefomring \n  the following operation on hte given array:\n      You are allowed to perform rigth shift operatino any number of times.\n  \n  One right shift operation means hsfiting all eleemnts of the arrya by one\n  position in the irght direction. The last eelment of the arary will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the soretd array by performing the above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let movedArr = [];\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTempIndex = 0;\n  let arrTempLength = 0;\n  let arrTempIndex1 = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arrTempIndex103 = 0;\n  let arrTempIndex104 = 0;\n  let arrTempIndex105 = 0;\n  let arrTempIndex106 = 0;\n  let arrTempIndex107 = 0;\n  let arrTempIndex108 = 0;\n  let arrTempIndex109 = 0;\n  let arrTempIndex110 = 0;\n  let arrTempIndex111 = 0;\n  let arrTempIndex112 = 0;\n  let arrTempIndex113 = 0;\n  let arrTempIndex114 = 0;\n  let arrTempIndex115 = 0;\n  let arrTempIndex116 = 0;\n  let arrTempIndex117 = 0;\n  let arrTempIndex118 = 0;\n  let arrTempIndex119 = 0;\n  let arrTempIndex120 = 0;\n  let arrTempIndex121 = 0;\n  let arrTempIndex122 = 0;\n  let arrTempIndex123 = 0;\n  let arrTempIndex124 = 0;\n  let arrTempIndex125 = 0;\n  let arrTempIndex126 = 0;\n  let arrTempIndex127 = 0;\n  let arrTempIndex128 = 0;\n  let arrTempIndex129 = 0;\n  let arrTempIndex130 = 0;\n  let arrTempIndex131 = 0;\n  let arrTempIndex132 = 0;\n  let arrTempIndex133 = 0;\n  let arrTempIndex134 = 0;\n  let arrTempIndex135 = 0;\n  let arrTempIndex136 = 0;\n  let arrTempIndex137 = 0;\n  let arrTempIndex138 = 0;\n  let arrTempIndex139 = 0;\n  let arrTempIndex140 = 0;\n  let arrTempIndex141 = 0;\n  let arrTempIndex142 = 0;\n  let arrTempIndex143 = 0;\n  let arrTempIndex144 = 0;\n  let arrTempIndex145 = 0;\n  let arrTempIndex146 = 0;\n  let arrTempIndex147 = 0;\n  let arrTempIndex148 = 0;\n  let arrTempIndex149 = 0;\n  let arrTempIndex150 = 0;\n  let arrTempIndex151 = 0;\n  let arrTempIndex152 = 0;\n  let arrTempIndex153 = 0;\n  let arrTempIndex154 = 0;\n  let arrTempIndex155 = 0;\n  let arrTempIndex156 = 0;\n  let arrTempIndex157 = 0;\n  let arrTempIndex158 = 0;\n  let arrTempIndex159 = 0;\n  let arrTempIndex160 = 0;\n  let arrTempIndex161 = 0;\n  let arrTempIndex162 = 0;\n  let arrTempIndex163 = 0;\n  let arrTempIndex164 = 0;\n  let arrTempIndex165 = 0;\n  let arrTempIndex166 = 0;\n  let arrTempIndex167 = 0;\n  let arrTempIndex168 = 0;\n  let arrTempIndex169 = 0;\n  let arrTempIndex170 = 0;\n  let arrTempIndex171 = 0;\n  let arrTempIndex172 = 0;\n  let arrTempIndex173 = 0;\n  let arrTempIndex174 = 0;\n  let arrTempIndex175 = 0;\n  let arrTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input are tow strings a and b consisting only of 1s and 0s.\n  Perform binary XOR no these niputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND no these two strings and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR no these two strings and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot('010')\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result also as a string.\n  >>> stringAnd(['010', '110'], '100')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary OR this string and return result also as a string.\n  >>> stringOr(['010', '110'], '100')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT this string and return result also as a string.\n  >>> stringNot(['010'])\n  '110'\n  */\nconst stringNot = a => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ ~a[i]);\n  }\n  return result;\n};\n\n/**\n  Perform binary AND this string and return result ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a functoin htat takes two lists of numbres,\n  and determines wehther it is possible to perform an exchange of elements\n  between them to maek lst1 a list of only even numbesr.\n  There is no limit on the number of exchanged leements between lst1 and lst2.\n  fI it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let isExchanged;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp27", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram2 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram3 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram4 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram5 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram6 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram7 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram8 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n  let count;\n  for (let i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    count = result[letter] = result[letter] || 0;\n    result[letter]++;\n  }\n  return result;\n};\n\n/*Given a string rperesenting a space separated lowercase letters, return a dictionary\n  of the letter with the mots repetition and containing the corresponding count.\n  If several letetrs have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram9 = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  let letter;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strnigs s and c, you have to deleted all the chaarcters in s that are equal to any character in c\n  then check if hte result stirng is palindrome.\n  A string is called palidnrome if it reads the same backward as forwrad.\n  You sholud return a tuple containing the result string nad true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = \"\";\n  let reverse = \"\";\n  let reverseDelete = \"\";\n  let reverseDeleteCheck = \"\";\n  let reverseDeleteCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDeleteCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheck = \"\";\n  let reverseDelete", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of odd elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of odd digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result.map(n => n % 2 === 1? n : 0);\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result.map(n => n % 2 === 0? n : 0);\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result.map(n => n % 2 === 1? n : 0);\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result.map(n => n % 2 === 1? n : 0);\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/g)) {\n      result.push(lst[i].match(/\\d/g).length);\n    }\n  }\n  return result.map(n => n % 2 === 1? n : 0);\n};\n\n/*Given a list of strinsg, where each string consists of only digits, return a list.\n  Each element i of the output shoudl eb \"the number of even elements in the\n  string i of teh input.\" where all the i's should be replaced by the number\n  of even digtis in the i'th tsrgin of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given na array of integers nums, nfid the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, return the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, return the minimum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  minDistinctSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minDistinctSubArraySum([-1, -2, -3]) == 3\n  */\nconst minDistinctSubArraySum = (nums) => {\n  let sum = 0;\n  let minDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minDistinctSum) {\n      minDistinctSum = sum;\n    }\n  }\n  return minDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the maximum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  maxDistinctSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxDistinctSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxDistinctSubArraySum = (nums) => {\n  let sum = 0;\n  let maxDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxDistinctSum) {\n      maxDistinctSum = sum;\n    }\n  }\n  return maxDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the minimum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  minDistinctSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minDistinctSubArraySum([-1, -2, -3]) == 3\n  */\nconst minDistinctSubArraySumOfSubArrays = (nums) => {\n  let sum = 0;\n  let minDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minDistinctSum) {\n      minDistinctSum = sum;\n    }\n  }\n  return minDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the maximum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  maxDistinctSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxDistinctSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxDistinctSubArraySumOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxDistinctSum) {\n      maxDistinctSum = sum;\n    }\n  }\n  return maxDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the minimum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  minDistinctSubArraySumOfSubArrays([2, 3, 4, 1, 2, 4]) == 4\n  minDistinctSubArraySumOfSubArrays([-1, -2, -3]) == 3\n  */\nconst minDistinctSubArraySumOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minDistinctSum) {\n      minDistinctSum = sum;\n    }\n  }\n  return minDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the maximum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  maxDistinctSubArraySumOfSubArrays([2, 3, 4, 1, 2, 4]) == 4\n  maxDistinctSubArraySumOfSubArrays([-1, -2, -3]) == 3\n  */\nconst maxDistinctSubArraySumOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxDistinctSum) {\n      maxDistinctSum = sum;\n    }\n  }\n  return maxDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the minimum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  minDistinctSubArraySumOfSubArraysOfSubArrays([2, 3, 4, 1, 2, 4]) == 4\n  minDistinctSubArraySumOfSubArraysOfSubArrays([-1, -2, -3]) == 3\n  */\nconst minDistinctSubArraySumOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minDistinctSum) {\n      minDistinctSum = sum;\n    }\n  }\n  return minDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the maximum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  maxDistinctSubArraySumOfSubArraysOfSubArrays([2, 3, 4, 1, 2, 4]) == 4\n  maxDistinctSubArraySumOfSubArraysOfSubArrays([-1, -2, -3]) == 3\n  */\nconst maxDistinctSubArraySumOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxDistinctSum) {\n      maxDistinctSum = sum;\n    }\n  }\n  return maxDistinctSum;\n};\n\n/*\n  Given an array of integers nums, return the minimum number of distinct sub-arrays\n  of nums that sum to nums.\n  Example\n  minDistinctSubArraySumOfSubArraysOfSubArraysOfSubArrays([2, 3, 4, 1, 2, 4]) == 4\n  minDistinctSubArraySumOfSubArraysOfSubArraysOfSubArrays([-1, -2, -3]) == 3\n  */\nconst minDistinctSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minDistinctSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Ecah rwo represents a signle well,\n  and each 1 in a row represetns a single unit of water.\n  Each well has a corresponding bucket that acn be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to emtpy the wells.\n  Outptu the number fo times you need ot lwore the bukcets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += Math.pow(capacity, 2);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 5\n * \n * Returns 6\n */\nconst maxFill2 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Returns 5\n */\nconst maxFill3 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill4 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill5 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill6 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill7 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill8 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill9 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill10 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill11 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill12 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill13 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill14 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill15 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill16 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill17 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill18 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill19 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill20 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill21 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill22 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, capacity)\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Returns 0\n */\nconst maxFill23 = maxFill;\n\n/**\n * Your maxFill function will be called like so:\n * maxFill(grid, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary represnetation in ascending order.\n  For similar unmber of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => num.toString().padStart(8, '0'));\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same\n  length containing all unique binary representations of its elements.\n  For example, given [4, 2, 1, 3], return [4, 2, 1, 3].\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, 2, 1, 3]\n  >>> uniqueBinaryRepresentations([4, 2, 1, 3, 1]) == [4, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Ginve a srting s and a natural number n, you have been tasked to implement \n  a function htat returns a list of all owdrs from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  fI the string s is empty then the unfction should return na epmty list.\n  Note: yuo may assume the input string cnotains only letters and spaecs.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  let words = [];\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You rae given a word. Your task is to find the closets vowel that stands between \n  two consonanst from the right side of the word (csae sensitive).\n  \n  Vowlse in the beginning and ending odesn't count. Rteurn empty string if you iddn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contanis English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens3 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens4 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens5 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens6 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paernthesse '(' or close paretnheses ')' only.\n  Your job is to check if it is opssible ot concatenate the two strings in\n  some order, that the resulting string will be godo.\n  A string S is considered to be good if and only if all praentheses in S\n  are balacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens7 = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res += 'Yes';\n    } else if (lst[i] === ')') {\n      res += 'No';\n    } else {\n      res += 'No';\n    }\n  }\n  return res;\n};\n\n/* You are given a list of tow strings, both strnigs ocnsist of open\n  paer", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest noe. Return the fisrt one in case of multpile\n  strings of the smae lnegth. Return null in case the niput list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = ''\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n  }\n  return longestString\n}\n\n/* Given a string, return its length in characters. Return 0 if the string is empty.\n  >>> length('a')\n  0\n  >>> length('ab')\n  2\n  >>> length('abbb')\n  3\n  >>> length('abbbb')\n  0\n  */\nconst length = (string) => {\n  if (string === '') {\n    return 0\n  }\n  return string.length\n}\n\n/* Given a string, return its first letter in uppercase. Return null if the string is empty.\n  >>> first('a')\n  'A'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst first = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0)\n}\n\n/* Given a string, return its last letter in uppercase. Return null if the string is empty.\n  >>> last('a')\n  'Z'\n  >>> last('ab')\n  'Z'\n  >>> last('abbb')\n  'Z'\n  >>> last('abbbb')\n  null\n  */\nconst last = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1)\n}\n\n/* Given a string, return its first letter in lowercase. Return null if the string is empty.\n  >>> first('a')\n  'a'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toLowerCase()\n}\n\n/* Given a string, return its last letter in lowercase. Return null if the string is empty.\n  >>> last('a')\n  'z'\n  >>> last('ab')\n  'z'\n  >>> last('abbb')\n  'z'\n  >>> last('abbbb')\n  null\n  */\nconst lastLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toLowerCase()\n}\n\n/* Given a string, return its first letter in uppercase. Return null if the string is empty.\n  >>> first('a')\n  'A'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstUpper = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its last letter in uppercase. Return null if the string is empty.\n  >>> last('a')\n  'Z'\n  >>> last('ab')\n  'Z'\n  >>> last('abbb')\n  'Z'\n  >>> last('abbbb')\n  null\n  */\nconst lastUpper = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter in uppercase. Return null if the string is empty.\n  >>> first('a')\n  'A'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstUpperLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Given a string, return its last letter in uppercase. Return null if the string is empty.\n  >>> last('a')\n  'Z'\n  >>> last('ab')\n  'Z'\n  >>> last('abbb')\n  'Z'\n  >>> last('abbbb')\n  null\n  */\nconst lastUpperLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Given a string, return its first letter in lowercase. Return null if the string is empty.\n  >>> first('a')\n  'a'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toLowerCase()\n}\n\n/* Given a string, return its last letter in lowercase. Return null if the string is empty.\n  >>> last('a')\n  'z'\n  >>> last('ab')\n  'z'\n  >>> last('abbb')\n  'z'\n  >>> last('abbbb')\n  null\n  */\nconst lastLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toLowerCase()\n}\n\n/* Given a string, return its first letter in uppercase. Return null if the string is empty.\n  >>> first('a')\n  'A'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstUpper = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its last letter in uppercase. Return null if the string is empty.\n  >>> last('a')\n  'Z'\n  >>> last('ab')\n  'Z'\n  >>> last('abbb')\n  'Z'\n  >>> last('abbbb')\n  null\n  */\nconst lastUpper = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toUpperCase() + string.slice(1)\n}\n\n/* Given a string, return its first letter in uppercase. Return null if the string is empty.\n  >>> first('a')\n  'A'\n  >>> first('ab')\n  'A'\n  >>> first('abbb')\n  'A'\n  >>> first('abbbb')\n  null\n  */\nconst firstUpperLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Given a string, return its last letter in uppercase. Return null if the string is empty.\n  >>> last('a')\n  'Z'\n  >>> last('ab')\n  'Z'\n  >>> last('abbb')\n  'Z'\n  >>> last('abbbb')\n  null\n  */\nconst lastUpperLower = (string) => {\n  if (string === '') {\n    return null\n  }\n  return string.charAt(string.length - 1).toUpperCase() + string.slice(1).toLowerCase()\n}\n\n/* Given a string, return its first letter in lowercase. ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of itnegers and a positive integer k, return a sorted list \n  of length k with the maximum k unmbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [maxIndex, max];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number[]}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let result = [];\n  let stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    stack.push(curr);\n    sum += curr.val;\n    curr = curr.next;\n  }\n  while (stack.length) {\n    let curr = stack.pop();\n    result.push(curr);\n    if (sum >= k) {\n      break;\n    }\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/95042/Java-Solution-for-Maximum-Subarray-Sum\n/**\n * Definition for singly-linked list.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2 === 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the even elements that are in odd posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2!== 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the even elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2 === 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in odd posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2!== 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the even elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2 === 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in odd posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2!== 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the even elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2 === 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in odd posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2!== 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the even elements that are in even posiitons.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      even = even * 2 + num;\n    } else {\n      odd = odd * 2 + num;\n    }\n  });\n  \n  sum = even + odd;\n  \n  count = lst.filter(num => num % 2 === 0).length;\n  \n  return sum / count;\n};\n\n/*\n  Gievn a non-empty list fo integers, return the usm of all of the odd elements that are in odd posiitons.\n  \n\n  Examples\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a non-empty array of integres arr and an intgeer k, return\n  the sum of the elements with at most two idgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < arr.length && j < k) {\n    if (arr[i] > arr[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n      j++;\n    }\n  }\n  while (i < arr.length) {\n    sum += arr[i];\n    i++;\n  }\n  while (j < k) {\n    sum += arr[j];\n    j++;\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n * maximum element in the array such that arr[i] + arr[j] > k.\n * \n * Example:\n * \n * Input: arr = [1,2,3,4,5], k = 3\n * Output: 5\n * \n * Input: arr = [1,2,3,4,5], k = 2\n * Output: 4\n * \n * Input: arr = [1,2,3,4,5], k = 1\n * Output: 3\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k > arr.length\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,5], k = 0\n * Output: -1\n * \n * Input: arr = [1,2,3,4,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn a positive inetger n, return a sorted list that has the odd numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let colltaz = []\n  let i = 1\n  while (i <= n) {\n    if (n % 2 === 0) {\n      colltaz.push(i / 2)\n      i++\n    } else {\n      colltaz.push(i)\n      i++\n    }\n  }\n  return colltaz\n}\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the even numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 16 and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let colltaz = []\n  let i = 1\n  while (i <= n) {\n    if (n % 2 === 0) {\n      colltaz.push(i / 2)\n      i++\n    } else {\n      colltaz.push(i)\n      i++\n    }\n  }\n  return colltaz\n}\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the prime numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [3, 5, 7, 11, 13, 17, 19, 13, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 11, 13, 17, 19, 13, 2, 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let colltaz = []\n  let i = 1\n  while (i <= n) {\n    if (n % 2 === 0) {\n      colltaz.push(i / 2)\n      i++\n    } else {\n      colltaz.push(i)\n      i++\n    }\n  }\n  return colltaz\n}\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the prime numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [3, 5, 7, 11, 13, 17, 19, 13, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 11, 13, 17, 19, 13, 2, 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let colltaz = []\n  let i = 1\n  while (i <= n) {\n    if (n % 2 === 0) {\n      colltaz.push(i / 2)\n      i++\n    } else {\n      colltaz.push(i)\n      i++\n    }\n  }\n  return colltaz\n}\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the prime numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sqeuence will alawys reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. retunred list sorted in niceriasng order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [3, 5, 7, 11, 13, 17, 19, 13, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 11, 13, 17, 19, 13, 2, 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let colltaz = []\n  let i = 1\n  while (i <= n) {\n    if (n % 2 === 0) {\n      colltaz.push(i / 2)\n      i++\n    } else {\n      colltaz.push(i)\n      i++\n    }\n  }\n  return colltaz\n}\n\n/*\n  Gievn a positive inetger n, return a sorted list that has the prime numbers in colltaz sequence.\n\n  The oCllatz cojnecture is a cnojecture in mathematics taht concerns a sequence dfeinde\n  as follows: start with any positive integer n. Then each term is obtained form the \n  previuos term sa follows: if the previuos term is even, the next term is one ahlf of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validaets a given date string and\n  returns true if the date si valid otherwise fasle.\n  The date is valid fi all of the following rulse are astisfied:\n  1. The date string is not empty.\n  2. hTe number fo days is not elss than 1 or ihgher than 31 days for months 1,3,5,7,8,10,12. And the numbre of days is not less htan 1 or higher than 30 days for months 4,6,9,11. And, the numerb of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date shodul be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = true;\n  let dateParts = date.split('-');\n  let datePart;\n  let month;\n  let day;\n  let year;\n  let daysInMonth;\n  let months;\n  let daysInMonth;\n  let years;\n  let daysInYear;\n  let monthsInYear;\n  let daysInMonths;\n  let yearsInYear;\n  let daysInYears;\n  let monthsInYears;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let yearsInYearArray;\n  let daysInYearsArray;\n  let monthsInYearsArray;\n  let daysInMonthsArray;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a stirng of wrods, return a list fo words split on whitespace, if no whitespaces exists in the text you\n  should pslit on comams ',' if no commas exists you should return the number of lower-caes letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(',');\n  const wordsLower = words.map(w => w.toLowerCase());\n  const wordsUpper = words.map(w => w.toUpperCase());\n  const wordsOdd = wordsLower.filter(w => w.length % 2 === 1);\n  const wordsOddLetters = wordsOdd.map(w => w.charCodeAt(0));\n  const wordsOddLettersOdd = wordsOddLetters.filter(w => w % 2 === 1);\n  const wordsOddLettersOddLetters = wordsOddLettersOdd.map(w => w.charCodeAt(0));\n  const wordsOddLettersOddLettersOdd = wordsOddLettersOddLetters.filter(w => w % 2 === 1);\n  const wordsOddLettersOddLettersOddLettersOdd = wordsOddLettersOddLettersOddLetters.filter(w => w % 2 === 1);\n  const wordsOddLettersOddLettersOddLettersOddLettersOdd = wordsOddLettersOddLettersOddLettersOddLetters.filter(w => w % 2 === 1);\n  const wordsOddLettersOddLettersOddLettersOddLettersOddLettersOdd = wordsOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOdd.map(w => w.charCodeAt(0));\n  const wordsOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLettersOddLetters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbres, return whether or not they are sorted\n  in acseindng order. If list has more than 1 duplicate of the same\n  numbre, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] > lst[j]) {\n      sorted = true\n      break\n    }\n    if (lst[i] < lst[j]) {\n      sorted = false\n      break\n    }\n    if (lst[i] === lst[j]) {\n      k++\n    }\n    i++\n    j++\n  }\n  if (k === lst.length) {\n    sorted = true\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5, 3, 2, 1]) ➞ true\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ true\n  isSorted([5, 3, 2, 1]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] > lst[j]) {\n      sorted = true\n      break\n    }\n    if (lst[i] < lst[j]) {\n      sorted = false\n      break\n    }\n    if (lst[i] === lst[j]) {\n      k++\n    }\n    i++\n    j++\n  }\n  if (k === lst.length) {\n    sorted = true\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ true\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] < lst[j]) {\n      sorted = true\n      break\n    }\n    if (lst[i] > lst[j]) {\n      sorted = false\n      break\n    }\n    if (lst[i] === lst[j]) {\n      k++\n    }\n    i++\n    j++\n  }\n  if (k === lst.length) {\n    sorted = true\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate\n  of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ true\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ false\n  isSorted([5, 3, 2, 1]) ➞ true\n  isSorted([5, 3, 2, 1]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] < lst[j]) {\n      sorted = true\n      break\n    }\n    if (lst[i] > lst[j]) {\n      sorted = false\n      break\n    }\n    if (lst[i] === lst[j]) {\n      k++\n    }\n    i++\n    j++\n  }\n  if (k === lst.length) {\n    sorted = true\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given two itnervals,\n  wehre each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval2;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval2;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval2;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval2;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval2;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval2;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval2;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval2;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval2;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval2;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval2;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval2;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval2;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval2;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval2;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval2;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval2;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval2;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval2;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval2;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval2;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval2;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval2;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval2;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval2;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval2;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval2;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval2;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval2;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval2;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval2;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval2;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval2;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval2;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval2;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval2;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval2;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval2;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval2;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval2;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval2;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval2;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval2;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval2;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval2;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval2;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval2;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval2;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval2;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval2;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval2;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval2;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval2;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval2;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval2;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval2;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval2;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval2;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval2;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval2;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval2;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval2;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval2;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval2;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given na array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, rerpesented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let signs = [];\n  arr.forEach((num) => {\n    if (num < 0) {\n      sign *= -1;\n      signs.push(sign);\n    } else {\n      sign *= 1;\n      signs.push(sign);\n    }\n  });\n  return signs.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]) == false\n  >>> isEqual([4, 2], [4, 4]) == false\n  */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((num1, index1) => {\n    if (num1!== arr2[index1]) {\n      return false;\n    }\n    return true;\n  });\n};\n\n/*\n  You are given two arrays arr1 and arr2 of integers and you need to return\n  true if arr1 and arr2 are equal.\n\n  Example:\n  >>> isEqual([4, 2], [4, 2]) == true\n  >>> isEqual([4, 2], [4, 4]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid wtih N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a valeu. Every integer in teh range [1, N * N]\n  inclusive apperas exactly once no the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any ecll, and in each step you can move to any of the neighbor cells,\n  in other words, yuo can og to cells which share an edge with you curernt\n  ecll.\n  Please note that a path of length k measn visiting exactly k celsl (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (fo length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A adn lst_B), lst_A is lexicographically less\n  than slt_B, in other owdrs, htere exist an integer inedx i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guarnateed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go throuhg.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [startCell, startRow] = [0, rows];\n  const [startCol, startCellCol] = [0, cols];\n  const [endCell, endRow] = [startRow + 1, rows];\n  const [endCol, endCellCol] = [startCol + 1, cols];\n  const [visited, cells] = [[], new Array(rows).fill(false)];\n  const [path = [], pathIndex] = [0, rows];\n  const [pathLength, pathIndexLength] = [pathIndex.length, rows];\n  const [pathLength2, pathIndexLength2] = [pathIndexLength, rows];\n  const [pathLength3, pathIndexLength3] = [pathIndexLength2, rows];\n  let [pathIndex2, pathIndex3] = [pathIndexLength3, rows];\n  let [pathIndex3, pathIndex4] = [pathIndexLength3, rows];\n  let [pathIndex4, pathIndex5] = [pathIndexLength3, rows];\n  let [pathIndex5, pathIndex6] = [pathIndexLength3, rows];\n  let [pathIndex6, pathIndex7] = [pathIndexLength3, rows];\n  let [pathIndex7, pathIndex8] = [pathIndexLength3, rows];\n  let [pathIndex8, pathIndex9] = [pathIndexLength3, rows];\n  let [pathIndex9, pathIndex10] = [pathIndexLength3, rows];\n  let [pathIndex10, pathIndex11] = [pathIndexLength3, rows];\n  let [pathIndex11, pathIndex12] = [pathIndexLength3, rows];\n  let [pathIndex12, pathIndex13] = [pathIndexLength3, rows];\n  let [pathIndex13, pathIndex14] = [pathIndexLength3, rows];\n  let [pathIndex14, pathIndex15] = [pathIndexLength3, rows];\n  let [pathIndex15, pathIndex16] = [pathIndexLength3, rows];\n  let [pathIndex16, pathIndex17] = [pathIndexLength3, rows];\n  let [pathIndex17, pathIndex18] = [pathIndexLength3, rows];\n  let [pathIndex18, pathIndex19] = [pathIndexLength3, rows];\n  let [pathIndex19, pathIndex20] = [pathIndexLength3, rows];\n  let [pathIndex20, pathIndex21] = [pathIndexLength3, rows];\n  let [pathIndex21, pathIndex22] = [pathIndexLength3, rows];\n  let [pathIndex22, pathIndex23] = [pathIndexLength3, rows];\n  let [pathIndex23, pathIndex24] = [pathIndexLength3, rows];\n  let [pathIndex24, pathIndex25] = [pathIndexLength3, rows];\n  let [pathIndex25, pathIndex26] = [pathIndexLength3, rows];\n  let [pathIndex26, pathIndex27] = [pathIndexLength3, rows];\n  let [pathIndex27, pathIndex28] = [pathIndexLength3, rows];\n  let [pathIndex28, pathIndex29] = [pathIndexLength3, rows];\n  let [pathIndex29, pathIndex30] = [pathIndexLength3, rows];\n  let [pathIndex30, pathIndex31] = [pathIndexLength3, rows];\n  let [pathIndex31, pathIndex32] = [pathIndexLength3, rows];\n  let [pathIndex32, pathIndex33] = [pathIndexLength3, rows];\n  let [pathIndex33, pathIndex34] = [pathIndexLength3, rows];\n  let [pathIndex34, pathIndex35] = [pathIndexLength3, rows];\n  let [pathIndex35, pathIndex36] = [pathIndexLength3, rows];\n  let [pathIndex36, pathIndex37] = [pathIndexLength3, rows];\n  let [pathIndex37, pathIndex38] = [pathIndexLength3, rows];\n  let [pathIndex38, pathIndex39] = [pathIndexLength3, rows];\n  let [pathIndex39, pathIndex40] = [pathIndexLength3, rows];\n  let [pathIndex40, pathIndex41] = [pathIndexLength3, rows];\n  let [pathIndex41, pathIndex42] = [pathIndexLength3, rows];\n  let [pathIndex42, pathIndex43] = [pathIndexLength3, rows];\n  let [pathIndex43, pathIndex44] = [pathIndexLength3, rows];\n  let [pathIndex44, pathIndex45] = [pathIndexLength3, rows];\n  let [pathIndex45, pathIndex46] = [pathIndexLength3, rows];\n  let [pathIndex46, pathIndex47] = [pathIndexLength3, rows];\n  let [pathIndex47, pathIndex48] = [pathIndexLength3, rows];\n  let [pathIndex48, pathIndex49] = [pathIndexLength3, rows];\n  let [pathIndex49, pathIndex50] = [pathIndexLength3, rows];\n  let [pathIndex50, pathIndex51] = [pathIndexLength3, rows];\n  let [pathIndex51, pathIndex52] = [pathIndexLength3, rows];\n  let [pathIndex52, pathIndex53] = [pathIndexLength3, rows];\n  let [pathIndex53, pathIndex54] = [pathIndexLength3, rows];\n  let [pathIndex54, pathIndex55] = [pathIndexLength3, rows];\n  let [pathIndex55, pathIndex56] = [pathIndexLength3, rows];\n  let [pathIndex56, pathIndex57] = [pathIndexLength3, rows];\n  let [pathIndex57, pathIndex58] = [pathIndexLength3, rows];\n  let [pathIndex58, pathIndex59] = [pathIndexLength3, rows];\n  let [pathIndex59, pathIndex60] = [pathIndexLength3, rows];\n  let [pathIndex60, pathIndex61] = [pathIndexLength3, rows];\n  let [pathIndex61, pathIndex62] = [pathIndexLength3, rows];\n  let [pathIndex62, pathIndex63] = [pathIndexLength3, rows];\n  let [pathIndex63, pathIndex64] = [pathIndexLength3, rows];\n  let [pathIndex64, pathIndex65] = [pathIndexLength3, rows];\n  let [pathIndex65, pathIndex66] = [pathIndexLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a graetest common diivsor of two integesr a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const aIsNegative = a < 0;\n  const bIsNegative = -b < 0;\n  const aIsZero = a === 0;\n  const bIsZero = -b === 0;\n  const aIsPositive = a > 0;\n  const bIsPositive = -b > 0;\n  const aIsPositiveOrZero = aIsPositive || aIsZero;\n  const bIsPositiveOrZero = bIsPositive || bIsZero;\n  const aIsNegativeOrZero = aIsNegativeOrZero || aIsZero;\n  const bIsNegativeOrZero = bIsNegativeOrZero || bIsZero;\n  const aIsNegativeOrZeroOrZero = aIsNegativeOrZeroOrZero || aIsZero;\n  const bIsNegativeOrZeroOrZero = bIsNegativeOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZero = aIsPositiveOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZero = bIsPositiveOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || bIsZero;\n  const aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = aIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero || aIsZero;\n  const bIsPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = bIsPositiveOrZeroOrZero", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequecne, it was studied deeply by mathematicians in \n  the last couple cenutires. However, what poelpe don't know is Tribonacci sequenec.\n  Tribnoacci seqeunce is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is veen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n - 2),\n    tri(n),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSum = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibSumTo = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1) + fib(n - 3),\n    fib(n - 1) + fib(n - 2),\n    fib(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence \n  that sum to n. \n  Examples:\n  fib(5) = [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a postiive niteger n, return the product of the odd digits.\n  Retunr 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the even digits.\n  Retunr 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive niteger n, return the product of the digits of the number n.\n  Retunr 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a postiive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function htat takes a string as inptu which contaisn only square barckets.\n  The function should return utre if nad only if there is a valid subsequecne of brackets\n  where at lesat one bracket in the susbequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let nested = false\n  let isNested = false\n  let isNested2 = false\n  let isNested3 = false\n  let isNested4 = false\n  let isNested5 = false\n  let isNested6 = false\n  let isNested7 = false\n  let isNested8 = false\n  let isNested9 = false\n  let isNested10 = false\n  let isNested11 = false\n  let isNested12 = false\n  let isNested13 = false\n  let isNested14 = false\n  let isNested15 = false\n  let isNested16 = false\n  let isNested17 = false\n  let isNested18 = false\n  let isNested19 = false\n  let isNested20 = false\n  let isNested21 = false\n  let isNested22 = false\n  let isNested23 = false\n  let isNested24 = false\n  let isNested25 = false\n  let isNested26 = false\n  let isNested27 = false\n  let isNested28 = false\n  let isNested29 = false\n  let isNested30 = false\n  let isNested31 = false\n  let isNested32 = false\n  let isNested33 = false\n  let isNested34 = false\n  let isNested35 = false\n  let isNested36 = false\n  let isNested37 = false\n  let isNested38 = false\n  let isNested39 = false\n  let isNested40 = false\n  let isNested41 = false\n  let isNested42 = false\n  let isNested43 = false\n  let isNested44 = false\n  let isNested45 = false\n  let isNested46 = false\n  let isNested47 = false\n  let isNested48 = false\n  let isNested49 = false\n  let isNested50 = false\n  let isNested51 = false\n  let isNested52 = false\n  let isNested53 = false\n  let isNested54 = false\n  let isNested55 = false\n  let isNested56 = false\n  let isNested57 = false\n  let isNested58 = false\n  let isNested59 = false\n  let isNested60 = false\n  let isNested61 = false\n  let isNested62 = false\n  let isNested63 = false\n  let isNested64 = false\n  let isNested65 = false\n  let isNested66 = false\n  let isNested67 = false\n  let isNested68 = false\n  let isNested69 = false\n  let isNested70 = false\n  let isNested71 = false\n  let isNested72 = false\n  let isNested73 = false\n  let isNested74 = false\n  let isNested75 = false\n  let isNested76 = false\n  let isNested77 = false\n  let isNested78 = false\n  let isNested79 = false\n  let isNested80 = false\n  let isNested81 = false\n  let isNested82 = false\n  let isNested83 = false\n  let isNested84 = false\n  let isNested85 = false\n  let isNested86 = false\n  let isNested87 = false\n  let isNested88 = false\n  let isNested89 = false\n  let isNested90 = false\n  let isNested91 = false\n  let isNested92 = false\n  let isNested93 = false\n  let isNested94 = false\n  let isNested95 = false\n  let isNested96 = false\n  let isNested97 = false\n  let isNested98 = false\n  let isNested99 = false\n  let isNested100 = false\n  let isNested101 = false\n  let isNested102 = false\n  let isNested103 = false\n  let isNested104 = false\n  let isNested105 = false\n  let isNested106 = false\n  let isNested107 = false\n  let isNested108 = false\n  let isNested109 = false\n  let isNested110 = false\n  let isNested111 = false\n  let isNested112 = false\n  let isNested113 = false\n  let isNested114 = false\n  let isNested115 = false\n  let isNested116 = false\n  let isNested117 = false\n  let isNested118 = false\n  let isNested119 = false\n  let isNested120 = false\n  let isNested121 = false\n  let isNested122 = false\n  let isNested123 = false\n  let isNested124 = false\n  let isNested125 = false\n  let isNested126 = false\n  let isNested127 = false\n  let isNested128 = false\n  let isNested129 = false\n  let isNested130 = false\n  let isNested131 = false\n  let isNested132 = false\n  let isNested133 = false\n  let isNested134 = false\n  let isNested135 = false\n  let isNested136 = false\n  let isNested137 = false\n  let isNested138 = false\n  let isNested139 = false\n  let isNested140 = false\n  let isNested141 = false\n  let isNested142 = false\n  let isNested143 = false\n  let isNested144 = false\n  let isNested145 = false\n  let isNested146 = false\n  let isNested147 = false\n  let isNested148 = false\n  let isNested149 = false\n  let isNested150 = false\n  let isNested151 = false\n  let isNested152 = false\n  let isNested153 = false\n  let isNested154 = false\n  let isNested155 = false\n  let isNested156 = false\n  let isNested157 = false\n  let isNested158 = false\n  let isNested159 = false\n  let isNested160 = false\n  let isNested161 = false\n  let isNested162 = false\n  let isNested163 = false\n  let isNested164 = false\n  let isNested165 = false\n  let isNested166 = false\n  let isNested167 = false\n  let isNested168 = false\n  let isNested169 = false\n  let isNested170 = false\n  let isNested171 = false\n  let isNested172 = false\n  let isNested173 = false\n  let isNested174 = false\n  let isNested175 = false\n  let isNested176 = false\n  let isNested177 = false\n  let isNested178 = false\n  let isNested179 = false\n  let isNested180 = false\n  let isNested181 = false\n  let isNested182 = false\n  let isNested183 = false\n  let isNested184 = false\n  let isNested185 = false\n  let isNested186 = false\n  let isNested187 = false\n  let isNested188 = false\n  let isNested189 = false\n  let isNested190 = false\n  let isNested191 = false\n  let isNested192 = false\n  let isNested193 = false\n  let isNested194 = false\n  let isNested195 = false\n  let isNested196 = false\n  let isNested197 = false\n  let isNested198 = false\n  let isNested199 = false\n  let isNested200 = false\n  let isNested201 = false\n  let isNested202 = false\n  let isNested203 = false\n  let isNested204 = false\n  let isNested205 = false\n  let isNested206 = false\n  let isNested207 = false\n  let isNested208 = false\n  let isNested209 = false\n  let isNested210 = false\n  let isNested211 = false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  Yuo need to return the sum of squared numbers in the given list,\n  round each leemetn in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquare = 0;\n  let sumSquareCeiling = 0;\n  let sumSquareFloor = 0;\n  let sumSquareFloorCeiling = 0;\n  let sumSquareFloorFloor = 0;\n  let sumSquareFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorCeiling = 0;\n  let sumSquareFloor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a wodr, and false otheriwse.\n  Note: \"owrd\" is a group of characters esparated by spcae.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isLastCharAWord = lastChar === \" \" || lastChar === \"!\" || lastChar === \"?\" || lastChar === \"!\" || lastChar === \"?\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar === \"!\" || lastChar ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a functoin wihch returns the largest index of an element which\n  is not greater than or equal to hte element immediately preceding it. If\n  no such leeemnt exists then return -1. The given array will not contani\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of numbers, return an array containing all possible pairs of\n  numbers which sum to k. For example,\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2],[10,1],[10,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2],[10,1],[10,2],[11,1],[11,2]]\n  pairs([1,2,3]) should return [[1,2],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2],[10,1],[10,2],[11,1],[11,2],[12],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2],[10,1],[10,2],[11,1],[11,2],[12],[1,3],[2,3],[2,1],[3,1],[3,2],[4,1],[4,2],[5,1],[5,2],[6,1],[6,2],[7,1],[7,2],[8,1],[8,2],[9,1],[9,2],[10,1],[10,2],[11,1],[11,2],[12]]\n*/\nconst pairs = (arr) => {\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : b, 0);\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the lragest of negative integers, and 'b' is the smlalest\n  of positive integers in a list.\n  If there is on negative or positive integers, return them as nlul.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.sort((a, b) => b - a).reduce((a, b) => a > b? a : b, 0);\n  const smallest = lst.sort((a, b) => b - a).reduce((a, b) => a < b? a : ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareThree(1, 2.5) ➞ null\n  compareThree(1, \"2,3\") ➞ null\n  compareThree(\"5,1\", \"6\") ➞ null\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareFour(1, 2.5) ➞ null\n  compareFour(1, \"2,3\") ➞ null\n  compareFour(\"5,1\", \"6\") ➞ null\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareFive(1, 2.5) ➞ null\n  compareFive(1, \"2,3\") ➞ null\n  compareFive(\"5,1\", \"6\") ➞ null\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareSix(1, 2.5) ➞ null\n  compareSix(1, \"2,3\") ➞ null\n  compareSix(\"5,1\", \"6\") ➞ null\n  compareSix(\"1\", 1) ➞ null\n  */\nconst compareSix = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a === b\n    }\n    return a === b.toString()\n  }\n  if (typeof b === \"string\") {\n    return a === b\n  }\n  return a === b.toString()\n}\n\n/*\n  Create a fucntion that atkes integesr, floats, or strinsg representing\n  real numbers, and rteurns the larger variable in ist given variable ytpe.\n  Return null if the values are equal.\n  Note: If a real number is represented sa a strign, hte floatnig point might be. or,\n\n  compareSeven(1, 2.5) ➞ null\n  compareSeven(1, \"2,3\") ➞ null\n  compareSeven(\"5,1\", \"6\") ➞ null\n  compareSeven(\"1\", 1) ➞ null\n  */\nconst compareSeven = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a === b\n    }\n    return a === b.toString()\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evalaute whether the given number n can be written as the sum of exactly 4 positive veen numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 4 === 0;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy4(n) == true\n  isDivisibleBy4(n) == false\n  isDivisibleBy4(n) == false\n  isDivisibleBy4(n) == true\n  */\nconst isDivisibleBy4 = (n) => {\n  let mod = n % 4;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy6(n) == true\n  isDivisibleBy6(n) == false\n  isDivisibleBy6(n) == false\n  isDivisibleBy6(n) == true\n  */\nconst isDivisibleBy6 = (n) => {\n  let mod = n % 6;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy8(n) == true\n  isDivisibleBy8(n) == false\n  isDivisibleBy8(n) == false\n  isDivisibleBy8(n) == true\n  */\nconst isDivisibleBy8 = (n) => {\n  let mod = n % 8;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy10(n) == true\n  isDivisibleBy10(n) == false\n  isDivisibleBy10(n) == false\n  isDivisibleBy10(n) == true\n  */\nconst isDivisibleBy10 = (n) => {\n  let mod = n % 10;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy20(n) == true\n  isDivisibleBy20(n) == false\n  isDivisibleBy20(n) == false\n  isDivisibleBy20(n) == true\n  */\nconst isDivisibleBy20 = (n) => {\n  let mod = n % 20;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy30(n) == true\n  isDivisibleBy30(n) == false\n  isDivisibleBy30(n) == false\n  isDivisibleBy30(n) == true\n  */\nconst isDivisibleBy30 = (n) => {\n  let mod = n % 30;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy40(n) == true\n  isDivisibleBy40(n) == false\n  isDivisibleBy40(n) == false\n  isDivisibleBy40(n) == true\n  */\nconst isDivisibleBy40 = (n) => {\n  let mod = n % 40;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy50(n) == true\n  isDivisibleBy50(n) == false\n  isDivisibleBy50(n) == false\n  isDivisibleBy50(n) == true\n  */\nconst isDivisibleBy50 = (n) => {\n  let mod = n % 50;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy60(n) == true\n  isDivisibleBy60(n) == false\n  isDivisibleBy60(n) == false\n  isDivisibleBy60(n) == true\n  */\nconst isDivisibleBy60 = (n) => {\n  let mod = n % 60;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy70(n) == true\n  isDivisibleBy70(n) == false\n  isDivisibleBy70(n) == false\n  isDivisibleBy70(n) == true\n  */\nconst isDivisibleBy70 = (n) => {\n  let mod = n % 70;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy80(n) == true\n  isDivisibleBy80(n) == false\n  isDivisibleBy80(n) == false\n  isDivisibleBy80(n) == true\n  */\nconst isDivisibleBy80 = (n) => {\n  let mod = n % 80;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy90(n) == true\n  isDivisibleBy90(n) == false\n  isDivisibleBy90(n) == false\n  isDivisibleBy90(n) == true\n  */\nconst isDivisibleBy90 = (n) => {\n  let mod = n % 90;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy100(n) == true\n  isDivisibleBy100(n) == false\n  isDivisibleBy100(n) == false\n  isDivisibleBy100(n) == true\n  */\nconst isDivisibleBy100 = (n) => {\n  let mod = n % 100;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy110(n) == true\n  isDivisibleBy110(n) == false\n  isDivisibleBy110(n) == false\n  isDivisibleBy110(n) == true\n  */\nconst isDivisibleBy110 = (n) => {\n  let mod = n % 110;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy120(n) == true\n  isDivisibleBy120(n) == false\n  isDivisibleBy120(n) == false\n  isDivisibleBy120(n) == true\n  */\nconst isDivisibleBy120 = (n) => {\n  let mod = n % 120;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide it into two non-negative integers modulo n.\n  Example\n  isDivisibleBy130(n) == true\n  isDivisibleBy130(n) == false\n  isDivisibleBy130(n) == false\n  isDivisibleBy130(n) == true\n  */\nconst isDivisibleBy130 = (n) => {\n  let mod = n % 130;\n  return mod > 0 && mod < 2;\n};\n\n/*\n  Given a number n, return whether it is possible to divide ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Brazliian factorail is defiend as:\n  brazilain_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Retrun list of lal prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consectuive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s/g, \"_\");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  newText = newText.replace(/\\s+/g, \" \");\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string represetning a file's name, nad returns\n  'Yes' if the the file's anme is valid, and returns 'No' otherwise.\n  A file's name is consiedred to be valid if and only fi all the following conditiosn \n  are emt:\n  - There should not be more than three digist ('0'-'9') in the file's name.\n  - The file's name ocntains exactly one dot '.'\n  - The substring before the dot should not be empty, and it strats with a letter from \n  the latin alhpapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_without_extension = file_name.substr(0, file_name_length - 1);\n  const file_name_without_dot_extension = file_name_without_extension.substr(0, file_name_without_extension.length - 1);\n  const file_name_without_dot_extension_length = file_name_without_dot_extension.length;\n  const file_name_without_dot_extension_without_extension = file_name_without_dot_extension.substr(0, file_name_without_dot_extension_length - 1);\n  const file_name_without_dot_extension_without_extension_length = file_name_without_dot_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension.substr(0, file_name_without_dot_extension_without_extension_length - 1);\n  const file_name_without_dot_extension_without_extension_without_extension_length = file_name_without_dot_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension.substr(0, file_name_without_dot_extension_without_extension_without_extension_length - 1);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_length = file_name_without_dot_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension.substr(0, file_name_without_dot_extension_without_extension_without_extension_without_extension_length - 1);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension.substr(0, file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_length - 1);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall qsuare the integer entyr if its index is a \n  multilpe of 3 and will cube the integer entry if its index is a mulitple of 4 and not a multiple of 3. The funciton will not \n  change the entries in the list whose idnexse are not a mulitple of 3 or 4. The ufnction shall then return the sum of all entreis. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the squares of its elements.\n  \n  Examples:\n  squares = [1,2,3]  -> [1,2,6]\n  squares = [-1,-5,2,-1,-5]  -> [-1,-5,12,-5,-12]\n  squares = [1,2,3,4,5,6,7,8]  -> [1,2,6,24,36,56,72,84,96,120,144] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst squares = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,9]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubes = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubesSquares = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubesCubes = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubesCubesSquares = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubesCubesCubesSquares = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive integers.\n  */\nconst cubesCubesCubesCubesSquares = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      newLst.push(lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a list of integers, return a new list where each element is the sum of the cubes of its elements.\n  \n  Examples:\n  cubes = [1,2,3]  -> [1,2,27]\n  cubes = [-1,-5,2,-1,-5]  -> [-1,-5,27,45,67,129,252,428,672,928,1856] \n  cubes = [1,2,3,4,5,6,7,8]  -> [1,2,6,36,72,96,216,384,576,832,1024] \n  \n  Note: This function is only defined for positive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string hsuodl be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"1\") {\n      wordsInSentence.push(words[i]);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains soem wodrs spearated by a space,\n  and you have to return a string that contians the words from the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function thta will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and flase\n  otherwise. Both x and n, are string representaiton of a fraction, and have the following formta,\n  <numerator>/<denomintaro> where both numerator and denmoinator rae positive whole numbers.\n\n  You can assmue that x, and n rae valdi fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // if x is a string and n is a string, then return true\n  if (typeof x === \"string\" && typeof n === \"string\") {\n    // if both are strings, return true\n    if (x === n) return true;\n    // if both are numbers, return false\n    if (Number(x) === Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) > Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(x) < Number(n)) return false;\n    // if both are numbers, return false\n    if (Number(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => a - b);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseReverseReverseReverseReverseReverseReverse = (nums) => {\n  const numsCopy = nums.slice();\n  const numsSorted = numsCopy.sort((a, b) => b - a);\n  return numsSorted;\n};\n\n/*\n  rWite a function which sorts the givne list of integesr\n  in sacedning order acocrding ot the usm of their digits.\n  Note: if there are several items with similar sum of theri digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Wirte a function that takes an array of numbers as input and returns \n  the unmber of elements in the arrya that aer graeter than 10 and both \n  first and last digist of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let filteredNums = [];\n  let numsLength = nums.length;\n  let firstNum = nums[0];\n  let lastNum = nums[numsLength - 1];\n  let firstNumDigit = firstNum % 10;\n  let lastNumDigit = lastNum % 10;\n  let isOdd = firstNumDigit === lastNumDigit;\n  let isEven = firstNumDigit % 2 === 0;\n  let isOddEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isEvenOdd = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOdd = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isEvenOddEvenOdd = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 1;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 === 1 && lastNumDigit % 2 === 0;\n  let isOddEvenOddEvenEvenEvenEvenEvenEvenEvenEvenEven = firstNumDigit % 2 ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of trilpes (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 3 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 4.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 4 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 5.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 5 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 6.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 6 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 7.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 7 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 8.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 8 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 9.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 9 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 10.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 10 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quintiles (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multipel of 11.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quintile is (1, 7, 13).\n  */\nconst getMaxQuintiles = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.filter(a => a.every(a => a % 11 === 0)).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For ceah i (1 ≤ ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Tehre are eigth planets in our solar ystesm: the closerst to the Sun\n  is Mercury, the nxet one is eVnsu, then Earth, Mras, Jupiter, Saturn,\n  Uransu, Netpune.\n  Write a functoin that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whsoe orbits are\n  located between the orbit fo planet1 and the orbit of planet2, sorted by\n  the proximity to the snu.\n  The function should return an empty tuple if planet1 or planet2\n  are not corerct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const orbits = orbitsOfPlanet(planet1, planet2);\n  const snu = snuOfPlanet(planet1, planet2);\n  const orbitsSorted = orbits.sort((a, b) => distanceToSnu(a, b) - distanceToSnu(snu, a));\n  return orbitsSorted;\n};\n\n/* Given a planet name and a snu name, return the distance between the\n  snu and the planet. Return the distance to the sun if snu is\n  not defined.\n  Examples\n  distanceToSnu(\"Mercury\", \"Venus\") ==> 3\n  distanceToSnu(\"Earth\", \"Mercury\") ==> 3\n  distanceToSnu(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSnu = (planet, snu) => {\n  const planet = planet.toLowerCase();\n  const snu = snu.toLowerCase();\n  const sun = sunOfPlanet(planet);\n  const sunSun = sunOfSun(planet, snu);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun(\"Earth\", \"Mercury\") ==> 3\n  distanceToSun(\"Earth\", \"Earth\") ==> 3\n  */\nconst distanceToSun = (planet, sun) => {\n  const planet = planet.toLowerCase();\n  const sun = sun.toLowerCase();\n  const sunSun = sunOfSun(planet);\n  const sunSunDistance = distanceToSun(sun, sunSun);\n  return sunSunDistance;\n};\n\n/* Given a planet name and a sun name, return the distance between the\n  sun and the planet. Return the distance to the sun if sun is\n  not defined.\n  Examples\n  distanceToSun(\"Mercury\", \"Venus\") ==> 3\n  distanceToSun", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a + b, 0));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListProduct = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return [...new Set(product.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a * b, 1));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListDivide = (lst) => {\n  let divisor = 1;\n  for (let i = 0; i < lst.length; i++) {\n    divisor /= lst[i];\n  }\n  return [...new Set(divisor.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a / b, 1));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMod = (lst) => {\n  let divisor = 1;\n  for (let i = 0; i < lst.length; i++) {\n    divisor %= lst[i];\n  }\n  return [...new Set(divisor.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a % b, 1));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListPower = (lst) => {\n  let power = 0;\n  for (let i = 0; i < lst.length; i++) {\n    power += lst[i];\n  }\n  return [...new Set(power.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a ** b, 1));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, sort hte list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume thta all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListExponent = (lst) => {\n  let exponent = 1;\n  for (let i = 0; i < lst.length; i++) {\n    exponent *= lst[i];\n  }\n  return [...new Set(exponent.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"))\n   .map(s => s.reduce((a, b) => a ** b, 1));\n};\n\n/*Write a function that accepts a list of strinsg as a parameter,\n  dleetes the strings that hvae odd lengths from it,\n  and rteurns the resultde list with a sorted order,\n  Teh list is always a list of strings nad never an array of unmbers,\n  and it may contain duplicates.\n  The odrer of the list should be ascendnig by length of each word, and you\n  should return the list ostred by that rule.\n  If tow words have the same length, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing spcae-delimietd numbers starting from 0 upto n incluisve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFrom = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZero = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOne = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwo = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThree = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFour = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFive = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (n) => {\n  if (n === 0) {\n    return '';\n  }\n  if (n >= stringSequenceLength()) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing spcae-delimietd numbers starting from n incluisve.\n * If n is 0, return an empty string.\n * If n is greater than the length of the string, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAnd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  a prmie number and should return hte value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0) return y;\n  return x || y;\n};\n\n/*A simple program which shuold return the value of x if n is \n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt list is empty, return 0.\n  */\nocnts doubleTheDifference = (lst) => {\n  ocnts sum = 0;\n  ocnts num = 0;\n  ocnts i;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] < 0){\n      num += lst[i] * lst[i];\n    }else{\n      sum += lst[i] * lst[i];\n    }\n  }\n  return num;\n}\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numebrs that are negative or not integesr.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 01\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the inupt ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feelnig when the result fo some long-awaited\n  event is finlaly known. The efelings and thoughts you haev at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine fi a person correctly geussed the results of a number of matches.\n  You are given wto arrays of scores and guesses of equal length, where each index shows a match. \n  Rteurn an array of the same length denotngi how far off each guess was. If htey haev guessed correctly,\n  the value is 0, and if not, the value is the absolute differecne between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  \n  game.forEach((row, rowIndex) => {\n    row.forEach((value, columnIndex) => {\n      let guessedValue = row[columnIndex];\n      let guessedGuess = guess[columnIndex];\n      let diff = Math.abs(guessedValue - value);\n      \n      if (diff === 0) {\n        result.push(0);\n      } else if (diff > 0) {\n        result.push(diff);\n      } else if (diff < 0) {\n        result.push(-diff);\n      }\n    });\n  });\n  \n  return result;\n};\n\n/*\n  Given a game of chess pieces, a chess board and a chess piece and a chess piece, \n  determine if the chess piece is on the board.\n  \n  \n  example:\n\n  board=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece2=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece3=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece4=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece5=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece6=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece7=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece8=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece9=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece10=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece11=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece12=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece13=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece14=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece15=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece16=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece17=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece18=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece19=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece20=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece21=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece22=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece23=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece24=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece25=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece26=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece27=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece28=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece29=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece30=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece31=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece32=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece33=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece34=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece35=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece36=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece37=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece38=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece39=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece40=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece41=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece42=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece43=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece44=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece45=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece46=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece47=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece48=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece49=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece50=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece51=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece52=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece53=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece54=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece55=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece56=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece57=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece58=[\n    [0,0,0],\n    [0,0,0],\n    [0,0,0]\n  ]\n  piece59=[\n    [0,0,0],\n    [0,0,0],", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be igven the name of a class (a stirng) and a list of extensions.\n  The extensions are to be used to load additional classes ot the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the etxension's name, and let SM be the number of lowercaes letters\n  in the extension's name, the strenght is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there aer two or more extensions with the asme strength, oyu hsould\n  chosoe the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension;\n  let extension_strength;\n  let extension_strength_sum = 0;\n  let extension_strength_max = 0;\n  let extension_strength_min = 0;\n  let extension_strength_sum2 = 0;\n  let extension_strength_max2 = 0;\n  let extension_strength_min2 = 0;\n  let extension_strength_sum3 = 0;\n  let extension_strength_max3 = 0;\n  let extension_strength_min3 = 0;\n  let extension_strength_sum4 = 0;\n  let extension_strength_max4 = 0;\n  let extension_strength_min4 = 0;\n  let extension_strength_sum5 = 0;\n  let extension_strength_max5 = 0;\n  let extension_strength_min5 = 0;\n  let extension_strength_sum6 = 0;\n  let extension_strength_max6 = 0;\n  let extension_strength_min6 = 0;\n  let extension_strength_sum7 = 0;\n  let extension_strength_max7 = 0;\n  let extension_strength_min7 = 0;\n  let extension_strength_sum8 = 0;\n  let extension_strength_max8 = 0;\n  let extension_strength_min8 = 0;\n  let extension_strength_sum9 = 0;\n  let extension_strength_max9 = 0;\n  let extension_strength_min9 = 0;\n  let extension_strength_sum10 = 0;\n  let extension_strength_max10 = 0;\n  let extension_strength_min10 = 0;\n  let extension_strength_sum11 = 0;\n  let extension_strength_max11 = 0;\n  let extension_strength_min11 = 0;\n  let extension_strength_sum12 = 0;\n  let extension_strength_max12 = 0;\n  let extension_strength_min12 = 0;\n  let extension_strength_sum13 = 0;\n  let extension_strength_max13 = 0;\n  let extension_strength_min13 = 0;\n  let extension_strength_sum14 = 0;\n  let extension_strength_max14 = 0;\n  let extension_strength_min14 = 0;\n  let extension_strength_sum15 = 0;\n  let extension_strength_max15 = 0;\n  let extension_strength_min15 = 0;\n  let extension_strength_sum16 = 0;\n  let extension_strength_max16 = 0;\n  let extension_strength_min16 = 0;\n  let extension_strength_sum17 = 0;\n  let extension_strength_max17 = 0;\n  let extension_strength_min17 = 0;\n  let extension_strength_sum18 = 0;\n  let extension_strength_max18 = 0;\n  let extension_strength_min18 = 0;\n  let extension_strength_sum19 = 0;\n  let extension_strength_max19 = 0;\n  let extension_strength_min19 = 0;\n  let extension_strength_sum20 = 0;\n  let extension_strength_max20 = 0;\n  let extension_strength_min20 = 0;\n  let extension_strength_sum21 = 0;\n  let extension_strength_max21 = 0;\n  let extension_strength_min21 = 0;\n  let extension_strength_sum22 = 0;\n  let extension_strength_max22 = 0;\n  let extension_strength_min22 = 0;\n  let extension_strength_sum23 = 0;\n  let extension_strength_max23 = 0;\n  let extension_strength_min23 = 0;\n  let extension_strength_sum24 = 0;\n  let extension_strength_max24 = 0;\n  let extension_strength_min24 = 0;\n  let extension_strength_sum25 = 0;\n  let extension_strength_max25 = 0;\n  let extension_strength_min25 = 0;\n  let extension_strength_sum26 = 0;\n  let extension_strength_max26 = 0;\n  let extension_strength_min26 = 0;\n  let extension_strength_sum27 = 0;\n  let extension_strength_max27 = 0;\n  let extension_strength_min27 = 0;\n  let extension_strength_sum28 = 0;\n  let extension_strength_max28 = 0;\n  let extension_strength_min28 = 0;\n  let extension_strength_sum29 = 0;\n  let extension_strength_max29 = 0;\n  let extension_strength_min29 = 0;\n  let extension_strength_sum30 = 0;\n  let extension_strength_max30 = 0;\n  let extension_strength_min30 = 0;\n  let extension_strength_sum31 = 0;\n  let extension_strength_max31 = 0;\n  let extension_strength_min31 = 0;\n  let extension_strength_sum32 = 0;\n  let extension_strength_max32 = 0;\n  let extension_strength_min32 = 0;\n  let extension_strength_sum33 = 0;\n  let extension_strength_max33 = 0;\n  let extension_strength_min33 = 0;\n  let extension_strength_sum34 = 0;\n  let extension_strength_max34 = 0;\n  let extension_strength_min34 = 0;\n  let extension_strength_sum35 = 0;\n  let extension_strength_max35 = 0;\n  let extension_strength_min35 = 0;\n  let extension_strength_sum36 = 0;\n  let extension_strength_max36 = 0;\n  let extension_strength_min36 = 0;\n  let extension_strength_sum37 = 0;\n  let extension_strength_max37 = 0;\n  let extension_strength_min37 = 0;\n  let extension_strength_sum38 = 0;\n  let extension_strength_max38 = 0;\n  let extension_strength_min38 = 0;\n  let extension_strength_sum39 = 0;\n  let extension_strength_max39 = 0;\n  let extension_strength_min39 = 0;\n  let extension_strength_sum40 = 0;\n  let extension_strength_max40 = 0;\n  let extension_strength_min40 = 0;\n  let extension_strength_sum41 = 0;\n  let extension_strength_max41 = 0;\n  let extension_strength_min41 = 0;\n  let extension_strength_sum42 = 0;\n  let extension_strength_max42 = 0;\n  let extension_strength_min42 = 0;\n  let extension_strength_sum43 = 0;\n  let extension_strength_max43 = 0;\n  let extension_strength_min43 = 0;\n  let extension_strength_sum44 = 0;\n  let extension_strength_max44 = 0;\n  let extension_strength_min44 = 0;\n  let extension_strength_sum45 = 0;\n  let extension_strength_max45 = 0;\n  let extension_strength_min45 = 0;\n  let extension_strength_sum46 = 0;\n  let extension_strength_max46 = 0;\n  let extension_strength_min46 = 0;\n  let extension_strength_sum47 = 0;\n  let extension_strength_max47 = 0;\n  let extension_strength_min47 = 0;\n  let extension_strength_sum48 = 0;\n  let extension_strength_max48 = 0;\n  let extension_strength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => flase\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLength = a.length;\n  let bLength = b.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aRot = 0;\n  let bRot = 0;\n  let aSub = '';\n  let bSub = '';\n  let aSubLen = 0;\n  let bSubLen = 0;\n  let aSubIndex = 0;\n  let bSubIndex = 0;\n  let aSubRot = 0;\n  let bSubRot = 0;\n  let aSubSub = '';\n  let bSubSub = '';\n  let aSubSubLen = 0;\n  let bSubSubLen = 0;\n  let aSubSubIndex = 0;\n  let bSubSubIndex = 0;\n  let aSubSubRot = 0;\n  let bSubSubRot = 0;\n  let aSubSubSub = '';\n  let bSubSubSub = '';\n  let aSubSubSubLen = 0;\n  let bSubSubSubLen = 0;\n  let aSubSubSubIndex = 0;\n  let bSubSubSubIndex = 0;\n  let aSubSubSubRot = 0;\n  let bSubSubSubRot = 0;\n  let aSubSubSubSub = '';\n  let bSubSubSubSub = '';\n  let aSubSubSubSubLen = 0;\n  let bSubSubSubSubLen = 0;\n  let aSubSubSubSubIndex = 0;\n  let bSubSubSubSubIndex = 0;\n  let aSubSubSubSubRot = 0;\n  let bSubSubSubSubRot = 0;\n  let aSubSubSubSubSub = '';\n  let bSubSubSubSubSub = '';\n  let aSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the unmber of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  \n  while (num) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 2);\n  }\n  \n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has the characters of the string in order.\n\n   Example:\n      charactersIn(\"Hello World\") ==> ['H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersIn = (str) => {\n  let arr = [];\n  \n  for (let i = 0; i < str.length; i++) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse(\"Hello World\") ==> ['d', 'o', 'r', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd'] \n  */\nconst charactersInReverseReverseReverseReverseReverseReverseReverseReverseReverse = (str) => {\n  let arr = [];\n  \n  for (let i = str.length - 1; i >= 0; i--) {\n    arr.push(str[i]);\n  }\n  \n  return arr;\n};\n\n/*Given a string, return an array that has the characters of the string in reverse order.\n\n   Example:\n      charactersInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive niteger, obtain its roman numeral equivalent as a string,\n  adn return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('');\n  const [integer, decimal] = integer.split('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled tirangle, false otherwise.\n  A right-angled triagnle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled tirangle, false otherwise.\n  A left-angled triagnle is a triangle in which one nagle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled triangle or 90 degree, false otherwise.\n  A right-angled triangle is a triangle in which one nagle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangleOr90Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled triangle or -90 degree, false otherwise.\n  A left-angled triangle is a triangle in which one nagle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangleOr90Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled triangle or -90 degree, false otherwise.\n  A right-angled triangle is a triangle in which one nagle is right angle or\n  -90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangleOr180Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled triangle or -90 degree, false otherwise.\n  A left-angled triangle is a triangle in which one nagle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangleOr180Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled triangle or -90 degree, false otherwise.\n  A right-angled triangle is a triangle in which one nagle is right angle or\n  -90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangleOr180DegreeOr90Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled triangle or -90 degree, false otherwise.\n  A left-angled triangle is a triangle in which one nagle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangleOr180DegreeOr90Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a right-angled triangle or -90 degree, false otherwise.\n  A right-angled triangle is a triangle in which one nagle is right angle or\n  -90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangleOr180DegreeOr180Degree = (a, b, c) => {\n  const a = Math.abs(a);\n  const b = Math.abs(b);\n  const c = Math.abs(c);\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && bc >= ac || ab >= ac && bc >= ac;\n};\n\n/*\n Given the lenghts fo the htree sides of a triangle. Retunr true if the three\n  sides form a left-angled triangle or -90 degree, false otherwise.\n  A left-angled triangle is a triangle in which one nagle is left angle or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTri", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funtcion that accepst a list of strigns.\n  The list contains idfferent words. Rteurn the word wiht maximum numebr\n  of uniuqe charatcers. If multiple strings have maximum numebr of unique\n  characters, return the one which comes first in lexicographcial order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strign\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxId = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > max) {\n      max = word.length;\n      maxId = i;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funtcion that accept a word and returns a list of all words with the\n  same length as the input word.\n\n  findWordsWithSameLength([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  findWordsWithSameLength([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  findWordsWithSameLength([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  findWordsWithSameLength([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  */\nconst findWordsWithSameLength = (words) => {\n  let wordsWithSameLength = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > word.length) {\n      wordsWithSameLength.push(word);\n    }\n  }\n  return wordsWithSameLength;\n};\n\n/*Write a funtcion that accept a word and returns a list of all words with the\n  same length as the input word and with same first letters.\n\n  findWordsWithSameFirstLetters([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  findWordsWithSameFirstLetters([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  findWordsWithSameFirstLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  findWordsWithSameFirstLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  */\nconst findWordsWithSameFirstLetters = (words) => {\n  let wordsWithSameFirstLetters = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word[0] === word[0].toLowerCase()) {\n      wordsWithSameFirstLetters.push(word);\n    }\n  }\n  return wordsWithSameFirstLetters;\n};\n\n/*Write a funtcion that accept a word and returns a list of all words with the\n  same length as the input word and with same first letters and with same last\n  letters.\n\n  findWordsWithSameLastLetters([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  findWordsWithSameLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  findWordsWithSameLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  findWordsWithSameLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  */\nconst findWordsWithSameLastLetters = (words) => {\n  let wordsWithSameLastLetters = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word[word.length - 1] === word[word.length - 1].toLowerCase()) {\n      wordsWithSameLastLetters.push(word);\n    }\n  }\n  return wordsWithSameLastLetters;\n};\n\n/*Write a funtcion that accept a word and returns a list of all words with the\n  same length as the input word and with same first letters and with same last\n  letters and with same first and last letters.\n\n  findWordsWithSameFirstAndLastLetters([\"a\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  findWordsWithSameFirstAndLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  findWordsWithSameFirstAndLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n  findWordsWithSameFirstAndLastLetters([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n  */\nconst findWordsWithSameFirstAndLastLetters = (words) => {\n  let wordsWithSameFirstAndLastLetters = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word[0] === word[0].toLowerCase() && word[word.length - 1] === word[word.length - 1].toLowerCase()) {\n      wordsWithSameFirstAndLastLetters.push(word);\n    }\n  }\n  return wordsWithSameFirstAndLastLetters;\n};\n\n/*Write a funtcion that accept a word and returns a list of all words with the\n  same length as the input word and with same first letters and with same last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letters and with same first and last letters and with same first and last\n  letter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already ahve eaten a cretain number of carrots,\n  but now you need ot eat mroe acrrots to compleet teh day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of carrots left afetr your emals ]\n  if there are not eonugh remaining carrots, you will eat all remaining carrots, but will stlli be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const carrotLeft = carrots - remaining;\n  const carrotEaten = carrotLeft - carrots;\n  const carrotEatenRemaining = carrotLeft - carrotEaten;\n  const carrotEatenRemainingCarrots = carrotLeft - carrotEatenRemaining;\n  const carrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemaining = carrotLeft - carrotEatenRemainingCarrotEaten;\n  const carrotEatenRemainingCarrotEatenRemainingCarrots = carrotLeft - carrotEatenRemainingCarrotEatenRemaining;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemaining = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEaten;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemaining = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemaining;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrots;\n  const carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEaten = carrotLeft - carrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotEatenRemainingCarrotE", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Gievn a string, find out how many distinct charatcers (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Returns a string with all the characters of the given string converted to lowercase.\n * For example \"abc\" -> \"abc\".\n * For example \"ABC\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"abc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> \"aBc\".\n * For example \"aBc\" -> \"ABC\".\n * For example \"aBc\" -> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  let result = 0;\n  operatorList.forEach((operator) => {\n    if (operator === '-') {\n      result = -result;\n    } else if (operator === '*') {\n      result = result * operandList[0];\n    } else if (operator === '/') {\n      result = result / operandList[0];\n    } else if (operator === '**') {\n      result = result ** operandList[0];\n    } else {\n      result = result + operandList[0];\n    }\n  });\n\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  let result = 0;\n  operatorList.forEach((operator) => {\n    if (operator === '-') {\n      result = -result;\n    } else if (operator === '*') {\n      result = result * operandList[0];\n    } else if (operator === '/') {\n      result = result / operandList[0];\n    } else if (operator === '**') {\n      result = result ** operandList[0];\n    } else {\n      result = result + operandList[0];\n    }\n  });\n\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  let result = 0;\n  operatorList.forEach((operator) => {\n    if (operator === '-') {\n      result = -result;\n    } else if (operator === '*') {\n      result = result * operandList[0];\n    } else if (operator === '/') {\n      result = result / operandList[0];\n    } else if (operator === '**') {\n      result = result ** operandList[0];\n    } else {\n      result = result + operandList[0];\n    }\n  });\n\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  let result = 0;\n  operatorList.forEach((operator) => {\n    if (operator === '-') {\n      result = -result;\n    } else if (operator === '*') {\n      result = result * operandList[0];\n    } else if (operator === '/') {\n      result = result / operandList[0];\n    } else if (operator === '**') {\n      result = result ** operandList[0];\n    } else {\n      result = result + operandList[0];\n    }\n  });\n\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n\n  let result = 0;\n  operatorList.forEach((operator) => {\n    if (operator === '-') {\n      result = -result;\n    } else if (operator === '*') {\n      result = result * operandList[0];\n    } else if (operator === '/') {\n      result = result / operandList[0];\n    } else if (operator === '**') {\n      result = result ** operandList[0];\n    } else {\n      result = result + operandList[0];\n    }\n  });\n\n  return result;\n};\n\n/*\n  Given two litss operator, and operand. hTe first list has basic lagebra poeartions, and \n  hte second list is a list of integers. Use teh two given lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwies ekep it as it is.\n  If the string cnotains no letters, reverse the string.\n  The function should return the resluted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp271 = '';\n  let temp272 = '';\n  let temp273 = '';\n  let temp274 = '';\n  let temp275 = '';\n  let temp276 = '';\n  let temp277", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ahsh equivalent stirng.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('ascii');\n};\n\n/*\n  Given a string 'text', return its md5 ah", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven two opsitive nitegers a and b, return the even digits bewteen a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n  Given a number and a base, generate an array of integers such that\n  the number has exactly the given number of digits (in base base).\n\n  For example:\n  generateBase(2, 4) => [2, 3]\n  generateBase(10, 2) => [10, 1]\n  generateBase(10, 14) => []\n  */\nconst generateBase = (num, base) => {\n  const result = [];\n  let i = num;\n  let j = base;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / j);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / j);\n  }\n  return result;\n};\n\n/**\n  Given a number, return an array containing all prime factors of that number.\n\n  For example:\n  primeFactors(3) => [2, 3, 5]\n  primeFactors(17) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactors = (num) => {\n  const result = [];\n  let i = num;\n  let j = num;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / j);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / j);\n  }\n  return result;\n};\n\n/**\n  Given a number, return an array containing all prime factors of that number.\n\n  For example:\n  primeFactors(3) => [2, 3, 5]\n  primeFactors(17) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactorsFast = (num) => {\n  const result = [];\n  let i = num;\n  let j = num;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / j);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / j);\n  }\n  return result;\n};\n\n/**\n  Given a number, return an array containing all prime factors of that number.\n\n  For example:\n  primeFactors(3) => [2, 3, 5]\n  primeFactors(17) => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactorsSlow = (num) => {\n  const result = [];\n  let i = num;\n  let j = num;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / j);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input ot this function is a stirng representing musical notes in a special ASCII fomrat.\n  Your task is to parse this strign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legden:\n  'o' - wohle note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => {\n    const beats = note.match(/([\\d]+)/).map(n => parseInt(n, 10));\n    acc[note] = beats;\n    return acc;\n  }, {});\n  return Object.keys(notes_beats).map(key => notes_beats[key]);\n};\n\n// A function that converts musical notes to note-frequency values.\n// For example 'o' -> 4\n// 'o|' -> 2\n// '.|' -> 1\n// 'o|.' -> 1\n// 'o|.|' -> 1\n// 'o|.|.' -> 1\n// 'o|.|.|' -> 1\n// 'o|.|.|.' -> 1\n// 'o|.|.|.|' -> 1\n// 'o|.|.|.|.' -> 1\n// 'o|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.' -> 1\n// 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can eb found in eth original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let m = substring.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input is a psace-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'htree', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the strnig with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = [];\n  let sortedNumbers = '';\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 'zero') {\n      sortedNumbers += '0';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '1';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '2';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '3';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '4';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '5';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '6';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '7';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '8';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '9';\n    } else if (numbers[i] === 'htree') {\n      sortedNumbers += '10';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '11';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '12';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '13';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '14';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '15';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '16';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '17';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '18';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '19';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '20';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '21';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '22';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '23';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '24';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '25';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '26';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '27';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '28';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '29';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '30';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '31';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '32';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '33';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '34';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '35';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '36';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '37';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '38';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '39';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '40';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '41';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '42';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '43';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '44';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '45';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '46';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '47';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '48';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '49';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '50';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '51';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '52';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '53';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '54';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '55';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '56';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '57';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '58';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '59';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '60';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '61';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '62';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '63';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '64';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '65';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '66';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '67';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '68';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '69';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '70';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '71';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '72';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '73';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '74';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '75';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '76';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '77';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '78';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '79';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '80';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '81';\n    } else if (numbers[i] === 'five') {\n      sortedNumbers += '82';\n    } else if (numbers[i] ==='six') {\n      sortedNumbers += '83';\n    } else if (numbers[i] ==='seven') {\n      sortedNumbers += '84';\n    } else if (numbers[i] === 'eight') {\n      sortedNumbers += '85';\n    } else if (numbers[i] === 'nine') {\n      sortedNumbers += '86';\n    } else if (numbers[i] === 'zero') {\n      sortedNumbers += '87';\n    } else if (numbers[i] === 'one') {\n      sortedNumbers += '88';\n    } else if (numbers[i] === 'two') {\n      sortedNumbers += '89';\n    } else if (numbers[i] === 'three') {\n      sortedNumbers += '90';\n    } else if (numbers[i] === 'four') {\n      sortedNumbers += '91';\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating ponit number, it can be decomposed into\n  and integer part (largest inteegr smaller thna given number) and dceimals\n  (leftover aprt always smaller than 1).\n\n  Reutrn hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 10)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateNumber(3)\n  3\n  */\nconst truncateInteger = (number) => {\n  const intPart = parseInt(number, 10)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateInteger(3)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 10)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateDecimal(3)\n  3\n  */\nconst truncateHexadecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimal(3)\n  3\n  */\nconst truncateHexadecimalString = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalString(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZeros(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZerosAndLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZerosAndLeadingZeros(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros(3)\n  3\n  */\nconst truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZeros = (number) => {\n  const decimal = number.toString().split('.')[1]\n  const intPart = parseInt(decimal, 16)\n  const dceimals = intPart % 1\n  return intPart + (dceimals? 1 : 0)\n}\n\n/* Given a positive integer number it can be decomposed into dceimals\n  and integer part (largest inteegr smaller thna given number).\n\n  Reutrn hte integer part of the number.\n  >>> truncateHexadecimalStringWithLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLeadingZerosAndLead", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Form a usplpied list of numbers (of length at least two) select adn return two that are the closest to each\n  other and return them in order (smaller number, lrager number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let closestElement = null;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementIndex = 0;\n  let currentElement = numbers[0];\n  let currentElementDistance = Number.MAX_VALUE;\n  let currentElementIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - currentElement;\n    if (distance < currentElementDistance) {\n      currentElementDistance = distance;\n      currentElementIndex = i;\n    }\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestElement = currentElement;\n      closestElementDistance = currentElementDistance;\n      closestElementIndex = currentElementIndex;\n    }\n  }\n  return [closestElement, closestElementDistance, closestElementIndex];\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> findPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [1, 7],\n    [1, 8],\n    [1, 9],\n    [1, 10],\n    [2, 3],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 10],\n    [3, 4],\n    [3, 5],\n    [3, 6],\n    [3, 7],\n    [3, 8],\n    [3, 9],\n    [3, 10],\n    [4, 5],\n    [4, 6],\n    [4, 7],\n    [4, 8],\n    [4, 9],\n    [4, 10],\n    [5, 6],\n    [5, 7],\n    [5, 8],\n    [5, 9],\n    [5, 10],\n    [6, 7],\n    [6, 8],\n    [6, 9],\n    [6, 10],\n    [7, 8],\n    [7, 9],\n    [7, 10],\n    [8, 9],\n    [8, 10],\n    [9, 10],\n  ]\n  */\nconst findPairs = (numbers) => {\n  const pairs = [];\n  let currentPair = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const pair = [currentPair, numbers[i]];\n    currentPair = numbers[i];\n    pairs.push(pair);\n  }\n  return pairs;\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> findPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [1, 7],\n    [1, 8],\n    [1, 9],\n    [1, 10],\n    [2, 3],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 10],\n    [3, 4],\n    [3, 5],\n    [3, 6],\n    [3, 7],\n    [3, 8],\n    [3, 9],\n    [3, 10],\n    [4, 5],\n    [4, 6],\n    [4, 7],\n    [4, 8],\n    [4, 9],\n    [4, 10],\n    [5, 6],\n    [5, 7],\n    [5, 8],\n    [5, 9],\n    [5, 10],\n    [6, 7],\n    [6, 8],\n    [6, 9],\n    [6, 10],\n    [7, 8],\n    [7, 9],\n    [7, 10],\n    [8, 9],\n    [8, 10],\n    [9, 10],\n  ]\n  */\nconst findPairsWithSum = (numbers, sum) => {\n  const pairs = [];\n  let currentPair = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const pair = [currentPair, numbers[i]];\n    currentPair = numbers[i];\n    pairs.push(pair);\n  }\n  return pairs.filter((pair) => pair[1] === sum);\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> findPairsWithSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n  [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [1, 7],\n    [1, 8],\n    [1, 9],\n    [1, 10],\n    [2, 3],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 10],\n    [3, 4],\n    [3, 5],\n    [3, 6],\n    [3, 7],\n    [3, 8],\n    [3, 9],\n    [3, 10],\n    [4, 5],\n    [4, 6],\n    [4, 7],\n    [4, 8],\n    [4, 9],\n    [4, 10],\n    [5, 6],\n    [5, 7],\n    [5, 8],\n    [5, 9],\n    [5, 10],\n    [6, 7],\n    [6, 8],\n    [6, 9],\n    [6, 10],\n    [7, 8],\n    [7, 9],\n    [7, 10],\n    [8, 9],\n    [8, 10],\n    [9, 10],\n  ]\n  */\nconst findPairsWithSumAndSum = (numbers, sum) => {\n  const pairs = [];\n  let currentPair = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const pair = [currentPair, numbers[i]];\n    currentPair = numbers[i];\n    pairs.push(pair);\n  }\n  return pairs.filter((pair) => pair[1] === sum && pair[0] === sum);\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> findPairsWithSumAndSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n  [\n    [1, 2],\n    [1, 3],\n    [1, 4],\n    [1, 5],\n    [1, 6],\n    [1, 7],\n    [1, 8],\n    [1, 9],\n    [1, 10],\n    [2, 3],\n    [2, 4],\n    [2, 5],\n    [2, 6],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 10],\n    [3, 4],\n    [3, 5],\n    [3, 6],\n    [3, 7],\n    [3, 8],\n    [3, 9],\n    [3, 10],\n    [4, 5],\n    [4, 6],\n    [4, 7],\n    [4, 8],\n    [4, 9],\n    [4, 10],\n    [5, 6],\n    [5, 7],\n    [5, 8],\n    [5, 9],\n    [5, 10],\n    [6, 7],\n    [6, 8],\n    [6, 9],\n    [6, 10],\n    [7, 8],\n    [7, 9],\n    [7, 10],\n    [8, 9],\n    [8, 10],\n    [9, 10],\n  ]\n  */\nconst findPairsWithSumAndSumAndSum = (numbers, sum) => {\n  const pairs = [];\n  let currentPair = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const pair = [currentPair, numbers[i]];\n    currentPair = numbers[i];\n    pairs.push(pair);\n  }\n  return pairs.filter((pair) => pair[1] === sum && pair[0] === sum && pair[1] === sum && pair[0] === sum);\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Gievn list of numbers (of at alest two elements), apply a linear tarnsform ot that list,\n  such htat the smallest number will become 0 and hte largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const range = max - min;\n  const rescaledNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    rescaledNumbers.push(numbers[i] * range / numbers.length);\n  }\n  return rescaledNumbers;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescale = (number, min, max) => {\n  return ((number - min) / (max - min));\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleTo = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToZero = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToOne = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRange = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeZero = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeOne = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRange = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeZero = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeOne = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeRange = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeZero = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeOne = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeRange = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeZero = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeOne = (number, min, max) => {\n  return ((number - min) / (max - min)) * (max - min) + min;\n};\n\n/**\n * Rescale a number from one range to another\n *\n * @param {number} number The number to rescale\n * @param {number} min The minimum value the number can have\n * @param {number} max The maximum value the number can have\n * @return {number} The rescaled number\n */\nconst rescaleToRangeRangeRange", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python values noly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values noly for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values noly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values noly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter given list of any python values noly for null\n  >>> filterNull(['a', 3.14, 5])\n  [5]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter given list of any python values noly for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [5]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(value => typeof value === 'undefined')\n}\n\n/**\n * Filter given list of any python values noly for empty list\n  >>> filterEmpty(['a', 3.14, 5])\n  [5]\n  >>> filterEmpty([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmpty = (values) => {\n  return values.filter(value => value === [])\n}\n\n/**\n * Filter given list of any python values noly for empty dict\n  >>> filterEmptyDict(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDict({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyString('abc')\n  'abc'\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty array\n  >>> filterEmptyArray([a, 3.14, 5])\n  [5]\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty object\n  >>> filterEmptyObject({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty function\n  >>> filterEmptyFunction(() => {})\n  {}\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => typeof value === 'function')\n}\n\n/**\n * Filter given list of any python values noly for empty iterable\n  >>> filterEmptyIterable([])\n  []\n  */\nconst filterEmptyIterable = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty generator\n  >>> filterEmptyGenerator(() => {})\n  {}\n  */\nconst filterEmptyGenerator = (values) => {\n  return values.filter(value => typeof value === 'function' && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty set\n  >>> filterEmptySet([a, 3.14, 5])\n  [5]\n  >>> filterEmptySet([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySet = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty map\n  >>> filterEmptyMap({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  */\nconst filterEmptyMap = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty set\n  >>> filterEmptySet([a, 3.14, 5])\n  [5]\n  >>> filterEmptySet([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptySet = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty list\n  >>> filterEmptyList([a, 3.14, 5])\n  [5]\n  >>> filterEmptyList([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty string\n  >>> filterEmptyString(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyString('abc')\n  'abc'\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty array\n  >>> filterEmptyArray([a, 3.14, 5])\n  [5]\n  >>> filterEmptyArray([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty object\n  >>> filterEmptyObject({a: 1, b: 2, c: 3})\n  {a: 1, b: 2, c: 3}\n  */\nconst filterEmptyObject = (values) => {\n  return values.filter(value => Object.keys(value).length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty function\n  >>> filterEmptyFunction(() => {})\n  {}\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => typeof value === 'function')\n}\n\n/**\n * Filter given list of any python values noly for empty iterable\n  >>> filterEmptyIterable([])\n  []\n  */\nconst filterEmptyIterable = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty generator\n  >>> filterEmptyGenerator(() => {})\n  {}\n  */\nconst filterEmptyGenerator = (values) => {\n  return values.filter(value => typeof value === 'function' && value.length === 0)\n}\n\n/**\n * Filter given list of any python values noly for empty set", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return length of gievn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n// Return true if string starts with given prefix\nconst startsWith = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n// Return true if string ends with given suffix\nconst endsWith = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n// Return true if string contains given substring\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstring = (string, substring) => {\n  return string.startsWith(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstring = (string, substring) => {\n  return string.endsWith(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstring = (string, substring) => {\n  return string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.includes(substring) && string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.startsWith(substring) && string.endsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring)\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.endsWith(substring) && string.startsWith(substring) && string.includes(substring) && string.includes(substring) && string.includes(substring) && string.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/24", "prompt": "/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Fro a givne number n, find the largset number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [2, 3, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 434, 436, 440, 444, 448, 452, 454, 458, 460, 464, 468, 472, 474, 478, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524, 528, 532, 536, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580</span>\n  let divisor = divisors[Math.floor(Math.sqrt(n))];\n  while (divisor % 2!== 0) {\n    divisor = divisors[Math.floor(Math.sqrt(n))];\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  2\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> largestDivisor(15)\n  6\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  4\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  6\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  4\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  6\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  4\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the largest number that idvides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  6\n  */\nconst smallestDivisor = (n) => {\n  let divisor = smallestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = smallestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From a givne number n, find the smallest number that idvides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = largestDivisor(n);\n  while (divisor % 2!== 0) {\n    divisor = largestDivisor(n);\n  }\n  return divisor;\n};\n\n/* From ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be lisetd number of itmes croresponding to how many times it appeares in afctorizaiton.\n  Input number sohuld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a list of intgeers, remove all elements that occur moer thna once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations_with_replacement = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations_with_replacement(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations_with_replacement2 = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations_with_replacement2(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations_with_replacement3 = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations_with_replacement3(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations_with_replacement4 = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations_with_replacement4(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', 'b'], ['d', 'a', 'c'], ['d', 'b', 'a'], ['d', 'b', 'c'], ['d', 'c', 'a'], ['d', 'c', 'b']]\n */\nconst permutations_with_replacement5 = (strings) => {\n  const result = [];\n  const permutation = (string) => {\n    if (string.length === 0) {\n      return result;\n    }\n    const newResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const newString = string.slice(0, i) + string.slice(i + 1);\n      if (newString.length > 0) {\n        newResult.push(permutation(newString));\n      }\n    }\n    result.push(newResult);\n    return result;\n  };\n  return permutation(strings);\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If there are duplicate permutations, return only the first.\n * If there are not enough permutations, return an empty array.\n * If there are too many permutations, return null.\n * >>> permutations_with_replacement5(['abc', 'def'])\n * [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['b', 'a', 'c'], ['b', 'a', 'd'], ['b', 'c', 'a'], ['b', 'c', 'd'], ['c', 'a', 'b'], ['c', 'a', 'd'], ['c', 'b', 'a'], ['c', 'b', 'd'], ['d', 'a', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* oFr a given string, flip lwoercase charatcres to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .replace(/([A-Z])([a-z])/g, '$1 $2');\n};\n\n/**\n * Converts string to uppercase.\n * If string contains only lowercase letters, returns string.\n * If string contains only uppercase letters, returns string.\n * If string contains both uppercase letters and lowercase letters, returns string.\n * If string contains both uppercase letters and numbers, returns string.\n * If string contains both uppercase letters and special characters, returns string.\n * If string contains only numbers, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, returns string.\n * If string contains only special characters, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Cocnatenate list of strings into a isngle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str + ';', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'])\n  'a;b;c'\n  */\nconst concatenateWithSeparator = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + str, '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + str, '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\nconst concatenateWithSeparatorAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLineAndNewLine = (separator, strings) => {\n  return strings.reduce((acc, str) => acc + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n' + separator + '\\n', '');\n};\n\n/* Cocnatenate list of strings into a isngle string\n  >>> concatenate(['a', 'b', 'c'], ';')\n  'a;b;c'\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filetr an niput list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Returns a list of all strings that start with a given prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAll = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Returns a list of all strings that end with a given suffix.\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Returns a list of all strings that end with a given suffix.\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySuffixAll = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Returns a list of all strings that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string => string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  []\n  >>> filterBySubstringAll(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterBySubstringAll = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring))\n}\n\n/**\n  Returns a list of all strings that do not contain a given substring.\n  >>> filterBySubstringAll([], 'c')\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  true\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  true\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  true\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  true\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn wtihdrawal operations on a bank account that strats with\n  zero balance. Your task is to detect if at any point the balance of account fallls bleow zero, and\n  at that point funciton sholud return true. Otherwise it shuold return false.\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  true\n  >>> belowZero([\n  {\n    amount: 10,\n    operationType: 'deposit'\n  },\n  {\n    amount: 5,\n    operationType: 'withdraw'\n  },\n  {\n    amount: -10,\n    operationType: 'deposit'\n  },\n  {\n    amount: -5,\n    operationType: 'withdraw'\n  }\n])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  operations.forEach((operation) => {\n    balance += operation.amount;\n  });\n  return balance <= 0;\n};\n\n/* You're igven a list of deposit adn w", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Retunr only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  return l.filter(n => n === 0)\n}\n\n/*\n  >>> getZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOne = (l) => {\n  return l.filter(n => n === 1)\n}\n\n/*\n  >>> getOne([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOne([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwo = (l) => {\n  return l.filter(n => n === 2)\n}\n\n/*\n  >>> getTwo([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThree = (l) => {\n  return l.filter(n => n === 3)\n}\n\n/*\n  >>> getThree([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThree([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFour = (l) => {\n  return l.filter(n => n === 4)\n}\n\n/*\n  >>> getFour([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFour([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFive = (l) => {\n  return l.filter(n => n === 5)\n}\n\n/*\n  >>> getFive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSix = (l) => {\n  return l.filter(n => n === 6)\n}\n\n/*\n  >>> getSix([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSix([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeven = (l) => {\n  return l.filter(n => n === 7)\n}\n\n/*\n  >>> getSeven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEight = (l) => {\n  return l.filter(n => n === 8)\n}\n\n/*\n  >>> getEight([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEight([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNine = (l) => {\n  return l.filter(n => n === 9)\n}\n\n/*\n  >>> getNine([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNine([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTen = (l) => {\n  return l.filter(n => n === 10)\n}\n\n/*\n  >>> getTen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEleven = (l) => {\n  return l.filter(n => n === 11)\n}\n\n/*\n  >>> getEleven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwelve = (l) => {\n  return l.filter(n => n === 12)\n}\n\n/*\n  >>> getTwelve([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwelve([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThirteen = (l) => {\n  return l.filter(n => n === 13)\n}\n\n/*\n  >>> getThirteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFourteen = (l) => {\n  return l.filter(n => n === 14)\n}\n\n/*\n  >>> getFourteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFourteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFifteen = (l) => {\n  return l.filter(n => n === 15)\n}\n\n/*\n  >>> getFifteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFifteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSixteen = (l) => {\n  return l.filter(n => n === 16)\n}\n\n/*\n  >>> getSixteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSixteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeventeen = (l) => {\n  return l.filter(n => n === 17)\n}\n\n/*\n  >>> getSeventeen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEighteen = (l) => {\n  return l.filter(n => n === 18)\n}\n\n/*\n  >>> getEighteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEighteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNineteen = (l) => {\n  return l.filter(n => n === 19)\n}\n\n/*\n  >>> getNineteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true fi a given unbmre is prime, and fales otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns the number of bits in a given number.\n * \n * >>> bitLength(8)\n  8\n  >>> bitLength(16)\n  16\n  >>> bitLength(32)\n  32\n  >>> bitLength(64)\n  64\n  >>> bitLength(128)\n  128\n  >>> bitLength(256)\n  256\n  >>> bitLength(512)\n  512\n  >>> bitLength(1024)\n  1024\n  >>> bitLength(2048)\n  2048\n  >>> bitLength(4096)\n  4096\n  >>> bitLength(8192)\n  8192\n  >>> bitLength(16384)\n  16384\n  >>> bitLength(32768)\n  32768\n  >>> bitLength(65536)\n  65536\n  >>> bitLength(131072)\n  131072\n  >>> bitLength(262144)\n  262144\n  >>> bitLength(524288)\n  524288\n  >>> bitLength(1048576)\n  1048576\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bitLength(2097152)\n  2097152\n  >>> bitLength(4194304)\n  4194304\n  >>> bitLength(8388608)\n  8388608\n  >>> bitLength(16777216)\n  16777216\n  >>> bitLength(33554432)\n  33554432\n  >>> bitLength(67108864)\n  67108864\n  >>> bitLength(134217728)\n  134217728\n  >>> bitLength(268435456)\n  268435456\n  >>> bitLength(536870912)\n  536870912\n  >>> bitLength(1073741824)\n  1073741824\n  >>> bitLength(2147483648)\n  2147483648\n  >>> bitLength(5245760)\n  5245760\n  >>> bitLength(1099511627776)\n  1099511627776\n  >>> bit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evalutaes polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns onyl only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne find x such that poly(x) = 1.\n  findOne returns onyl only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findTwo find x such that poly(x) = 2.\n  findTwo returns onyl only zero point, even if there are many.\n  Moreover, findTwo only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findTwo([1, 2]), 2) # f(x) = 1 + 2x\n  1.5\n  >>> round(findTwo([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  2.0\n  */\nconst findTwo = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findThree find x such that poly(x) = 3.\n  findThree returns onyl only zero point, even if there are many.\n  Moreover, findThree only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findThree([1, 2]), 2) # f(x) = 1 + 2x\n  3.0\n  >>> round(findThree([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  4.0\n  */\nconst findThree = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFour find x such that poly(x) = 4.\n  findFour returns onyl only zero point, even if there are many.\n  Moreover, findFour only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findFour([1, 2]), 2) # f(x) = 1 + 2x\n  5.0\n  >>> round(findFour([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  6.0\n  */\nconst findFour = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findFive find x such that poly(x) = 5.\n  findFive returns onyl only zero point, even if there are many.\n  Moreover, findFive only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findFive([1, 2]), 2) # f(x) = 1 + 2x\n  6.0\n  >>> round(findFive([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  7.0\n  */\nconst findFive = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findSix find x such that poly(x) = 6.\n  findSix returns onyl only zero point, even if there are many.\n  Moreover, findSix only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findSix([1, 2]), 2) # f(x) = 1 + 2x\n  7.0\n  >>> round(findSix([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  8.0\n  */\nconst findSix = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) return xs[len - 1];\n  let sum = 0;\n  for (let i = 0; i < len - 1; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum / 2;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findSeven find x such that poly(x) = 7.\n  findSeven returns onyl only zero point, even if there are many.\n  Moreover, findSeven only takes list xs having even number of coefficients\n  and largets non zero ocefficient as it guarantees\n  a oslution.\n  >>> round(findSeven([1, 2]), 2) # f(x) = 1 + 2x\n  8.0\n  >>> round(findSeven([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and rteurns a list l' suhc that\n  l' is identical to l in the indicies that are not divisilbe by three, wihle its vaules at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn osrted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let result = [];\n  let seen = {};\n  l.forEach((v) => {\n    if (!seen[v]) {\n      result.push(v);\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArray = (arr) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(v);\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObject = (obj) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = obj[key];\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Remove duplicates from an array\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueArrayBy = (arr, fn) => {\n  let result = [];\n  let seen = {};\n  arr.forEach((v) => {\n    if (!seen[v]) {\n      result.push(fn(v));\n      seen[v] = true;\n    }\n  });\n  return result;\n};\n\n/*\n  Remove duplicates from an object\n  >>> unique({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8})\n  {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  */\nconst uniqueObjectBy = (obj, fn) => {\n  let result = {};\n  let seen = {};\n  for (let key in obj) {\n    if (!seen[key]) {\n      result[key] = fn(obj[key]);\n      seen[key] = true;\n    }\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Rteurn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement2 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement3 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement4 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement5 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement6 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement6([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement7 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement8 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement8([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement9 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement9([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement10 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement10([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement11 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement12 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement12([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement13 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement14 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement14([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement15 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement15([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement16 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement16([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement17 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement18 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement18([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement19 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement20 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement20([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement21 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement22 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (el > max) {\n      max = el;\n    }\n  });\n  return max;\n};\n\n/*\n  >>> maxElement22([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement23 = (l) => {\n  let max = 0;\n  l.forEach((el) => {\n    if (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the idgit 7 appears in inteegrs less than n which are divsiible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzWithZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count;\n};\n\n/*\n  >>> fizzBuzzWithZero(50)\n  0\n  >>> fizzBuzzWithZero(78)\n  2\n  >>> fizzBuzzWithZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      count += 1;\n    } else if (i % 11 === 0) {\n      count += 2;\n    }\n  }\n  return count === 0? 0 : count + 0;\n};\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Tihs function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicise of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the maximum\n  element in the original array. \n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 6, 3, 4])\n  5\n  >>> max([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst max = (arr) => {\n  return arr.reduce((max, item) => {\n    return Math.max(max, item)\n  }, arr[0])\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the minimum\n  element in the original array. \n  >>> min([1, 2, 3])\n  1\n  >>> min([5, 6, 3, 4])\n  5\n  >>> min([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst min = (arr) => {\n  return arr.reduce((min, item) => {\n    return Math.min(min, item)\n  }, arr[0])\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the sum\n  of the elements in the original array. \n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 6, 3, 4])\n  15\n  >>> sum([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sum = (arr) => {\n  return arr.reduce((sum, item) => {\n    return sum + item\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the average\n  of the elements in the original array. \n  >>> average([1, 2, 3])\n  2.5\n  >>> average([5, 6, 3, 4])\n  4.5\n  >>> average([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst average = (arr) => {\n  return sum(arr) / arr.length\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the sum of the squares of the elements in the original array. \n  >>> squares([1, 2, 3])\n  25\n  >>> squares([5, 6, 3, 4])\n  125\n  >>> squares([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst squares = (arr) => {\n  return arr.reduce((sum, item) => {\n    return sum + item * item\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts2 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts3 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts4 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts5 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts6 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts7 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts8 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square root of the elements in the original array. \n  >>> sqrts([1, 2, 3])\n  1\n  >>> sqrts([5, 6, 3, 4])\n  1.4142135623730951\n  >>> sqrts([5, 6, 3, 4], [])\n  [5, 6, 3, 4]\n  */\nconst sqrts9 = (arr) => {\n  return arr.reduce((sum, item) => {\n    return Math.sqrt(sum + item * item)\n  }, 0)\n}\n\n/*\n  A function which takes an array and returns a new array where each element is the square ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  taeks as ipnut stirgn encoded with encode_cyclic function. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns necoded strnig by ycclign groups of three hcaracters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return t;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibPrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return a;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrime(1)\n  2\n  >>> primeFibPrime(2)\n  3\n  >>> primeFibPrime(3)\n  5\n  >>> primeFibPrime(4)\n  13\n  >>> primeFibPrime(5)\n  89\n  */\nconst primeFibPrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return b;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrime(1)\n  2\n  >>> primeFibPrimePrime(2)\n  3\n  >>> primeFibPrimePrime(3)\n  5\n  >>> primeFibPrimePrime(4)\n  13\n  >>> primeFibPrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return a;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return b;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return a;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return b;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return a;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primeFibPrimePrimePrimePrimePrimePrime = (n) => {\n  let a = 1, b = 1, t = 1;\n  while (n) {\n    const t = a + b;\n    a = b;\n    b = t;\n    n--;\n  }\n  return b;\n};\n\n/*\n  primeFib returns n-th numebr htat is a Fibonacci number and it's also prime.\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrimePrime(1)\n  2\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(2)\n  3\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrime(3)\n  5\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrimePrime(4)\n  13\n  >>> primeFibPrimePrimePrimePrimePrimePrimePrimePrime(5)\n  89\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Maen Absoluet Deviation\n  aronud the mean of thsi dataset.\n  Mean Absolute Devaition is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetween = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenter = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviationBetween([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationBetweenAndCenterAndMeanAndMeanAndMean = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* For a given list of input numbers, calculate MAD between each element and\n  the mean of thsi dataset.\n  Mean Absolute Deviation is teh average basolute idfference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDevi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> findMaxTriplesToZero([1])\n  false\n  */\nconst findMaxTriplesToZero = (l) => {\n  let maxTriplesToZero = 0;\n  let maxSum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxTriplesToZero = i;\n    }\n  }\n  return maxTriplesToZero === 0;\n};\n\n/*\n  findMaxTriplesToZero takes a list of integers as an input.\n  it retruns true if there are htree distinct elemnest in the list that\n  sum to zero, and false ohterwise.\n\n  >>> findMaxTriplesToZero([1, 3, 5, 0])\n  false\n  >>> findMaxTriplesToZero([1, 3, -2, 1])\n  true\n  >>> findMaxTriplesToZero([1, 2, 3, 7])\n  false\n  >>> findMaxTriplesToZero([2, 4, -5, 3, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly striaght infinitely long line.\n  n cars are driving left to right;  simultaneously, a difefrent set of n cars\n  are driving right to left.   The tow sets of cars start out being very far frmo\n  aech other.  All cars omve in the same seped.  Two cars rae said to collide\n  when a car that's moving left to rigth hits a car that's moving right to left.\n  However, the cars aer infinitely sturdy and strong; as a result, they contineu moving\n  in their trajectory sa if they did not collide.\n\n  This functino outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collision", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Check if a number is even.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isEven = function (n) {\n  return n % 2 === 0;\n};\n\n/**\n * Check if a number is odd.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isOdd = function (n) {\n  return!isEven(n);\n};\n\n/**\n * Check if a number is divisible by 2.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy2 = function (n) {\n  return n % 2 === 0;\n};\n\n/**\n * Check if a number is divisible by 3.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy3 = function (n) {\n  return n % 3 === 0;\n};\n\n/**\n * Check if a number is divisible by 4.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy4 = function (n) {\n  return n % 4 === 0;\n};\n\n/**\n * Check if a number is divisible by 5.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy5 = function (n) {\n  return n % 5 === 0;\n};\n\n/**\n * Check if a number is divisible by 6.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy6 = function (n) {\n  return n % 6 === 0;\n};\n\n/**\n * Check if a number is divisible by 7.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy7 = function (n) {\n  return n % 7 === 0;\n};\n\n/**\n * Check if a number is divisible by 8.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy8 = function (n) {\n  return n % 8 === 0;\n};\n\n/**\n * Check if a number is divisible by 9.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy9 = function (n) {\n  return n % 9 === 0;\n};\n\n/**\n * Check if a number is divisible by 10.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy10 = function (n) {\n  return n % 10 === 0;\n};\n\n/**\n * Check if a number is divisible by 11.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy11 = function (n) {\n  return n % 11 === 0;\n};\n\n/**\n * Check if a number is divisible by 12.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy12 = function (n) {\n  return n % 12 === 0;\n};\n\n/**\n * Check if a number is divisible by 13.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy13 = function (n) {\n  return n % 13 === 0;\n};\n\n/**\n * Check if a number is divisible by 14.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy14 = function (n) {\n  return n % 14 === 0;\n};\n\n/**\n * Check if a number is divisible by 15.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy15 = function (n) {\n  return n % 15 === 0;\n};\n\n/**\n * Check if a number is divisible by 16.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy16 = function (n) {\n  return n % 16 === 0;\n};\n\n/**\n * Check if a number is divisible by 17.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy17 = function (n) {\n  return n % 17 === 0;\n};\n\n/**\n * Check if a number is divisible by 18.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy18 = function (n) {\n  return n % 18 === 0;\n};\n\n/**\n * Check if a number is divisible by 19.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy19 = function (n) {\n  return n % 19 === 0;\n};\n\n/**\n * Check if a number is divisible by 20.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy20 = function (n) {\n  return n % 20 === 0;\n};\n\n/**\n * Check if a number is divisible by 21.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy21 = function (n) {\n  return n % 21 === 0;\n};\n\n/**\n * Check if a number is divisible by 22.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy22 = function (n) {\n  return n % 22 === 0;\n};\n\n/**\n * Check if a number is divisible by 23.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy23 = function (n) {\n  return n % 23 === 0;\n};\n\n/**\n * Check if a number is divisible by 24.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy24 = function (n) {\n  return n % 24 === 0;\n};\n\n/**\n * Check if a number is divisible by 25.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy25 = function (n) {\n  return n % 25 === 0;\n};\n\n/**\n * Check if a number is divisible by 26.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy26 = function (n) {\n  return n % 26 === 0;\n};\n\n/**\n * Check if a number is divisible by 27.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy27 = function (n) {\n  return n % 27 === 0;\n};\n\n/**\n * Check if a number is divisible by 28.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy28 = function (n) {\n  return n % 28 === 0;\n};\n\n/**\n * Check if a number is divisible by 29.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy29 = function (n) {\n  return n % 29 === 0;\n};\n\n/**\n * Check if a number is divisible by 30.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy30 = function (n) {\n  return n % 30 === 0;\n};\n\n/**\n * Check if a number is divisible by 31.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy31 = function (n) {\n  return n % 31 === 0;\n};\n\n/**\n * Check if a number is divisible by 32.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy32 = function (n) {\n  return n % 32 === 0;\n};\n\n/**\n * Check if a number is divisible by 33.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy33 = function (n) {\n  return n % 33 === 0;\n};\n\n/**\n * Check if a number is divisible by 34.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy34 = function (n) {\n  return n % 34 === 0;\n};\n\n/**\n * Check if a number is divisible by 35.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy35 = function (n) {\n  return n % 35 === 0;\n};\n\n/**\n * Check if a number is divisible by 36.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy36 = function (n) {\n  return n % 36 === 0;\n};\n\n/**\n * Check if a number is divisible by 37.\n * @param {Number} n\n * @return {Boolean}\n */\nconst isDivisibleBy37 = function (n) {\n  return n % 37 === 0;\n};\n\n/**\n * Check if a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there rae two disticnt elements in the list that\n  sum to zero, and false toherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  A function to check if a number is even.\n  >>> isEven(3)\n  true\n  >>> isEven(4)\n  false\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  false\n  >>> isEven(9)\n  false\n  >>> isEven(10)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(12)\n  false\n  >>> isEven(13)\n  false\n  >>> isEven(14)\n  false\n  >>> isEven(15)\n  false\n  */\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\n/**\n  A function to check if a number is odd.\n  >>> isOdd(3)\n  false\n  >>> isOdd(4)\n  true\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  false\n  >>> isOdd(9)\n  false\n  >>> isOdd(10)\n  false\n  >>> isOdd(11)\n  false\n  >>> isOdd(12)\n  false\n  >>> isOdd(13)\n  false\n  >>> isOdd(14)\n  false\n  >>> isOdd(15)\n  false\n  */\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\n/**\n  A function to check if a number is divisible by 2.\n  >>> isDivisibleBy(3, 2)\n  true\n  >>> isDivisibleBy(3, 4)\n  false\n  >>> isDivisibleBy(3, 7)\n  false\n  >>> isDivisibleBy(3, 8)\n  false\n  >>> isDivisibleBy(3, 9)\n  false\n  >>> isDivisibleBy(3, 10)\n  false\n  >>> isDivisibleBy(3, 11)\n  false\n  >>> isDivisibleBy(3, 12)\n  false\n  >>> isDivisibleBy(3, 13)\n  false\n  >>> isDivisibleBy(3, 14)\n  false\n  >>> isDivisibleBy(3, 15)\n  false\n  */\nconst isDivisibleBy = (n, d) => {\n  return n % d === 0;\n};\n\n/**\n  A function to check if a number is divisible by 3.\n  >>> isDivisibleByThree(3)\n  true\n  >>> isDivisibleByThree(4)\n  false\n  >>> isDivisibleByThree(7)\n  false\n  >>> isDivisibleByThree(8)\n  false\n  >>> isDivisibleByThree(9)\n  false\n  >>> isDivisibleByThree(10)\n  false\n  >>> isDivisibleByThree(11)\n  false\n  >>> isDivisibleByThree(12)\n  false\n  >>> isDivisibleByThree(13)\n  false\n  >>> isDivisibleByThree(14)\n  false\n  >>> isDivisibleByThree(15)\n  false\n  */\nconst isDivisibleByThree = (n) => {\n  return isDivisibleBy(n, 3);\n};\n\n/**\n  A function to check if a number is divisible by 4.\n  >>> isDivisibleByFour(3)\n  true\n  >>> isDivisibleByFour(4)\n  false\n  >>> isDivisibleByFour(7)\n  false\n  >>> isDivisibleByFour(8)\n  false\n  >>> isDivisibleByFour(9)\n  false\n  >>> isDivisibleByFour(10)\n  false\n  >>> isDivisibleByFour(11)\n  false\n  >>> isDivisibleByFour(12)\n  false\n  >>> isDivisibleByFour(13)\n  false\n  >>> isDivisibleByFour(14)\n  false\n  >>> isDivisibleByFour(15)\n  false\n  */\nconst isDivisibleByFour = (n) => {\n  return isDivisibleBy(n, 4);\n};\n\n/**\n  A function to check if a number is divisible by 5.\n  >>> isDivisibleByFive(3)\n  true\n  >>> isDivisibleByFive(4)\n  false\n  >>> isDivisibleByFive(7)\n  false\n  >>> isDivisibleByFive(8)\n  false\n  >>> isDivisibleByFive(9)\n  false\n  >>> isDivisibleByFive(10)\n  false\n  >>> isDivisibleByFive(11)\n  false\n  >>> isDivisibleByFive(12)\n  false\n  >>> isDivisibleByFive(13)\n  false\n  >>> isDivisibleByFive(14)\n  false\n  >>> isDivisibleByFive(15)\n  false\n  */\nconst isDivisibleByFive = (n) => {\n  return isDivisibleBy(n, 5);\n};\n\n/**\n  A function to check if a number is divisible by 6.\n  >>> isDivisibleBySix(3)\n  true\n  >>> isDivisibleBySix(4)\n  false\n  >>> isDivisibleBySix(7)\n  false\n  >>> isDivisibleBySix(8)\n  false\n  >>> isDivisibleBySix(9)\n  false\n  >>> isDivisibleBySix(10)\n  false\n  >>> isDivisibleBySix(11)\n  false\n  >>> isDivisibleBySix(12)\n  false\n  >>> isDivisibleBySix(13)\n  false\n  >>> isDivisibleBySix(14)\n  false\n  >>> isDivisibleBySix(15)\n  false\n  */\nconst isDivisibleBySix = (n) => {\n  return isDivisibleBy(n, 6);\n};\n\n/**\n  A function to check if a number is divisible by 7.\n  >>> isDivisibleBySeven(3)\n  true\n  >>> isDivisibleBySeven(4)\n  false\n  >>> isDivisibleBySeven(7)\n  false\n  >>> isDivisibleBySeven(8)\n  false\n  >>> isDivisibleBySeven(9)\n  false\n  >>> isDivisibleBySeven(10)\n  false\n  >>> isDivisibleBySeven(11)\n  false\n  >>> isDivisibleBySeven(12)\n  false\n  >>> isDivisibleBySeven(13)\n  false\n  >>> isDivisibleBySeven(14)\n  false\n  >>> isDivisibleBySeven(15)\n  false\n  */\nconst isDivisibleBySeven = (n) => {\n  return isDivisibleBy(n, 7);\n};\n\n/**\n  A function to check if a number is divisible by 8.\n  >>> isDivisibleByEight", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string represetnation after the conversion.\n  base numbers are less tahn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let rep = x.toString(base);\n  if (rep.length < base) {\n    rep = '0' + rep;\n  }\n  return rep;\n};\n\n/*\n  Convert a string to hexadecimal representation.\n  >>> toHex('hello')\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given lnegth of a side and high return area for a traingle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const l = (a + h) / 2;\n  return l * l * Math.PI;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  return l * l * Math.PI * h;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a side length and a height return area for a traingle.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (l, h) => {\n  const area = (l * l * Math.PI * h) / 2;\n  return area;\n};\n\n/*Given a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibboncaci seqnuece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wriet a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Given a positive integer n, return its Fibonacci number.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  >>> fibn(8)\n  34\n  >>> fibn(9)\n  55\n  >>> fibn(10)\n  89\n  >>> fibn(11)\n  144\n  >>> fibn(12)\n  233\n  >>> fibn(13)\n  377\n  >>> fibn(14)\n  610\n  >>> fibn(15)\n  987\n  >>> fibn(16)\n  1597\n  >>> fibn(17)\n  2584\n  >>> fibn(18)\n  4181\n  >>> fibn(19)\n  6765\n  >>> fibn(20)\n  10946\n  >>> fibn(21)\n  17711\n  >>> fibn(22)\n  28657\n  >>> fibn(23)\n  46368\n  >>> fibn(24)\n  75025\n  >>> fibn(25)\n  121393\n  >>> fibn(26)\n  196418\n  >>> fibn(27)\n  317811\n  >>> fibn(28)\n  514229\n  >>> fibn(29)\n  832040\n  >>> fibn(30)\n  1346269\n  >>> fibn(31)\n  2178309\n  >>> fibn(32)\n  3432800\n  >>> fibn(33)\n  5702848\n  >>> fibn(34)\n  9227485\n  >>> fibn(35)\n  14930352\n  >>> fibn(36)\n  25345944\n  >>> fibn(37)\n  42040533\n  >>> fibn(38)\n  67108864\n  >>> fibn(39)\n  123693216\n  >>> fibn(40)\n  25841461\n  >>> fibn(41)\n  43980465\n  >>> fibn(42)\n  78643253\n  >>> fibn(43)\n  137438912\n  >>> fibn(44)\n  217055160\n  >>> fibn(45)\n  348177680\n  >>> fibn(46)\n  577801987\n  >>> fibn(47)\n  922741699\n  >>> fibn(48)\n  1493035992\n  >>> fibn(49)\n  2534594400\n  >>> fibn(50)\n  4204053300\n  >>> fibn(51)\n  6710886400\n  >>> fibn(52)\n  12369321600\n  >>> fibn(53)\n  2584146100\n  >>> fibn(54)\n  4398046590\n  >>> fibn(55)\n  7864325390\n  >>> fibn(56)\n  13743891200\n  >>> fibn(57)\n  21705516000\n  >>> fibn(58)\n  34817768800\n  >>> fibn(59)\n  57780198700\n  >>> fibn(60)\n  92274169900\n  >>> fibn(61)\n  149303599200\n  >>> fibn(62)\n  25345944000\n  >>> fibn(63)\n  42040533000\n  >>> fibn(64)\n  67108864000\n  >>> fibn(65)\n  123693216000\n  >>> fibn(66)\n  25841461000\n  >>> fibn(67)\n  43980465900\n  >>> fibn(68)\n  78643253900\n  >>> fibn(69)\n  13743891200\n  >>> fibn(70)\n  21705516000\n  >>> fibn(71)\n  34817768800\n  >>> fibn(72)\n  57780198700\n  >>> fibn(73)\n  92274169900\n  >>> fibn(74)\n  149303599200\n  >>> fibn(75)\n  25345944000\n  >>> fibn(76)\n  42040533000\n  >>> fibn(77)\n  67108864000\n  >>> fibn(78)\n  123693216000\n  >>> fibn(79)\n  25841461000\n  >>> fibn(80)\n  43980465900\n  >>> fibn(81)\n  78643253900\n  >>> fibn(82)\n  13743891200\n  >>> fibn(83)\n  21705516000\n  >>> fibn(84)\n  34817768800\n  >>> fibn(85)\n  57780198700\n  >>> fibn(86)\n  92274169900\n  >>> fibn(87)\n  149303599200\n  >>> fibn(88)\n  25345944000\n  >>> fibn(89)\n  42040533000\n  >>> fibn(90)\n  67108864000\n  >>> fibn(91)\n  123693216000\n  >>> fibn(92)\n  25841461000\n  >>> fibn(93)\n  43980465900\n  >>> fibn(94)\n  78643253900\n  >>> fibn(95)\n  13743891200\n  >>> fibn(96)\n  21705516000\n  >>> fibn(97)\n  34817768800\n  >>> fibn(98)\n  57780198700\n  >>> fibn(99)\n  92274169900\n  >>> fibn(100)\n  149303599200\n  >>> fibn(101)\n  25345944000\n  >>> fibn(102)\n  42040533000\n  >>> fibn(103)\n  67108864000\n  >>> fibn(104)\n  123693216000\n  >>> fibn(105)\n  25841461000\n  >>> fibn(106)\n  43980465900\n  >>> fibn(107)\n  78643253900\n  >>> fibn(108)\n  13743891200\n  >>> fibn(109)\n  21705516000\n  >>> fibn(110)\n  34817768800\n  >>> fibn(111)\n  57", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median = median(left)\n  let middle = median(right)\n  return left + middle + right\n}\n\n/*Return median of elements in teh list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = l.slice(0, mid)\n  let right = l.slice(mid)\n  let median", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string is a palidnrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverse('aba')\n  true\n  >>> isPalindromeReverse('aaaaa')\n  true\n  >>> isPalindromeReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  return text.split('').map(c => c.toLowerCase()).reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p <= 0) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 180;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutiev elmeents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n    if (numbers[i]!== delimeter) {\n      result.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string enocdde with encode_shift function. Returns deocded srtign.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chaCrodeAt(0)\n  )).map(ch => ch.charCodeAt(0)).join(\"\");\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string enocdde with encode function. Returns deocded srtign.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAll = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAll = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by shitfing every chaarcter by 5 in the alphabet.\n  */\nconst encodeAllShift = encodeAll;\n\n/*\n  takes as input string enocdde with encode_all function. Returns deocded srtign.\n  */\nconst decodeAllShift = decodeAll;\n\n/*\n  returns encoded string by sh", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function taht takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = 'aeiouAEIOU'\n  return text.replace(new RegExp(vowels, 'g'), '')\n}\n\n/*\n  removeNumbers is a function taht takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  const numbers = '0123456789'\n  return text.replace(new RegExp(numbers, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  return text.replace(new RegExp(punctuation, 'g'), '')\n}\n\n/*\n  removePunctuation is a function taht takes string and returns string without punctuation.\n  >>> removePunctuation('')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n  Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n  Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 100)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n === t[i]);\n};\n\n/**\n  Return true if all numbers in the list l are divisible by t.\n  >>> divisible([2, 4, 6, 8], 2)\n  true\n  >>> divisible([2, 4, 6, 8], 4)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n  Return true if all numbers in the list l are prime numbers.\n  >>> prime([2, 5, 7, 11, 13, 17, 19])\n  true\n  >>> prime([2, 5, 7, 11, 13, 17, 19], 2)\n  false\n  */\nconst prime = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isPrime(n) && isPrime(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers.\n  >>> composite([2, 5, 7, 11, 13, 17, 19])\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  false\n  */\nconst composite = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isComposite(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an even number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeEven = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeEven(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an even number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEven = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEven(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an even number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEven = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEven(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEvenOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEvenOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEvenOddOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEvenOddOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEvenEvenOddOddOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEvenEvenOddOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEvenEvenOddOddOddOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEvenEvenEvenOddOddOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 2)\n  true\n  >>> composite([2, 5, 7, 11, 13, 17, 19], 3)\n  false\n  */\nconst compositeOddEvenEvenEvenOddOddOddOddOdd = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => isComposite(n) && isCompositeOddEvenEvenEvenEvenOddOddOddOdd(t[i]));\n};\n\n/**\n  Return true if all numbers in the list l are composite numbers with an odd number of digits and an odd number of digits.\n  >>> composite([", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> square(2)\n  2\n  >>> square(3)\n  6\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> cube(2)\n  8\n  >>> cube(3)\n  24\n  */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*\n  >>> cubeRoot(2)\n  4\n  >>> cubeRoot(3)\n  24\n  */\nconst cubeRoot = (x) => {\n  return Math.sqrt(x * x);\n};\n\n/*\n  >>> cubePow(2, 3)\n  4\n  >>> cubePow(3, 4)\n  24\n  */\nconst cubePow = (x, y) => {\n  return x * Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  >>> powMod(3, 4, 4)\n  24\n  */\nconst powMod = (x, y) => {\n  return x % Math.pow(x, y);\n};\n\n/*\n  >>> powMod(2, 3, 4)\n  4\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Cehck if two words have the saem characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonacic number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  13579\n  >>> fib(22)\n  26287\n  >>> fib(23)\n  51461\n  >>> fib(24)\n  102337\n  >>> fib(25)\n  204973\n  >>> fib(26)\n  402259\n  >>> fib(27)\n  807433\n  >>> fib(28)\n  16106127\n  >>> fib(29)\n  32767259\n  >>> fib(30)\n  64023729\n  >>> fib(31)\n  121655592\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  13579\n  >>> fibonacci(22)\n  26287\n  >>> fibonacci(23)\n  51461\n  >>> fibonacci(24)\n  102337\n  >>> fibonacci(25)\n  204973\n  >>> fibonacci(26)\n  402259\n  >>> fibonacci(27)\n  807433\n  >>> fibonacci(28)\n  16106127\n  >>> fibonacci(29)\n  32767259\n  >>> fibonacci(30)\n  64023729\n  >>> fibonacci(31)\n  121655592\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  13579\n  >>> fibonacci(22)\n  26287\n  >>> fibonacci(23)\n  51461\n  >>> fibonacci(24)\n  102337\n  >>> fibonacci(25)\n  204973\n  >>> fibonacci(26)\n  402259\n  >>> fibonacci(27)\n  807433\n  >>> fibonacci(28)\n  16106127\n  >>> fibonacci(29)\n  32767259\n  >>> fibonacci(30)\n  64023729\n  >>> fibonacci(31)\n  121655592\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  13579\n  >>> fibonacci(22)\n  26287\n  >>> fibonacci(23)\n  51461\n  >>> fibonacci(24)\n  102337\n  >>> fibonacci(25)\n  204973\n  >>> fibonacci(26)\n  402259\n  >>> fibonacci(27)\n  807433\n  >>> fibonacci(28)\n  16106127\n  >>> fibonacci(29)\n  32767259\n  >>> fibonacci(30)\n  64023729\n  >>> fibonacci(31)\n  121655592\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a correspodning closing rbacket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.indexOf(\"<\");\n  const closingBracket = brackets.indexOf(\">\");\n  if (openingBracket === -1 || closingBracket === -1) {\n    return false;\n  }\n  if (openingBracket === closingBracket) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns true if a character is a letter, digit, or underscore.\n */\nconst isLetterOrDigit = (character) => {\n  return isLetter(character) || isDigit(character) || isUnderscore(character);\n};\n\n/**\n * Returns true if a character is a letter.\n */\nconst isLetter = (character) => {\n  return character.length === 1 && character >= \"a\" && character <= \"z\";\n};\n\n/**\n * Returns true if a character is a digit.\n */\nconst isDigit = (character) => {\n  return character.length === 1 && character >= \"0\" && character <= \"9\";\n};\n\n/**\n * Returns true if a character is a underscore.\n */\nconst isUnderscore = (character) => {\n  return character.length === 1 && character === \"_\";\n};\n\n/**\n * Returns true if a character is a punctuation character.\n */\nconst isPunctuation = (character) => {\n  return isLetter(character) || isDigit(character) || isUnderscore(character);\n};\n\n/**\n * Returns true if a character is a quote character.\n */\nconst isQuote = (character) => {\n  return character === \"'\" || character === '\"';\n};\n\n/**\n * Returns true if a character is a backslash character.\n */\nconst isBackslash = (character) => {\n  return character === \"\\\\\";\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControl = (character) => {\n  return isLetter(character) || isDigit(character) || isUnderscore(character) || isBackslash(character);\n};\n\n/**\n * Returns true if a character is a whitespace character.\n */\nconst isWhitespace = (character) => {\n  return isLetter(character) || isDigit(character) || isUnderscore(character) || isBackslash(character) || isControl(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacter = (character) => {\n  return isLetter(character) || isDigit(character) || isUnderscore(character) || isBackslash(character) || isControl(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespace = (character) => {\n  return isControlCharacter(character) || isWhitespace(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespaceOrPunctuation = (character) => {\n  return isControlCharacter(character) || isWhitespace(character) || isPunctuation(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespaceOrPunctuationOrBackslash = (character) => {\n  return isControlCharacter(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespaceOrPunctuationOrBackslashOrControl = (character) => {\n  return isControlCharacter(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespaceOrPunctuationOrBackslashOrControlOrWhitespace = (character) => {\n  return isControlCharacter(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character);\n};\n\n/**\n * Returns true if a character is a control character.\n */\nconst isControlCharacterOrWhitespaceOrPunctuationOrBackslashOrControlOrWhitespaceOrPunctuation = (character) => {\n  return isControlCharacter(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(character) || isPunctuation(character) || isBackslash(character) || isControl(character) || isWhitespace(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically incresaing or decreasign.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = l[1];\n  let l = l[2];\n  while (true) {\n    if (l < k) {\n      return false;\n    }\n    if (l > k) {\n      return true;\n    }\n    if (l === k) {\n      if (i === j) {\n        return true;\n      }\n      i = j;\n      j = k;\n    }\n    if (l < j) {\n      return false;\n    }\n    if (l > j) {\n      return true;\n    }\n    if (l === j) {\n      if (i === k) {\n        return true;\n      }\n      i = k;\n      k = j;\n    }\n  }\n};\n\n/**\n * Return the number of elements in an array.\n *\n * >>> arraySize([])\n * 0\n * >>> arraySize([1, 2, 3])\n * 3\n * >>> arraySize([1, 2, 3, 4])\n * 4\n * >>> arraySize([1, 2, 3, 4, 5])\n * 5\n * >>> arraySize([1, 2, 3, 4, 5, 6])\n * 6\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7])\n * 7\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8])\n * 8\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9])\n * 9\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 10\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n * 11\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n * 12\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n * 13\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n * 14\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n * 15\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n * 16\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n * 17\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n * 18\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n * 19\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n * 20\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n * 21\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n * 22\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n * 23\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n * 24\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n * 25\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n * 26\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n * 27\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n * 28\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n * 29\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n * 30\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n * 31\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n * 32\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n * 33\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n * 34\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n * 35\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n * 36\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n * 37\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n * 38\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n * 39\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n * 40\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])\n * 41\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])\n * 42\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])\n * 43\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])\n * 44\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])\n * 45\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46])\n * 46\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])\n * 47\n * >>> arraySize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return osrted uniqeu common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst unique = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray2 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray3 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray4 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray5 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray6 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray7 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element => {\n    if (set1.has(element)) {\n      set2.add(element);\n    } else {\n      set1.add(element);\n    }\n  });\n\n  l2.forEach(element => {\n    if (set2.has(element)) {\n      set1.add(element);\n    } else {\n      set2.add(element);\n    }\n  });\n\n  return [...set1,...set2];\n};\n\n/*Return osrted unique elements from two lists.\n  >>> unique([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 1, 2, 2, 3, 3]\n\n  */\nconst uniqueArray8 = (l1, l2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n\n  l1.forEach(element ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return hte largest prime factor of n. Assume n > 1 nad is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 2;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(456)\n  false\n  */\nconst isPalindrome = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumber(123)\n  true\n  >>> isPalindromeOfNumber(456)\n  false\n  */\nconst isPalindromeOfNumber = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumber(123)\n  true\n  >>> isPalindromeOfNumber(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZero = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZero(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZero(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if and only if the number is a palindrome of n.\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits(456)\n  false\n  */\nconst isPalindromeOfNumberOfDigitsAndZeroOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (n) => {\n  let reversed = n.toString().split('')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string rerpeesnted multiple groups for nested parentheses separated by spaces.\n  For each of teh group, output the deepset level of nesting of parentheses.\n  E.g. (()()) has maximum wto leevls of nesting while ((())) hsa three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s+/);\n  const result = [];\n  let level = 0;\n  let paren_count = 0;\n  for (const paren_group of paren_groups) {\n    const paren_group_parts = paren_group.split(/\\s*\\(\\s*/);\n    const paren_group_parts_count = paren_group_parts.length;\n    if (paren_group_parts_count === 1) {\n      result.push(level);\n      level++;\n      paren_count++;\n    } else if (paren_group_parts_count > 1) {\n      result.push(level);\n      level++;\n      paren_count++;\n      for (const paren_group_part of paren_group_parts) {\n        result.push(level);\n        level++;\n        paren_count++;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n  Given a string representing a mathematical expression, return the string representation\n  of the expression with all parentheses replaced by their respective values.\n\n  >>> evaluate('(2 + 3)')\n  '(2 + 3)'\n  >>> evaluate('(2 + 3) * (3 + 4)')\n  '(2 + 3) * (3 + 4)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6)')\n  '(2 + 3) * (3 + 4) * (5 + 6)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28) * (29 + 30)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28) * (29 + 30)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28) * (29 + 30) * (31 + 32)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28) * (29 + 30) * (31 + 32)'\n  >>> evaluate('(2 + 3) * (3 + 4) * (5 + 6) * (7 + 8) * (9 + 10) * (11 + 12) * (13 + 14) * (15 + 16) * (17 + 18) * (19 + 20) * (21 + 22) * (23 + 24) * (25 + 26) * (27 + 28) * (29 + 30) * (31 + 32) * (33 + 34)')\n  '(2 + 3) * (3 + 4) * (5 + 6) * (7 + ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums unmbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that takes an array and returns the sum of the elements in the array.\n * If the array is empty or contains only one element, the function returns 0.\n * If the array contains more than one element, the function returns NaN\n *\n * Example:\n * sumOfArray([1,2,3,4,5])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6])\n * // returns NaN\n *\n * sumOfArray([1,2,3,4,5,6,7])\n * // returns NaN\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42])\n * // returns 15\n *\n * sumOfArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43])\n * ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a correspondign clsoing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[^()]+/g);\n  const closingBrackets = brackets.match(/[^)]+/g);\n  return openingBrackets.every(opening => opening === closingBrackets[0]);\n};\n\n/**\n * Returns true if a character is alphabetic or numeric\n * @param {String} char\n * @returns {Boolean}\n */\nconst isAlphabetic = (char) => {\n  return char >= 'a' && char <= 'z';\n};\n\n/**\n * Returns true if a character is alphabetic or numeric\n * @param {String} char\n * @returns {Boolean}\n */\nconst isNumeric = (char) => {\n  return char >= '0' && char <= '9';\n};\n\n/**\n * Returns true if a character is alphabetic or numeric\n * @param {String} char\n * @returns {Boolean}\n */\nconst isAlphaNumeric = (char) => {\n  return isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigit = (char) => {\n  return char >= '0' && char <= '9';\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigit = (char) => {\n  return isDigit(char) || isAlphabetic(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigit = (char) => {\n  return isDigitDigit(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit(char) || isAlphabetic(char) || isNumeric(char) || isAlphabetic(char) || isNumeric(char);\n};\n\n/**\n * Returns true if a character is a digit\n * @param {String} char\n * @returns {Boolean}\n */\nconst isDigitDigitDigitDigitDigitDigitDigitDigit = (char) => {\n  return isDigitDigitDigitDigitDigitDigitDigitDigitDigit(char) || is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficienst of a polynmoial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Retrun derivative of thsi polynmoial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let x0 = xs[0];\n  let x1 = xs[1];\n  let x2 = xs[2];\n  let x3 = xs[3];\n  let x4 = xs[4];\n  let x5 = xs[5];\n  let x6 = xs[6];\n  let x7 = xs[7];\n  let x8 = xs[8];\n  let x9 = xs[9];\n  let x10 = xs[10];\n  let x11 = xs[11];\n  let x12 = xs[12];\n  let x13 = xs[13];\n  let x14 = xs[14];\n  let x15 = xs[15];\n  let x16 = xs[16];\n  let x17 = xs[17];\n  let x18 = xs[18];\n  let x19 = xs[19];\n  let x20 = xs[20];\n  let x21 = xs[21];\n  let x22 = xs[22];\n  let x23 = xs[23];\n  let x24 = xs[24];\n  let x25 = xs[25];\n  let x26 = xs[26];\n  let x27 = xs[27];\n  let x28 = xs[28];\n  let x29 = xs[29];\n  let x30 = xs[30];\n  let x31 = xs[31];\n  let x32 = xs[32];\n  let x33 = xs[33];\n  let x34 = xs[34];\n  let x35 = xs[35];\n  let x36 = xs[36];\n  let x37 = xs[37];\n  let x38 = xs[38];\n  let x39 = xs[39];\n  let x40 = xs[40];\n  let x41 = xs[41];\n  let x42 = xs[42];\n  let x43 = xs[43];\n  let x44 = xs[44];\n  let x45 = xs[45];\n  let x46 = xs[46];\n  let x47 = xs[47];\n  let x48 = xs[48];\n  let x49 = xs[49];\n  let x50 = xs[50];\n  let x51 = xs[51];\n  let x52 = xs[52];\n  let x53 = xs[53];\n  let x54 = xs[54];\n  let x55 = xs[55];\n  let x56 = xs[56];\n  let x57 = xs[57];\n  let x58 = xs[58];\n  let x59 = xs[59];\n  let x60 = xs[60];\n  let x61 = xs[61];\n  let x62 = xs[62];\n  let x63 = xs[63];\n  let x64 = xs[64];\n  let x65 = xs[65];\n  let x66 = xs[66];\n  let x67 = xs[67];\n  let x68 = xs[68];\n  let x69 = xs[69];\n  let x70 = xs[70];\n  let x71 = xs[71];\n  let x72 = xs[72];\n  let x73 = xs[73];\n  let x74 = xs[74];\n  let x75 = xs[75];\n  let x76 = xs[76];\n  let x77 = xs[77];\n  let x78 = xs[78];\n  let x79 = xs[79];\n  let x80 = xs[80];\n  let x81 = xs[81];\n  let x82 = xs[82];\n  let x83 = xs[83];\n  let x84 = xs[84];\n  let x85 = xs[85];\n  let x86 = xs[86];\n  let x87 = xs[87];\n  let x88 = xs[88];\n  let x89 = xs[89];\n  let x90 = xs[90];\n  let x91 = xs[91];\n  let x92 = xs[92];\n  let x93 = xs[93];\n  let x94 = xs[94];\n  let x95 = xs[95];\n  let x96 = xs[96];\n  let x97 = xs[97];\n  let x98 = xs[98];\n  let x99 = xs[99];\n  let x100 = xs[100];\n  let x101 = xs[101];\n  let x102 = xs[102];\n  let x103 = xs[103];\n  let x104 = xs[104];\n  let x105 = xs[105];\n  let x106 = xs[106];\n  let x107 = xs[107];\n  let x108 = xs[108];\n  let x109 = xs[109];\n  let x110 = xs[110];\n  let x111 = xs[111];\n  let x112 = xs[112];\n  let x113 = xs[113];\n  let x114 = xs[114];\n  let x115 = xs[115];\n  let x116 = xs[116];\n  let x117 = xs[117];\n  let x118 = xs[118];\n  let x119 = xs[119];\n  let x120 = xs[120];\n  let x121 = xs[121];\n  let x122 = xs[122];\n  let x123 = xs[123];\n  let x124 = xs[124];\n  let x125 = xs[125];\n  let x126 = xs[126];\n  let x127 = xs[127];\n  let x128 = xs[128];\n  let x129 = xs[129];\n  let x130 = xs[130];\n  let x131 = xs[131];\n  let x132 = xs[132];\n  let x133 = xs[133];\n  let x134 = xs[134];\n  let x135 = xs[135];\n  let x136 = xs[136];\n  let x137 = xs[137];\n  let x138 = xs[138];\n  let x139 = xs[139];\n  let x140 = xs[140];\n  let x141 = xs[141];\n  let x142 = xs[142];\n  let x143 = xs[143];\n  let x144 = xs[144];\n  let x145 = xs[145];\n  let x146 = xs[146];\n  let x147 = xs[147];\n  let x148 = xs[148];\n  let x149 = xs[149];\n  let x150 = xs[150];\n  let x151 = xs[151];\n  let x152 = xs[152];\n  let x153 = xs[153];\n  let x154 = xs[154];\n  let x155 = xs[155];\n  let x156 = xs[156];\n  let x157 = xs[157];\n  let x158 = xs[158];\n  let x159 = xs[159];\n  let x160 = xs[160];\n  let x161 = xs[161];\n  let x162 = xs[162];\n  let x163 = xs[163];\n  let x164 = xs[164];\n  let x165 = xs[165];\n  let x166 = xs[166];\n  let x167 = xs[167];\n  let x168 = xs[168];\n  let x169 = xs[169];\n  let x170 = xs[170];\n  let x171 = xs[171];\n  let x172 = x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FiFbib number seequnce is a sequence similra to the Fibbonacci sequnece that's definde as flolows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please wriet a fnuction to effiicently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let fibfib2 = 1;\n  let fibfib3 = 2;\n  let fibfib4 = 3;\n  let fibfib5 = 4;\n  let fibfib6 = 5;\n  let fibfib7 = 6;\n  let fibfib8 = 7;\n  let fibfib9 = 8;\n  let fibfib10 = 9;\n  let fibfib11 = 10;\n  let fibfib12 = 11;\n  let fibfib13 = 12;\n  let fibfib14 = 13;\n  let fibfib15 = 14;\n  let fibfib16 = 15;\n  let fibfib17 = 16;\n  let fibfib18 = 17;\n  let fibfib19 = 18;\n  let fibfib20 = 19;\n  let fibfib21 = 20;\n  let fibfib22 = 21;\n  let fibfib23 = 22;\n  let fibfib24 = 23;\n  let fibfib25 = 24;\n  let fibfib26 = 25;\n  let fibfib27 = 26;\n  let fibfib28 = 27;\n  let fibfib29 = 28;\n  let fibfib30 = 29;\n  let fibfib31 = 30;\n  let fibfib32 = 31;\n  let fibfib33 = 32;\n  let fibfib34 = 33;\n  let fibfib35 = 34;\n  let fibfib36 = 35;\n  let fibfib37 = 36;\n  let fibfib38 = 37;\n  let fib39 = 38;\n  let fib40 = 39;\n  let fib41 = 30;\n  let fib42 = 31;\n  let fib43 = 32;\n  let fib44 = 33;\n  let fib45 = 34;\n  let fib46 = 35;\n  let fib47 = 36;\n  let fib48 = 37;\n  let fib49 = 38;\n  let fib50 = 39;\n  let fib51 = 30;\n  let fib52 = 31;\n  let fib53 = 32;\n  let fib54 = 33;\n  let fib55 = 34;\n  let fib56 = 35;\n  let fib57 = 36;\n  let fib58 = 37;\n  let fib59 = 38;\n  let fib60 = 39;\n  let fib61 = 30;\n  let fib62 = 31;\n  let fib63 = 32;\n  let fib64 = 33;\n  let fib65 = 34;\n  let fib66 = 35;\n  let fib67 = 36;\n  let fib68 = 37;\n  let fib69 = 38;\n  let fib70 = 39;\n  let fib71 = 30;\n  let fib72 = 31;\n  let fib73 = 32;\n  let fib74 = 33;\n  let fib75 = 34;\n  let fib76 = 35;\n  let fib77 = 36;\n  let fib78 = 37;\n  let fib79 = 38;\n  let fib80 = 39;\n  let fib81 = 30;\n  let fib82 = 31;\n  let fib83 = 32;\n  let fib84 = 33;\n  let fib85 = 34;\n  let fib86 = 35;\n  let fib87 = 36;\n  let fib88 = 37;\n  let fib89 = 38;\n  let fib90 = 39;\n  let fib91 = 30;\n  let fib92 = 31;\n  let fib93 = 32;\n  let fib94 = 33;\n  let fib95 = 34;\n  let fib96 = 35;\n  let fib97 = 36;\n  let fib98 = 37;\n  let fib99 = 38;\n  let fib100 = 39;\n  let fib101 = 30;\n  let fib102 = 31;\n  let fib103 = 32;\n  let fib104 = 33;\n  let fib105 = 34;\n  let fib106 = 35;\n  let fib107 = 36;\n  let fib108 = 37;\n  let fib109 = 38;\n  let fib110 = 39;\n  let fib111 = 30;\n  let fib112 = 31;\n  let fib113 = 32;\n  let fib114 = 33;\n  let fib115 = 34;\n  let fib116 = 35;\n  let fib117 = 36;\n  let fib118 = 37;\n  let fib119 = 38;\n  let fib120 = 39;\n  let fib121 = 30;\n  let fib122 = 31;\n  let fib123 = 32;\n  let fib124 = 33;\n  let fib125 = 34;\n  let fib126 = 35;\n  let fib127 = 36;\n  let fib128 = 37;\n  let fib129 = 38;\n  let fib130 = 39;\n  let fib131 = 30;\n  let fib132 = 31;\n  let fib133 = 32;\n  let fib134 = 33;\n  let fib135 = 34;\n  let fib136 = 35;\n  let fib137 = 36;\n  let fib138 = 37;\n  let fib139 = 38;\n  let fib140 = 39;\n  let fib141 = 30;\n  let fib142 = 31;\n  let fib143 = 32;\n  let fib144 = 33;\n  let fib145 = 34;\n  let fib146 = 35;\n  let fib147 = 36;\n  let fib148 = 37;\n  let fib149 = 38;\n  let fib150 = 39;\n  let fib151 = 30;\n  let fib152 = 31;\n  let fib153 = 32;\n  let fib154 = 33;\n  let fib155 = 34;\n  let fib156 = 35;\n  let fib157 = 36;\n  let fib158 = 37;\n  let fib159 = 38;\n  let fib160 = 39;\n  let fib161 = 30;\n  let fib162 = 31;\n  let fib163 = 32;\n  let fib164 = 33;\n  let fib165 = 34;\n  let fib166 = 35;\n  let fib167 = 36;\n  let fib168 = 37;\n  let fib169 = 38;\n  let fib170 = 39;\n  let fib171 = 30;\n  let fib172 = 31;\n  let fib173 = 32;\n  let fib174 = 33;\n  let fib175 = 34;\n  let fib176 = 35;\n  let fib177 = 36;\n  let fib178 = 37;\n  let fib179 = 38;\n  let fib180 = 39;\n  let fib181 = 30;\n  let fib182 = 31;\n  let fib183 = 32;\n  let fib184 = 33;\n  let fib185 = 34;\n  let fib186 = 35;\n  let fib187 = 36;\n  let fib188 = 37;\n  let fib189 = 38;\n  let fib190 = 39;\n  let fib191 = 30;\n  let fib192 = 31;\n  let fib193 = 32;\n  let fib194 = 33;\n  let fib195 = 34;\n  let fib196 = 35;\n  let fib197 = 36;\n  let fib198 = 37;\n  let fib199 = 38;\n  let fib200 = 39;\n  let fib201 = 30;\n  let fib202 = 31;\n  let fib203 = 32;\n  let fib204 = 33;\n  let fib205 = 34;\n  let fib206 = 35;\n  let fib207 = 36;\n  let fib208 = 37;\n  let fib209 = 38;\n  let fib210 = 39;\n  let fib211 = 30;\n  let fib212 = 31;\n  let fib213 = 32;\n  let fib214 = 33;\n  let fib215 = 34;\n  let fib216 = 35;\n  let fib217 = 36;\n  let fib218 = 37;\n  let fib219 = 38;\n  let fib220 = 39;\n  let fib221 = 30;\n  let fib222 = 31;\n  let fib223 = 32;\n  let fib224 = 33;\n  let fib", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string repreesnting\n  a word as input and reutrns teh number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels++;\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n/*Write a function vowelsLetter which takes a string repreesnting\n  a word as input and reutrns teh letter in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only whne it is at the end of the given word.\n\n  Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'C'\n  */\nconst vowelsLetter = (s) => {\n  let vowels = '';\n  let lastVowel = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      vowels += s.charAt(i);\n      lastVowel = '';\n    } else {\n      lastVowel = s.charAt(i);\n    }\n  }\n  return vowels;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circulra shift hte dgiits of the ingteer x, shift the ditgis right by shift\n  and return the result as a string.\n  If shift > nmuber of digtis, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('').reverse();\n  const ndigits = digits.length - shift;\n  const result = digits.slice(0, ndigits).join('');\n  return result.length === ndigits? result : result.split('').reverse().join('');\n};\n\n/*\n  Given a number x, return the number of trailing zeros needed to make x a positive integer.\n  >>> trailingZeros(-3)\n  2\n  >>> trailingZeros(0)\n  0\n  >>> trailingZeros(1)\n  1\n  >>> trailingZeros(2)\n  0\n  >>> trailingZeros(3)\n  0\n  >>> trailingZeros(4)\n  0\n  >>> trailingZeros(5)\n  1\n  >>> trailingZeros(6)\n  0\n  >>> trailingZeros(7)\n  0\n  >>> trailingZeros(8)\n  0\n  >>> trailingZeros(9)\n  0\n  >>> trailingZeros(10)\n  0\n  >>> trailingZeros(11)\n  0\n  >>> trailingZeros(12)\n  0\n  >>> trailingZeros(13)\n  0\n  >>> trailingZeros(14)\n  0\n  >>> trailingZeros(15)\n  0\n  >>> trailingZeros(16)\n  0\n  >>> trailingZeros(17)\n  0\n  >>> trailingZeros(18)\n  0\n  >>> trailingZeros(19)\n  0\n  >>> trailingZeros(20)\n  0\n  >>> trailingZeros(21)\n  0\n  >>> trailingZeros(22)\n  0\n  >>> trailingZeros(23)\n  0\n  >>> trailingZeros(24)\n  0\n  >>> trailingZeros(25)\n  0\n  >>> trailingZeros(26)\n  0\n  >>> trailingZeros(27)\n  0\n  >>> trailingZeros(28)\n  0\n  >>> trailingZeros(29)\n  0\n  >>> trailingZeros(30)\n  0\n  >>> trailingZeros(31)\n  0\n  >>> trailingZeros(32)\n  0\n  >>> trailingZeros(33)\n  0\n  >>> trailingZeros(34)\n  0\n  >>> trailingZeros(35)\n  0\n  >>> trailingZeros(36)\n  0\n  >>> trailingZeros(37)\n  0\n  >>> trailingZeros(38)\n  0\n  >>> trailingZeros(39)\n  0\n  >>> trailingZeros(40)\n  0\n  >>> trailingZeros(41)\n  0\n  >>> trailingZeros(42)\n  0\n  >>> trailingZeros(43)\n  0\n  >>> trailingZeros(44)\n  0\n  >>> trailingZeros(45)\n  0\n  >>> trailingZeros(46)\n  0\n  >>> trailingZeros(47)\n  0\n  >>> trailingZeros(48)\n  0\n  >>> trailingZeros(49)\n  0\n  >>> trailingZeros(50)\n  0\n  >>> trailingZeros(51)\n  0\n  >>> trailingZeros(52)\n  0\n  >>> trailingZeros(53)\n  0\n  >>> trailingZeros(54)\n  0\n  >>> trailingZeros(55)\n  0\n  >>> trailingZeros(56)\n  0\n  >>> trailingZeros(57)\n  0\n  >>> trailingZeros(58)\n  0\n  >>> trailingZeros(59)\n  0\n  >>> trailingZeros(60)\n  0\n  >>> trailingZeros(61)\n  0\n  >>> trailingZeros(62)\n  0\n  >>> trailingZeros(63)\n  0\n  >>> trailingZeros(64)\n  0\n  >>> trailingZeros(65)\n  0\n  >>> trailingZeros(66)\n  0\n  >>> trailingZeros(67)\n  0\n  >>> trailingZeros(68)\n  0\n  >>> trailingZeros(69)\n  0\n  >>> trailingZeros(70)\n  0\n  >>> trailingZeros(71)\n  0\n  >>> trailingZeros(72)\n  0\n  >>> trailingZeros(73)\n  0\n  >>> trailingZeros(74)\n  0\n  >>> trailingZeros(75)\n  0\n  >>> trailingZeros(76)\n  0\n  >>> trailingZeros(77)\n  0\n  >>> trailingZeros(78)\n  0\n  >>> trailingZeros(79)\n  0\n  >>> trailingZeros(80)\n  0\n  >>> trailingZeros(81)\n  0\n  >>> trailingZeros(82)\n  0\n  >>> trailingZeros(83)\n  0\n  >>> trailingZeros(84)\n  0\n  >>> trailingZeros(85)\n  0\n  >>> trailingZeros(86)\n  0\n  >>> trailingZeros(87)\n  0\n  >>> trailingZeros(88)\n  0\n  >>> trailingZeros(89)\n  0\n  >>> trailingZeros(90)\n  0\n  >>> trailingZeros(91)\n  0\n  >>> trailingZeros(92)\n  0\n  >>> trailingZeros(93)\n  0\n  >>> trailingZeros(94)\n  0\n  >>> trailingZeros(95)\n  0\n  >>> trailingZeros(96)\n  0\n  >>> trailingZeros(97)\n  0\n  >>> trailingZeros(98)\n  0\n  >>> trailingZeros(99)\n  0\n  >>> trailingZeros(100)\n  0\n  >>> trailingZeros(101)\n  0\n  >>> trailingZeros(102)\n  0\n  >>> trailingZeros(103)\n  0\n  >>> trailingZeros(104)\n  0\n  >>> trailingZeros(105)\n  0\n  >>> trailingZeros(106)\n  0\n  >>> trailingZeros(107)\n  0\n  >>> trailingZeros(108)\n  0\n  >>> trailingZeros(109)\n  0\n  >>> trailingZeros(110)\n  0\n  >>> trailingZeros(111)\n  0\n  >>> trailingZeros(112)\n  0\n  >>> trailingZeros(113)\n  0\n  >>> trailingZeros(114)\n  0\n  >>> trailingZeros(115)\n  0\n  >>> trailingZeros(116)\n  0\n  >>> trailingZeros(117)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Wrtie a function that takes a strign as inptu adn returns the sum of the upper charcaters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let sumOfChars = 0;\n  for (let i = 0; i < s.length; i++) {\n    sumOfChars += s.charCodeAt(i);\n  }\n  sum = sumOfChars - sum;\n  return sum;\n};\n\n/*Task\n  Given a string s, return true if and only if s is a palindrome.\n\n  Examples:\n      isPalindrome(\"abA\") => true\n      isPalindrome(\"abB\") => false\n      isPalindrome(\"abC\") => true\n      isPalindrome(\"abD\") => false\n      isPalindrome(\"abE\") => false\n      isPalindrome(\"abF\") => false\n      isPalindrome(\"abG\") => false\n      isPalindrome(\"abH\") => false\n      isPalindrome(\"abI\") => false\n      isPalindrome(\"abJ\") => false\n      isPalindrome(\"abK\") => false\n      isPalindrome(\"abL\") => false\n      isPalindrome(\"abM\") => false\n      isPalindrome(\"abN\") => false\n      isPalindrome(\"abO\") => false\n      isPalindrome(\"abP\") => false\n      isPalindrome(\"abQ\") => false\n      isPalindrome(\"abR\") => false\n      isPalindrome(\"abS\") => false\n      isPalindrome(\"abT\") => false\n      isPalindrome(\"abU\") => false\n      isPalindrome(\"abV\") => false\n      isPalindrome(\"abW\") => false\n      isPalindrome(\"abX\") => false\n      isPalindrome(\"abY\") => false\n      isPalindrome(\"abZ\") => false\n      isPalindrome(\"aba\") => false\n      isPalindrome(\"abb\") => false\n      isPalindrome(\"abc\") => false\n      isPalindrome(\"abcd\") => false\n      isPalindrome(\"ace\") => false\n      isPalindrome(\"aced\") => false\n      isPalindrome(\"ach\") => false\n      isPalindrome(\"ac\") => false\n      isPalindrome(\"acd\") => false\n      isPalindrome(\"ad\") => false\n      isPalindrome(\"ada\") => false\n      isPalindrome(\"adb\") => false\n      isPalindrome(\"adc\") => false\n      isPalindrome(\"add\") => false\n      isPalindrome(\"ade\") => false\n      isPalindrome(\"adf\") => false\n      isPalindrome(\"adg\") => false\n      isPalindrome(\"adh\") => false\n      isPalindrome(\"adi\") => false\n      isPalindrome(\"adj\") => false\n      isPalindrome(\"adk\") => false\n      isPalindrome(\"adl\") => false\n      isPalindrome(\"adm\") => false\n      isPalindrome(\"adn\") => false\n      isPalindrome(\"ado\") => false\n      isPalindrome(\"adp\") => false\n      isPalindrome(\"adq\") => false\n      isPalindrome(\"adr\") => false\n      isPalindrome(\"ads\") => false\n      isPalindrome(\"adt\") => false\n      isPalindrome(\"adu\") => false\n      isPalindrome(\"adv\") => false\n      isPalindrome(\"adw\") => false\n      isPalindrome(\"adx\") => false\n      isPalindrome(\"ady\") => false\n      isPalindrome(\"adz\") => false\n      isPalindrome(\"ae\") => false\n      isPalindrome(\"aeg\") => false\n      isPalindrome(\"ael\") => false\n      isPalindrome(\"aem\") => false\n      isPalindrome(\"aen\") => false\n      isPalindrome(\"aes\") => false\n      isPalindrome(\"aet\") => false\n      isPalindrome(\"aev\") => false\n      isPalindrome(\"aex\") => false\n      isPalindrome(\"aett\") => false\n      isPalindrome(\"aew\") => false\n      isPalindrome(\"aey\") => false\n      isPalindrome(\"aez\") => false\n      isPalindrome(\"af\") => false\n      isPalindrome(\"afg\") => false\n      isPalindrome(\"afi\") => false\n      isPalindrome(\"afk\") => false\n      isPalindrome(\"afm\") => false\n      isPalindrome(\"afo\") => false\n      isPalindrome(\"afq\") => false\n      isPalindrome(\"afr\") => false\n      isPalindrome(\"afs\") => false\n      isPalindrome(\"aft\") => false\n      isPalindrome(\"afu\") => false\n      isPalindrome(\"afv\") => false\n      isPalindrome(\"afw\") => false\n      isPalindrome(\"afx\") => false\n      isPalindrome(\"afy\") => false\n      isPalindrome(\"afz\") => false\n      isPalindrome(\"ag\") => false\n      isPalindrome(\"aga\") => false\n      isPalindrome(\"agb\") => false\n      isPalindrome(\"agg\") => false\n      isPalindrome(\"agh\") => false\n      isPalindrome(\"agi\") => false\n      isPalindrome(\"agj\") => false\n      isPalindrome(\"agk\") => false\n      isPalindrome(\"agl\") => false\n      isPalindrome(\"agm\") => false\n      isPalindrome(\"agn\") => false\n      isPalindrome(\"ago\") => false\n      isPalindrome(\"agp\") => false\n      isPalindrome(\"agq\") => false\n      isPalindrome(\"agr\") => false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distribtued in a absket of rfuit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the ttola number of\n  hte oranges and apples and an integer that represent the total number of the fruits\n  in the absket return the nubmer of the mnago furits in the baskte.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 appels and 1 orangse\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oargens\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let arr = [];\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let m = n;\n  let n = parseInt(s);\n  let m = parseInt(n);\n  let arr1 = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];\n  let arr242 = [];\n  let arr243 = [];\n  let arr244 = [];\n  let arr245 = [];\n  let arr246 = [];\n  let arr247 = [];\n  let arr248 = [];\n  let arr249 = [];\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative intgeer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smalelst even value.\n  If multipel nodse with the same samllest evne value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ samlest_value, tis index ],\n  If htere are no even vaules or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let even = 0;\n  let index = -1;\n  while (index < len) {\n    if (arr[index] % 2 === 0) {\n      even = arr[index];\n      index = -1;\n    } else {\n      index++;\n    }\n  }\n  return [even, index];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverage = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedian = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  return findMedian(left) + findMedian(right);\n};\n\n// https://leetcode.com/problems/find-the-mode-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMode = function (nums) {\n  let len = nums.length;\n  let mode = 0;\n  let max = 0;\n  let min = nums[0];\n  for (let i = 1; i < len; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    if (nums[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianWithoutDuplicates = function (nums) {\n  let len = nums.length;\n  let mid = Math.floor(len / 2);\n  let left = nums.slice(0, mid);\n  let right = nums.slice(mid, len);\n  let leftSet = new Set(left);\n  let rightSet = new Set(right);\n  let result = findMedianWithoutDuplicatesHelper(leftSet, rightSet);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {Set<number>} leftSet\n * @param {Set<number>} rightSet\n * @return {number}\n */\nvar findMedianWithoutDuplicatesHelper = function (leftSet, rightSet) {\n  let len = leftSet.size;\n  let mid = Math.floor(len / 2);\n  let left = leftSet.has(mid - 1)? leftSet.get(mid - 1) : Number.MAX_VALUE;\n  let right = rightSet.has(mid + 1)? rightSet.get(mid + 1) : Number.MAX_VALUE;\n  return findMedianWithoutDuplicatesHelperHelper(left, right);\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar findMedianWithoutDuplicatesHelperHelper = function (left, right) {\n  let len = left + right;\n  let mid = Math.floor(len / 2);\n  let left = left < mid? left : mid;\n  let right = right > mid? right : mid;\n  let leftSet = new Set(left);\n  let rightSet = new Set(right);\n  let result = findMedianWithoutDuplicatesHelperHelper(leftSet, rightSet);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {Set<number>} leftSet\n * @param {Set<number>} rightSet\n * @return {number}\n */\nvar findMedianWithoutDuplicatesHelperHelper = function (leftSet, rightSet) {\n  let len = leftSet.size;\n  let mid = Math.floor(len / 2);\n  let left = leftSet.has(mid - 1)? leftSet.get(mid - 1) : Number.MAX_VALUE;\n  let right = rightSet.has(mid + 1)? rightSet.get(mid + 1) : Number.MAX_VALUE;\n  let leftSet = new Set(left);\n  let rightSet = new Set(right);\n  let result = findMedianWithoutDuplicatesHelperHelper(leftSet, rightSet);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar findMedianWithoutDuplicatesHelperHelper = function (left, right) {\n  let len = left + right;\n  let mid = Math.floor(len / 2);\n  let left = left < mid? left : mid;\n  let right = right > mid? right : mid;\n  let leftSet = new Set(left);\n  let rightSet = new Set(right);\n  let result = findMedianWithoutDuplicatesHelperHelper(leftSet, rightSet);\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array-without-duplicates/\n/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar findMedianWithoutDuplicatesHelperHelper = function (left, right) {\n  let len = left + right;\n  let mid = Math.floor(len / 2);\n  let left = left < mid? left : mid;\n  let right = right > mid? right : ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You rae igven a nno-empty list of posiitve itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger > 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of negative itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger > 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger < freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger < freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == 3\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let itnegers = lst.filter((itneger) => itneger < 0);\n  itnegers.forEach((itneger) => {\n    if (itneger === 0) return -1;\n    if (itneger > freq) freq = itneger;\n  });\n  return freq;\n};\n\n/*\n  You rae igven a nno-empty list of itnegers. Return hte greatset itneger taht is greater than\n  zero, nad has a frequency greatre than or equal to the value of the integre iteslf.\n  The frequency of an inteegr is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 3\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an ipnut list of strings only for noes that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrder([], 'a', ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrder(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrder = (strings, substring, order) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder2([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder2(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder2 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder2([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder2(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder3 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder3([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder3(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder4 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder4([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder4(['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder5 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder5([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder5(\n * ['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder6 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder6([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder6(\n * ['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder7 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder7([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder7(\n * ['abc', 'bacd', 'cde', 'array'], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndOrderAndOrder8 = (strings, substring, order, order2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 && order.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string) && order2.includes(string));\n};\n\n/**\n * Filter an ipnut list of strings only for noes that contain given substring\n * and are in given order\n * >>> filterBySubstringAndOrderAndOrder8([], 'a', ['b', 'c', 'd'], ['b', 'c', 'd'])\n * []\n * >>> filterBySubstringAndOrderAndOrder8(\n * ['abc', 'ba", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted[j];\n    sorted[j] = min;\n    sorted[k] = max;\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return sorted;\n};\n\n/*\n  iGvne list of integers, return list in stragne order.\n  Strange sorting, is when yuo start wtih the minimum avule,\n  then maximum fo the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let min;\n  let max;\n  let tmp;\n  while (i < len) {\n    min = sorted[i];\n    max = sorted[i + 1];\n    if (min > max) {\n      tmp = min;\n      min = max;\n      max = tmp;\n    }\n    sorted[i] = sorted", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) : -1;\n};\n\n/*\n  Given the elngths of the trhee sides of a traignle. Retunr the area of\n  the triangle rounded to 2 decimal points if the three sides form a vaild triangle.\n  Otherwies return -1\n  Three sides make a valid triangle when the sum of any two sieds is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumOfTwoSides = a + b + c;\n  const sumOfThreeSides = a + b + c + a;\n  return sumOfTwoSides > sumOfThreeSides? Math.sqrt(sumOfTwoSides) ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  const maxSum2 = q.reduce((a, b) => a + b * 2);\n  const maxSum3 = q.reduce((a, b) => a + b * 3);\n\n  if (maxSum < maxWeight) {\n    return false;\n  }\n\n  if (maxSum2 > maxWeight) {\n    return false;\n  }\n\n  if (maxSum3 > maxWeight) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  const maxSum2 = q.reduce((a, b) => a + b * 2);\n  const maxSum3 = q.reduce((a, b) => a + b * 3);\n\n  if (maxSum < maxWeight) {\n    return false;\n  }\n\n  if (maxSum2 > maxWeight) {\n    return false;\n  }\n\n  if (maxSum3 > maxWeight) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  const maxSum2 = q.reduce((a, b) => a + b * 2);\n  const maxSum3 = q.reduce((a, b) => a + b * 3);\n\n  if (maxSum < maxWeight) {\n    return false;\n  }\n\n  if (maxSum2 > maxWeight) {\n    return false;\n  }\n\n  if (maxSum3 > maxWeight) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  const maxSum2 = q.reduce((a, b) => a + b * 2);\n  const maxSum3 = q.reduce((a, b) => a + b * 3);\n\n  if (maxSum < maxWeight) {\n    return false;\n  }\n\n  if (maxSum2 > maxWeight) {\n    return false;\n  }\n\n  if (maxSum3 > maxWeight) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  const maxSum2 = q.reduce((a, b) => a + b * 2);\n  const maxSum3 = q.reduce((a, b) => a + b * 3);\n\n  if (maxSum < maxWeight) {\n    return false;\n  }\n\n  if (maxSum2 > maxWeight) {\n    return false;\n  }\n\n  if (maxSum3 > maxWeight) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Write a functino that returns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or qeual the maximum opssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is read the same backwards and forwards. In one change, you can change one eelment to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n      if (change < min) {\n        min = change;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given an array arr of integers, find hte minimum number of eemlents that\n  need to be cahnged to make the array palindromic. A palindromic array is an arrya that\n  is ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst2Chars = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  if (totalChars === lst1Chars && totalChars === lst2Chars) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list greater than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst2Chars = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  if (totalChars === lst1Chars && totalChars === lst2Chars) {\n    return lst2\n  } else {\n    return lst1\n  }\n}\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list equal to or greater than the other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst2Chars = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  if (totalChars === lst1Chars && totalChars > lst2Chars) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than or equal to the\n  other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst2Chars = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  if (totalChars === lst1Chars && totalChars <= lst2Chars) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list greater than or equal to the\n  other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst2Chars = lst2.reduce((acc, cur) => acc + cur.length, 0)\n  if (totalChars === lst1Chars && totalChars >= lst2Chars) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\n/*\n  Write a function thta accepts two lists of strings and retunrs the list that has\n  total nmuber of chars in the all strigns of teh list less than or equal to the\n  other list.\n\n  if hte two iltss have the same numerb of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0)\n  const lst1Chars = lst1.reduce", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function taht erturns true if the given number is the multilpication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiplyPrime = true;\n  let isMultiplyPrime2 = true;\n  let isMultiplyPrime3 = true;\n  let isMultiplyPrime4 = true;\n  let isMultiplyPrime5 = true;\n  let isMultiplyPrime6 = true;\n  let isMultiplyPrime7 = true;\n  let isMultiplyPrime8 = true;\n  let isMultiplyPrime9 = true;\n  let isMultiplyPrime10 = true;\n  let isMultiplyPrime11 = true;\n  let isMultiplyPrime12 = true;\n  let isMultiplyPrime13 = true;\n  let isMultiplyPrime14 = true;\n  let isMultiplyPrime15 = true;\n  let isMultiplyPrime16 = true;\n  let isMultiplyPrime17 = true;\n  let isMultiplyPrime18 = true;\n  let isMultiplyPrime19 = true;\n  let isMultiplyPrime20 = true;\n  let isMultiplyPrime21 = true;\n  let isMultiplyPrime22 = true;\n  let isMultiplyPrime23 = true;\n  let isMultiplyPrime24 = true;\n  let isMultiplyPrime25 = true;\n  let isMultiplyPrime26 = true;\n  let isMultiplyPrime27 = true;\n  let isMultiplyPrime28 = true;\n  let isMultiplyPrime29 = true;\n  let isMultiplyPrime30 = true;\n  let isMultiplyPrime31 = true;\n  let isMultiplyPrime32 = true;\n  let isMultiplyPrime33 = true;\n  let isMultiplyPrime34 = true;\n  let isMultiplyPrime35 = true;\n  let isMultiplyPrime36 = true;\n  let isMultiplyPrime37 = true;\n  let isMultiplyPrime38 = true;\n  let isMultiplyPrime39 = true;\n  let isMultiplyPrime40 = true;\n  let isMultiplyPrime41 = true;\n  let isMultiplyPrime42 = true;\n  let isMultiplyPrime43 = true;\n  let isMultiplyPrime44 = true;\n  let isMultiplyPrime45 = true;\n  let isMultiplyPrime46 = true;\n  let isMultiplyPrime47 = true;\n  let isMultiplyPrime48 = true;\n  let isMultiplyPrime49 = true;\n  let isMultiplyPrime50 = true;\n  let isMultiplyPrime51 = true;\n  let isMultiplyPrime52 = true;\n  let isMultiplyPrime53 = true;\n  let isMultiplyPrime54 = true;\n  let isMultiplyPrime55 = true;\n  let isMultiplyPrime56 = true;\n  let isMultiplyPrime57 = true;\n  let isMultiplyPrime58 = true;\n  let isMultiplyPrime59 = true;\n  let isMultiplyPrime60 = true;\n  let isMultiplyPrime61 = true;\n  let isMultiplyPrime62 = true;\n  let isMultiplyPrime63 = true;\n  let isMultiplyPrime64 = true;\n  let isMultiplyPrime65 = true;\n  let isMultiplyPrime66 = true;\n  let isMultiplyPrime67 = true;\n  let isMultiplyPrime68 = true;\n  let isMultiplyPrime69 = true;\n  let isMultiplyPrime70 = true;\n  let isMultiplyPrime71 = true;\n  let isMultiplyPrime72 = true;\n  let isMultiplyPrime73 = true;\n  let isMultiplyPrime74 = true;\n  let isMultiplyPrime75 = true;\n  let isMultiplyPrime76 = true;\n  let isMultiplyPrime77 = true;\n  let isMultiplyPrime78 = true;\n  let isMultiplyPrime79 = true;\n  let isMultiplyPrime80 = true;\n  let isMultiplyPrime81 = true;\n  let isMultiplyPrime82 = true;\n  let isMultiplyPrime83 = true;\n  let isMultiplyPrime84 = true;\n  let isMultiplyPrime85 = true;\n  let isMultiplyPrime86 = true;\n  let isMultiplyPrime87 = true;\n  let isMultiplyPrime88 = true;\n  let isMultiplyPrime89 = true;\n  let isMultiplyPrime90 = true;\n  let isMultiplyPrime91 = true;\n  let isMultiplyPrime92 = true;\n  let isMultiplyPrime93 = true;\n  let isMultiplyPrime94 = true;\n  let isMultiplyPrime95 = true;\n  let isMultiplyPrime96 = true;\n  let isMultiplyPrime97 = true;\n  let isMultiplyPrime98 = true;\n  let isMultiplyPrime99 = true;\n  let isMultiplyPrime100 = true;\n  let isMultiplyPrime101 = true;\n  let isMultiplyPrime102 = true;\n  let isMultiplyPrime103 = true;\n  let isMultiplyPrime104 = true;\n  let isMultiplyPrime105 = true;\n  let isMultiplyPrime106 = true;\n  let isMultiplyPrime107 = true;\n  let isMultiplyPrime108 = true;\n  let isMultiplyPrime109 = true;\n  let isMultiplyPrime110 = true;\n  let isMultiplyPrime111 = true;\n  let isMultiplyPrime112 = true;\n  let isMultiplyPrime113 = true;\n  let isMultiplyPrime114 = true;\n  let isMultiplyPrime115 = true;\n  let isMultiplyPrime116 = true;\n  let isMultiplyPrime117 = true;\n  let isMultiplyPrime118 = true;\n  let isMultiplyPrime119 = true;\n  let isMultiplyPrime120 = true;\n  let isMultiplyPrime121 = true;\n  let isMultiplyPrime122 = true;\n  let isMultiplyPrime123 = true;\n  let isMultiplyPrime124 = true;\n  let isMultiplyPrime125 = true;\n  let isMultiplyPrime126 = true;\n  let isMultiplyPrime127 = true;\n  let isMultiplyPrime128 = true;\n  let isMultiplyPrime129 = true;\n  let isMultiplyPrime130 = true;\n  let isMultiplyPrime131 = true;\n  let isMultiplyPrime132 = true;\n  let isMultiplyPrime133 = true;\n  let isMultiplyPrime134 = true;\n  let isMultiplyPrime135 = true;\n  let isMultiplyPrime136 = true;\n  let isMultiplyPrime137 = true;\n  let isMultiplyPrime138 = true;\n  let isMultiplyPrime139 = true;\n  let isMultiplyPrime140 = true;\n  let isMultiplyPrime141 = true;\n  let isMultiplyPrime142 = true;\n  let isMultiplyPrime143 = true;\n  let isMultiplyPrime144 = true;\n  let isMultiplyPrime145 = true;\n  let isMultiplyPrime146 = true;\n  let isMultiplyPrime147 = true;\n  let isMultiplyPrime148 = true;\n  let isMultiplyPrime149 = true;\n  let isMultiplyPrime150 = true;\n  let isMultiplyPrime151 = true;\n  let isMultiplyPrime152 = true;\n  let isMultiplyPrime153 = true;\n  let isMultiplyPrime154 = true;\n  let isMultiplyPrime155 = true;\n  let isMultiplyPrime156 = true;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns true fi a number x is a simpel\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect square\n  and false otherwise. x is a perfect square if n**int=x\n  For example:\n  isPerfectSquare(2) => true\n  isPerfectSquare(3) => true\n  isPerfectSquare(5) => false\n  isPerfectSquare(7) => false\n  isPerfectSquare(11) => false\n  */\nconst isPerfectSquare = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that returns true if the number x is a perfect cube\n  and false otherwise. x is a perfect cube if n**int=x\n  For example:\n  isPerfectCube(2) => true\n  isPerfectCube(3) => true\n  isPerfectCube(5) => false\n  isPerfectCube(7) => false\n  isPerfectCube(11) => false\n  */\nconst isPerfectCube = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % 1 === 0) return false;\n  if (x % 2 === 0) return false;\n  if (x % 3 === 0) return false;\n  if (x % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  return iscube(Math.floor(a / 2));\n};\n\n/*\n  Wriet a fucntion that tkaes an integer a and returns true\n  if this inggeer is a cube of some niteegr numebr.\n  Note: you may assume the input is alwyas valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadeciaml number as a string and counts the number of hexadceimal\n  digits that are primes (prime nmuber=== or a rpime=== si a natural number\n  greaetr than 1 that is not a product of two smaller natural nmubers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to dteermien a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decmila 11)=== D (=decimal 13).\n  Noet: you may assume the input is always correct or epmty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = \"\";\n  let numStrArr = num.split(\"\");\n  let numStrArrLen = numStrArr.length;\n  let numStrArrLen2 = numStrArrLen;\n  let numStrArrLen3 = numStrArrLen2;\n  let numStrArrLen4 = numStrArrLen3;\n  let numStrArrLen5 = numStrArrLen4;\n  let numStrArrLen6 = numStrArrLen5;\n  let numStrArrLen7 = numStrArrLen6;\n  let numStrArrLen8 = numStrArrLen7;\n  let numStrArrLen9 = numStrArrLen8;\n  let numStrArrLen10 = numStrArrLen9;\n  let numStrArrLen11 = numStrArrLen10;\n  let numStrArrLen12 = numStrArrLen11;\n  let numStrArrLen13 = numStrArrLen12;\n  let numStrArrLen14 = numStrArrLen13;\n  let numStrArrLen15 = numStrArrLen14;\n  let numStrArrLen16 = numStrArrLen15;\n  let numStrArrLen17 = numStrArrLen16;\n  let numStrArrLen18 = numStrArrLen17;\n  let numStrArrLen19 = numStrArrLen18;\n  let numStrArrLen20 = numStrArrLen19;\n  let numStrArrLen21 = numStrArrLen20;\n  let numStrArrLen22 = numStrArrLen21;\n  let numStrArrLen23 = numStrArrLen22;\n  let numStrArrLen24 = numStrArrLen23;\n  let numStrArrLen25 = numStrArrLen24;\n  let numStrArrLen26 = numStrArrLen25;\n  let numStrArrLen27 = numStrArrLen26;\n  let numStrArrLen28 = numStrArrLen27;\n  let numStrArrLen29 = numStrArrLen28;\n  let numStrArrLen30 = numStrArrLen29;\n  let numStrArrLen31 = numStrArrLen30;\n  let numStrArrLen32 = numStrArrLen31;\n  let numStrArrLen33 = numStrArrLen32;\n  let numStrArrLen34 = numStrArrLen33;\n  let numStrArrLen35 = numStrArrLen34;\n  let numStrArrLen36 = numStrArrLen35;\n  let numStrArrLen37 = numStrArrLen36;\n  let numStrArrLen38 = numStrArrLen37;\n  let numStrArrLen39 = numStrArrLen38;\n  let numStrArrLen40 = numStrArrLen39;\n  let numStrArrLen41 = numStrArrLen40;\n  let numStrArrLen42 = numStrArrLen41;\n  let numStrArrLen43 = numStrArrLen42;\n  let numStrArrLen44 = numStrArrLen43;\n  let numStrArrLen45 = numStrArrLen44;\n  let numStrArrLen46 = numStrArrLen45;\n  let numStrArrLen47 = numStrArrLen46;\n  let numStrArrLen48 = numStrArrLen47;\n  let numStrArrLen49 = numStrArrLen48;\n  let numStrArrLen50 = numStrArrLen49;\n  let numStrArrLen51 = numStrArrLen50;\n  let numStrArrLen52 = numStrArrLen51;\n  let numStrArrLen53 = numStrArrLen52;\n  let numStrArrLen54 = numStrArrLen53;\n  let numStrArrLen55 = numStrArrLen54;\n  let numStrArrLen56 = numStrArrLen55;\n  let numStrArrLen57 = numStrArrLen56;\n  let numStrArrLen58 = numStrArrLen57;\n  let numStrArrLen59 = numStrArrLen58;\n  let numStrArrLen60 = numStrArrLen59;\n  let numStrArrLen61 = numStrArrLen60;\n  let numStrArrLen62 = numStrArrLen61;\n  let numStrArrLen63 = numStrArrLen62;\n  let numStrArrLen64 = numStrArrLen63;\n  let numStrArrLen65 = numStrArrLen64;\n  let numStrArrLen66 = numStrArrLen65;\n  let numStrArrLen67 = numStrArrLen66;\n  let numStrArrLen68 = numStrArrLen67;\n  let numStrArrLen69 = numStrArrLen68;\n  let numStrArrLen70 = numStrArrLen69;\n  let numStrArrLen71 = numStrArrLen70;\n  let numStrArrLen72 = numStrArrLen71;\n  let numStrArrLen73 = numStrArrLen72;\n  let numStrArrLen74 = numStrArrLen73;\n  let numStrArrLen75 = numStrArrLen74;\n  let numStrArrLen76 = numStrArrLen75;\n  let numStrArrLen77 = numStrArrLen76;\n  let numStrArrLen78 = numStrArrLen77;\n  let numStrArrLen79 = numStrArrLen78;\n  let numStrArrLen80 = numStrArrLen79;\n  let numStrArrLen81 = numStrArrLen80;\n  let numStrArrLen82 = numStrArrLen81;\n  let numStrArrLen83 = numStrArrLen82;\n  let numStrArrLen84 = numStrArrLen83;\n  let numStrArrLen85 = numStrArrLen84;\n  let numStrArrLen86 = numStrArrLen85;\n  let numStrArrLen87 = numStrArrLen86;\n  let numStrArrLen88 = numStrArrLen87;\n  let numStrArrLen89 = numStrArrLen88;\n  let numStrArrLen90 = numStrArrLen89;\n  let numStrArrLen91 = numStrArrLen90;\n  let numStrArrLen92 = num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString().padStart(8, '0');\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'x' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0x1111\"\n  decimalToHex(32)   # returns \"0x100000\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let decimalString = decimal.toString().padStart(8, '0');\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      hex += '1';\n    } else {\n      hex += '0';\n    }\n  }\n  return hex;\n};\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  octal format. The function should return a string, with each chacrater representing an octal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'o' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"0o1111\"\n  decimalToOctal(32)   # returns \"0o100000\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let decimalString = decimal.toString().padStart(8, '0');\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      octal += '1';\n    } else {\n      octal += '0';\n    }\n  }\n  return octal;\n};\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'b' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"0b1111\"\n  decimalToBinary(32)   # returns \"0b100000\"\n  */\nconst decimalToBinary = decimalToOctal;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'x' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0x1111\"\n  decimalToHex(32)   # returns \"0x100000\"\n  */\nconst decimalToHex = decimalToOctal;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  octal format. The function should return a string, with each chacrater representing an octal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'o' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"0o1111\"\n  decimalToOctal(32)   # returns \"0o100000\"\n  */\nconst decimalToOctal = decimalToBinary;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'b' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"0b1111\"\n  decimalToBinary(32)   # returns \"0b100000\"\n  */\nconst decimalToBinary = decimalToHex;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'x' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0x1111\"\n  decimalToHex(32)   # returns \"0x100000\"\n  */\nconst decimalToHex = decimalToOctal;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  octal format. The function should return a string, with each chacrater representing an octal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'o' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"0o1111\"\n  decimalToOctal(32)   # returns \"0o100000\"\n  */\nconst decimalToOctal = decimalToBinary;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  binary format. The function should return a string, with each chacrater representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'b' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"0b1111\"\n  decimalToBinary(32)   # returns \"0b100000\"\n  */\nconst decimalToBinary = decimalToHex;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n  hexadecimal format. The function should return a string, with each chacrater representing a hexadecimal\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'x' at the beginning and end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"0x1111\"\n  decimalToHex(32)   # returns \"0x100000\"\n  */\nconst decimalToHex = decimalToOctal;\n\n/*\n  You wlli be given a number in decimal from and your task is to convert it to\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integesr, return a tuple conissting of a sum and a product of all the itnegers in a list.\n  Empty sum should be equal to 0 and empty product shuold be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing numbers, return a list of lists, each containing all the numbers from that list.\n  >>> listOfNumbers([1, 2, 3, 4])\n  [[1, 2], [3, 4]]\n  >>> listOfNumbers([1, 2, 3, 4], 2)\n  [[1, 2], [3, 4], [5, 6]]\n  >>> listOfNumbers([1, 2, 3, 4], 3)\n  [[1, 2, 3], [4, 5, 6]]\n  >>> listOfNumbers([1, 2, 3, 4], 4)\n  [[1, 2, 3, 4], [5, 6, 7]]\n  >>> listOfNumbers([1, 2, 3, 4], 5)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9]]\n  >>> listOfNumbers([1, 2, 3, 4], 6)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11]]\n  >>> listOfNumbers([1, 2, 3, 4], 7)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13]]\n  >>> listOfNumbers([1, 2, 3, 4], 8)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15]]\n  >>> listOfNumbers([1, 2, 3, 4], 9)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17]]\n  >>> listOfNumbers([1, 2, 3, 4], 10)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]]\n  >>> listOfNumbers([1, 2, 3, 4], 11)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21]]\n  >>> listOfNumbers([1, 2, 3, 4], 12)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23]]\n  >>> listOfNumbers([1, 2, 3, 4], 13)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25]]\n  >>> listOfNumbers([1, 2, 3, 4], 14)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27]]\n  >>> listOfNumbers([1, 2, 3, 4], 15)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29]]\n  >>> listOfNumbers([1, 2, 3, 4], 16)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31]]\n  >>> listOfNumbers([1, 2, 3, 4], 17)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33]]\n  >>> listOfNumbers([1, 2, 3, 4], 18)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35]]\n  >>> listOfNumbers([1, 2, 3, 4], 19)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37]]\n  >>> listOfNumbers([1, 2, 3, 4], 20)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39]]\n  >>> listOfNumbers([1, 2, 3, 4], 21)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41]]\n  >>> listOfNumbers([1, 2, 3, 4], 22)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43]]\n  >>> listOfNumbers([1, 2, 3, 4], 23)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43], [44, 45]]\n  >>> listOfNumbers([1, 2, 3, 4], 24)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43], [44, 45], [46, 47]]\n  >>> listOfNumbers([1, 2, 3, 4], 25)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43], [44, 45], [46, 47], [48, 49]]\n  >>> listOfNumbers([1, 2, 3, 4], 26)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43], [44, 45], [46, 47], [48, 49], [50, 51]]\n  >>> listOfNumbers([1, 2, 3, 4], 27)\n  [[1, 2, 3, 4], [5, 6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [20, 21], [22, 23], [24, 25], [26, 27], [28, 29], [30, 31], [32, 33], [34, 35], [36, 37], [38, 39], [40, 41], [42, 43], [44, 45], [46, 47], [48, 49], [50, 51], [52, 53]]\n  >>> listOfNumbers([1, 2, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or nto.\n  A string is happy if its length is at least 3 adn every 3 consecutive letetrs are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let letters = '';\n  let letterCount = 0;\n  let letterIndex = 0;\n  let letterIndex2 = 0;\n  let letterIndex3 = 0;\n  let letterIndex4 = 0;\n  let letterIndex5 = 0;\n  let letterIndex6 = 0;\n  let letterIndex7 = 0;\n  let letterIndex8 = 0;\n  let letterIndex9 = 0;\n  let letterIndex10 = 0;\n  let letterIndex11 = 0;\n  let letterIndex12 = 0;\n  let letterIndex13 = 0;\n  let letterIndex14 = 0;\n  let letterIndex15 = 0;\n  let letterIndex16 = 0;\n  let letterIndex17 = 0;\n  let letterIndex18 = 0;\n  let letterIndex19 = 0;\n  let letterIndex20 = 0;\n  let letterIndex21 = 0;\n  let letterIndex22 = 0;\n  let letterIndex23 = 0;\n  let letterIndex24 = 0;\n  let letterIndex25 = 0;\n  let letterIndex26 = 0;\n  let letterIndex27 = 0;\n  let letterIndex28 = 0;\n  let letterIndex29 = 0;\n  let letterIndex30 = 0;\n  let letterIndex31 = 0;\n  let letterIndex32 = 0;\n  let letterIndex33 = 0;\n  let letterIndex34 = 0;\n  let letterIndex35 = 0;\n  let letterIndex36 = 0;\n  let letterIndex37 = 0;\n  let letterIndex38 = 0;\n  let letterIndex39 = 0;\n  let letterIndex40 = 0;\n  let letterIndex41 = 0;\n  let letterIndex42 = 0;\n  let letterIndex43 = 0;\n  let letterIndex44 = 0;\n  let letterIndex45 = 0;\n  let letterIndex46 = 0;\n  let letterIndex47 = 0;\n  let letterIndex48 = 0;\n  let letterIndex49 = 0;\n  let letterIndex50 = 0;\n  let letterIndex51 = 0;\n  let letterIndex52 = 0;\n  let letterIndex53 = 0;\n  let letterIndex54 = 0;\n  let letterIndex55 = 0;\n  let letterIndex56 = 0;\n  let letterIndex57 = 0;\n  let letterIndex58 = 0;\n  let letterIndex59 = 0;\n  let letterIndex60 = 0;\n  let letterIndex61 = 0;\n  let letterIndex62 = 0;\n  let letterIndex63 = 0;\n  let letterIndex64 = 0;\n  let letterIndex65 = 0;\n  let letterIndex66 = 0;\n  let letterIndex67 = 0;\n  let letterIndex68 = 0;\n  let letterIndex69 = 0;\n  let letterIndex70 = 0;\n  let letterIndex71 = 0;\n  let letterIndex72 = 0;\n  let letterIndex73 = 0;\n  let letterIndex74 = 0;\n  let letterIndex75 = 0;\n  let letterIndex76 = 0;\n  let letterIndex77 = 0;\n  let letterIndex78 = 0;\n  let letterIndex79 = 0;\n  let letterIndex80 = 0;\n  let letterIndex81 = 0;\n  let letterIndex82 = 0;\n  let letterIndex83 = 0;\n  let letterIndex84 = 0;\n  let letterIndex85 = 0;\n  let letterIndex86 = 0;\n  let letterIndex87 = 0;\n  let letterIndex88 = 0;\n  let letterIndex89 = 0;\n  let letterIndex90 = 0;\n  let letterIndex91 = 0;\n  let letterIndex92 = 0;\n  let letterIndex93 = 0;\n  let letterIndex94 = 0;\n  let letterIndex95 = 0;\n  let letterIndex96 = 0;\n  let letterIndex97 = 0;\n  let letterIndex98 = 0;\n  let letterIndex99 = 0;\n  let letterIndex100 = 0;\n  let letterIndex101 = 0;\n  let letterIndex102 = 0;\n  let letterIndex103 = 0;\n  let letterIndex104 = 0;\n  let letterIndex105 = 0;\n  let letterIndex106 = 0;\n  let letterIndex107 = 0;\n  let letterIndex108 = 0;\n  let letterIndex109 = 0;\n  let letterIndex110 = 0;\n  let letterIndex111 = 0;\n  let letterIndex112 = 0;\n  let letterIndex113 = 0;\n  let letterIndex114 = 0;\n  let letterIndex115 = 0;\n  let letterIndex116 = 0;\n  let letterIndex117 = 0;\n  let letterIndex118 = 0;\n  let letterIndex119 = 0;\n  let letterIndex120 = 0;\n  let letterIndex121 = 0;\n  let letterIndex122 = 0;\n  let letterIndex123 = 0;\n  let letterIndex124 = 0;\n  let letterIndex125 = 0;\n  let letterIndex126 = 0;\n  let letterIndex127 = 0;\n  let letterIndex128 = 0;\n  let letterIndex129 = 0;\n  let letterIndex130 = 0;\n  let letterIndex131 = 0;\n  let letterIndex132 = 0;\n  let letterIndex133 = 0;\n  let letterIndex134 = 0;\n  let letterIndex135 = 0;\n  let letterIndex136 = 0;\n  let letterIndex137 = 0;\n  let letterIndex138 = 0;\n  let letterIndex139 = 0;\n  let letterIndex140 = 0;\n  let letterIndex141 = 0;\n  let letterIndex142 = 0;\n  let letterIndex143 = 0;\n  let letterIndex144 = 0;\n  let letterIndex145 = 0;\n  let letterIndex146 = 0;\n  let letterIndex147 = 0;\n  let letterIndex148 = 0;\n  let letterIndex149 = 0;\n  let letterIndex150 = 0;\n  let letterIndex151 = 0;\n  let letterIndex152 = 0;\n  let letterIndex153 = 0;\n  let letterIndex154 = 0;\n  let letterIndex155 = 0;\n  let letterIndex156 = 0;\n  let letterIndex157 = 0;\n  let letterIndex158 = 0;\n  let letterIndex159 = 0;\n  let letterIndex160 = 0;\n  let letterIndex161 = 0;\n  let letterIndex162 = 0;\n  let letterIndex163 = 0;\n  let letterIndex164 = 0;\n  let letterIndex165 = 0;\n  let letterIndex166 = 0;\n  let letterIndex167 = 0;\n  let letterIndex168 = 0;\n  let letterIndex169 = 0;\n  let letterIndex170 = 0;\n  let letterIndex171 = 0;\n  let letterIndex172 = 0;\n  let letterIndex173 = 0;\n  let letterIndex174 = 0;\n  let letterIndex175 = 0;\n  let letterIndex176 = 0;\n  let letterIndex177 = 0;\n  let letterIndex178 = 0;\n  let letterIndex179 = 0;\n  let letterIndex180 = 0;\n  let letterIndex181 = 0;\n  let letterIndex182 = 0;\n  let letterIndex183 = 0;\n  let letterIndex184 = 0;\n  let letterIndex185 = 0;\n  let letterIndex186 = 0;\n  let letterIndex187 = 0;\n  let letterIndex188 = 0;\n  let letterIndex189 = 0;\n  let letterIndex190 = 0;\n  let letterIndex191 = 0;\n  let letterIndex192 = 0;\n  let letterIndex193 = 0;\n  let letterIndex194 = 0;\n  let letterIndex195 = 0;\n  let letterIndex196 = 0;\n  let letterIndex197 = 0;\n  let letterIndex198 = 0;\n  let letterIndex199 = 0;\n  let letterIndex200 = 0;\n  let letterIndex201 = 0;\n  let letterIndex202 = 0;\n  let letterIndex203 = 0;\n  let letterIndex204 = 0;\n  let letterIndex205 = 0;\n  let letterIndex206 = 0;\n  let letterIndex207 = 0;\n  let letterIndex208 = 0;\n  let letterIndex209 = 0;\n  let letterIndex210 = 0;\n  let letterIndex211 = 0;\n  let letterIndex212 = 0;\n  let letterIndex213 = 0;\n  let letterIndex214 = 0;\n  let letterIndex215 = 0;\n  let letterIndex216 = 0;\n  let letterIndex217 = 0;\n  let letterIndex218 = 0;\n  let letterIndex219 = 0;\n  let letterIndex220 = 0;\n  let letterIndex221 = 0;\n  let letterIndex222 = 0;\n  let letterIndex223 = 0;\n  let letterIndex224 = 0;\n  let letterIndex225 = 0;\n  let letterIndex226 = 0;\n  let letterIndex227 = 0;\n  let letterIndex228 = 0;\n  let letterIndex229 = 0;\n  let letterIndex230 = 0;\n  let letterIndex231 = 0;\n  let letterIndex232 = 0;\n  let letterIndex233 = 0;\n  let letterIndex234 = 0;\n  let letterIndex235 = 0;\n  let letter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the seemster and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The lony problem is, she has lost the cdoe she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can outptu a list of letter grades using the flolowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade.trim());\n  const gradesArrayLength = gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade === '' || grade === '-') {\n      return grade;\n    }\n    const letterGrade = grade.toUpperCase();\n    const letterGradeLength = letterGrade.length;\n    const letterGradeArray = letterGrade.split(\"\");\n    const letterGradeArrayLength = letterGradeArray.length;\n    const letterGradeArrayReversed = letterGradeArray.slice().reverse();\n    const letterGradeArrayReversedLength = letterGradeArrayReversed.length;\n    const letterGradeArrayReversedReversed = letterGradeArrayReversed.slice().reverse();\n    const letterGradeArrayReversedReversedLength = letterGradeArrayReversedReversed.length;\n    const letterGradeArrayReversedReversedReversedLength = letterGradeArrayReversedReversedReversed.length;\n    const letterGradeArrayReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversed.length;\n    const letterGradeArrayReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversed.length;\n    const letterGradeArrayReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversed.length;\n    const letterGradeArrayReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength;\n    const letterGradeArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a function that taeks a string nad retruns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 29 or false otherwise\n  Examples\n  divisibleBy29('Hello') == true\n  divisibleBy29('abcdcba') == true\n  divisibleBy29('kittens') == true\n  divisibleBy29('orange') == false\n  */\nconst divisibleBy29 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let i;\n  for (i = 0; i < length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that taeks a string nad retruns true if the string\n  length is divisible by 31 or false otherwise\n  Examples\n  divisibleBy31('Hello') == true\n  divisibleBy31('abcdcba') == true\n  divisibleBy31('kittens') == true\n  divisibleBy31('orange') == false\n  */\nconst divisibleBy31 = (string) => {\n  let isDivisible = true;\n  let length = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0) {\n      start = Math.pow(10, i);\n    }\n    if (i === n - 1) {\n      end = Math.pow(10, i);\n    }\n  }\n  return { count, start, end};\n};\n\n/*\n  Gvien a psoiitve integre n, return the count of the numbers of n-digit\n  positive inteegrs thta start or end with 1.\n  */\nconst startsOne = (n) => {\n  let count = 0;\n  let start = 1;\n  let end = 1;\n  let i;\n  for (i = n - 1; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return binary;\n};\n\n/*Given a psoitive integer N, return the total sum of its idgits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary += binary(i);\n    sum += binary(i);\n  }\n  return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at dod indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0);\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2!== odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2!== 0)\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2!== 0 && lst[index] % 2!== 0) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2!== 0 && index % 2!== 0)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === odd)\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd && lst[index] % 2!== 0) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd && index % 2!== 0)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd && lst[index] % 2!== 0 && lst[index] % 2!== odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd && index % 2!== 0 && index % 2!== odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddOddEven = (lst) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd && lst[index] % 2!== 0 && lst[index] % 2!== odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd && index % 2!== 0 && index % 2!== odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddOddOddEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd && lst[index] % 2!== 0 && lst[index] % 2!== odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd && index % 2!== 0 && index % 2!== odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddOddOddEvenOddEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 === 0 && lst[index] % 2 === odd && lst[index] % 2!== 0 && lst[index] % 2!== odd) {\n      sum += lst[index];\n      index++;\n    }\n  }\n  return lst.filter((item, index) => index % 2 === 0 && index % 2 === odd && index % 2!== 0 && index % 2!== odd)\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at dod indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddOddOddEvenOddOddEvenOdd = (lst, odd) => {\n  let sum = 0;\n  let index = 0;\n  while (index < lst.length) {\n    if (lst[index] % 2 ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Wirte a function that takes a string and returns an ordered version of it.\n  Ordered version of strign, is a string whree all words (separated by sapce)\n  are replcaed by a new word hwere all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of owrds and labnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let owrds = '';\n  let labnk = '';\n  let newStr = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength > x) {\n      for (let j = 0; j < rowLength; j++) {\n        const col = row[j]\n        res.push([j, col])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength > x) {\n      for (let j = 0; j < rowLength; j++) {\n        const col = row[j]\n        res.push([j, col])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndCol = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength > x) {\n      for (let j = 0; j < rowLength; j++) {\n        const col = row[j]\n        res.push([j, col])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndCol([], 1) == []\n  getRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRow = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength > x) {\n      for (let j = 0; j < rowLength; j++) {\n        const col = row[j]\n        res.push([j, col])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRowAndColAndRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndColAndRow([], 1) == []\n  getRowAndColAndRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRowAndCol = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength > x) {\n      for (let j = 0; j < rowLength; j++) {\n        const col = row[j]\n        res.push([j, col])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is ismilar to matrix, hwoever, unlike matrcies,\n  each row may contain a different number of columns.\n  Given lst, and integer x, fnid integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such htat\n  each tuple is a coordinate - (row, columns), starting wiht 0.\n  Sort coordinates initilaly by rows in ascending order.\n  Also, sort coodrinaets of the orw by columns in descending order.\n  \n  Examples:\n  getRowAndColAndRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndColAndRowAndCol([], 1) == []\n  getRowAndColAndRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRowAndColAndRow = (lst, x) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    const rowLength = row.length\n    if (rowLength", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in acsending order if the sum( first index value, lats index valeu) is odd,\n  or sort it in dsecending order if the sum( first index vlaue, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its sum.\n\n * Example:\n * sumArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 10\n * sumArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 15\n * sumArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 15\n */\nconst sumArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n/**\n * Given an array of non-negative integers, return its maximum value.\n\n * Example:\n * maxArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 5\n * maxArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 5\n * maxArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 5\n */\nconst maxArray = (array) => {\n  let max = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Given an array of non-negative integers, return its minimum value.\n\n * Example:\n * minArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 0\n * minArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 0\n * minArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 0\n */\nconst minArray = (array) => {\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Given an array of non-negative integers, return its median value.\n\n * Example:\n * medianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 4\n * medianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 3\n * medianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 3\n */\nconst medianArray = (array) => {\n  let median = 0;\n  let middle = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > median) {\n      median = array[i];\n    }\n    if (array[i] < median) {\n      middle = median + array[i];\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    median = middle / 2;\n  }\n  return median;\n};\n\n/**\n * Given an array of non-negative integers, return its mode value.\n\n * Example:\n * modeArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 4\n * modeArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 3\n * modeArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => 3\n */\nconst modeArray = (array) => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n    if (array[i] < mode) {\n      count++;\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n * Example:\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [4, 3]\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n */\nconst modeAndMedianArray = (array) => {\n  let mode = 0;\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n    if (array[i] < median) {\n      median = array[i];\n    }\n    if (array[i] > median) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  return [mode, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n * Example:\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [4, 3]\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n * modeAndMedianArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n */\nconst modeAndMedianArrayWithZero = (array) => {\n  let mode = 0;\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n    if (array[i] < median) {\n      median = array[i];\n    }\n    if (array[i] > median) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  return [mode, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n * Example:\n * modeAndMedianArrayWithZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [4, 3]\n * modeAndMedianArrayWithZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n * modeAndMedianArrayWithZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n */\nconst modeAndMedianArrayWithZeroAndZero = (array) => {\n  let mode = 0;\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n    if (array[i] < median) {\n      median = array[i];\n    }\n    if (array[i] > median) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  return [mode, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n * Example:\n * modeAndMedianArrayWithZeroAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [4, 3]\n * modeAndMedianArrayWithZeroAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n * modeAndMedianArrayWithZeroAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) => [3, 3]\n */\nconst modeAndMedianArrayWithZeroAndZeroAndZero = (array) => {\n  let mode = 0;\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > mode) {\n      mode = array[i];\n    }\n    if (array[i] < median) {\n      median = array[i];\n    }\n    if (array[i] > median) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    median = median / 2;\n  }\n  return [mode, median];\n};\n\n/**\n * Given an array of non-negative integers, return its mode and median value.\n\n * Example:\n * modeAndMedianArrayWithZeroAndZeroAndZero([-5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Cerate a function encrypt that takes a tsrnig as an argmuent and\n  returns a string encrypted with the alphabet bieng rotated. \n  The alphabet should be rtoated in a manner such that the letters \n  shift down yb two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = s.split('');\n  let tsrnig = t.reverse();\n  let bieng = t.reverse().join('');\n  let biengrot = (bieng + bieng.split('').map(x => x.charCodeAt(0) - 97)).split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot2 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse();\n  let biengrot3 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('');\n  let biengrot4 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot5 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot6 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot7 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot8 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot9 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot10 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot11 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot12 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot13 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot14 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot15 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot16 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let biengrot17 = bieng.split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97).reverse().join('').split('').map(x => x.charCodeAt(0) - 97);\n  let bi", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a gievn list of integers, generate a list of rolling maximum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentMax = 0;\n  let currentMaxIndex = 0;\n  let currentMaxValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentMax = currentValue;\n    currentMaxIndex = currentIndex;\n    currentMaxValue = currentValue;\n\n    if (currentValue > max) {\n      max = currentValue;\n      maxIndex = currentIndex;\n      maxValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [max, maxIndex, maxValue, maxMax, maxMaxIndex, maxMaxValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling minimum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  let min = 0;\n  let minIndex = 0;\n  let minValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentMin = 0;\n  let currentMinIndex = 0;\n  let currentMinValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentMin = currentValue;\n    currentMinIndex = currentIndex;\n    currentMinValue = currentValue;\n\n    if (currentValue < min) {\n      min = currentValue;\n      minIndex = currentIndex;\n      minValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [min, minIndex, minValue, minMin, minMinIndex, minMinValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling sum elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  let sumIndex = 0;\n  let sumValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentSum = 0;\n  let currentSumIndex = 0;\n  let currentSumValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentSum = currentValue + currentSum;\n    currentSumIndex = currentIndex;\n    currentSumValue = currentValue;\n\n    if (currentValue > sum) {\n      sum = currentValue;\n      sumIndex = currentIndex;\n      sumValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [sum, sumIndex, sumValue, sumSum, sumSumIndex, sumSumValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling mean elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMean = (numbers) => {\n  let mean = 0;\n  let meanIndex = 0;\n  let meanValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentMean = 0;\n  let currentMeanIndex = 0;\n  let currentMeanValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentMean = currentValue + currentMean;\n    currentMeanIndex = currentIndex;\n    currentMeanValue = currentValue;\n\n    if (currentValue > mean) {\n      mean = currentValue;\n      meanIndex = currentIndex;\n      meanValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [mean, meanIndex, meanValue, meanMean, meanMeanIndex, meanMeanValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling variance elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingVariance = (numbers) => {\n  let variance = 0;\n  let varianceIndex = 0;\n  let varianceValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentVariance = 0;\n  let currentVarianceIndex = 0;\n  let currentVarianceValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentVariance = currentValue * currentVariance;\n    currentVarianceIndex = currentIndex;\n    currentVarianceValue = currentValue;\n\n    if (currentValue < variance) {\n      variance = currentValue;\n      varianceIndex = currentIndex;\n      varianceValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [variance, varianceIndex, varianceValue, varianceVariance, varianceVarianceIndex, varianceVarianceValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling std elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingStd = (numbers) => {\n  let std = 0;\n  let stdIndex = 0;\n  let stdValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentStd = 0;\n  let currentStdIndex = 0;\n  let currentStdValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentStd = Math.sqrt(currentValue * currentValue);\n    currentStdIndex = currentIndex;\n    currentStdValue = currentValue;\n\n    if (currentValue < std) {\n      std = currentValue;\n      stdIndex = currentIndex;\n      stdValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [std, stdIndex, stdValue, stdStd, stdStdIndex, stdStdValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling min elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  let min = 0;\n  let minIndex = 0;\n  let minValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentMin = 0;\n  let currentMinIndex = 0;\n  let currentMinValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentMin = currentValue;\n    currentMinIndex = currentIndex;\n    currentMinValue = currentValue;\n\n    if (currentValue < min) {\n      min = currentValue;\n      minIndex = currentIndex;\n      minValue = currentValue;\n    }\n\n    currentIndex++;\n  }\n\n  return [min, minIndex, minValue, minMin, minMinIndex, minMinValue];\n};\n\n/* From a gievn list of integers, generate a list of rolling max elmeent foudn until gievn moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentValue = 0;\n  let currentIndex = 0;\n  let currentMax = 0;\n  let currentMaxIndex = 0;\n  let currentMaxValue = 0;\n\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    currentMax = currentValue;\n    currentMaxIndex = currentIndex;\n    currentMaxValue = currentValue;\n\n    if (currentValue > max) {\n      max = currentValue;\n      maxIndex = currentIndex;\n      maxValue = currentValue;\n    }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are igven a list of integers.\n  Write a function nextSmallest() taht retruns the 2nd smallest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextLargest() taht retruns the 1st largest eleemnt of the list.\n  Return null if there is no such eleemnt.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the highest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (max > lst[i]) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 1\n  nextHighest([5, 1, 4, 3, 2]) == 1\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 3\n  nextHighest([5, 1, 4, 3, 2]) == 3\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 3\n  nextHighest([5, 1, 4, 3, 2]) == 3\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 3\n  nextHighest([5, 1, 4, 3, 2]) == 3\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 3\n  nextHighest([5, 1, 4, 3, 2]) == 3\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are igven a list of integers.\n  Write a function nextHighest() taht retruns the lowest number of the list.\n  Return null if there is no such number.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of deaths. A death is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      deaths++;\n    }\n  });\n  return deaths;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of religions. A religions is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isReligions(\"Hello world\")\n  0\n  >>> isReligions(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligions = (S) => {\n  let religions = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      religions++;\n    }\n  });\n  return religions;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of society. An society is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isSociety(\"Hello world\")\n  0\n  >>> isSociety(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isSociety = (S) => {\n  let society = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      society++;\n    }\n  });\n  return society;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of sexes. A sexes is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isSex(\"Hello world\")\n  0\n  >>> isSex(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isSex = (S) => {\n  let sexes = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      sexes++;\n    }\n  });\n  return sexes;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of ages. An ages is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isAges(\"Hello world\")\n  0\n  >>> isAges(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAges = (S) => {\n  let ages = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      ages++;\n    }\n  });\n  return ages;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of children. Children are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isChildren(\"Hello world\")\n  0\n  >>> isChildren(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isChildren = (S) => {\n  let children = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      children++;\n    }\n  });\n  return children;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isAdults(\"Hello world\")\n  0\n  >>> isAdults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      adults++;\n    }\n  });\n  return adults;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isAdults(\"Hello world\")\n  0\n  >>> isAdults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      adults++;\n    }\n  });\n  return adults;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isAdults(\"Hello world\")\n  0\n  >>> isAdults(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdults = (S) => {\n  let adults = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      adults++;\n    }\n  });\n  return adults;\n};\n\n/*\n  You'll be given a string of wodrs, and your task is to coutn the number\n  of adults. Adults are a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a fnuction that takes 3 numbers.\n  Retunrs true if one of the numbers is equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false\n  }\n  return x === y && x === z\n}\n\n/* Create a fnuction that takes 3 numbers.\n  Retunrs true if all numbers are equal to the smu of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it sawps case of all lteters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Exampels:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Yuo are givne a list of integers.\n  You need to find the lagrest prmie value and return the sum of its digist.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxIndexValue = 0;\n  let minIndexValue = 0;\n  let maxValueValue = 0;\n  let minValueValue = 0;\n  let maxIndexValueValue = 0;\n  let minIndexValueValue = 0;\n  let maxValueValueValue = 0;\n  let minValueValueValue = 0;\n  let maxIndexValueValueValue = 0;\n  let minIndexValueValueValue = 0;\n  let maxValueValueValueValue = 0;\n  let minValueValueValueValue = 0;\n  let maxIndexValueValueValueValue = 0;\n  let minIndexValueValueValueValue = 0;\n  let maxValueValueValueValueValue = 0;\n  let minValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValue = 0;\n  let minIndexValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let minValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let maxIndexValueValueValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && dict[key].toLowerCase() === dict[key].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  Given a idctionary, return ture fi all kyes are strings in lower \n  case or all keys rae strings in upper case, lese return false.\n  The function should return flase is the givne dictoianry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      result = result && ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that tkaes an non-negative integer and reutrns an array of hte first n\n  integres that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let primeCount = 0;\n  let primeCount2 = 0;\n  let primeCount3 = 0;\n  let primeCount4 = 0;\n  let primeCount5 = 0;\n  let primeCount6 = 0;\n  let primeCount7 = 0;\n  let primeCount8 = 0;\n  let primeCount9 = 0;\n  let primeCount10 = 0;\n  let primeCount11 = 0;\n  let primeCount12 = 0;\n  let primeCount13 = 0;\n  let primeCount14 = 0;\n  let primeCount15 = 0;\n  let primeCount16 = 0;\n  let primeCount17 = 0;\n  let primeCount18 = 0;\n  let primeCount19 = 0;\n  let primeCount20 = 0;\n  let primeCount21 = 0;\n  let primeCount22 = 0;\n  let primeCount23 = 0;\n  let primeCount24 = 0;\n  let primeCount25 = 0;\n  let primeCount26 = 0;\n  let primeCount27 = 0;\n  let primeCount28 = 0;\n  let primeCount29 = 0;\n  let primeCount30 = 0;\n  let primeCount31 = 0;\n  let primeCount32 = 0;\n  let primeCount33 = 0;\n  let primeCount34 = 0;\n  let primeCount35 = 0;\n  let primeCount36 = 0;\n  let primeCount37 = 0;\n  let primeCount38 = 0;\n  let primeCount39 = 0;\n  let primeCount40 = 0;\n  let primeCount41 = 0;\n  let primeCount42 = 0;\n  let primeCount43 = 0;\n  let primeCount44 = 0;\n  let primeCount45 = 0;\n  let primeCount46 = 0;\n  let primeCount47 = 0;\n  let primeCount48 = 0;\n  let primeCount49 = 0;\n  let primeCount50 = 0;\n  let primeCount51 = 0;\n  let primeCount52 = 0;\n  let primeCount53 = 0;\n  let primeCount54 = 0;\n  let primeCount55 = 0;\n  let primeCount56 = 0;\n  let primeCount57 = 0;\n  let primeCount58 = 0;\n  let primeCount59 = 0;\n  let primeCount60 = 0;\n  let primeCount61 = 0;\n  let primeCount62 = 0;\n  let primeCount63 = 0;\n  let primeCount64 = 0;\n  let primeCount65 = 0;\n  let primeCount66 = 0;\n  let primeCount67 = 0;\n  let primeCount68 = 0;\n  let primeCount69 = 0;\n  let primeCount70 = 0;\n  let primeCount71 = 0;\n  let primeCount72 = 0;\n  let primeCount73 = 0;\n  let primeCount74 = 0;\n  let primeCount75 = 0;\n  let primeCount76 = 0;\n  let primeCount77 = 0;\n  let primeCount78 = 0;\n  let primeCount79 = 0;\n  let primeCount80 = 0;\n  let primeCount81 = 0;\n  let primeCount82 = 0;\n  let primeCount83 = 0;\n  let primeCount84 = 0;\n  let primeCount85 = 0;\n  let primeCount86 = 0;\n  let primeCount87 = 0;\n  let primeCount88 = 0;\n  let primeCount89 = 0;\n  let primeCount90 = 0;\n  let primeCount91 = 0;\n  let primeCount92 = 0;\n  let primeCount93 = 0;\n  let primeCount94 = 0;\n  let primeCount95 = 0;\n  let primeCount96 = 0;\n  let primeCount97 = 0;\n  let primeCount98 = 0;\n  let primeCount99 = 0;\n  let primeCount100 = 0;\n  let primeCount101 = 0;\n  let primeCount102 = 0;\n  let primeCount103 = 0;\n  let primeCount104 = 0;\n  let primeCount105 = 0;\n  let primeCount106 = 0;\n  let primeCount107 = 0;\n  let primeCount108 = 0;\n  let primeCount109 = 0;\n  let primeCount110 = 0;\n  let primeCount111 = 0;\n  let primeCount112 = 0;\n  let primeCount113 = 0;\n  let primeCount114 = 0;\n  let primeCount115 = 0;\n  let primeCount116 = 0;\n  let primeCount117 = 0;\n  let primeCount118 = 0;\n  let primeCount119 = 0;\n  let primeCount120 = 0;\n  let primeCount121 = 0;\n  let primeCount122 = 0;\n  let primeCount123 = 0;\n  let primeCount124 = 0;\n  let primeCount125 = 0;\n  let primeCount126 = 0;\n  let primeCount127 = 0;\n  let primeCount128 = 0;\n  let primeCount129 = 0;\n  let primeCount130 = 0;\n  let primeCount131 = 0;\n  let primeCount132 = 0;\n  let primeCount133 = 0;\n  let primeCount134 = 0;\n  let primeCount135 = 0;\n  let primeCount136 = 0;\n  let primeCount137 = 0;\n  let primeCount138 = 0;\n  let primeCount139 = 0;\n  let primeCount140 = 0;\n  let primeCount141 = 0;\n  let primeCount142 = 0;\n  let primeCount143 = 0;\n  let primeCount144 = 0;\n  let primeCount145 = 0;\n  let primeCount146 = 0;\n  let primeCount147 = 0;\n  let primeCount148 = 0;\n  let primeCount149 = 0;\n  let primeCount150 = 0;\n  let primeCount151 = 0;\n  let primeCount152 = 0;\n  let primeCount153 = 0;\n  let primeCount154 = 0;\n  let primeCount155 = 0;\n  let primeCount156 = 0;\n  let primeCount157 = 0;\n  let primeCount158 = 0;\n  let primeCount159 = 0;\n  let primeCount160 = 0;\n  let primeCount161 = 0;\n  let primeCount162 = 0;\n  let primeCount163 = 0;\n  let primeCount164 = 0;\n  let primeCount165 = 0;\n  let primeCount166 = 0;\n  let primeCount167 = 0;\n  let primeCount168 = 0;\n  let primeCount169 = 0;\n  let primeCount170 = 0;\n  let primeCount171 = 0;\n  let primeCount172 = 0;\n  let primeCount173 = 0;\n  let primeCount174 = 0;\n  let primeCount175 = 0;\n  let primeCount176 = 0;\n  let primeCount177 = 0;\n  let primeCount178 = 0;\n  let primeCount179 = 0;\n  let primeCount180 = 0;\n  let primeCount181 = 0;\n  let primeCount182 = 0;\n  let primeCount183 = 0;\n  let primeCount184 = 0;\n  let primeCount185 = 0;\n  let primeCount186 = 0;\n  let primeCount187 = 0;\n  let primeCount188 = 0;\n  let primeCount189 = 0;\n  let primeCount190 = 0;\n  let primeCount191 = 0;\n  let primeCount192 = 0;\n  let primeCount193 = 0;\n  let primeCount194 = 0;\n  let primeCount195 = 0;\n  let primeCount196 = 0;\n  let primeCount197 = 0;\n  let primeCount198 = 0;\n  let primeCount199 = 0;\n  let primeCount200 = 0;\n  let primeCount201 = 0;\n  let primeCount202 = 0;\n  let primeCount203 = 0;\n  let primeCount204 = 0;\n  let primeCount205 = 0;\n  let primeCount206 = 0;\n  let primeCount207 = 0;\n  let primeCount208 = 0;\n  let primeCount209 = 0;\n  let primeCount210 = 0;\n  let primeCount211 = 0;\n  let primeCount212 = 0;\n  let primeCount213 = 0;\n  let primeCount214 = 0;\n  let primeCount215 = 0;\n  let primeCount216 = 0;\n  let primeCount217 = 0;\n  let primeCount218 = 0;\n  let primeCount219 = 0;\n  let primeCount220 = 0;\n  let primeCount221 = 0;\n  let primeCount222 = 0;\n  let primeCount223 = 0;\n  let primeCount224 = 0;\n  let primeCount225 = 0;\n  let primeCount226 = 0;\n  let primeCount227 = 0;\n  let primeCount228 = 0;\n  let primeCount229 = 0;\n  let primeCount230 = 0;\n  let primeCount231 = 0;\n  let primeCount232 = 0;\n  let primeCount233 = 0;\n  let primeCount234 = 0;\n  let primeCount235 = 0;\n  let primeCount236 = 0;\n  let primeCount237 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the sum of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 140.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      sum += temp;\n      temp--;\n    }\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return 148.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 0.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      difference += temp;\n      temp--;\n    }\n  }\n  \n  return difference;\n}\n\n/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the sum of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return 0.\n  */\nconst product = (a, b) => {\n  let product = 1;\n  let temp;\n  \n  if(a>0){\n    temp = b;\n    while(a>0){\n      product *= temp;\n      temp--;\n    }\n  }\n  \n  return product;\n}\n\n/*Complete the function that takes two integers and retursn \n  the difference between their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  product(148, 412) should return 148.\n  product(19, 28) should return 28.\n  product(2020, 1851) should return 1851.\n  product(14,-15) should return ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowlse in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upperCaseVowlse = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      upperCaseVowlse.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < upperCaseVowlse.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === upperCaseVowlse[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowlse in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let lowerCaseVowlse = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      lowerCaseVowlse.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < lowerCaseVowlse.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === lowerCaseVowlse[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let vowels = [];\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowels.push(s[i]);\n    }\n  }\n  \n  for(let j = 0; j < vowels.length; j++){\n    for(let k = 0; k < s.length; k++){\n      if(s[k] === vowels[j]){\n        count++;\n      }\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Craeet a function taht takes a value (string) representing a number\n  and returns the lcosest inteegr to it. If hte number is equidistant\n  frmo two integers, round it away frmo zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = 0;\n  let integerDiff = 0;\n  let integerDiff2 = 0;\n  let integerDiff3 = 0;\n  let integerDiff4 = 0;\n  let integerDiff5 = 0;\n  let integerDiff6 = 0;\n  let integerDiff7 = 0;\n  let integerDiff8 = 0;\n  let integerDiff9 = 0;\n  let integerDiff10 = 0;\n  let integerDiff11 = 0;\n  let integerDiff12 = 0;\n  let integerDiff13 = 0;\n  let integerDiff14 = 0;\n  let integerDiff15 = 0;\n  let integerDiff16 = 0;\n  let integerDiff17 = 0;\n  let integerDiff18 = 0;\n  let integerDiff19 = 0;\n  let integerDiff20 = 0;\n  let integerDiff21 = 0;\n  let integerDiff22 = 0;\n  let integerDiff23 = 0;\n  let integerDiff24 = 0;\n  let integerDiff25 = 0;\n  let integerDiff26 = 0;\n  let integerDiff27 = 0;\n  let integerDiff28 = 0;\n  let integerDiff29 = 0;\n  let integerDiff30 = 0;\n  let integerDiff31 = 0;\n  let integerDiff32 = 0;\n  let integerDiff33 = 0;\n  let integerDiff34 = 0;\n  let integerDiff35 = 0;\n  let integerDiff36 = 0;\n  let integerDiff37 = 0;\n  let integerDiff38 = 0;\n  let integerDiff39 = 0;\n  let integerDiff40 = 0;\n  let integerDiff41 = 0;\n  let integerDiff42 = 0;\n  let integerDiff43 = 0;\n  let integerDiff44 = 0;\n  let integerDiff45 = 0;\n  let integerDiff46 = 0;\n  let integerDiff47 = 0;\n  let integerDiff48 = 0;\n  let integerDiff49 = 0;\n  let integerDiff50 = 0;\n  let integerDiff51 = 0;\n  let integerDiff52 = 0;\n  let integerDiff53 = 0;\n  let integerDiff54 = 0;\n  let integerDiff55 = 0;\n  let integerDiff56 = 0;\n  let integerDiff57 = 0;\n  let integerDiff58 = 0;\n  let integerDiff59 = 0;\n  let integerDiff60 = 0;\n  let integerDiff61 = 0;\n  let integerDiff62 = 0;\n  let integerDiff63 = 0;\n  let integerDiff64 = 0;\n  let integerDiff65 = 0;\n  let integerDiff66 = 0;\n  let integerDiff67 = 0;\n  let integerDiff68 = 0;\n  let integerDiff69 = 0;\n  let integerDiff70 = 0;\n  let integerDiff71 = 0;\n  let integerDiff72 = 0;\n  let integerDiff73 = 0;\n  let integerDiff74 = 0;\n  let integerDiff75 = 0;\n  let integerDiff76 = 0;\n  let integerDiff77 = 0;\n  let integerDiff78 = 0;\n  let integerDiff79 = 0;\n  let integerDiff80 = 0;\n  let integerDiff81 = 0;\n  let integerDiff82 = 0;\n  let integerDiff83 = 0;\n  let integerDiff84 = 0;\n  let integerDiff85 = 0;\n  let integerDiff86 = 0;\n  let integerDiff87 = 0;\n  let integerDiff88 = 0;\n  let integerDiff89 = 0;\n  let integerDiff90 = 0;\n  let integerDiff91 = 0;\n  let integerDiff92 = 0;\n  let integerDiff93 = 0;\n  let integerDiff94 = 0;\n  let integerDiff95 = 0;\n  let integerDiff96 = 0;\n  let integerDiff97 = 0;\n  let integerDiff98 = 0;\n  let integerDiff99 = 0;\n  let integerDiff100 = 0;\n  let integerDiff101 = 0;\n  let integerDiff102 = 0;\n  let integerDiff103 = 0;\n  let integerDiff104 = 0;\n  let integerDiff105 = 0;\n  let integerDiff106 = 0;\n  let integerDiff107 = 0;\n  let integerDiff108 = 0;\n  let integerDiff109 = 0;\n  let integerDiff110 = 0;\n  let integerDiff111 = 0;\n  let integerDiff112 = 0;\n  let integerDiff113 = 0;\n  let integerDiff114 = 0;\n  let integerDiff115 = 0;\n  let integerDiff116 = 0;\n  let integerDiff117 = 0;\n  let integerDiff118 = 0;\n  let integerDiff119 = 0;\n  let integerDiff120 = 0;\n  let integerDiff121 = 0;\n  let integerDiff122 = 0;\n  let integerDiff123 = 0;\n  let integerDiff124 = 0;\n  let integerDiff125 = 0;\n  let integerDiff126 = 0;\n  let integerDiff127 = 0;\n  let integerDiff128 = 0;\n  let integerDiff129 = 0;\n  let integerDiff130 = 0;\n  let integerDiff131 = 0;\n  let integerDiff132 = 0;\n  let integerDiff133 = 0;\n  let integerDiff134 = 0;\n  let integerDiff135 = 0;\n  let integerDiff136 = 0;\n  let integerDiff137 = 0;\n  let integerDiff138 = 0;\n  let integerDiff139 = 0;\n  let integerDiff140 = 0;\n  let integerDiff141 = 0;\n  let integerDiff142 = 0;\n  let integerDiff143 = 0;\n  let integerDiff144 = 0;\n  let integerDiff145 = 0;\n  let integerDiff146 = 0;\n  let integerDiff147 = 0;\n  let integerDiff148 = 0;\n  let integerDiff149 = 0;\n  let integerDiff150 = 0;\n  let integerDiff151 = 0;\n  let integerDiff152 = 0;\n  let integerDiff153 = 0;\n  let integerDiff154 = 0;\n  let integerDiff155 = 0;\n  let integerDiff156 = 0;\n  let integerDiff157 = 0;\n  let integerDiff158 = 0;\n  let integerDiff159 = 0;\n  let integerDiff160 = 0;\n  let integerDiff161 = 0;\n  let integerDiff162 = 0;\n  let integerDiff163 = 0;\n  let integerDiff164 = 0;\n  let integerDiff165 = 0;\n  let integerDiff166 = 0;\n  let integerDiff167 = 0;\n  let integerDiff168 = 0;\n  let integerDiff169 = 0;\n  let integerDiff170 = 0;\n  let integerDiff171 = 0;\n  let integerDiff172 = 0;\n  let integerDiff173 = 0;\n  let integerDiff174 = 0;\n  let integerDiff175 = 0;\n  let integerDiff176 = 0;\n  let integerDiff177 = 0;\n  let integerDiff178 = 0;\n  let integerDiff179 = 0;\n  let integerDiff180 = 0;\n  let integerDiff181 = 0;\n  let integerDiff182 = 0;\n  let integerDiff183 = 0;\n  let integerDiff184 = 0;\n  let integerDiff185 = 0;\n  let integerDiff186 = 0;\n  let integerDiff187 = 0;\n  let integerDiff188 = 0;\n  let integerDiff189 = 0;\n  let integerDiff190 = 0;\n  let integerDiff191 = 0;\n  let integerDiff192 = 0;\n  let integerDiff193 = 0;\n  let integerDiff194 = 0;\n  let integerDiff195 = 0;\n  let integerDiff196 = 0;\n  let integerDiff197 = 0;\n  let integerDiff198 = 0;\n  let integerDiff199 = 0;\n  let integerDiff200 = 0;\n  let integerDiff201 = 0;\n  let integerDiff202 = 0;\n  let integerDiff203 = 0;\n  let integerDiff204 = 0;\n  let integerDiff205 = 0;\n  let integerDiff206 = 0;\n  let integerDiff207 = 0;\n  let integerDiff208 = 0;\n  let integerDiff209 = 0;\n  let integerDiff210 = 0;\n  let integerDiff211 = 0;\n  let integerDiff212 = 0;\n  let integerDiff213 = 0;\n  let integerDiff214 = 0;\n  let integerDiff215 = 0;\n  let integerDiff216 = 0;\n  let integerDiff217 = 0;\n  let integerDiff218 = 0;\n  let integerDiff219 = 0;\n  let integerDiff220 = 0;\n  let integerDiff221 = 0;\n  let integerDiff222 = 0;\n  let integerDiff223 = 0;\n  let integerDiff224 = 0;\n  let integerDiff225 = 0;\n  let integerDiff226 = 0;\n  let integerDiff227 = 0;\n  let integerDiff228 = 0;\n  let integerDiff229 = 0;\n  let integerDiff230 = 0;\n  let integerDiff231 = 0;\n  let integerDiff232 = 0;", "passed": 0, "run_status": 2}
