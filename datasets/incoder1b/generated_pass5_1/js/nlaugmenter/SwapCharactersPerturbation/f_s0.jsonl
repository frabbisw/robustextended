{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((prev, curr) => {\n    const diff = curr - prev;\n    return diff < 0? prev : curr;\n  }, 0);\n  return Math.abs(closest - threshold) < Number.EPSILON;\n};\n\n/**\n * Check if given list of numbers is in given list of numbers.\n * If given list of numbers is empty or contains only single number, return false.\n * If given list of numbers is empty or contains multiple numbers, return true.\n * If given list of numbers is non-empty and contains only single number, return true.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains multiple numbers, return false.\n * If given list of numbers is non-empty and contains ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/ig);\n  let paren_group;\n  let paren_group_array;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren_group_array_length;\n  let paren_group_array_index;\n  let paren", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longset = string.split('').reverse().join('');\n  let prefix = longset.split('').reverse().join('');\n  let suffix = longset.split('').reverse().join('');\n  let palindromePrefix = prefix + suffix;\n  let palindromeSuffix = prefix + suffix;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('').reverse().join('');\n  if (isPalindrome(palindromePrefixReversed) && isPalindrome(palindromeSuffixReversed)) {\n    palindrome = palindromePrefix + palindromeSuffix;\n  }\n  return palindrome;\n}\n\n/* Test if a given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longset = string.split('').reverse().join('');\n  let prefix = longset.split('').reverse().join('');\n  let suffix = longset.split('').reverse().join('');\n  let palindromePrefix = prefix + suffix;\n  let palindromeSuffix = prefix + suffix;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('').reverse().join('');\n  if (isPalindrome(palindromePrefixReversed) && isPalindrome(palindromeSuffixReversed)) {\n    palindrome = palindromePrefix + palindromeSuffix;\n  }\n  return palindrome;\n}\n\n/* Test if a given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longset = string.split('').reverse().join('');\n  let prefix = longset.split('').reverse().join('');\n  let suffix = longset.split('').reverse().join('');\n  let palindromePrefix = prefix + suffix;\n  let palindromeSuffix = prefix + suffix;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('').reverse().join('');\n  if (isPalindrome(palindromePrefixReversed) && isPalindrome(palindromeSuffixReversed)) {\n    palindrome = palindromePrefix + palindromeSuffix;\n  }\n  return palindrome;\n}\n\n/* Test if a given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longset = string.split('').reverse().join('');\n  let prefix = longset.split('').reverse().join('');\n  let suffix = longset.split('').reverse().join('');\n  let palindromePrefix = prefix + suffix;\n  let palindromeSuffix = prefix + suffix;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('').reverse().join('');\n  if (isPalindrome(palindromePrefixReversed) && isPalindrome(palindromeSuffixReversed)) {\n    palindrome = palindromePrefix + palindromeSuffix;\n  }\n  return palindrome;\n}\n\n/* Test if a given string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longset = string.split('').reverse().join('');\n  let prefix = longset.split('').reverse().join('');\n  let suffix = longset.split('').reverse().join('');\n  let palindromePrefix = prefix + suffix;\n  let palindromeSuffix = prefix + suffix;\n  let palindromePrefixReversed = palindromePrefix.split('').reverse().join('');\n  let palindromeSuffixReversed = palindromeSuffix.split('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let tsone = 0;\n  let nextLevel = 0;\n  while (level < n) {\n    levels.push(level);\n    level++;\n    tsone++;\n    if (tsone % 2 === 0) {\n      nextLevel++;\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseent", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\").map(w => w.trim());\n  return words;\n};\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let fI = -1;\n  let hten = -1;\n  let nub = x;\n  let nub2 = y;\n  let nub3 = nub;\n  let nub4 = nub;\n  let nub5 = nub;\n  let nub6 = nub;\n  let nub7 = nub;\n  let nub8 = nub;\n  let nub9 = nub;\n  let nub10 = nub;\n  let nub11 = nub;\n  let nub12 = nub;\n  let nub13 = nub;\n  let nub14 = nub;\n  let nub15 = nub;\n  let nub16 = nub;\n  let nub17 = nub;\n  let nub18 = nub;\n  let nub19 = nub;\n  let nub20 = nub;\n  let nub21 = nub;\n  let nub22 = nub;\n  let nub23 = nub;\n  let nub24 = nub;\n  let nub25 = nub;\n  let nub26 = nub;\n  let nub27 = nub;\n  let nub28 = nub;\n  let nub29 = nub;\n  let nub30 = nub;\n  let nub31 = nub;\n  let nub32 = nub;\n  let nub33 = nub;\n  let nub34 = nub;\n  let nub35 = nub;\n  let nub36 = nub;\n  let nub37 = nub;\n  let nub38 = nub;\n  let nub39 = nub;\n  let nub40 = nub;\n  let nub41 = nub;\n  let nub42 = nub;\n  let nub43 = nub;\n  let nub44 = nub;\n  let nub45 = nub;\n  let nub46 = nub;\n  let nub47 = nub;\n  let nub48 = nub;\n  let nub49 = nub;\n  let nub50 = nub;\n  let nub51 = nub;\n  let nub52 = nub;\n  let nub53 = nub;\n  let nub54 = nub;\n  let nub55 = nub;\n  let nub56 = nub;\n  let nub57 = nub;\n  let nub58 = nub;\n  let nub59 = nub;\n  let nub60 = nub;\n  let nub61 = nub;\n  let nub62 = nub;\n  let nub63 = nub;\n  let nub64 = nub;\n  let nub65 = nub;\n  let nub66 = nub;\n  let nub67 = nub;\n  let nub68 = nub;\n  let nub69 = nub;\n  let nub70 = nub;\n  let nub71 = nub;\n  let nub72 = nub;\n  let nub73 = nub;\n  let nub74 = nub;\n  let nub75 = nub;\n  let nub76 = nub;\n  let nub77 = nub;\n  let nub78 = nub;\n  let nub79 = nub;\n  let nub80 = nub;\n  let nub81 = nub;\n  let nub82 = nub;\n  let nub83 = nub;\n  let nub84 = nub;\n  let nub85 = nub;\n  let nub86 = nub;\n  let nub87 = nub;\n  let nub88 = nub;\n  let nub89 = nub;\n  let nub90 = nub;\n  let nub91 = nub;\n  let nub92 = nub;\n  let nub93 = nub;\n  let nub94 = nub;\n  let nub95 = nub;\n  let nub96 = nub;\n  let nub97 = nub;\n  let nub98 = nub;\n  let nub99 = nub;\n  let nub100 = nub;\n  let nub101 = nub;\n  let nub102 = nub;\n  let nub103 = nub;\n  let nub104 = nub;\n  let nub105 = nub;\n  let nub106 = nub;\n  let nub107 = nub;\n  let nub108 = nub;\n  let nub109 = nub;\n  let nub110 = nub;\n  let nub111 = nub;\n  let nub112 = nub;\n  let nub113 = nub;\n  let nub114 = nub;\n  let nub115 = nub;\n  let nub116 = nub;\n  let nub117 = nub;\n  let nub118 = nub;\n  let nub119 = nub;\n  let nub120 = nub;\n  let nub121 = nub;\n  let nub122 = nub;\n  let nub123 = nub;\n  let nub124 = nub;\n  let nub125 = nub;\n  let nub126 = nub;\n  let nub127 = nub;\n  let nub128 = nub;\n  let nub129 = nub;\n  let nub130 = nub;\n  let nub131 = nub;\n  let nub132 = nub;\n  let nub133 = nub;\n  let nub134 = nub;\n  let nub135 = nub;\n  let nub136 = nub;\n  let nub137 = nub;\n  let nub138 = nub;\n  let nub139 = nub;\n  let nub140 = nub;\n  let nub141 = nub;\n  let nub142 = nub;\n  let nub143 = nub;\n  let nub144 = nub;\n  let nub145 = nub;\n  let nub146 = nub;\n  let nub147 = nub;\n  let nub148 = nub;\n  let nub149 = nub;\n  let nub150 = nub;\n  let nub151 = nub;\n  let nub152 = nub;\n  let nub153 = nub;\n  let nub154 = nub;\n  let nub155 = nub;\n  let nub156 = nub;\n  let nub157 = nub;\n  let nub158 = nub;\n  let nub159 = nub;\n  let nub160 = nub;\n  let nub161 = nub;\n  let nub162 = nub;\n  let nub163 = nub;\n  let nub164 = nub;\n  let nub165 = nub;\n  let nub166 = nub;\n  let nub167 = nub;\n  let nub168 = nub;\n  let nub169 = nub;\n  let nub170 = nub;\n  let nub171 = nub;\n  let nub", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst oddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst evenDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  if (j === x.length) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueOddEvenDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  if (j === x.length) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueOddEvenOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  if (j === x.length) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit and has odd digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueOddEvenOddOddOddDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddEvenOddOddOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddOddOddOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i])\n      i++\n    } else {\n      j++\n      if (j === x.length) {\n        result.push(x[i])\n        j = 0\n      }\n    }\n  }\n  if (j === x.length) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  if (x[i] % 2!== 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of poistive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit and has even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueOddEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength2 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength3 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength4 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength5 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength6 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength7 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength8 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength9 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength10 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength11 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength12 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength13 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength14 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength15 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength16 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength17 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength18 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength19 = arr => {\n  let len = arr.length;\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  let arr4 = arr3.map((item, index) => {\n    if (item < 10) {\n      return item;\n    }\n    return item + arr4[index];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function g that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function h that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function i that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function j that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function k that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function l that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function m that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function n that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function o that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function p that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function q that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return list;\n};\n\n/* Implement the function r that takes two parameters,\n  and returns a list of size n, such that the value of the eelment at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  r(5) == [1, 2, 6, 24, 15]\n  */\nconst r = (n) => {\n  let list = [];\n  for (let i = 1; i <= n; i++) {\n    list.push(i * i);\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the smallest positive integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has smallest positive integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst smallestPositivePalindrome = (n) => {\n  const smallestPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPalindromes.push(i);\n    } else {\n      break;\n    }\n  }\n\n  return smallestPalindromes;\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the largest positive integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has largest positive integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst largestPositivePalindrome = (n) => {\n  const largestPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPalindromes.push(i);\n    } else {\n      break;\n    }\n  }\n\n  return largestPalindromes;\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the largest negative integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has largest negative integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst largestNegativePalindrome = (n) => {\n  const largestPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPalindromes.push(i);\n    } else {\n      break;\n    }\n  }\n\n  return largestPalindromes;\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the smallest negative integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has smallest negative integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst smallestNegativePalindrome = (n) => {\n  const smallestPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPalindromes.push(i);\n    } else {\n      break;\n    }\n  }\n\n  return smallestPalindromes;\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the largest positive integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has largest positive integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst largestPositivePalindrome = (n) => {\n  const largestPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPalindromes.push(i);\n    } else {\n      break;\n    }\n  }\n\n  return largestPalindromes;\n};\n\n/*\n  Given a positive itneger n, return a tuple that has the smallest positive integer palindrome\n  that falls within the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has smallest positive integer palindrome that falls within the argne(1, n) inclusive.\n  */\nconst smallestPositiveNegativePalindrome = (n) => {\n  const smallestPalindro", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let sign = 1;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n      num = arr[i];\n    } else {\n      num = arr[i];\n    }\n    count += num * sign;\n  }\n  return count;\n};\n\n/*\n  Write a funtcion countDigits which takes an array of integers and returns\n  the number of digits in each integer.\n  >>> countDigits([]) == 0\n  >>> countDigits([-1, 11, -11]) == 1\n  >>> countDigits([1, 1, 2]) == 2\n  */\nconst countDigits = (arr) => {\n  let count = 0;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    num = arr[i];\n    count += num;\n  }\n  return count;\n};\n\n/*\n  Write a funtcion countZeros which takes an array of integers and returns\n  the number of zeros in each integer.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 2\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    num = arr[i];\n    if (num === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a funtcion countOdd which takes an array of integers and returns\n  the number of odd integers in each integer.\n  >>> countOdd([]) == 0\n  >>> countOddpassed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an arrya 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We have an arrya 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let moveOneBallArr = [];\n  let moveOneBallArrLen = arr.length;\n  let moveOneBallArrIndex = 0;\n  let moveOneBallArrIndex2 = 0;\n  let moveOneBallArrIndex3 = 0;\n  let moveOneBallArrIndex4 = 0;\n  let moveOneBallArrIndex5 = 0;\n  let moveOneBallArrIndex6 = 0;\n  let moveOneBallArrIndex7 = 0;\n  let moveOneBallArrIndex8 = 0;\n  let moveOneBallArrIndex9 = 0;\n  let moveOneBallArrIndex10 = 0;\n  let moveOneBallArrIndex11 = 0;\n  let moveOneBallArrIndex12 = 0;\n  let moveOneBallArrIndex13 = 0;\n  let moveOneBallArrIndex14 = 0;\n  let moveOneBallArrIndex15 = 0;\n  let moveOneBallArrIndex16 = 0;\n  let moveOneBallArrIndex17 = 0;\n  let moveOneBallArrIndex18 = 0;\n  let moveOneBallArrIndex19 = 0;\n  let moveOneBallArrIndex20 = 0;\n  let moveOneBallArrIndex21 = 0;\n  let moveOneBallArrIndex22 = 0;\n  let moveOneBallArrIndex23 = 0;\n  let moveOneBallArrIndex24 = 0;\n  let moveOneBallArrIndex25 = 0;\n  let moveOneBallArrIndex26 = 0;\n  let moveOneBallArrIndex27 = 0;\n  let moveOneBallArrIndex28 = 0;\n  let moveOneBallArrIndex29 = 0;\n  let moveOneBallArrIndex30 = 0;\n  let moveOneBallArrIndex31 = 0;\n  let moveOneBallArrIndex32 = 0;\n  let moveOneBallArrIndex33 = 0;\n  let moveOneBallArrIndex34 = 0;\n  let moveOneBallArrIndex35 = 0;\n  let moveOneBallArrIndex36 = 0;\n  let moveOneBallArrIndex37 = 0;\n  let moveOneBallArrIndex38 = 0;\n  let moveOneBallArrIndex39 = 0;\n  let moveOneBallArrIndex40 = 0;\n  let moveOneBallArrIndex41 = 0;\n  let moveOneBallArrIndex42 = 0;\n  let moveOneBallArrIndex43 = 0;\n  let moveOneBallArrIndex44 = 0;\n  let moveOneBallArrIndex45 = 0;\n  let moveOneBallArrIndex46 = 0;\n  let moveOneBallArrIndex47 = 0;\n  let moveOneBallArrIndex48 = 0;\n  let moveOneBallArrIndex49 = 0;\n  let moveOneBallArrIndex50 = 0;\n  let moveOneBallArrIndex51 = 0;\n  let moveOneBallArrIndex52 = 0;\n  let moveOneBallArrIndex53 = 0;\n  let moveOneBallArrIndex54 = 0;\n  let moveOneBallArrIndex55 = 0;\n  let moveOneBallArrIndex56 = 0;\n  let moveOneBallArrIndex57 = 0;\n  let moveOneBallArrIndex58 = 0;\n  let moveOneBallArrIndex59 = 0;\n  let moveOneBallArrIndex60 = 0;\n  let moveOneBallArrIndex61 = 0;\n  let moveOneBallArrIndex62 = 0;\n  let moveOneBallArrIndex63 = 0;\n  let moveOneBallArrIndex64 = 0;\n  let moveOneBallArrIndex65 = 0;\n  let moveOneBallArrIndex66 = 0;\n  let moveOneBallArrIndex67 = 0;\n  let moveOneBallArrIndex68 = 0;\n  let moveOneBallArrIndex69 = 0;\n  let moveOneBallArrIndex70 = 0;\n  let moveOneBallArrIndex71 = 0;\n  let moveOneBallArrIndex72 = 0;\n  let moveOneBallArrIndex73 = 0;\n  let moveOneBallArrIndex74 = 0;\n  let moveOneBallArrIndex75 = 0;\n  let moveOneBallArrIndex76 = 0;\n  let moveOneBallArrIndex77 = 0;\n  let moveOneBallArrIndex78 = 0;\n  let moveOneBallArrIndex79 = 0;\n  let moveOneBallArrIndex80 = 0;\n  let moveOneBallArrIndex81 = 0;\n  let moveOneBallArrIndex82 = 0;\n  let moveOneBallArrIndex83 = 0;\n  let moveOneBallArrIndex84 = 0;\n  let moveOneBallArrIndex85 = 0;\n  let moveOneBallArrIndex86 = 0;\n  let moveOneBallArrIndex87 = 0;\n  let moveOneBallArrIndex88 = 0;\n  let moveOneBallArrIndex89 = 0;\n  let moveOneBallArrIndex90 = 0;\n  let moveOneBallArrIndex91 = 0;\n  let moveOneBallArrIndex92 = 0;\n  let moveOneBallArrIndex93 = 0;\n  let moveOneBallArrIndex94 = 0;\n  let moveOneBallArrIndex95 = 0;\n  let moveOneBallArrIndex96 = 0;\n  let moveOneBallArrIndex97 = 0;\n  let moveOneBallArrIndex98 = 0;\n  let moveOneBallArrIndex99 = 0;\n  let moveOneBallArrIndex100 = 0;\n  let moveOneBallArrIndex101 = 0;\n  let moveOneBallArrIndex102 = 0;\n  let moveOneBallArrIndex103 = 0;\n  let moveOneBallArrIndex104 = 0;\n  let moveOneBallArrIndex105 = 0;\n  let moveOneBallArrIndex106 = 0;\n  let moveOneBallArrIndex107 = 0;\n  let moveOneBallArrIndex108 = 0;\n  let moveOneBallArrIndex109 = 0;\n  let moveOneBallArrIndex110 = 0;\n  let moveOneBallArrIndex111 = 0;\n  let moveOneBallArrIndex112 = 0;\n  let moveOneBallArrIndex113 = 0;\n  let moveOneBallArrIndex114 = 0;\n  let moveOneBallArrIndex115 = 0;\n  let moveOneBallArrIndex116 = 0;\n  let moveOneBallArrIndex117 = 0;\n  let moveOneBallArrIndex118 = 0;\n  let moveOneBallArrIndex119 = 0;\n  let moveOneBallArrIndex120 = 0;\n  let moveOneBallArrIndex121 = 0;\n  let moveOneBallArrIndex122 = 0;\n  let moveOneBallArrIndex123 = 0;\n  let moveOneBallArrIndex124 = 0;\n  let moveOneBallArrIndex125 = 0;\n  let moveOneBallArrIndex126 = 0;\n  let moveOneBallArrIndex127 = 0;\n  let moveOneBallArrIndex128 = 0;\n  let moveOneBallArrIndex129 = 0;\n  let moveOneBallArrIndex130 = 0;\n  let moveOneBallArrIndex131 = 0;\n  let moveOneBallArrIndex132 = 0;\n  let moveOneBallArrIndex133 = 0;\n  let moveOneBallArrIndex134 = 0;\n  let moveOneBallArrIndex135 = 0;\n  let moveOneBallArrIndex136 = 0;\n  let moveOneBallArrIndex137 = 0;\n  let moveOneBallArrIndex138 = 0;\n  let moveOneBallArrIndex139 = 0;\n  let moveOne", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor15 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor16 = (a, b) => {\n  let res = '';\n  for (let i = 0; i < a.length; i++) {\n    res = res + a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length < lst2.length) {\n    return exchange(lst2, lst1);\n  }\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the\n  sum of the numbers in the array.\n  For example:\n  sum([1, 2, 3, 4]) => 10\n  sum([1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n  sum([1, 5, 3, 4], [1, 5, 3, 4]) => 15\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let result = {};\n  letters.forEach((letter) => {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter] = 1;\n    }\n  });\n  return result;\n};\n\n/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let m = c.length;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of even elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of even dgiits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  lst.forEach((str) => {\n    const oddNum = str.match(/\\d+/g).filter(Boolean).length;\n    const evenNum = str.match(/\\d+/g).filter(Boolean).length;\n    res.push(oddNum);\n    res.push(evenNum);\n  });\n  return res;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ientgres nums, find the maximum sum of any non-epmty ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const len = grid.length;\n    const capacity_per_row = capacity / len;\n    const capacity_per_col = capacity / grid[0].length;\n    const capacity_per_bucket = capacity_per_col * capacity_per_row;\n    const capacity_per_bucket_per_row = capacity_per_bucket / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const capacity_per_bucket_per_col = capacity_per_bucket_per_row / grid[0].length;\n    const capacity_per_bucket_per_row = capacity_per_bucket_per_col / grid[0].length;\n    const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  let numOnes = 0;\n  let numZeros = 0;\n  let numOnesArr = [];\n  let numZerosArr = [];\n  let numOnesArrTemp = [];\n  let numZerosArrTemp = [];\n  let numOnesTemp = [];\n  let numZerosTemp = [];\n  let numOnesTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTempTempTemp = [];\n  let numZerosTempTemp = [];\n  let numOnesTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n occurences of substring s, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWordsWithSubstring = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n occurences of substring s, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWordsWithSubstring(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWordsWithSubstring(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWordsWithSubstring(\"simple white space\", 2) ==> []\n  selectWordsWithSubstring(\"Hello world\", 4) ==> [\"world\"]\n  selectWordsWithSubstring(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWordsWithSubstringAndSubstring = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n occurences of substring s, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWordsWithSubstringAndSubstring(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWordsWithSubstringAndSubstring(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWordsWithSubstringAndSubstring(\"simple white space\", 2) ==> []\n  selectWordsWithSubstringAndSubstring(\"Hello world\", 4) ==> [\"world\"]\n  selectWordsWithSubstringAndSubstring(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWordsWithSubstringAndSubstringAndSubstring = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n occurences of substring s, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWordsWithSubstringAndSubstringAndSubstring(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWordsWithSubstringAndSubstringAndSubstring(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWordsWithSubstringAndSubstringAndSubstring(\"simple white space\", 2) ==> []\n  selectWordsWithSubstringAndSubstringAndSubstring(\"Hello world\", 4) ==> [\"world\"]\n  selectWordsWithSubstringAndSubstringAndSubstring(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWordsWithSubstringAndSubstringAndSubstringAndSubstring = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n occurences of substring s, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWordsWithSubstringAndSubstringAndSubstringAndSubstring(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWordsWithSubstringAndSubstringAndSubstringAndSubstring(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWordsWithSubstringAndSubstringAndSubstringAndSubstring(\"simple white space\", 2) ==> []\n  selectWordsWithSubstringAndSubstringAndSubstringAndSubstring(\"Hello world\", 4) ==> [\"world\"]\n  selectWordsWithSubstringAndSubstringAndSubstringAndSubstring(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWordsWithSubstringAndSubstringAndSubstringAndSubstringAndSubstring = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map((v) => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestString = string\n      longestLength = string.length\n    }\n  }\n  return longestString\n}\n\n/**\n  Converts any string to a list of integers. If the string contains only digits, it is\n  returned unchanged.\n\n  >>> toInt('123')\n  123\n  >>> toInt('12')\n  12\n  >>> toInt('1')\n  1\n  >>> toInt('12a')\n  12\n  >>> toInt('12ab')\n  12\n  >>> toInt('12abc')\n  12\n  >>> toInt('12abc123')\n  12\n  >>> toInt('12abc123a')\n  12\n  >>> toInt('12abc123ab')\n  12\n  >>> toInt('12abc123abc')\n  12\n  >>> toInt('12abc123abc123')\n  12\n  >>> toInt('12abc123abc123a')\n  12\n  >>> toInt('12abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc')\n  12\n  >>> toInt('12abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc')\n  12\n  >>> toInt('12abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123a')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123ab')\n  12\n  >>> toInt('12abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [arr[maxIndex], maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curNode = curNode.next;\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curIndex = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n    curNode = curNode.next;\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curNode = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curNode = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curNode = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curNode = curNode.next;\n    if (curSum > maxSum) {\n      maxSum = curSum;\n      maxIndex = curIndex;\n    }\n  }\n  return [maxSum, maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/discuss/737/Java-solution-with-explanation-of-algorithm-and-solution-for-each-subarray-sum\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArraySum = function(head, k) {\n  let maxSum = Number.MAX_VALUE;\n  let maxIndex = 0;\n  let curSum = 0;\n  let curIndex = 0;\n  let curNode = head;\n  while (curNode!== null) {\n    curSum = curSum + curNode.val;\n    curNode = curNode.next;\n    if (curSum > maxSum) {\n      maxSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],13:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true\n  is_palindrome(5) ==> false\n  is_palindrome(8) ==> false\n  is_palindrome(12) ==> true\n  */\nconst is_palindrome = (num) => {\n  let reversed = num.toString().split('').reverse().join('');\n  return reversed === num.toString();\n};\n\nmodule.exports = {\n  is_palindrome,\n};\n\n},{}],14:[function(require,module,exports){\n/*\n  Implement a function to check if a number is palindrome or not.\n\n  Examples\n  is_palindrome(3) ==> true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElements = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the minimum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst minElements = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the minimum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst minElementsSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSumSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSumSumSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSumSumSumSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n      k++;\n      j++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty arary of integers arr and an integer k, return\n * the maximum possible sum of the elements with at most two dgiits from the first k elements fo arr.\n\n * Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst maxElementsSumSumSumSumSum = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= k) {\n      sum += arr[i];\n      count++;\n      i++;\n    } else {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  let next = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = next;\n      next = i * prev;\n      i++;\n    } else {\n      collatz.push(next);\n      next = i * next;\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list htat has the even numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  let next = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = next;\n      next = i * prev;\n      i++;\n    } else {\n      collatz.push(next);\n      next = i * next;\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list htat has the prime numbers in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 9, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  let next = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = next;\n      next = i * prev;\n      i++;\n    } else {\n      collatz.push(next);\n      next = i * next;\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list htat has the prime numbers in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 9, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  let next = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = next;\n      next = i * prev;\n      i++;\n    } else {\n      collatz.push(next);\n      next = i * next;\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list htat has the prime numbers in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 2, 1], \n  so the prime numbers are 1, 3, 5, 7, 9, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  let next = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(prev);\n      prev = next;\n      next = i * prev;\n      i++;\n    } else {\n      collatz.push(next);\n      next = i * next;\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list htat has the prime numbers in collazt sequence.\n\n  hTe Collatz conjecture ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat.test(date);\n};\n\n/*\n  Write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat.test(date);\n};\n\n/*\n  Write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat.test(date);\n};\n\n/*\n  Write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat.test(date);\n};\n\n/*\n  Write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat.test(date);\n};\n\n/*\n  Write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\d{4}$/;\n  return dateFormat", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma_noWhitespaces = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma_noWhitespaces_noComma = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma_noWhitespaces_noComma_noWhitespaces = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma_noWhitespaces_noComma_noWhitespaces_noComma = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsNoWhitespaces_noComma_noWhitespaces_noComma_noWhitespaces_noComma_noWhitespaces = (txt) => {\n  const words = txt.split(',');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word);\n      }\n    }\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i = 0\n  let j = 0\n  while (i < lst.length) {\n    if (lst[i] > lst[j]) {\n      sorted = true\n      break\n    }\n    i++\n    j++\n  }\n  return sorted\n}\n\n/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5, 2, 1]) ➞ false\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ false\n  isSorted([5, 2, 1]) ➞ false\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, 2, 1]) ➞ true\n  isSorted([5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let startIntersection = start1 < start2? start1 : start2;\n  let endIntersection = end1 < end2? end1 : end2;\n  let startIntersectionLength = startIntersection.length;\n  let endIntersectionLength = endIntersection.length;\n  let isIntersectionPrime = true;\n  for (let i = startIntersectionLength; i < endIntersectionLength; i++) {\n    if (startIntersection[i]!== endIntersection[i]) {\n      isIntersectionPrime = false;\n      break;\n    }\n  }\n  return isIntersectionPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < intervals.length; i++) {\n    let interval = intervals[i];\n    if (isPrime[interval[0]]) {\n      isPrime[interval[0]] = false;\n    }\n    isPrime[interval[1]] = true;\n  }\n  return isPrime;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] isPrime: an array of booleans indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = [];\n  for (let i = 0; i < ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresSigns([1, 2, 2, -4]) == 9\n  >>> squaresSigns([0, 1]) == 4\n  >>> squaresSigns([]) == null\n  */\nconst squaresSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> cubesSigns([1, 2, 2, -4]) == 27\n  >>> cubesSigns([0, 1]) == 8\n  >>> cubesSigns([]) == null\n  */\nconst cubesSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresSigns([1, 2, 2, -4]) == 9\n  >>> squaresSigns([0, 1]) == 4\n  >>> squaresSigns([]) == null\n  */\nconst squaresOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> cubesOfSigns([1, 2, 2, -4]) == 27\n  >>> cubesOfSigns([0, 1]) == 8\n  >>> cubesOfSigns([]) == null\n  */\nconst cubesOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresOfSigns([1, 2, 2, -4]) == 9\n  >>> squaresOfSigns([0, 1]) == 4\n  >>> squaresOfSigns([]) == null\n  */\nconst squaresOfSignsOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresOfSignsOfSigns([1, 2, 2, -4]) == 9\n  >>> squaresOfSignsOfSigns([0, 1]) == 4\n  >>> squaresOfSignsOfSigns([]) == null\n  */\nconst squaresOfSignsOfSignsOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 9\n  >>> squaresOfSignsOfSignsOfSigns([0, 1]) == 4\n  >>> squaresOfSignsOfSignsOfSigns([]) == null\n  */\nconst squaresOfSignsOfSignsOfSignsOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresOfSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 9\n  >>> squaresOfSignsOfSignsOfSignsOfSigns([0, 1]) == 4\n  >>> squaresOfSignsOfSignsOfSignsOfSigns([]) == null\n  */\nconst squaresOfSignsOfSignsOfSignsOfSignsOfSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * arr[i] * arr[i];\n    } else if (arr[i] < 0) {\n      sum -= arr[i] * arr[i] * arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> squaresOfSignsOfSignsOfSignsOfSignsOfSigns([1, 2, 2, -4]) == 9\n  >>> squaresOfSignsOfSignsOfSignsOfSignsOfSigns([0, 1]) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = [], \n        lst_B = [], \n        ans = [],\n        ans_len = 0, \n        ans_index = 0, \n        ans_value = [],\n        ans_value_index = 0,\n        ans_value_len = 0;\n\n  grid.forEach((row, row_index) => {\n    row.forEach((cell, cell_index) => {\n      lst_A.push(cell);\n      lst_B.push(cell);\n    });\n  });\n\n  lst_A.sort((a, b) => a - b);\n\n  lst_B.sort((a, b) => a - b);\n\n  lst_A.forEach((cell, cell_index) => {\n    const ans_value = lst_B[cell_index];\n    const ans_value_index = lst_A.indexOf(ans_value);\n    const ans_value_len = lst_A.length;\n\n    if (ans_value_index === ans_value_index && ans_value_len === ans_value_len) {\n      ans.push(ans_value);\n      ans_len++;\n    }\n  });\n\n  return ans;\n};\n\nmodule.exports = minPath;\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = [], \n        lst_B = [], \n        ans = [],\n        ans_len = 0, \n        ans_index = 0, \n        ans_value = [],\n        ans_value_index = 0,\n        ans_value_len = 0;\n\n  grid.forEach((row, row_index) => {\n    row.forEach((cell, cell_index) => {\n      lst_A.push(cell);\n      lst_B.push(cell);\n    });\n  });\n\n  lst_A.sort((a, b) => a - b);\n\n  lst_B.sort((a, b) => a - b);\n\n  lst_A.forEach((cell, cell_index) => {\n    const ans_value = lst_B[cell_index];\n    const ans_value_index = lst_A.indexOf(ans_value);\n    const ans_value_len = lst_A.length;\n\n    if (ans_value_index === ans_value_index && ans_value_len === ans_value_len) {\n      ans.push(ans_value);\n      ans_len++;\n    }\n  });\n\n  return ans;\n};\n\nmodule.exports = minPath;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisors = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisors(25, 15)\n  5\n  */\nconst greatestCommonDivisorsOrZero = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisorsOrZero(25, 15)\n  5\n  */\nconst greatestCommonDivisorsOrZeros = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisorsOrZeros(25, 15)\n  5\n  */\nconst greatestCommonDivisorsOrZeros = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisorsOrZeros(25, 15)\n  5\n  */\nconst greatestCommonDivisorsOrZeros = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  const aIsZero = a === 0\n  const bIsZero = b === 0\n\n  if (aIsZero || bIsZero) {\n    return aIsZero? bIsZero? a : b : a\n  }\n\n  const aIsPositive = a > 0\n  const bIsPositive = b > 0\n\n  if (aIsPositive || bIsPositive) {\n    return aIsPositive? bIsPositive? a : b : a\n  }\n\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? bIsNegative? a : b : a\n  }\n\n  return a % b\n}\n\n/* Return a greatest common divisor of two integesr a nad b\n  >>> greatestCommonDivisorsOrZeros(25, 15)\n  5\n  */\nconst greatestCommonDivisorsOrZeros = (a, b) => {\n  const aIsNegative = a < 0\n  const bIsNegative = b < 0\n\n  if (aIsNegative || bIsNegative) {\n    return aIsNegative? ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  fib(7) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(100) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 241578, 429151, 674653, 1214291, 2416385, 4291829, 6746554, 12142913, 24163857, 42918309, 6746557, 12142914, 24163858, 42918313, 6746559, 12142915, 24163861, 42918315, 6746561, 12142916, 24163863, 42918317, 6746563, 12142917, 24163864, 42918321, 6746571, 12142918, 24163865, 42918323, 6746573, 12142919, 24163867, 42918325, 6746575, 12142920, 24163868, 42918327, 6746577, 12142921, 24163871, 42918331, 6746579, 12142922, 24163873, 42918333, 6746591, 12142923, 24163875, 42918335, 6746593, 12142924, 24163877, 42918337, 6746595, 12142925, 24163879, 42918341, 6746597, 12142926, 24163891, 42918343, 6746599, 12142927, 24163893, 42918345, 674661, 12142928, 24163895, 42918347, 674663, 12142929, 24163897, 42918349, 6746641, 12142931, 24163899, 42918351, 6746643, 12142932, 2416391, 42918353, 6746645, 12142934, 2416393, 42918355, 6746647, 12142935, 2416395, 42918357, 6746649, 12142936, 2416397, 42918359, 6746651, 12142937, 2416399, 42918361, 6746653, 12142938, 2416401, 42918363, 6746655, 12142939, 2416403, 42918365, 6746657, 12142940, 2416405, 42918367, 6746659, 12142941, 2416407, 42918369, 6746671, 12142942, 2416409, 42918371, 6746673, 12142943, 2416411, 42918373, 6746675, 12142944, 2416413, 42918375, 6746677, 12142945, 2416415, 42918377, 6746679, 12142950, 2416417, 42918381, 67466811, 12142951, 2416419, 42918383, 67466813, 12142952, 2416421, 42918385, 67466815, 12142953, 2416423, 42918387, 67466817, 12142954, 2416425, 42918389, 67466819, 12142955, 2416427, 42918391, 67466821, 12142957, 2416429, 42918393, 67466823, 12142960, 2416431, 42918395, 67466825, 12142961, 2416433, 42918397, 67466827, 12142962, 2416435, 42918399]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [fib(n - 1) + fib(n - 2) + fib(n - 3)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [0, 1, 1, 2, 3, 5, 8]\n  fib(7) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(100) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 241578, 429151, 674653, 1214291, 2416385, 4291829, 6746554, 12142913, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 42918309, 6746557, 12142914, 24163857, 4291830", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 2;\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  even digits. Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  odd digits. Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 2;\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  even digits, ignoring the odd digits. Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  even digits, ignoring the odd digits, and ignoring the even digits. Return\n  0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 2;\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  even digits, ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits. Return 0 if n\n  is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits, ignoring the\n  even digits, ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignoring the odd digits, and ignoring the even digits,\n  ignoring the odd digits, and ignoring the even digits, and ignoring the\n  odd digits, and ignoring the even digits, and ignoring the odd digits,\n  ignoring the even digits, and ignoring the odd digits, and ignoring the\n  even digits, and ignor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n  const squareBrackets = string\n   .split(']')\n   .map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']').map(s => s.split(']", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are to find the smallest number in the list that is a multiple of the target.\n  Examples:\n  Given nums = [1,3,5,7] and target = 9,\n  Your function should return 9.\n  Given nums = [1,3,5,7] and target = 8,\n  Your function should return 7.\n  Given nums = [1,3,5,7] and target = 7,\n  Your function should return 7.\n  Given nums = [1,3,5,7] and target = 3,\n  Your function should return 3.\n  Given nums = [1,3,5,7] and target = 1,\n  Your function should return 1.\n  Given nums = [1,3,5,7] and target = 0,\n  Your function should return 0.\n  Given nums = [1,3,5,7] and target = -1,\n  Your function should return -1.\n  Given nums = [1,3,5,7] and target = -2,\n  Your function should return -2.\n  Given nums = [1,3,5,7] and target = -3,\n  Your function should return -3.\n  Given nums = [1,3,5,7] and target = -4,\n  Your function should return -4.\n  Given nums = [1,3,5,7] and target = -5,\n  Your function should return -5.\n  Given nums = [1,3,5,7] and target = -6,\n  Your function should return -6.\n  Given nums = [1,3,5,7] and target = -7,\n  Your function should return -7.\n  Given nums = [1,3,5,7] and target = -9,\n  Your function should return -9.\n  Given nums = [1,3,5,7] and target = -10,\n  Your function should return -10.\n  Given nums = [1,3,5,7] and target = -11,\n  Your function should return -11.\n  Given nums = [1,3,5,7] and target = -12,\n  Your function should return -12.\n  Given nums = [1,3,5,7] and target = -13,\n  Your function should return -13.\n  Given nums = [1,3,5,7] and target = -14,\n  Your function should return -14.\n  Given nums = [1,3,5,7] and target = -15,\n  Your function should return -15.\n  Given nums = [1,3,5,7] and target = -16,\n  Your function should return -16.\n  Given nums = [1,3,5,7] and target = -17,\n  Your function should return -17.\n  Given nums = [1,3,5,7] and target = -18,\n  Your function should return -18.\n  Given nums = [1,3,5,7] and target = -19,\n  Your function should return -19.\n  Given nums = [1,3,5,7] and target = -20,\n  Your function should return -20.\n  Given nums = [1,3,5,7] and target = -21,\n  Your function should return -21.\n  Given nums = [1,3,5,7] and target = -22,\n  Your function should return -22.\n  Given nums = [1,3,5,7] and target = -23,\n  Your function should return -23.\n  Given nums = [1,3,5,7] and target = -24,\n  Your function should return -24.\n  Given nums = [1,3,5,7] and target = -25,\n  Your function should return -25.\n  Given nums = [1,3,5,7] and target = -26,\n  Your function should return -26.\n  Given nums = [1,3,5,7] and target = -27,\n  Your function should return -27.\n  Given nums = [1,3,5,7] and target = -28,\n  Your function should return -28.\n  Given nums = [1,3,5,7] and target = -29,\n  Your function should return -29.\n  Given nums = [1,3,5,7] and target = -30,\n  Your function should return -30.\n  Given nums = [1,3,5,7] and target = -31,\n  Your function should return -31.\n  Given nums = [1,3,5,7] and target = -32,\n  Your function should return -32.\n  Given nums = [1,3,5,7] and target = -33,\n  Your function should return -33.\n  Given nums = [1,3,5,7] and target = -34,\n  Your function should return -34.\n  Given nums = [1,3,5,7] and target = -35,\n  Your function should return -35.\n  Given nums = [1,3,5,7] and target = -36,\n  Your function should return -36.\n  Given nums = [1,3,5,7] and target = -37,\n  Your function should return -37.\n  Given nums = [1,3,5,7] and target = -38,\n  Your function should return -38.\n  Given nums = [1,3,5,7] and target = -39,\n  Your function should return -39.\n  Given nums = [1,3,5,7] and target = -40,\n  Your function should return -40.\n  Given nums = [1,3,5,7] and target = -41,\n  Your function should return -41.\n  Given nums = [1,3,5,7] and target = -42,\n  Your function should return -42.\n  Given nums = [1,3,5,7] and target = -43,\n  Your function should return -43.\n  Given nums = [1,3,5,7] and target = -44,\n  Your function should return -44.\n  Given nums = [1,3,5,7] and target = -45,\n  Your function should return -45.\n  Given nums = [1,3,5,7] and target = -46,\n  Your function should return -46.\n  Given nums = [1,3,5,7] and target = -47,\n  Your function should return -47.\n  Given nums = [1,3,5,7] and target = -48,\n  Your function should return -48.\n  Given nums = [1,3,5,7] and target = -49,\n  Your function should return -49.\n  Given nums = [1,3,5,7] and target = -50,\n  Your function should return -50.\n  Given nums = [1,3,5,7] and target = -51,\n  Your function should return -51.\n  Given nums = [1,3,5,7] and target = -52,\n  Your function should return -52.\n  Given nums = [1,3,5,7] and target = -53,\n  Your function should return -53.\n  Given nums = [1,3,5,7] and target = -54,\n  Your function should return -54.\n  Given nums = [1,3,5,7] and target = -55,\n  Your function should return -55.\n  Given nums = [1,3,5,7] and target = -56,\n  Your function should return -56.\n  Given nums = [1,3,5,7] and target = -57,\n  Your function should return -57.\n  Given nums = [1,3,5,7] and target = -58,\n  Your function should return -58.\n  Given nums = [1,3,5,7] and target = -59,\n  Your function should return -59.\n  Given nums = [1,3,5,7] and target = -60,\n  Your function should return -6", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' || lastChar === '_' || lastChar === '-' || lastChar === '!' || lastChar === '?' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar === '|' || lastChar === '\"' || lastChar === '(' || lastChar === ')' || lastChar === '*' || lastChar === '+' || lastChar === '%' || lastChar === '|' || lastChar === '{' || lastChar === '}' || lastChar === '[' || lastChar === ']' || lastChar === '<' || lastChar === '>' || lastChar ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let min = 0;\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  while (i >= 0 && j >= 0) {\n    if (arr[i] > arr[j]) {\n      max = i;\n      min = j;\n    }\n    if (arr[i] < arr[j]) {\n      j = j - 1;\n    }\n    if (arr[i] > arr[j]) {\n      i = i - 1;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a sorted array and a number k, return an array containing the\n  elements of the array such that no two adjacent elements are equal\n  except for the number k. For example,\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 2) = [2,4,6,8,10]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 3) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 4) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 5) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 6) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 7) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 8) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 9) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 10) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 11) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 12) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 13) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 14) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 15) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 16) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 17) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 18) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 19) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 20) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 21) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 22) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 23) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 24) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 25) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 26) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 27) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 28) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 29) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 30) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 31) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 32) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 33) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 34) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 35) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 36) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 37) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 38) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 39) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 40) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 41) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 42) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 43) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 44) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 45) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 46) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 47) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 48) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 49) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 50) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 51) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 52) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 53) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 54) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 55) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 56) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 57) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 58) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 59) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 60) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 61) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,9,10], 62) = [1,3,5,7,9]\n\n  canPartition([1,2,3,4,5,6,7,8,", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/136", "prompt": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  let maxLargest = null;\n  let minLargest = null;\n  let maxSmallest = null;\n  let minSmallest = null;\n  let maxLargestSmallest = null;\n  let minLargestSmallest = null;\n  let maxSmallestLargest = null;\n  let minSmallestLargest = null;\n  let maxSmallestSmallest = null;\n  let minSmallestSmallest = null;\n  let maxLargestLargestSmallest = null;\n  let minLargestLargestSmallest = null;\n  let maxLargestSmallestLargest = null;\n  let minLargestSmallestLargest = null;\n  let maxSmallestLargestSmallest = null;\n  let minSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallest = null;\n  let maxLargestSmallestLargestSmallest = null;\n  let minLargestSmallestLargestSmallest = null;\n  let maxSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallest = null;\n  let maxSmallestSmallestLargest = null;\n  let minSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallest = null;\n  let maxSmallestSmallestLargestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmallestSmallestSmallestLargest = null;\n  let maxSmallestSmallestSmallestSmallest = null;\n  let minSmalle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n  let aType = typeof a\n  let bType = typeof b\n  if (aType!== bType) {\n    return null\n  }\n  if (aType === \"number\") {\n    if (a === b) {\n      return null\n    }\n    if (isNaN(a)) {\n      return null\n    }\n    if (isNaN(b)) {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (a === \"\") {\n      return null\n    }\n    if (b === \"\") {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"boolean\") {\n    if (a === b) {\n      return null\n    }\n    if (a === true) {\n      return null\n    }\n    if (b === true) {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"object\") {\n    if (a === b) {\n      return null\n    }\n    if (a === null) {\n      return null\n    }\n    if (b === null) {\n      return null\n    }\n    if (Array.isArray(a)) {\n      if (Array.isArray(b)) {\n        return a.length > b.length? 1 : -1\n      }\n      return a.length > b.length? -1 : a.length < b.length? 1 : -1\n    }\n    if (Array.isArray(b)) {\n      return a.length > b.length? 1 : -1\n    }\n    if (a instanceof Date) {\n      if (binstanceof Date) {\n        return a.getTime() > b.getTime()? 1 : -1\n      }\n      return a.getTime() > b.getTime()? -1 : a.getTime() < b.getTime()? 1 : -1\n    }\n    if (a instanceof RegExp) {\n      if (b instanceof RegExp) {\n        return a.test(b)? 1 : -1\n      }\n      return a.test(b)? -1 : a.toString().indexOf(b) > -1? 1 : -1\n    }\n    if (a instanceof Error) {\n      if (b instanceof Error) {\n        return a.name === b.name && a.message === b.message && a.stack === b.stack? 1 : -1\n      }\n      return a.name === b.name && a.message === b.message && a.stack === b.stack? -1 : a.name === b.name && a.message === b.message && a.stack === b.stack? 1 : -1\n    }\n    if (a instanceof Function) {\n      if (b instanceof Function) {\n        return a.name === b.name && a.message === b.message && a.stack === b.stack? 1 : -1\n      }\n      return a.name === b.name && a.message === b.message && a.stack === b.stack? -1 : a.name === b.name && a.message === b.message && a.stack === b.stack? 1 : -1\n    }\n    if (a instanceof Symbol) {\n      if (b instanceof Symbol) {\n        return a.name === b.name && a.description === b.description && a.code === b.code && a.name === b.name && a.description === b.description && a.code === b.code? 1 : -1\n      }\n      return a.name === b.name && a.description === b.description && a.code === b.code && a.name === b.name && a.description === b.description && a.code === b.code? -1 : a.name === b.name && a.description === b.description && a.code === b.code && a.name === b.name && a.description === b.description && a.code === b.code? 1 : -1\n    }\n    if (a instanceof Map) {\n      if (b instanceof Map) {\n        return a.size === b.size? 1 : -1\n      }\n      return a.size === b.size? -1 : a.size < b.size? 1 : -1\n    }\n    if (a instanceof Set) {\n      if (b instanceof Set) {\n        return a.size === b.size? 1 : -1\n      }\n      return a.size === b.size? -1 : a.size < b.size? 1 : -1\n    }\n    if (a instanceof WeakMap) {\n      if (b instanceof WeakMap) {\n        return a.size === b.size? 1 : -1\n      }\n      return a.size === b.size? -1 : a.size < b.size? 1 : -1\n    }\n    if (a instanceof WeakSet) {\n      if (b instanceof WeakSet) {\n        return a.size === b.size? 1 : -1\n      }\n      return a.size === b.size? -1 : a.size < b.size? 1 : -1\n    }\n    if (a instanceof Map) {\n      return compareMaps(a, b)\n    }\n    if (a instanceof Set) {\n      return compareSets(a, b)\n    }\n    if (a instanceof WeakMap) {\n      return compareWeakMaps(a, b)\n    }\n    if (a instanceof WeakSet) {\n      return compareWeakSets(a, b)\n    }\n    if (a instanceof Function) {\n      return compareFunctions(a, b)\n    }\n    if (a instanceof Symbol) {\n      return compareSymbols(a, b)\n    }\n    if (a instanceof RegExp) {\n      return compareRegExps(a, b)\n    }\n    if (a instanceof Error) {\n      return compareErrors(a, b)\n    }\n    if (a instanceof Function) {\n      return compareFunctions(a, b)\n    }\n    if (a instanceof Map) {\n      return compareMaps(a, b)\n    }\n    if (a instanceof Set) {\n      return compareSets(a, b)\n    }\n    if (a instanceof WeakMap) {\n      return compareWeakMaps(a, b)\n    }\n    if (a instanceof WeakSet) {\n      return compareWeakSets(a, b)\n    }\n    return null\n  }\n  return null\n}\n\n/**\n  Compare two complex numbers, returning -1 if first is bigger, 0 if equal, 1 if first is smaller.\n  Note: If first is bigger than second, the result will be inverted.\n  */\nconts compareComplex = (a, b) => {\n  let aType = typeof a\n  let bType = typeof b\n  if (aType!== bType) {\n    return null\n  }\n  if (aType === \"number\") {\n    if (a === b) {\n      return null\n    }\n    if (isNaN(a)) {\n      return null\n    }\n    if (isNaN(b)) {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (a === \"\") {\n      return null\n    }\n    if (b === \"\") {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"boolean\") {\n    if (a === b) {\n      return null\n    }\n    if (a === true) {\n      return null\n    }\n    if (b === true) {\n      return null\n    }\n    return a > b? 1 : -1\n  }\n  if (aType === \"object\") {\n    if (a === b) {\n      return null\n    }\n    if (a === null) {\n      return null\n    }\n    if (b === null) {\n      return null\n    }\n    if (Array.isArray(a)) {\n      if (Array.isArray(b)) {\n        return a.length > b.length? 1 : -1\n      }\n      return a.length > b.length? -1 : a.length < b.length? 1 : -1\n    }\n    if (Array.isArray(b)) {\n      return a.length > b.length? 1 : -1\n    }\n    if (a instanceof Date) {\n      if (binstanceof Date) {\n        return a.getTime() > b.getTime()? 1 : -1\n      }\n      return a.getTime() > b.getTime()? -1 : a.getTime() < b.getTime()? 1 : -1\n    }\n    if (a instanceof RegExp) {\n      if (b instanceof RegExp) {\n        return a.test(b)? 1 : -1\n      }\n      return a.test(b)? ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 8 poistive evne nubmers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 16 poistive evne nubmers\n  Example\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return false;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 32 poistive evne nubmers\n  Example\n  isEqualToSumEven(32) == false\n  isEqualToSumEven(40) == false\n  isEqualToSumEven(48) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return false;\n  if (n % 32 === 0) return false;\n  return true;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 64 poistive evne nubmers\n  Example\n  isEqualToSumEven(64) == false\n  isEqualToSumEven(80) == false\n  isEqualToSumEven(88) == false\n  isEqualToSumEven(96) == false\n  isEqualToSumEven(104) == false\n  isEqualToSumEven(112) == false\n  isEqualToSumEven(120) == false\n  isEqualToSumEven(128) == false\n  isEqualToSumEven(136) == false\n  isEqualToSumEven(144) == false\n  isEqualToSumEven(152) == false\n  isEqualToSumEven(160) == false\n  isEqualToSumEven(168) == false\n  isEqualToSumEven(176) == false\n  isEqualToSumEven(184) == false\n  isEqualToSumEven(192) == false\n  isEqualToSumEven(200) == false\n  isEqualToSumEven(208) == false\n  isEqualToSumEven(216) == false\n  isEqualToSumEven(224) == false\n  isEqualToSumEven(232) == false\n  isEqualToSumEven(240) == false\n  isEqualToSumEven(248) == false\n  isEqualToSumEven(256) == false\n  isEqualToSumEven(264) == false\n  isEqualToSumEven(272) == false\n  isEqualToSumEven(280) == false\n  isEqualToSumEven(288) == false\n  isEqualToSumEven(296) == false\n  isEqualToSumEven(300) == false\n  isEqualToSumEven(308) == false\n  isEqualToSumEven(320) == false\n  isEqualToSumEven(328) == false\n  isEqualToSumEven(336) == false\n  isEqualToSumEven(344) == false\n  isEqualToSumEven(352) == false\n  isEqualToSumEven(360) == false\n  isEqualToSumEven(368) == false\n  isEqualToSumEven(376) == false\n  isEqualToSumEven(384) == false\n  isEqualToSumEven(388) == false\n  isEqualToSumEven(400) == false\n  isEqualToSumEven(408) == false\n  isEqualToSumEven(416) == false\n  isEqualToSumEven(424) == false\n  isEqualToSumEven(432) == false\n  isEqualToSumEven(440) == false\n  isEqualToSumEven(448) == false\n  isEqualToSumEven(456) == false\n  isEqualToSumEven(464) == false\n  isEqualToSumEven(472) == false\n  isEqualToSumEven(480) == false\n  isEqualToSumEven(488) == false\n  isEqualToSumEven(496) == false\n  isEqualToSumEven(500) == false\n  isEqualToSumEven(508) == false\n  isEqualToSumEven(512) == false\n  isEqualToSumEven(516) == false\n  isEqualToSumEven(524) == false\n  isEqualToSumEven(528) == false\n  isEqualToSumEven(540) == false\n  isEqualToSumEven(548) == false\n  isEqualToSumEven(552) == false\n  isEqualToSumEven(560) == false\n  isEqualToSumEven(568) == false\n  isEqualToSumEven(584) == false\n  isEqualToSumEven(592) == false\n  isEqualToSumEven(600) == false\n  isEqualToSumEven(608) == false\n  isEqualToSumEven(616) == false\n  isEqualToSumEven(624) == false\n  isEqualToSumEven(632) == false\n  isEqualToSumEven(640) == false\n  isEqualToSumEven(648) == false\n  isEqualToSumEven(656) == false\n  isEqualToSumEven(664) == false\n  isEqualToSumEven(672) == false\n  isEqualToSumEven(680) == false\n  isEqualToSumEven(688) == false\n  isEqualToSumEven(696) == false\n  isEqualToSumEven(700) == false\n  isEqualToSumEven(708) == false\n  isEqualToSumEven(716) == false\n  isEqualToSumEven(720) == false\n  isEqualToSumEven(728) == false\n  isEqualToSumEven(736) == false\n  isEqualToSumEven(744) == false\n  isEqualToSumEven(756) == false\n  isEqualToSumEven(764) == false\n  isEqualToSumEven(768) == false\n  isEqualToSumEven(776) == false\n  isEqualToSumEven(784) == false\n  isEqualToSumEven(792) == false\n  isEqualToSumEven(800) == false\n  isEqualToSumEven(808) == false\n  isEqualToSumEven(816) == false\n  isEqualToSumEven(824) == false\n  isEqualToSumEven(832) == false\n  isEqualToSumEven(840) == false\n  isEqualToSumEven(848) == false\n  isEqualToSumEven(856) == false\n  isEqualToSumEven(864) == false\n  isEqualToSumEven(872) == false\n  isEqualToSumEven(880) == false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n;\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  For example:\n  >>> factorial(5)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = string[0]\n  let currentLength = string.length\n  let currentIndex = 0\n  let currentLengthIndex = 0\n  let currentLengthLength = 0\n  let currentLengthIndexLength = 0\n  let currentLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let currentLengthIndexLengthLength = 0\n  let currentLengthLengthLengthLength = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores.\n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example_2 \"\n  fixSpaces(text) == \" Example_3 \"\n  */\nconst fixAllSpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces.\n  \n  fixAllSpaces(text) == \"Example_1\"\n  fixAllSpaces(text) == \"Example_1 \"\n  fixAllSpaces(text) == \" Example_2 \"\n  fixAllSpaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscores = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscores(text) == \"Example_1 \"\n  fixAllUnderscores(text) == \"Example_1 \"\n  fixAllUnderscores(text) == \" Example_2 \"\n  fixAllUnderscores(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndSpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndSpaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndSpaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndUnderspaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndUnderspaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndUnderspaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndUnderspacesAndSpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndSpaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndUnderspacesAndSpaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndUnderspacesAndUnderspaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndUnderspacesAndUnderspaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndUnderspacesAndUnderspacesAndSpaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndSpaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndSpaces(text) == \" Example_3 \"\n  */\nconst fixAllUnderscoresAndUnderspacesAndUnderspacesAndUnderspacesAndUnderspaces = (text) => {\n  let newText = text;\n  \n  newText = newText.replace(/ /g, \"_\");\n  \n  newText = newText.replace(/\\s{2,}/g, \" \");\n  \n  return newText;\n}\n\n/*\n  Given a string text, return a new string where all spaces are replaced by underscores and \n  all underscores are replaced by spaces and all spaces are replaced by underscores.\n  \n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndUnderspacesAndSpaces(text) == \"Example_1 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndUnderspacesAndSpaces(text) == \" Example_2 \"\n  fixAllUnderscoresAndUnderspacesAndUnderspacesAndUnder", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match || match.length!== 3) {\n    return \"No\";\n  }\n  const [, extension] = match;\n  if (extension.startsWith(\".\")) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match || match.length!== 3) {\n    return \"No\";\n  }\n  const [, extension] = match;\n  if (extension.startsWith(\".\")) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match || match.length!== 3) {\n    return \"No\";\n  }\n  const [, extension] = match;\n  if (extension.startsWith(\".\")) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match || match.length!== 3) {\n    return \"No\";\n  }\n  const [, extension] = match;\n  if (extension.startsWith(\".\")) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match || match.length!== 3) {\n    return \"No\";\n  }\n  const [, extension] = match;\n  if (extension.startsWith(\".\")) {\n    return \"No\";\n  }\n  return \"Yes\";\n};\n\n/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9]{3,})\\.([a-zA-Z0-9]{3,})$/;\n  const match = regex.exec(file_name);\n  if (!match ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This fucntion will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list hwose indexes are not a multiple of 3 or 4. The function \n  shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = [];\n  let sentenceArray = sentence.split(\" \");\n  for (let i = 0; i < sentenceArray.length; i++) {\n    let word = sentenceArray[i];\n    if (word.length > 0) {\n      words.push(word);\n    }\n  }\n  return words.join(\" \");\n};\n\n/*\n  You are given a string of n words separated by spaces.\n  You are asked to find the longest substring in which the substring contains only lowercase letters.\n  Return the length of the longest substring.\n\n  Example 1:\n      Input: \"abc def\"\n      Output: 3\n      Explanation: \"abc\" contains only lowercase letters, \"def\" contains only lowercase letters.\n\n  Example 2:\n      Input: \"abc def ghi\"\n      Output: 4\n      Explanation: \"abc\" contains only lowercase letters, \"def\" contains only lowercase letters, \"ghi\" contains only lowercase letters.\n\n  Example 3:\n      Input: \"abc def ghi jkl\"\n      Output: 5\n      Explanation: \"abc\" contains only lowercase letters, \"def\" contains only lowercase letters, \"ghi\" contains only lowercase letters, \"jkl\" contains only lowercase letters.\n\n  Example 4:\n      Input: \"abc def ghi jkl mno\"\n      Output: 6\n      Explanation: \"abc\" contains only lowercase letters, \"def\" contains only lowercase letters, \"ghi\" contains only lowercase letters, \"jkl\" contains only lowercase letters, \"mno\" contains only lowercase letters.\n\n  Example 5:\n      Input: \"abc def ghi jkl mno pqrs\"\n      Output: 7\n      Explanation: \"abc\" contains only lowercase letters, \"def\" contains only lowercase letters, \"ghi\" contains only lowercase letters, \"jkl\" contains only lowercase letters, \"mno\" contains only lowercase letters, \"pqrs\" contains only lowercase letters.\n\n  Constraints:\n      * 1 <= n <= 100\n      * n <= words.length\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * words[i] contains only lowercase letters.\n      * word", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false\n  }\n  if (x.indexOf(\"/\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"/\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"*\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"*\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"^\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"^\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"=\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"=\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (n.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n    return false\n  }\n  if (x.indexOf(\"%\")!== -1) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b);\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.map(sum => sum / 10);\n  const sumsArr2 = sumsArr.map(sum => sum % 10);\n  const sumsArr3 = sumsArr2.map(sum => sum / 10);\n  const sumsArr4 = sumsArr3.map(sum => sum % 10);\n  const sumsArr5 = sumsArr4.map(sum => sum / 10);\n  const sumsArr6 = sumsArr5.map(sum => sum % 10);\n  const sumsArr7 = sumsArr6.map(sum => sum / 10);\n  const sumsArr8 = sumsArr7.map(sum => sum % 10);\n  const sumsArr9 = sumsArr8.map(sum => sum / 10);\n  const sumsArr10 = sumsArr9.map(sum => sum % 10);\n  const sumsArr11 = sumsArr10.map(sum => sum / 10);\n  const sumsArr12 = sumsArr11.map(sum => sum % 10);\n  const sumsArr13 = sumsArr12.map(sum => sum / 10);\n  const sumsArr14 = sumsArr13.map(sum => sum % 10);\n  const sumsArr15 = sumsArr14.map(sum => sum / 10);\n  const sumsArr16 = sumsArr15.map(sum => sum % 10);\n  const sumsArr17 = sumsArr16.map(sum => sum / 10);\n  const sumsArr18 = sumsArr17.map(sum => sum % 10);\n  const sumsArr19 = sumsArr18.map(sum => sum / 10);\n  const sumsArr20 = sumsArr19.map(sum => sum % 10);\n  const sumsArr21 = sumsArr20.map(sum => sum / 10);\n  const sumsArr22 = sumsArr21.map(sum => sum % 10);\n  const sumsArr23 = sumsArr22.map(sum => sum / 10);\n  const sumsArr24 = sumsArr23.map(sum => sum % 10);\n  const sumsArr25 = sumsArr24.map(sum => sum / 10);\n  const sumsArr26 = sumsArr25.map(sum => sum % 10);\n  const sumsArr27 = sumsArr26.map(sum => sum / 10);\n  const sumsArr28 = sumsArr27.map(sum => sum % 10);\n  const sumsArr29 = sumsArr28.map(sum => sum / 10);\n  const sumsArr30 = sumsArr29.map(sum => sum % 10);\n  const sumsArr31 = sumsArr30.map(sum => sum / 10);\n  const sumsArr32 = sumsArr31.map(sum => sum % 10);\n  const sumsArr33 = sumsArr32.map(sum => sum / 10);\n  const sumsArr34 = sumsArr33.map(sum => sum % 10);\n  const sumsArr35 = sumsArr34.map(sum => sum / 10);\n  const sumsArr36 = sumsArr35.map(sum => sum % 10);\n  const sumsArr37 = sumsArr36.map(sum => sum / 10);\n  const sumsArr38 = sumsArr37.map(sum => sum % 10);\n  const sumsArr39 = sumsArr38.map(sum => sum / 10);\n  const sumsArr40 = sumsArr39.map(sum => sum % 10);\n  const sumsArr41 = sumsArr40.map(sum => sum / 10);\n  const sumsArr42 = sumsArr41.map(sum => sum % 10);\n  const sumsArr43 = sumsArr42.map(sum => sum / 10);\n  const sumsArr44 = sumsArr43.map(sum => sum % 10);\n  const sumsArr45 = sumsArr44.map(sum => sum / 10);\n  const sumsArr46 = sumsArr45.map(sum => sum % 10);\n  const sumsArr47 = sumsArr46.map(sum => sum / 10);\n  const sumsArr48 = sumsArr47.map(sum => sum % 10);\n  const sumsArr49 = sumsArr48.map(sum => sum / 10);\n  const sumsArr50 = sumsArr49.map(sum => sum % 10);\n  const sumsArr51 = sumsArr50.map(sum => sum / 10);\n  const sumsArr52 = sumsArr51.map(sum => sum % 10);\n  const sumsArr53 = sumsArr52.map(sum => sum / 10);\n  const sumsArr54 = sumsArr53.map(sum => sum % 10);\n  const sumsArr55 = sumsArr54.map(sum => sum / 10);\n  const sumsArr56 = sumsArr55.map(sum => sum % 10);\n  const sumsArr57 = sumsArr56.map(sum => sum / 10);\n  const sumsArr58 = sumsArr57.map(sum => sum % 10);\n  const sumsArr59 = sumsArr58.map(sum => sum / 10);\n  const sumsArr60 = sumsArr59.map(sum => sum % 10);\n  const sumsArr61 = sumsArr60.map(sum => sum / 10);\n  const sumsArr62 = sumsArr61.map(sum => sum % 10);\n  const sumsArr63 = sumsArr62.map(sum => sum / 10);\n  const sumsArr64 = sumsArr63.map(sum => sum % 10);\n  const sumsArr65 = sumsArr64.map(sum => sum / 10);\n  const sumsArr66 = sumsArr65.map(sum => sum % 10);\n  const sumsArr67 = sumsArr66.map(sum => sum / 10);\n  const sumsArr68 = sumsArr67.map(sum => sum % 10);\n  const sumsArr69 = sumsArr68.map(sum => sum / 10);\n  const sumsArr70 = sumsArr69.map(sum => sum % 10);\n  const sumsArr71 = sumsArr70.map(sum => sum / 10);\n  const sumsArr72 = sumsArr71.map(sum => sum % 10);\n  const sumsArr73 = sumsArr72.map(sum => sum / 10);\n  const sumsArr74 = sumsArr73.map(sum => sum % 10);\n  const sumsArr75 = sumsArr74.map(sum => sum / 10);\n  const sumsArr76 = sumsArr75.map(sum => sum % 10);\n  const sumsArr77 = sumsArr76.map(sum => sum / 10);\n  const sumsArr78 = sumsArr77.map(sum => sum % 10);\n  const sumsArr79 = sumsArr78.map(sum => sum / 10);\n  const sumsArr80 = sumsArr79.map(sum => sum % 10);\n  const sumsArr81 = sumsArr80.map(sum => sum / 10);\n  const sumsArr82 = sumsArr8", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] >= 10) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter(\n    triple => triple[0] > triple[1] && triple[0] > triple[2] && triple[0] > triple[3]\n  ).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTripletWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter(\n    triple => triple[0] > triple[1] && triple[0] > triple[2] && triple[0] > triple[3]\n  ).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTripletWithTripletWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter(\n    triple => triple[0] > triple[1] && triple[0] > triple[2] && triple[0] > triple[3]\n  ).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTripletWithTripletWithTripletWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter(\n    triple => triple[0] > triple[1] && triple[0] > triple[2] && triple[0] > triple[3]\n  ).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTripletWithTripletWithTripletWithTripletWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n; j++) {\n      for (let k = j; k < n; k++) {\n        a[i] = a[j] + a[k];\n      }\n    }\n  }\n  return a.filter(\n    triple => triple[0] > triple[1] && triple[0] > triple[2] && triple[0] > triple[3]\n  ).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triplets (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriplesWithTripletWithTripletWithTripletWithTripletWithTripletWithTriplet = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitOrbit = planet1Orbit && planet2Orbit;\n  const planet2OrbitOrbit = planet2Orbit && planet1Orbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit && planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit && planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit && plan", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum)];\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in the string.\n  The function should return an integer number.\n  You may assume that the string has only lowercase letters.\n  For example:\n  assert string_length(\"abc\") => 3\n  assert string_length(\"ab\") => 1\n  assert string_length(\"a\") => 1\n  assert string_length(\"A\") => 1\n  */\nconst string_length = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters in the string.\n  The function should return an integer number.\n  You may assume that the string has only uppercase letters.\n  For example:\n  assert string_uppercase(\"abc\") => 3\n  assert string_uppercase(\"AB\") => 2\n  assert string_uppercase(\"a\") => 1\n  assert string_uppercase(\"A\") => 1\n  */\nconst string_uppercase = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of lowercase letters in the string.\n  The function should return an integer number.\n  You may assume that the string has only lowercase letters.\n  For example:\n  assert string_lowercase(\"abc\") => 3\n  assert string_lowercase(\"ab\") => 2\n  assert string_lowercase(\"a\") => 1\n  assert string_lowercase(\"A\") => 1\n  */\nconst string_lowercase = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of digits in the string.\n  The function should return an integer number.\n  You may assume that the string has only digits and no letters.\n  For example:\n  assert string_digits(\"abc\") => 3\n  assert string_digits(\"ab\") => 2\n  assert string_digits(\"a\") => 1\n  assert string_digits(\"A\") => 1\n  */\nconst string_digits = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of special characters in the string.\n  The function should return an integer number.\n  You may assume that the string has only special characters and no numbers.\n  For example:\n  assert string_special(\"abc\") => 3\n  assert string_special(\"ab\") => 2\n  assert string_special(\"a\") => 1\n  assert string_special(\"A\") => 1\n  */\nconst string_special = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '!' && str[i] <= '@') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all characters in the string.\n  The function should return an integer number.\n  You may assume that the string has only lowercase letters.\n  For example:\n  assert string_all(\"abc\") => 3\n  assert string_all(\"ab\") => 2\n  assert string_all(\"a\") => 1\n  assert string_all(\"A\") => 1\n  */\nconst string_all = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all uppercase letters in the string.\n  The function should return an integer number.\n  You may assume that the string has only uppercase letters.\n  For example:\n  assert string_uppercase(\"abc\") => 3\n  assert string_uppercase(\"AB\") => 2\n  assert string_uppercase(\"a\") => 1\n  assert string_uppercase(\"A\") => 1\n  */\nconst string_uppercase = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all lowercase letters in the string.\n  The function should return an integer number.\n  You may assume that the string has only lowercase letters.\n  For example:\n  assert string_lowercase(\"abc\") => 3\n  assert string_lowercase(\"ab\") => 2\n  assert string_lowercase(\"a\") => 1\n  assert string_lowercase(\"A\") => 1\n  */\nconst string_lowercase = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all digits in the string.\n  The function should return an integer number.\n  You may assume that the string has only digits and no letters.\n  For example:\n  assert string_digits(\"abc\") => 3\n  assert string_digits(\"ab\") => 2\n  assert string_digits(\"a\") => 1\n  assert string_digits(\"A\") => 1\n  */\nconst string_digits = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '0' && str[i] <= '9') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all special characters in the string.\n  The function should return an integer number.\n  You may assume that the string has only special characters and no numbers.\n  For example:\n  assert string_special(\"abc\") => 3\n  assert string_special(\"ab\") => 2\n  assert string_special(\"a\") => 1\n  assert string_special(\"A\") => 1\n  */\nconst string_special = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= '!' && str[i] <= '@') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of all characters in the string.\n  The function should return an integer number.\n  You may assume that the string has only lowercase letters.\n  For example:", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += string(i);\n  }\n  return result;\n};\n\n/**\n * Reurtn a tsring ocntaining psace-delimited numbers starting from n inclusive.\n  >>> stringSequence('5')\n  '0 1 2 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x < 1 || x > 100) {\n    throw new Error('x must be between 1 and 100');\n  }\n  if (y < 1 || y > 100) {\n    throw new Error('y must be between 1 and 100');\n  }\n  if (x === y) {\n    return x;\n  }\n  if (n % x === 0) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / x, y / x, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 2 === 1) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2 === 1) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] % 2!== 0) sum += lst[i];\n  }\n  return sum;\n};\n\n/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd and even. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = 0;\n  let diff2 = 0;\n  let diff3 = 0;\n  let diff4 = 0;\n  let diff5 = 0;\n  let diff6 = 0;\n  let diff7 = 0;\n  let diff8 = 0;\n  let diff9 = 0;\n  let diff10 = 0;\n  let diff11 = 0;\n  let diff12 = 0;\n  let diff13 = 0;\n  let diff14 = 0;\n  let diff15 = 0;\n  let diff16 = 0;\n  let diff17 = 0;\n  let diff18 = 0;\n  let diff19 = 0;\n  let diff20 = 0;\n  let diff21 = 0;\n  let diff22 = 0;\n  let diff23 = 0;\n  let diff24 = 0;\n  let diff25 = 0;\n  let diff26 = 0;\n  let diff27 = 0;\n  let diff28 = 0;\n  let diff29 = 0;\n  let diff30 = 0;\n  let diff31 = 0;\n  let diff32 = 0;\n  let diff33 = 0;\n  let diff34 = 0;\n  let diff35 = 0;\n  let diff36 = 0;\n  let diff37 = 0;\n  let diff38 = 0;\n  let diff39 = 0;\n  let diff40 = 0;\n  let diff41 = 0;\n  let diff42 = 0;\n  let diff43 = 0;\n  let diff44 = 0;\n  let diff45 = 0;\n  let diff46 = 0;\n  let diff47 = 0;\n  let diff48 = 0;\n  let diff49 = 0;\n  let diff50 = 0;\n  let diff51 = 0;\n  let diff52 = 0;\n  let diff53 = 0;\n  let diff54 = 0;\n  let diff55 = 0;\n  let diff56 = 0;\n  let diff57 = 0;\n  let diff58 = 0;\n  let diff59 = 0;\n  let diff60 = 0;\n  let diff61 = 0;\n  let diff62 = 0;\n  let diff63 = 0;\n  let diff64 = 0;\n  let diff65 = 0;\n  let diff66 = 0;\n  let diff67 = 0;\n  let diff68 = 0;\n  let diff69 = 0;\n  let diff70 = 0;\n  let diff71 = 0;\n  let diff72 = 0;\n  let diff73 = 0;\n  let diff74 = 0;\n  let diff75 = 0;\n  let diff76 = 0;\n  let diff77 = 0;\n  let diff78 = 0;\n  let diff79 = 0;\n  let diff80 = 0;\n  let diff81 = 0;\n  let diff82 = 0;\n  let diff83 = 0;\n  let diff84 = 0;\n  let diff85 = 0;\n  let diff86 = 0;\n  let diff87 = 0;\n  let diff88 = 0;\n  let diff89 = 0;\n  let diff90 = 0;\n  let diff91 = 0;\n  let diff92 = 0;\n  let diff93 = 0;\n  let diff94 = 0;\n  let diff95 = 0;\n  let diff96 = 0;\n  let diff97 = 0;\n  let diff98 = 0;\n  let diff99 = 0;\n  let diff100 = 0;\n  let diff101 = 0;\n  let diff102 = 0;\n  let diff103 = 0;\n  let diff104 = 0;\n  let diff105 = 0;\n  let diff106 = 0;\n  let diff107 = 0;\n  let diff108 = 0;\n  let diff109 = 0;\n  let diff110 = 0;\n  let diff111 = 0;\n  let diff112 = 0;\n  let diff113 = 0;\n  let diff114 = 0;\n  let diff115 = 0;\n  let diff116 = 0;\n  let diff117 = 0;\n  let diff118 = 0;\n  let diff119 = 0;\n  let diff120 = 0;\n  let diff121 = 0;\n  let diff122 = 0;\n  let diff123 = 0;\n  let diff124 = 0;\n  let diff125 = 0;\n  let diff126 = 0;\n  let diff127 = 0;\n  let diff128 = 0;\n  let diff129 = 0;\n  let diff130 = 0;\n  let diff131 = 0;\n  let diff132 = 0;\n  let diff133 = 0;\n  let diff134 = 0;\n  let diff135 = 0;\n  let diff136 = 0;\n  let diff137 = 0;\n  let diff138 = 0;\n  let diff139 = 0;\n  let diff140 = 0;\n  let diff141 = 0;\n  let diff142 = 0;\n  let diff143 = 0;\n  let diff144 = 0;\n  let diff145 = 0;\n  let diff146 = 0;\n  let diff147 = 0;\n  let diff148 = 0;\n  let diff149 = 0;\n  let diff150 = 0;\n  let diff151 = 0;\n  let diff152 = 0;\n  let diff153 = 0;\n  let diff154 = 0;\n  let diff155 = 0;\n  let diff156 = 0;\n  let diff157 = 0;\n  let diff158 = 0;\n  let diff159 = 0;\n  let diff160 = 0;\n  let diff161 = 0;\n  let diff162 = 0;\n  let diff163 = 0;\n  let diff164 = 0;\n  let diff165 = 0;\n  let diff166 = 0;\n  let diff167 = 0;\n  let diff168 = 0;\n  let diff169 = 0;\n  let diff170 = 0;\n  let diff171 = 0;\n  let diff172 = 0;\n  let diff173 = 0;\n  let diff174 = 0;\n  let diff175 = 0;\n  let diff176 = 0;\n  let diff177 = 0;\n  let diff178 = 0;\n  let diff179 = 0;\n  let diff180 = 0;\n  let diff181 = 0;\n  let diff182 = 0;\n  let diff183 = 0;\n  let diff184 = 0;\n  let diff185 = 0;\n  let diff186 = 0;\n  let diff187 = 0;\n  let diff188 = 0;\n  let diff189 = 0;\n  let diff190 = 0;\n  let diff191 = 0;\n  let diff192 = 0;\n  let diff193 = 0;\n  let diff194 = 0;\n  let diff195 = 0;\n  let diff196 = 0;\n  let diff197 = 0;\n  let diff198 = 0;\n  let diff199 = 0;\n  let diff200 = 0;\n  let diff201 = 0;\n  let diff202 = 0;\n  let diff203 = 0;\n  let diff204 = 0;\n  let diff205 = 0;\n  let diff206 = 0;\n  let diff207 = 0;\n  let diff208 = 0;\n  let diff209 = 0;\n  let diff210 = 0;\n  let diff211 = 0;\n  let diff212 = 0;\n  let diff213 = 0;\n  let diff214 = 0;\n  let diff215 = 0;\n  let diff216 = 0;\n  let diff217 = 0;\n  let diff218 = 0;\n  let diff219 = 0;\n  let diff220 = 0;\n  let diff221 = 0;\n  let diff222 = 0;\n  let diff223 = 0;\n  let diff224 = 0;\n  let diff225 = 0;\n  let diff226 = 0;\n  let diff227 = 0;\n  let diff228 = 0;\n  let diff229 = 0;\n  let diff230 = 0;\n  let diff231 = 0;\n  let diff232 = 0;\n  let diff233 = 0;\n  let diff234 = 0;\n  let diff235 = 0;\n  let diff236 = 0;\n  let diff237 = 0;\n  let diff238 = 0;\n  let diff239 = 0;\n  let diff240 = 0;\n  let diff241 = 0;\n  let diff242 = 0;\n  let diff243 = 0;\n  let diff244 = 0;\n  let diff245 = 0;\n  let diff246 = 0;\n  let diff247 = 0;\n  let diff248 = 0;\n  let diff249 = 0;\n  let diff250 = 0;\n  let diff251 = 0;\n  let diff252 = 0;\n  let diff253 = 0;\n  let diff254 = 0;\n  let diff255 = 0;\n  let diff256 = 0;\n  let diff257 = 0;\n  let diff258 = 0;\n  let diff259 = 0;\n  let diff260 = 0;\n  let diff261 = 0;\n  let diff262 = 0;\n  let diff263 = 0;\n  let diff264 = 0;\n  let diff265 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_extensions = extensions;\n  let extension_length = extensions.length;\n  let extension_strenght = 0;\n  let extension_strenght_index = 0;\n  while (extension_strenght_index < extension_length) {\n    let extension_strenght_char = extension_extensions[extension_strenght_index];\n    if (extension_strenght_char === class_name) {\n      extension_strenght++;\n      extension_strenght_index++;\n    } else if (extension_strenght_char === class_name.charAt(0)) {\n      extension_strenght_index++;\n    } else {\n      extension_strenght_index++;\n    }\n  }\n  if (extension_strenght > extension_strength) {\n    extension_strength = extension_strenght;\n    extension_class = class_name;\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with an\n  extension that is strongest.\n  Example:\n  Given the class \"Slices\" and extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'],\n  the function should return \"Slices.SErviNGSliCes\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC'],\n  the function should return \"Slices\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD'],\n  the function should return \"Slices.DD\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE'],\n  the function should return \"Slices.DD.EE\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'],\n  the function should return \"Slices.DD.EE.FF\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG'],\n  the function should return \"Slices.DD.EE.FF.GG\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH'],\n  the function should return \"Slices.DD.EE.FF.GG.HH\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM.NN\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM.NN.OO\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM.NN.OO.PP\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM.NN.OO.PP.QQ\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR'],\n  the function should return \"Slices.DD.EE.FF.GG.HH.II.JJ.KK.LL.MM.NN.OO.PP.QQ.RR\".\n  Example:\n  Given the class \"Slices\" and extensions: ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS'],\n  the function should return \"Slices.DD.EE.FF.GG.HH", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n  let firstWord = a.split(\"\").reverse().join(\"\");\n  let secondWord = b.split(\"\").reverse().join(\"\");\n  let firstWordArray = firstWord.split(\"\");\n  let secondWordArray = secondWord.split(\"\");\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayRotation = firstWordArray.map(function(e, i) {\n    return i % secondWordArrayLength;\n  });\n  let secondWordArrayRotation = secondWordArray.map(function(e, i) {\n    return i % firstWordArrayLength;\n  });\n  let firstWordArrayRotationLength = firstWordArrayRotation.length;\n  let secondWordArrayRotationLength = secondWordArrayRotation.length;\n  let firstWordArrayRotationRotation = firstWordArrayRotation.map(function(e, i) {\n    return i % secondWordArrayRotationLength;\n  });\n  let secondWordArrayRotationRotation = secondWordArrayRotation.map(function(e, i) {\n    return i % firstWordArrayRotationLength;\n  });\n  let firstWordArrayRotationRotationLength = firstWordArrayRotationRotation.length;\n  let secondWordArrayRotationRotationLength = secondWordArrayRotationRotation.length;\n  let firstWordArrayRotationRotationRotation = firstWordArrayRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotation = secondWordArrayRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationLength = firstWordArrayRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationLength = secondWordArrayRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotation = firstWordArrayRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotation = secondWordArrayRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotation = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotation.map(function(e, i) {\n    return i % firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength;\n  });\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationLength = secondWordArrayRotationRotationRotationRotationRotationRotationRotationRotationRotationRotation.length;\n  let firstWordArrayRotationRotationRotationRotationRotationRotationRotation = firstWordArrayRotationRotationRotationRotationRotationRotationRotationRot", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while(num > 0) {\n    evenCount++;\n    num = num % 10;\n  }\n  while(num > 0) {\n    oddCount++;\n    num = num / 10;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number n, return its factorial using dynamic programming.\n\n   Example:\n      factorial(3) ==> 6\n      factorial(5) ==> 120\n      factorial(7) ==> 720\n      factorial(9) ==> 5040\n      factorial(10) ==> 362880\n      factorial(11) ==> 3628800\n      factorial(12) ==> 39916800\n      factorial(13) ==> 479001600\n      factorial(14) ==> 52428800\n      factorial(15) ==> 576032000\n      factorial(16) ==> 64000000\n      factorial(17) ==> 719918400\n      factorial(18) ==> 786432000\n      factorial(19) ==> 839208000 \n  */\nconst factorial = (n) => {\n  let fact = 1;\n  if(n <= 1) {\n    return 1;\n  }\n  for(let i = 2; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst gcd = (n1, n2) => {\n  let gcd = 1;\n  if(n1 === 0 || n2 === 0) {\n    return 1;\n  }\n  if(n1 === 1) {\n    return n2;\n  }\n  if(n2 === 1) {\n    return n1;\n  }\n  for(let i = 2; i <= n1; i *= 2) {\n    gcd *= i;\n  }\n  for(let i = 2; i <= n2; i *= 2) {\n    gcd /= i;\n  }\n  return gcd;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst lcm = (n1, n2) => {\n  let lcm = 1;\n  if(n1 === 0 || n2 === 0) {\n    return 1;\n  }\n  if(n1 === 1) {\n    return n2;\n  }\n  if(n2 === 1) {\n    return n1;\n  }\n  for(let i = 2; i <= n1; i *= 2) {\n    lcm *= i;\n  }\n  for(let i = 2; i <= n2; i *= 2) {\n    lcm /= i;\n  }\n  return lcm;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst modPow = (n, p) => {\n  let result = 1;\n  for(let i = 2; i <= n; i++) {\n    result = result * i;\n  }\n  return result % p;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst modPow = (n, p) => {\n  let result = 1;\n  for(let i = 2; i <= n; i++) {\n    result = result % i;\n  }\n  return result;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst modPow = (n, p) => {\n  let result = 1;\n  for(let i = 2; i <= n; i++) {\n    result = result % i;\n  }\n  return result;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ==> 1\n      gcd(15, 3) ==> 1\n      gcd(16, 3) ==> 1\n      gcd(17, 3) ==> 1\n      gcd(18, 3) ==> 1\n      gcd(19, 3) ==> 1\n  */\nconst modPow = (n, p) => {\n  let result = 1;\n  for(let i = 2; i <= n; i++) {\n    result = result % i;\n  }\n  return result;\n};\n\n/*Given a number n, return its GCD using dynamic programming.\n\n   Example:\n      gcd(3, 5) ==> 3\n      gcd(5, 3) ==> 1\n      gcd(7, 3) ==> 1\n      gcd(9, 3) ==> 1\n      gcd(10, 3) ==> 1\n      gcd(11, 3) ==> 1\n      gcd(12, 3) ==> 1\n      gcd(13, 3) ==> 1\n      gcd(14, 3) ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numStr = number.toString();\n  const numArr = numStr.split('');\n  const numArrLen = numArr.length;\n  let numStrLen = numStr.length;\n  let numStrArr = [];\n  let numStrArrLen = numStrArr.length;\n  let numStrArrIndex = 0;\n  let numStrArrIndex2 = 0;\n  let numStrArrIndex3 = 0;\n  let numStrArrIndex4 = 0;\n  let numStrArrIndex5 = 0;\n  let numStrArrIndex6 = 0;\n  let numStrArrIndex7 = 0;\n  let numStrArrIndex8 = 0;\n  let numStrArrIndex9 = 0;\n  let numStrArrIndex10 = 0;\n  let numStrArrIndex11 = 0;\n  let numStrArrIndex12 = 0;\n  let numStrArrIndex13 = 0;\n  let numStrArrIndex14 = 0;\n  let numStrArrIndex15 = 0;\n  let numStrArrIndex16 = 0;\n  let numStrArrIndex17 = 0;\n  let numStrArrIndex18 = 0;\n  let numStrArrIndex19 = 0;\n  let numStrArrIndex20 = 0;\n  let numStrArrIndex21 = 0;\n  let numStrArrIndex22 = 0;\n  let numStrArrIndex23 = 0;\n  let numStrArrIndex24 = 0;\n  let numStrArrIndex25 = 0;\n  let numStrArrIndex26 = 0;\n  let numStrArrIndex27 = 0;\n  let numStrArrIndex28 = 0;\n  let numStrArrIndex29 = 0;\n  let numStrArrIndex30 = 0;\n  let numStrArrIndex31 = 0;\n  let numStrArrIndex32 = 0;\n  let numStrArrIndex33 = 0;\n  let numStrArrIndex34 = 0;\n  let numStrArrIndex35 = 0;\n  let numStrArrIndex36 = 0;\n  let numStrArrIndex37 = 0;\n  let numStrArrIndex38 = 0;\n  let numStrArrIndex39 = 0;\n  let numStrArrIndex40 = 0;\n  let numStrArrIndex41 = 0;\n  let numStrArrIndex42 = 0;\n  let numStrArrIndex43 = 0;\n  let numStrArrIndex44 = 0;\n  let numStrArrIndex45 = 0;\n  let numStrArrIndex46 = 0;\n  let numStrArrIndex47 = 0;\n  let numStrArrIndex48 = 0;\n  let numStrArrIndex49 = 0;\n  let numStrArrIndex50 = 0;\n  let numStrArrIndex51 = 0;\n  let numStrArrIndex52 = 0;\n  let numStrArrIndex53 = 0;\n  let numStrArrIndex54 = 0;\n  let numStrArrIndex55 = 0;\n  let numStrArrIndex56 = 0;\n  let numStrArrIndex57 = 0;\n  let numStrArrIndex58 = 0;\n  let numStrArrIndex59 = 0;\n  let numStrArrIndex60 = 0;\n  let numStrArrIndex61 = 0;\n  let numStrArrIndex62 = 0;\n  let numStrArrIndex63 = 0;\n  let numStrArrIndex64 = 0;\n  let numStrArrIndex65 = 0;\n  let numStrArrIndex66 = 0;\n  let numStrArrIndex67 = 0;\n  let numStrArrIndex68 = 0;\n  let numStrArrIndex69 = 0;\n  let numStrArrIndex70 = 0;\n  let numStrArrIndex71 = 0;\n  let numStrArrIndex72 = 0;\n  let numStrArrIndex73 = 0;\n  let numStrArrIndex74 = 0;\n  let numStrArrIndex75 = 0;\n  let numStrArrIndex76 = 0;\n  let numStrArrIndex77 = 0;\n  let numStrArrIndex78 = 0;\n  let numStrArrIndex79 = 0;\n  let numStrArrIndex80 = 0;\n  let numStrArrIndex81 = 0;\n  let numStrArrIndex82 = 0;\n  let numStrArrIndex83 = 0;\n  let numStrArrIndex84 = 0;\n  let numStrArrIndex85 = 0;\n  let numStrArrIndex86 = 0;\n  let numStrArrIndex87 = 0;\n  let numStrArrIndex88 = 0;\n  let numStrArrIndex89 = 0;\n  let numStrArrIndex90 = 0;\n  let numStrArrIndex91 = 0;\n  let numStrArrIndex92 = 0;\n  let numStrArrIndex93 = 0;\n  let numStrArrIndex94 = 0;\n  let numStrArrIndex95 = 0;\n  let numStrArrIndex96 = 0;\n  let numStrArrIndex97 = 0;\n  let numStrArrIndex98 = 0;\n  let numStrArrIndex99 = 0;\n  let numStrArrIndex100 = 0;\n  let numStrArrIndex101 = 0;\n  let numStrArrIndex102 = 0;\n  let numStrArrIndex103 = 0;\n  let numStrArrIndex104 = 0;\n  let numStrArrIndex105 = 0;\n  let numStrArrIndex106 = 0;\n  let numStrArrIndex107 = 0;\n  let numStrArrIndex108 = 0;\n  let numStrArrIndex109 = 0;\n  let numStrArrIndex110 = 0;\n  let numStrArrIndex111 = 0;\n  let numStrArrIndex112 = 0;\n  let numStrArrIndex113 = 0;\n  let numStrArrIndex114 = 0;\n  let numStrArrIndex115 = 0;\n  let numStrArrIndex116 = 0;\n  let numStrArrIndex117 = 0;\n  let numStrArrIndex118 = 0;\n  let numStrArrIndex119 = 0;\n  let numStrArrIndex120 = 0;\n  let numStrArrIndex121 = 0;\n  let numStrArrIndex122 = 0;\n  let numStrArrIndex123 = 0;\n  let numStrArrIndex124 = 0;\n  let numStrArrIndex125 = 0;\n  let numStrArrIndex126 = 0;\n  let numStrArrIndex127 = 0;\n  let numStrArrIndex128 = 0;\n  let numStrArrIndex129 = 0;\n  let numStrArrIndex130 = 0;\n  let numStrArrIndex131 = 0;\n  let numStrArrIndex132 = 0;\n  let numStrArrIndex133 = 0;\n  let numStrArrIndex134 = 0;\n  let numStrArrIndex135 = 0;\n  let numStrArrIndex136 = 0;\n  let numStrArrIndex137 = 0;\n  let numStrArrIndex138 = 0;\n  let numStrArrIndex139 = 0;\n  let numStrArrIndex140 = 0;\n  let numStrArrIndex141 = 0;\n  let numStrArrIndex142 = 0;\n  let numStrArrIndex143 = 0;\n  let numStrArrIndex144 = 0;\n  let numStrArrIndex145 = 0;\n  let numStrArrIndex146 = 0;\n  let numStrArrIndex147 = 0;\n  let numStrArrIndex148 = 0;\n  let numStrArrIndex149 = 0;\n  let numStrArrIndex150 = 0;\n  let numStrArrIndex151 = 0;\n  let numStrArrIndex152 = 0;\n  let numStrArrIndex153 = 0;\n  let numStrArrIndex154 = 0;\n  let numStrArrIndex155 = 0;\n  let numStrArrIndex156 = 0;\n  let numStrArrIndex157 = 0;\n  let numStrArrIndex158 = 0;\n  let numStrArrIndex159 = 0;\n  let numStrArrIndex160 = 0;\n  let numStrArrIndex161 = 0;\n  let numStrArrIndex162 = 0;\n  let numStrArrIndex163 = 0;\n  let numStrArrIndex164 = 0;\n  let numStrArrIndex165 = 0;\n  let numStrArrIndex166 = 0;\n  let numStrArrIndex167 = 0;\n  let numStrArrIndex168 = 0;\n  let numStrArrIndex169 = 0;\n  let numStrArrIndex170 = 0;\n  let numStrArrIndex171 = 0;\n  let numStrArrIndex172 = 0;\n  let numStrArrIndex173 = 0;\n  let num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ab + ac * ac + bc * bc === 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the sides\n  are a right angled triangle, false otherwise.\n  A right angled triangle is a tri", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxNum = 0;\n  let maxNumWord = \"\";\n  let maxNumNum = 0;\n  let maxNumNumWord = \"\";\n  let maxNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n  let maxNumNumNumNumWord = \"\";\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need);\n  const remaining = Math.max(remaining, 0);\n  const remaining = Math.min(remaining, number);\n  const remaining = Math.max(remaining, need", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of its characters, in order.\n * If there are duplicates, only the first occurrence is returned.\n * If there are multiple permutations, return all permutations.\n * If no permutations can be made, return an empty array.\n * If a string is too long to fit in memory, return null.\n */\nconst permutations = (string) => {\n  let permutations = [];\n  let currentPermutation = [];\n  let currentPermutationLength = 0;\n  let currentPermutationIndex = 0;\n  let currentPermutationString = '';\n  let currentPermutationCount = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      currentPermutationString += string.charAt(i);\n      currentPermutationCount++;\n    }\n  }\n\n  while (currentPermutationCount > 0) {\n    currentPermutationLength++;\n    if (currentPermutationLength === string.length) {\n      currentPermutationIndex++;\n      currentPermutationLength = 0;\n      currentPermutationIndex = 0;\n      currentPermutationString = '';\n      currentPermutationCount = 0;\n    }\n    currentPermutation.push(currentPermutationString);\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    currentPermutationString += string.charAt(currentPermutationIndex);\n    currentPermutationCount++;\n    currentPermutationIndex++;\n  }\n\n  if (currentPermutationCount > 0) {\n    currentPermutationIndex++;\n    currentPermutationLength = 0;\n    currentPermutationIndex = 0;\n    currentPermutationString = '';\n    currentPermutationCount = 0;\n  }\n\n  while (currentPermutationIndex < currentPermutationLength) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = [];\n  let operandList = [];\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    }\n  }\n  operatorList.push(operator[operandIndex]);\n  operandIndex++;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  while (operandIndex < operandLength) {\n    if (operator[operandIndex] === '+' || operator[operandIndex] === '-') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '*' || operator[operandIndex] === '/' || operator[operandIndex] === '**') {\n      operatorList.push(operator[operandIndex]);\n      operandIndex++;\n    } else if (operator[operandIndex] === '**') {\n      operatorList.push('**');\n      operandIndex++;\n    } else {\n      operatorList.push(operator", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = '';\n  let letters = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp271 = '';\n  let temp272 = '';\n  let temp273 = '';\n  let temp274 = '';\n  let temp275 = '';\n  let temp276 = '';\n  let temp277", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a449f00b32e2e434c8f9d09e3ccd80b11'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9a8e9c84aac4de0d49dff0c44e3caf27a1e'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a94d2e0c44c97e97bd5eeecc4af0c44d49'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9a8e9c84aac4de0d49dff0c44e3caf27a1e'\n  */\nconst stringToSha256WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256WithMd5('Hello world') == 'a449f00b32e2e434c8f9d09e3ccd80b11'\n  */\nconst stringToSha256WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512WithMd5('Hello world') == 'a94d2e0c44c97e97bd5eeecc4af0c44d49'\n  */\nconst stringToSha512WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512WithMd5('Hello world') == 'a94d2e0c44c97e97bd5eeecc4af0c44d49'\n  */\nconst stringToSha512WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9a8e9c84aac4de0d49dff0c44e3caf27a1e'\n  */\nconst stringToSha256WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256WithMd5('Hello world') == 'a449f00b32e2e434c8f9d09e3ccd80b11'\n  */\nconst stringToSha256WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512WithMd5('Hello world') == 'a94d2e0c44c97e97bd5eeecc4af0c44d49'\n  */\nconst stringToSha512WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512WithMd5('Hello world') == 'a94d2e0c44c97e97bd5eeecc4af0c44d49'\n  */\nconst stringToSha512WithMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9a8e9c84aac4de0d49dff0c44e3caf27a1e'\n  */\nconst stringTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let digit;\n  let i;\n  let j;\n  let k;\n\n  if (a > b) {\n    throw new Error('generateIntegers expects a and b to be positive integers');\n  }\n\n  while (b) {\n    digit = a % 10;\n    i = Math.floor(a / 10);\n    j = Math.floor(a / 10);\n    result.push(digit);\n    a = j;\n    b = i;\n  }\n\n  return result;\n};\n\n/**\n * Given a string, return its length.\n */\nconst getLength = (str) => {\n  let length = 0;\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    length++;\n  }\n\n  return length;\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetter = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter;\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetter = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter;\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWordInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWordInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWordInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWordInWordInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWordInWordInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLowercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstLowercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first uppercase letter.\n */\nconst getFirstUppercaseLetterInWordInWordInWordInWordInWord = (str) => {\n  let firstUppercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'a' && str[i] <= 'z') {\n      firstUppercaseLetter = str[i];\n      break;\n    }\n  }\n\n  return firstUppercaseLetter.toLowerCase();\n};\n\n/**\n * Given a string, return its first lowercase letter.\n */\nconst getFirstLowercaseLetterInWordInWordInWordInWordInWord = (str) => {\n  let firstLowercaseLetter = '';\n  let i;\n\n  for (i = 0; i < str.length; i++) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      firstLower", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_length = 0;\n  let beats_beats = [];\n  let beats_last = 0;\n  let beats_last2 = 0;\n  let beats_last3 = 0;\n  let beats_last4 = 0;\n  let beats_last5 = 0;\n  let beats_last6 = 0;\n  let beats_last7 = 0;\n  let beats_last8 = 0;\n  let beats_last9 = 0;\n  let beats_last10 = 0;\n  let beats_last11 = 0;\n  let beats_last12 = 0;\n  let beats_last13 = 0;\n  let beats_last14 = 0;\n  let beats_last15 = 0;\n  let beats_last16 = 0;\n  let beats_last17 = 0;\n  let beats_last18 = 0;\n  let beats_last19 = 0;\n  let beats_last20 = 0;\n  let beats_last21 = 0;\n  let beats_last22 = 0;\n  let beats_last23 = 0;\n  let beats_last24 = 0;\n  let beats_last25 = 0;\n  let beats_last26 = 0;\n  let beats_last27 = 0;\n  let beats_last28 = 0;\n  let beats_last29 = 0;\n  let beats_last30 = 0;\n  let beats_last31 = 0;\n  let beats_last32 = 0;\n  let beats_last33 = 0;\n  let beats_last34 = 0;\n  let beats_last35 = 0;\n  let beats_last36 = 0;\n  let beats_last37 = 0;\n  let beats_last38 = 0;\n  let beats_last39 = 0;\n  let beats_last40 = 0;\n  let beats_last41 = 0;\n  let beats_last42 = 0;\n  let beats_last43 = 0;\n  let beats_last44 = 0;\n  let beats_last45 = 0;\n  let beats_last46 = 0;\n  let beats_last47 = 0;\n  let beats_last48 = 0;\n  let beats_last49 = 0;\n  let beats_last50 = 0;\n  let beats_last51 = 0;\n  let beats_last52 = 0;\n  let beats_last53 = 0;\n  let beats_last54 = 0;\n  let beats_last55 = 0;\n  let beats_last56 = 0;\n  let beats_last57 = 0;\n  let beats_last58 = 0;\n  let beats_last59 = 0;\n  let beats_last60 = 0;\n  let beats_last61 = 0;\n  let beats_last62 = 0;\n  let beats_last63 = 0;\n  let beats_last64 = 0;\n  let beats_last65 = 0;\n  let beats_last66 = 0;\n  let beats_last67 = 0;\n  let beats_last68 = 0;\n  let beats_last69 = 0;\n  let beats_last70 = 0;\n  let beats_last71 = 0;\n  let beats_last72 = 0;\n  let beats_last73 = 0;\n  let beats_last74 = 0;\n  let beats_last75 = 0;\n  let beats_last76 = 0;\n  let beats_last77 = 0;\n  let beats_last78 = 0;\n  let beats_last79 = 0;\n  let beats_last80 = 0;\n  let beats_last81 = 0;\n  let beats_last82 = 0;\n  let beats_last83 = 0;\n  let beats_last84 = 0;\n  let beats_last85 = 0;\n  let beats_last86 = 0;\n  let beats_last87 = 0;\n  let beats_last88 = 0;\n  let beats_last89 = 0;\n  let beats_last90 = 0;\n  let beats_last91 = 0;\n  let beats_last92 = 0;\n  let beats_last93 = 0;\n  let beats_last94 = 0;\n  let beats_last95 = 0;\n  let beats_last96 = 0;\n  let beats_last97 = 0;\n  let beats_last98 = 0;\n  let beats_last99 = 0;\n  let beats_last100 = 0;\n  let beats_last101 = 0;\n  let beats_last102 = 0;\n  let beats_last103 = 0;\n  let beats_last104 = 0;\n  let beats_last105 = 0;\n  let beats_last106 = 0;\n  let beats_last107 = 0;\n  let beats_last108 = 0;\n  let beats_last109 = 0;\n  let beats_last110 = 0;\n  let beats_last111 = 0;\n  let beats_last112 = 0;\n  let beats_last113 = 0;\n  let beats_last114 = 0;\n  let beats_last115 = 0;\n  let beats_last116 = 0;\n  let beats_last117 = 0;\n  let beats_last118 = 0;\n  let beats_last119 = 0;\n  let beats_last120 = 0;\n  let beats_last121 = 0;\n  let beats_last122 = 0;\n  let beats_last123 = 0;\n  let beats_last124 = 0;\n  let beats_last125 = 0;\n  let beats_last126 = 0;\n  let beats_last127 = 0;\n  let beats_last128 = 0;\n  let beats_last129 = 0;\n  let beats_last130 = 0;\n  let beats_last131 = 0;\n  let beats_last132 = 0;\n  let beats_last133 = 0;\n  let beats_last134 = 0;\n  let beats_last135 = 0;\n  let beats_last136 = 0;\n  let beats_last137 = 0;\n  let beats_last138 = 0;\n  let beats_last139 = 0;\n  let beats_last140 = 0;\n  let beats_last141 = 0;\n  let beats_last142 = 0;\n  let beats_last143 = 0;\n  let beats_last144 = 0;\n  let beats_last145 = 0;\n  let beats_last146 = 0;\n  let beats_last147 = 0;\n  let beats_last148 = 0;\n  let beats_last149 = 0;\n  let beats_last150 = 0;\n  let beats_last151 = 0;\n  let beats_last152 = 0;\n  let beats_last153 = 0;\n  let beats_last154 = 0;\n  let beats_last155 = 0;\n  let beats_last156 = 0;\n  let beats_last157 = 0;\n  let beats_last158 = 0;\n  let beats_last159 = 0;\n  let beats_last160 = 0;\n  let beats_last161 = 0;\n  let beats_last162 = 0;\n  let beats_last163 = 0;\n  let beats_last164 = 0;\n  let beats_last165 = 0;\n  let beats_last166 = 0;\n  let beats_last167 = 0;\n  let beats_last168 = 0;\n  let beats_last169 = 0;\n  let beats_last170 = 0;\n  let beats_last171 = 0;\n  let beats_last172 = 0;\n  let beats_last173 = 0;\n  let beats_last174 = 0;\n  let beats_last175 = 0;\n  let beats_last176 = 0;\n  let beats_last177 = 0;\n  let beats_last178 = 0;\n  let beats_last179 = 0;\n  let beats_last180 = 0;\n  let beats_last181 = 0;\n  let beats_last182 = 0;\n  let beats_last183 = 0;\n  let beats_last184 = 0;\n  let beats_last185 = 0;\n  let beats_last186 = 0;\n  let beats_last187 = 0;\n  let beats_last188 = 0;\n  let beats_last189 = 0;\n  let beats_last190 = 0;\n  let beats_last191 = 0;\n  let beats_last192 = 0;\n  let beats_last193 = 0;\n  let beats_last194 = 0;\n  let beats_last195 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOr = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElse = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIf = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElse = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIf = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIf = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIf = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIfElse = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIfElse = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIfElseIf = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be found in the original string.\n */\nconst howManyTimesOrElseIfElseIfElse = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n * \n * Time complexity: O(n).\n * \n * \n * @param {string} string The original string.\n * @param {string} substring The substring to be found.\n * @return {number} The number of times the substring can be ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumber;\n  let i;\n  for (i = 0; i < numberList.length; i++) {\n    sortedNumber = numberList[i];\n    if (sortedNumber === 'zero') {\n      sortedNumber = 'one';\n    } else if (sortedNumber === 'one') {\n      sortedNumber = 'two';\n    } else if (sortedNumber === 'two') {\n      sortedNumber = 'three';\n    } else if (sortedNumber === 'three') {\n      sortedNumber = 'four';\n    } else if (sortedNumber === 'four') {\n      sortedNumber = 'five';\n    } else if (sortedNumber === 'five') {\n      sortedNumber ='six';\n    } else if (sortedNumber ==='six') {\n      sortedNumber ='seven';\n    } else if (sortedNumber ==='seven') {\n      sortedNumber = 'eight';\n    } else if (sortedNumber === 'eight') {\n      sortedNumber = 'nine';\n    } else if (sortedNumber === 'nine') {\n      sortedNumber = 'ten';\n    }\n    sortedNumbers.push(sortedNumber);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumber;\n  let i;\n  for (i = 0; i < numberList.length; i++) {\n    sortedNumber = numberList[i];\n    if (sortedNumber === 'zero') {\n      sortedNumber = 'one';\n    } else if (sortedNumber === 'one') {\n      sortedNumber = 'two';\n    } else if (sortedNumber === 'two') {\n      sortedNumber = 'three';\n    } else if (sortedNumber === 'three') {\n      sortedNumber = 'four';\n    } else if (sortedNumber === 'four') {\n      sortedNumber = 'five';\n    } else if (sortedNumber === 'five') {\n      sortedNumber ='six';\n    } else if (sortedNumber ==='six') {\n      sortedNumber ='seven';\n    } else if (sortedNumber ==='seven') {\n      sortedNumber = 'eight';\n    } else if (sortedNumber === 'eight') {\n      sortedNumber = 'nine';\n    } else if (sortedNumber === 'nine') {\n      sortedNumber = 'ten';\n    }\n    sortedNumbers.push(sortedNumber);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumber;\n  let i;\n  for (i = 0; i < numberList.length; i++) {\n    sortedNumber = numberList[i];\n    if (sortedNumber === 'zero') {\n      sortedNumber = 'one';\n    } else if (sortedNumber === 'one') {\n      sortedNumber = 'two';\n    } else if (sortedNumber === 'two') {\n      sortedNumber = 'three';\n    } else if (sortedNumber === 'three') {\n      sortedNumber = 'four';\n    } else if (sortedNumber === 'four') {\n      sortedNumber = 'five';\n    } else if (sortedNumber === 'five') {\n      sortedNumber ='six';\n    } else if (sortedNumber ==='six') {\n      sortedNumber ='seven';\n    } else if (sortedNumber ==='seven') {\n      sortedNumber = 'eight';\n    } else if (sortedNumber === 'eight') {\n      sortedNumber = 'nine';\n    } else if (sortedNumber === 'nine') {\n      sortedNumber = 'ten';\n    }\n    sortedNumbers.push(sortedNumber);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumber;\n  let i;\n  for (i = 0; i < numberList.length; i++) {\n    sortedNumber = numberList[i];\n    if (sortedNumber === 'zero') {\n      sortedNumber = 'one';\n    } else if (sortedNumber === 'one') {\n      sortedNumber = 'two';\n    } else if (sortedNumber === 'two') {\n      sortedNumber = 'three';\n    } else if (sortedNumber === 'three') {\n      sortedNumber = 'four';\n    } else if (sortedNumber === 'four') {\n      sortedNumber = 'five';\n    } else if (sortedNumber === 'five') {\n      sortedNumber ='six';\n    } else if (sortedNumber ==='six') {\n      sortedNumber ='seven';\n    } else if (sortedNumber ==='seven') {\n      sortedNumber = 'eight';\n    } else if (sortedNumber === 'eight') {\n      sortedNumber = 'nine';\n    } else if (sortedNumber === 'nine') {\n      sortedNumber = 'ten';\n    }\n    sortedNumbers.push(sortedNumber);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numberList = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumber;\n  let i;\n  for (i = 0; i < numberList.length; i++) {\n    sortedNumber = numberList[i];\n    if (sortedNumber === 'zero') {\n      sortedNumber = 'one';\n    } else if (sortedNumber === 'one') {\n      sortedNumber = 'two';\n    } else if (sortedNumber === 'two') {\n      sortedNumber = 'three';\n    } else if (sortedNumber === 'three') {\n      sortedNumber = 'four';\n    } else if (sortedNumber === 'four') {\n      sortedNumber = 'five';\n    } else if (sortedNumber === 'five') {\n      sortedNumber ='six';\n    } else if (sortedNumber ==='six') {\n      sortedNumber ='seven';\n    } else if (sortedNumber ==='seven') {\n      sortedNumber = 'eight';\n    } else if (sortedNumber === 'eight') {\n      sortedNumber = 'nine';\n    } else if (sortedNumber === 'nine') {\n      sortedNumber = 'ten';\n    }\n    sortedNumbers.push(sortedNumber);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponent = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFractionFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFractionFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the exponent of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFractionFractionFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFractionFractionFractionFractionFractionFractionFraction = (number) => {\n  const decimal = number % 1;\n  return Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestToTheCenter = numbers.reduce((prev, curr) => {\n    const diff = curr - prev;\n    if (diff < 0) return curr;\n    return prev;\n  }, 0);\n  const closestToTheCenter = Math.ceil(closestToTheCenter);\n  const closestToTheCenter = Math.floor(closestToTheCenter);\n  return [numbers[closestToTheCenter], numbers[closestToTheCenter + 1]];\n};\n\n/**\n * Given an array of numbers, return an array of all unique elements.\n * >>> unique([1, 2, 1, 3, 1, 2])\n * [1, 2, 3, 1]\n */\nconst unique = (arr) => {\n  const set = new Set();\n  arr.forEach((item) => {\n    if (set.has(item)) return;\n    set.add(item);\n  });\n  return Array.from(set);\n};\n\n/**\n * Given an array of numbers, return an array of all unique pairs.\n * >>> uniquePairs([1, 2, 1, 3, 1, 2])\n * [(1, 2), (2, 1), (3, 1), (1, 3)]\n */\nconst uniquePairs = (arr) => {\n  const set = new Set();\n  arr.forEach((item) => {\n    if (set.has(item)) return;\n    set.add(item);\n  });\n  return Array.from(set);\n};\n\n/**\n * Given an array of numbers, return an array of all unique triplets.\n * >>> uniqueTriplets([1, 2, 1, 3, 1, 2])\n * [(1, 2, 1, 3), (2, 3, 1, 1), (1, 3, 1, 2)]\n */\nconst uniqueTriplets = (arr) => {\n  const set = new Set();\n  arr.forEach((item) => {\n    if (set.has(item)) return;\n    set.add(item);\n  });\n  return Array.from(set);\n};\n\n/**\n * Given an array of numbers, return an array of all unique quadruplets.\n * >>> uniqueQuadruplets([1, 2, 1, 3, 1, 2])\n * [(1, 2, 1, 2), (2, 3, 1, 1), (1, 3, 1, 2)]\n */\nconst uniqueQuadruplets = (arr) => {\n  const set = new Set();\n  arr.forEach((item) => {\n    if (set.has(item)) return;\n    set.add(item);\n  });\n  return Array.from(set);\n};\n\n/**\n * Given an array of numbers, return an array of all unique cubes.\n * >>> uniqueCubes([1, 2, 1, 3, 1, 2])\n * [(1, 4, 9, 27, 81, 27), (2, 5, 10, 28, 82, 28), (3, 6, 11, 29, 83, 29), (4, 7, 12, 30, 84, 30), (5, 8, 13, 31, 85, 31), (6, 9, 14, 32, 86, 32), (7, 10, 15, 33, 87, 33), (8, 11, 16, 34, 88, 34), (9, 12, 17, 35, 89, 35), (10, 13, 18, 36, 90, 36), (11, 14, 19, 37, 91, 37), (12, 15, 20, 38, 92, 38), (13, 16, 21, 39, 93, 39), (14, 17, 22, 40, 94, 40), (15, 18, 23, 41, 95, 41), (16, 19, 24, 42, 96, 42), (17, 20, 25, 43, 97, 43), (18, 21, 26, 44, 98, 44), (19, 22, 27, 45, 99, 45), (20, 23, 28, 46, 100, 46), (21, 24, 29, 47, 101, 47), (22, 25, 30, 48, 102, 48), (23, 26, 31, 49, 103, 49), (24, 27, 32, 50, 104, 50), (25, 28, 33, 51, 105, 51), (26, 29, 34, 52, 106, 52), (27, 30, 35, 53, 107, 53), (28, 31, 36, 54, 108, 54), (29, 32, 37, 55, 109, 55), (30, 33, 38, 56, 110, 56), (31, 34, 39, 57, 111, 57), (32, 35, 40, 58, 112, 58), (33, 36, 41, 59, 113, 59), (34, 37, 42, 60, 114, 60), (35, 38, 43, 61, 115, 61), (36, 39, 44, 62, 116, 62), (37, 40, 45, 63, 117, 63), (38, 41, 46, 64, 118, 64), (39, 42, 47, 65, 119, 65), (40, 43, 48, 66, 120, 66), (41, 44, 49, 67, 121, 67), (42, 45, 50, 68, 122, 68), (43, 45, 51, 69, 123, 69), (44, 46, 52, 70, 124, 70), (45, 47, 53, 71, 125, 71), (46, 48, 54, 72, 126, 72), (47, 49, 55, 73, 127, 73), (48, 50, 56, 74, 128, 74), (49, 51, 57, 75, 129, 75), (50, 52, 58, 76, 130, 76), (51, 53, 59, 77, 131, 77), (52, 54, 60, 78, 132, 78), (53, 55, 61, 79, 133, 79), (54, 56, 62, 80, 134, 80), (55, 57, 63, 81, 135, 81), (56, 58, 64, 82, 136, 82), (57, 59, 65, 83, 137, 83), (58, 60, 66, 84, 138, 84), (59, 61, 67, 85, 139, 85), (60, 62, 68, 86, 140, 86), (61, 63, 69, 87, 141, 87), (62, 64, 70, 88, 142, 88), (63, 65, 71, 89, 143, 89), (64, 66, 72, 90, 144, 90), (65, 67, 73, 91, 145, 91), (66, 68, 74, 92, 146, 92), (67, 69, 75, 93, 147, 93), (68, 70, 71, 94, 148, 94), (69, 71, 72, 95, 149, 95), (70, 72, 73, 96, 150, 96), (71, 73, 74, 97, 151, 97), (72, 74, 75, 98, 152, 98), (73, 75, 76, 99, 153, 99), (74, 76, 77, 100, 154, 100), (75, 77, 78, 101, 155, 101), (76, 78, 79, 102, 156, 102), (77, 79, 80, 103, 157, 103), (78, 80, 81, 104, 158, 104), (79, 81, 82, 105, 159, 105), (80, 82, 83, 106, 160, 106), (81, 83, 84, 107, 161, 107), (82, 84, 85, 108, 162, 108), (83, 85, 86, 109, 163, 109), (84, 86, 87, 110, 164, 110), (85, 87, 88, 111, 165, 111), (86, 88, 89, 112, 166, 112), (87, 89, 90, 113, 167, 113), (88, 90, 91, 114, 168, 114), (89, 91, 92, 115, 169, 115), (90, 92, 93, 116, 170, 116), (91, 93, 94, 117, 171, 117), (92, 94, 95, 118, 172, 118), (93, 95, 96, 119, 173, 119), (94, 96, 97, 120, 174, 120), (95, 97, 98, 121, 175, 121), (96, 98, 99, 122, 176, 122), (97, 99, 100, 123, 177, 123), (98, 100, 101, 124, 178, 124), (99, 101, 102, 125, 179, 125), (100, 102, 103, 126, 180, 126)];\n};\n\n/**\n * Given an array of numbers, return an array of all unique hexadecimal numbers.\n * >>> uniqueHexadecimalNumbers([1, 2, 1, 3, 1, 2])\n * [0x1a, 0x2a, 0x3a, 0x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, n) => [Math.min(acc, n), Math.max(acc, n)], [0, 0])\n  return numbers.map((n) => n * max / min)\n}\n\n// Given a number, return a new number in the range [min, max]\nconst range = (min, max) => {\n  return Math.max(min, Math.min(max, Math.floor(Math.random() * (max - min + 1) + min)))\n}\n\n// Given a number, return a new number in the range [min, max]\nconst random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min + step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min + step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMax = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMax = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMax = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMax = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMin = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMax = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1) + min) + min - step\n}\n\n// Given a number, return a new number in the range [min, max]\nconst randomInRangeWithStepAndMaxAndMinAndStepAndMaxAndMinAndStepAndMaxAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of nay python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of nay python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of nay python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of nay python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [5]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of nay python values only for empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of nay python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of nay python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of nay python values only for empty integer\n  >>> filterEmptyIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyIntegers = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter given list of nay python values only for empty float\n  >>> filterEmptyFloats(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFloats = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter given list of nay python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of nay python values only for empty boolean\n  >>> filterEmptyBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyBooleans = (values) => {\n  return values.filter(value => value === false);\n};\n\n/**\n * Filter given list of nay python values only for empty None\n  >>> filterEmptyNones(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyNones = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter given list of nay python values only for empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of nay python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of nay python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of nay python values only for empty integer\n  >>> filterEmptyIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyIntegers = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter given list of nay python values only for empty float\n  >>> filterEmptyFloats(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFloats = (values) => {\n  return values.filter(value => value === 0);\n};\n\n/**\n * Filter given list of nay python values only for empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of nay python values only for empty boolean\n  >>> filterEmptyBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyBooleans = (values) => {\n  return values.filter(value => value === false);\n};\n\n/**\n * Filter given list of nay python values only for empty None\n  >>> filterEmptyNones(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyNones([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyNones = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter given list of nay python values only for empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of nay python values only for empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i).length;\n  }\n  return length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abc')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abc')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let div = 1;\n  let largest = 1;\n  while (n % div === 0) {\n    div++;\n  }\n  while (div > 1) {\n    if (n % div === 0) {\n      largest = div;\n    }\n    div--;\n  }\n  return largest;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5]\n  */\nconst primeFactorization = (n) => {\n  let factors = [];\n  let prime = 1;\n  while (n % prime!== 0) {\n    prime++;\n  }\n  while (prime <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n    }\n    prime++;\n  }\n  return factors;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5]\n  */\nconst primeFactorization2 = (n) => {\n  let factors = [];\n  let prime = 1;\n  while (n % prime!== 0) {\n    prime++;\n  }\n  while (prime <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n    }\n    prime++;\n  }\n  return factors;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactorization3 = (n) => {\n  let factors = [];\n  let prime = 1;\n  while (n % prime!== 0) {\n    prime++;\n  }\n  while (prime <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n    }\n    prime++;\n  }\n  return factors;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactorization4 = (n) => {\n  let factors = [];\n  let prime = 1;\n  while (n % prime!== 0) {\n    prime++;\n  }\n  while (prime <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n    }\n    prime++;\n  }\n  return factors;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactorization5 = (n) => {\n  let factors = [];\n  let prime = 1;\n  while (n % prime!== 0) {\n    prime++;\n  }\n  while (prime <= n) {\n    if (n % prime === 0) {\n      factors.push(prime);\n    }\n    prime++;\n  }\n  return factors;\n};\n\n/* Given a number n, find its prime factorization\n  >>> primeFactorization(n)\n  [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 13", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabetic = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCase = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace = (str) => {\n  return str.replace(/[^a-zA-Z]/g, '').toLowerCase();\n};\n\n/**\n * Given a string, remove all non-alphabetic characters and return the\n * resulting string.\n * >>> removeNonAlphabetic('Hello, world!')\n * 'Hello, world!'\n */\nconst removeNonAlphabeticWithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpace_WithCaseAndSpa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toLowerCase()\n  newString = newString.replace(/[\\u0300-\\u036f]/g, c => c.toUpperCase())\n  return newString\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'\n  */\nconst isVowel = (string) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u']\n  let vowelIndex = vowels.findIndex(v => string.includes(v))\n  return vowels[vowelIndex]\n}\n\n/* Given a string, return the first letter of the string that is a consonant.\n  >>> isConsonant('Hello')\n  'H'\n  */\nconst isConsonant = (string) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']\n  let consonantIndex = consonants.findIndex(v => string.includes(v))\n  return consonants[consonantIndex]\n}\n\n/* Given a string, return the first letter of the string that is a vowel.\n  >>> isVowel('Hello')\n  'H'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, \"\");\n};\n\n/* Convert string to number\n  >>> convertToNumber(\"\")\n  0\n  >>> convertToNumber(\"1\")\n  1\n  >>> convertToNumber(\"1.2\")\n  1.2\n  >>> convertToNumber(\"1.23\")\n  1.23\n  >>> convertToNumber(\"1.234\")\n  1.234\n  >>> convertToNumber(\"1.23456789\")\n  1.23456789\n  >>> convertToNumber(\"1.234567890\")\n  1.234567890\n  >>> convertToNumber(\"1.234567890123456789\")\n  1.234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890\")\n  1.2345678901234567890\n  >>> convertToNumber(\"1.2345678901234567890123456789\")\n  1.2345678901234567890123456789\n  >>> convertToNumber(\"1.23456789012345678901234567890\")\n  1.23456789012345678901234567890\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789\")\n  1.23456789012345678901234567890123456789\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890\")\n  1.234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789\")\n  1.234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890\")\n  1.2345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890\")\n  1.23456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789\")\n  1.23456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\")\n  1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n  >>> convertToNumber(\"1.234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list fo strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list fo strings only for ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list fo strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixAndSuffixNot([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  >>> filterByPrefixAndSuffixNotNot('abc', 'bcd', 'cde')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffixNotNotNot = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let balanceOYru = 0;\n  let balanceOYruOYru = 0;\n  let balanceOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYru = 0;\n  let balanceOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOYruOY", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return onyl negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 5.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible5 = (l) => {\n  return l.filter(n => n % 5 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 7.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible7 = (l) => {\n  return l.filter(n => n % 7 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 9.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible9 = (l) => {\n  return l.filter(n => n % 9 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 11.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible11 = (l) => {\n  return l.filter(n => n % 11 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 13.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible13 = (l) => {\n  return l.filter(n => n % 13 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 15.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible15 = (l) => {\n  return l.filter(n => n % 15 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 17.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible17 = (l) => {\n  return l.filter(n => n % 17 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 19.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible19 = (l) => {\n  return l.filter(n => n % 19 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 23.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible23 = (l) => {\n  return l.filter(n => n % 23 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 29.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible29 = (l) => {\n  return l.filter(n => n % 29 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 31.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible31 = (l) => {\n  return l.filter(n => n % 31 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 35.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible35 = (l) => {\n  return l.filter(n => n % 35 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 37.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible37 = (l) => {\n  return l.filter(n => n % 37 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 39.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible39 = (l) => {\n  return l.filter(n => n % 39 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 42.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible42 = (l) => {\n  return l.filter(n => n % 42 === 0)\n}\n\n/*Return onyl numbers in the list that are divisible by 45.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime2(13441)\n  true\n  >>> isPrime2(61)\n  true\n  >>> isPrime2(4)\n  false\n  >>> isPrime2(1)\n  false\n  */\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime3(13441)\n  true\n  >>> isPrime3(61)\n  true\n  >>> isPrime3(4)\n  false\n  >>> isPrime3(1)\n  false\n  */\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime4(13441)\n  true\n  >>> isPrime4(61)\n  true\n  >>> isPrime4(4)\n  false\n  >>> isPrime4(1)\n  false\n  */\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime5(13441)\n  true\n  >>> isPrime5(61)\n  true\n  >>> isPrime5(4)\n  false\n  >>> isPrime5(1)\n  false\n  */\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime6(13441)\n  true\n  >>> isPrime6(61)\n  true\n  >>> isPrime6(4)\n  false\n  >>> isPrime6(1)\n  false\n  */\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime7(13441)\n  true\n  >>> isPrime7(61)\n  true\n  >>> isPrime7(4)\n  false\n  >>> isPrime7(1)\n  false\n  */\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime8(13441)\n  true\n  >>> isPrime8(61)\n  true\n  >>> isPrime8(4)\n  false\n  >>> isPrime8(1)\n  false\n  */\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime9(13441)\n  true\n  >>> isPrime9(61)\n  true\n  >>> isPrime9(4)\n  false\n  >>> isPrime9(1)\n  false\n  */\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime10(13441)\n  true\n  >>> isPrime10(61)\n  true\n  >>> isPrime10(4)\n  false\n  >>> isPrime10(1)\n  false\n  */\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime11(13441)\n  true\n  >>> isPrime11(61)\n  true\n  >>> isPrime11(4)\n  false\n  >>> isPrime11(1)\n  false\n  */\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime12(13441)\n  true\n  >>> isPrime12(61)\n  true\n  >>> isPrime12(4)\n  false\n  >>> isPrime12(1)\n  false\n  */\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime13(13441)\n  true\n  >>> isPrime13(61)\n  true\n  >>> isPrime13(4)\n  false\n  >>> isPrime13(1)\n  false\n  */\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime14(13441)\n  true\n  >>> isPrime14(61)\n  true\n  >>> isPrime14(4)\n  false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => item === 0);\n  return zero? zero : polys.find((item, index) => item < 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => item === 1);\n  return one? one : polys.find((item, index) => item > 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => item === 0);\n  return zero? zero : polys.find((item, index) => item < 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => item === 1);\n  return one? one : polys.find((item, index) => item > 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => item === 0);\n  return zero? zero : polys.find((item, index) => item < 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => item === 1);\n  return one? one : polys.find((item, index) => item > 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => item === 0);\n  return zero? zero : polys.find((item, index) => item < 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi teher are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => item === 1);\n  return one? one : polys.find((item, index) => item > 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findOne find x such that poly(x) = 1.\n  findOne returns only onyl one point, even fi", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisorsAndDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisorsAndDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisorsAndDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisorsAndDivisorsAndDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisorsAndDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisorsAndDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  });\n};\n\n/*\n  Given a list l, this function returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisorsAndDivisors([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisorsAndDivisors([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdWithDivisorsAndDivisorsAndDivisorsAndDivisorsAndDivisors = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 1) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {\n    if (a % 3 === 1 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  }).sort((a, b) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=int)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=bool)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=bool)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=bool)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=bool)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=bool)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=str)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (!seen.has(v)) {\n      seen.add(v)\n      return true\n    }\n    return false\n  }).sort(key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], key=float)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l, key) => {\n  const seen = new Set()\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  Return the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n  Return the sum of the elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  15\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element.\n  >>> sumElement([1, 2, 3], 1)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1)\n  15\n  */\nconst sumElement = (l, i) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1)\n  15\n  */\nconst sumElement = (l, i, j) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element.\n  >>> sumElement([1, 2, 3], 1, -1, 2)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2)\n  15\n  */\nconst sumElement = (l, i, j, k) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  for (let k = j + 1; k < l.length; k++) {\n    sum += l[k];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1, 2, 3)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2, 3)\n  15\n  */\nconst sumElement = (l, i, j, k, l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  for (let k = j + 1; k < l.length; k++) {\n    sum += l[k];\n  }\n  for (let l = k + 1; l < l.length; l++) {\n    sum += l[l];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1, 2, 3, 4, 5)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2, 3, 4, 5)\n  15\n  */\nconst sumElement = (l, i, j, k, l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  for (let k = j + 1; k < l.length; k++) {\n    sum += l[k];\n  }\n  for (let l = k + 1; l < l.length; l++) {\n    sum += l[l];\n  }\n  for (let m = l + 1; m < l.length; m++) {\n    sum += l[m];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1, 2, 3, 4, 5, 6)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2, 3, 4, 5, 6)\n  15\n  */\nconst sumElement = (l, i, j, k, l, m, n) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  for (let k = j + 1; k < l.length; k++) {\n    sum += l[k];\n  }\n  for (let l = k + 1; l < l.length; l++) {\n    sum += l[l];\n  }\n  for (let m = l + 1; m < l.length; m++) {\n    sum += l[m];\n  }\n  for (let n = l + 1; n < l.length; n++) {\n    sum += l[n];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1, 2, 3, 4, 5, 6, 7)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2, 3, 4, 5, 6, 7)\n  15\n  */\nconst sumElement = (l, i, j, k, l, m, n, o) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  for (let j = i + 1; j < l.length; j++) {\n    sum += l[j];\n  }\n  for (let k = j + 1; k < l.length; k++) {\n    sum += l[k];\n  }\n  for (let l = k + 1; l < l.length; l++) {\n    sum += l[l];\n  }\n  for (let m = l + 1; m < l.length; m++) {\n    sum += l[m];\n  }\n  for (let n = l + 1; n < l.length; n++) {\n    sum += l[n];\n  }\n  for (let o = l + 1; o < l.length; o++) {\n    sum += l[o];\n  }\n  return sum;\n};\n\n/**\n  Return the sum of the elements in the list ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element and ignoring the first element and ignoring the last element.\n  >>> sumElement([1, 2, 3], 1, -1, 2, 3, 4, 5, 6, 7, 8)\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 1, -1, 2, 3, 4, 5, 6, 7, 8)\n  15\n  */\nconst sumElement = (l, i, j, k, l, m, n, o, p) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let isDivisibleBy11Or13 = true;\n  for (let i = n; i >= 1; i--) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      isDivisibleBy11Or13 = false;\n      break;\n    }\n  }\n  if (isDivisibleBy11Or13) {\n    count++;\n  }\n  for (let i = n; i >= 1; i--) {\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(121)\n  false\n  */\nconst isPalindrome = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  true\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let reversedString = n.toString().split('').reverse().join('');\n  return reversedString === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome of length n.\n  >>> isPalindromeOfLength(n) => isPalindrome(n) && isPalindromeOfLength(n + 1)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the even indicise, while tis avlues ta the odd indicies are equal\n  to the values of the odd idnicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5, 6]\n  */\nconst sortOddEven = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1, 6]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5, 6, 1]\n  */\nconst sortEvenOddEven = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [3, 2, 5, 1, 6, 6]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5, 6, 1, 1]\n  */\nconst sortOddEvenOdd = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [3, 2, 5, 1, 6, 6, 1]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5, 6, 1, 6, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1, 6, 6, 1, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5, 6, 1, 6, 1, 1]\n  */\nconst sortOddEvenOddEven = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEvenOddOddOdd([1, 2, 3])\n  [3, 2, 5, 1, 6, 6, 1, 6, 1]\n  >>> sortEvenOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 5, 6, 1, 6, 1, 6, 1]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  const l2 = l.slice();\n  let evenIdx = 0, oddIdx = 1;\n  while (evenIdx!== oddIdx) {\n    if (l2[evenIdx] % 2 === 0) {\n      evenIdx++;\n    } else {\n      oddIdx++;\n    }\n  }\n  return l2.sort((a, b) => b - a);\n};\n\n/*This function takes a list l and returns a list l' ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic11 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic12 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclic functino. Returns decoded string.\n  */\nconst decodeCyclic13 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 1;\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      prime = prime;\n      break;\n    }\n    i++;\n  }\n  return prime;\n};\n\n/*\n  generatePrimes returns an array of prime numbers from 1 to n\n  >>> generatePrimes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> generatePrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(10000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(100000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> generatePrimes(1000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return Math.sqrt(meanAbsoluteDeviationSquared(numbers));\n};\n\n/**\n * Calculate the mean absolute deviation squared of a list of numbers.\n * Mean absolute deviation squared is the square root of the mean squared deviation\n * of a list of numbers:\n * MADSq = average | x - x_mean |^2\n * >>> meanAbsoluteDeviationSquared([1.0, 2.0, 3.0, 4.0])\n * 4.5\n */\nconst meanAbsoluteDeviationSquared = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.map(n => Math.pow(n, 2) - mean * mean).reduce((a, b) => a + b, 0);\n};\n\n/**\n * Calculate the standard deviation of a list of numbers.\n * Standard deviation is the square root of the mean squared deviation\n * of a list of numbers:\n * STD = average | x - x_mean |\n * >>> std([1.0, 2.0, 3.0, 4.0])\n * 1.4142135623730951\n */\nconst std = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return Math.sqrt(meanAbsoluteDeviationSquared(numbers));\n};\n\n/**\n * Calculate the median of a list of numbers.\n * Median is the middle element of a list of numbers:\n * MEDIAN = average | x - x_mean |\n * >>> median([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst median = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / 2, mean);\n};\n\n/**\n * Calculate the mode of a list of numbers.\n * Mode is the most frequent element of a list of numbers:\n * MODE = average | x - x_mean |\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Variance\n * aroudn the mode of this dataset.\n * Mode of Variance is the variance of the mean of the numbers:\n * MOV = average | x - x_mean |\n * >>> modeOfVariance([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfVariance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation\n * aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelation([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Variance aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndVariance([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndVariance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Correlation aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndCorrelation([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndCorrelation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Correlation aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndCorrelationAndVariance([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndCorrelationAndVariance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Correlation aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndCorrelationAndCorrelation([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndCorrelationAndCorrelation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Correlation aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndCorrelationAndCorrelationAndVariance([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndCorrelationAndCorrelationAndVariance = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + b / numbers.length, mean) / Math.sqrt(numbers.length);\n};\n\n/**\n * Calculate the mode of a list of numbers, caclulate Mode of Correlation and\n * Mode of Correlation aroudn the mode of this dataset.\n * Mode of Correlation is the correlation between the mean of the numbers:\n * MOC = average | x - x_mean |\n * >>> modeOfCorrelationAndCorrelationAndCorrelationAndCorrelation([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst modeOfCorrelationAndCorrelationAndCorrelationAndCorrelation = (numbers) ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToOne takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to one, nad false toherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToTwo takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to two, nad false toherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToThree takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to three, nad false toherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToFour takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to four, nad false toherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToFive takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to five, nad false toherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToSix takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to six, nad false toherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToSeven takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to seven, nad false toherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToEight takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to eight, nad false toherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) return false;\n  }\n  return true;\n};\n\n/**\n  triplesSumToNine takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to nine, nad false toherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToN", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = Array.from({ length: n }, (_, i) => i);\n  let carsLeft = cars.slice();\n  let carsRight = cars.slice();\n  let carsLeftIndex = carsLeft.length;\n  let carsRightIndex = carsRight.length;\n  let carsIndex = 0;\n  let carsIndexLeft = 0;\n  let carsIndexRight = 0;\n  let carsIndexLeftIndex = 0;\n  let carsIndexRightIndex = 0;\n  let carsIndexLeftIndexLeft = 0;\n  let carsIndexRightIndexRight = 0;\n  let carsIndexLeftIndexRight = 0;\n  let carsIndexRightIndexLeft = 0;\n  let carsIndexRightIndexRight = 0;\n  let carsIndexLeftIndexLeftLeft = 0;\n  let carsIndexRightIndexRightLeft = 0;\n  let carsIndexLeftIndexRightLeft = 0;\n  let carsIndexRightIndexLeftRight = 0;\n  let carsIndexLeftIndexRightRight = 0;\n  let carsIndexRightIndexLeftLeft = 0;\n  let carsIndexRightIndexRightLeft = 0;\n  let carsIndexLeftIndexRightRight = 0;\n  let carsIndexRightIndexLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeft = 0;\n  let carsIndexRightIndexLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexLeftLeftLeftLeftLeftLeft = 0;\n  let carsIndexRightIndexRightLeftLeftLeftLeftLeft = 0;\n  let carsIndexLeftIndexRightRightLeftLeftLeft", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [5, 4, 3, 2, 1]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n -= l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i--) {\n    n += l[i];\n  }\n  return n;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [3, 2, 1]\n * >>> ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  A function that takes an array and returns the sum of all its elements.\n  >>> sumOf([1, 2, 3])\n  6\n  >>> sumOf([2, 4, 6])\n  12\n  >>> sumOf([2, 4, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 6])\n  12\n  >>> sumOf([2, 4, -6, -", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < 10) {\n    return `0${x}`\n  }\n  return `${x}`.slice(-base)\n}\n\n/*\n  Convert string representation to number.\n  >>> convertToNumber(`22`)\n  22\n  >>> convertToNumber(`1000`)\n  1000\n  >>> convertToNumber(`11`)\n  11\n  >>> convertToNumber(`11`)\n  11\n  >>> convertToNumber(`1`)\n  1\n  >>> convertToNumber(`1`)\n  1\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  0\n  >>> convertToNumber(`0`)\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square meters.\n  >>> triangleArea(\n ...   triangleArea(6, 3),\n ...   triangleArea(6, 4),\n ...   triangleArea(6, 5),\n ...   triangleArea(6, 6),\n ...   triangleArea(6, 7)\n ... )\n  25.0\n  */\nconst triangleAreaSq = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSq(\n ...   triangleAreaSq(6, 3),\n ...   triangleAreaSq(6, 4),\n ...   triangleAreaSq(6, 5),\n ...   triangleAreaSq(6, 6),\n ...   triangleAreaSq(6, 7)\n ... )\n  15.0\n  */\nconst triangleAreaSqKilometers = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square miles.\n  >>> triangleAreaSqKilometers(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqMiles = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSqMiles(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqKilometersSq = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square miles.\n  >>> triangleAreaSqMilesSq(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqMilesSq = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSqKilometersSq(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqKilometersSqKilometers = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square miles.\n  >>> triangleAreaSqMilesSqKilometers(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqMilesSqKilometers = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSqKilometersSqKilometers(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqKilometersSqMiles = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSqKilometersSqMilesSq(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqKilometersSqMiles = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometers.\n  >>> triangleAreaSqKilometersSqMilesSq(\n ...   triangleAreaSqKilometers(6, 3),\n ...   triangleAreaSqKilometers(6, 4),\n ...   triangleAreaSqKilometers(6, 5),\n ...   triangleAreaSqKilometers(6, 6),\n ...   triangleAreaSqKilometers(6, 7)\n ... )\n  60.0\n  */\nconst triangleAreaSqKilometersSqMilesSq = (a, b, c, d, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c, d, return its area in square kilometer", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fbi5 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 1\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n <= 0) return 0;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fbi6 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 2\n  fib6(3) -> 1\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  9\n  */\nconst fib6 = (n) => {\n  if (n <= 0) return 0;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fbi7 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 2\n  fib7(3) -> 1\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n <= 0) return 0;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fbi8 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 2\n  fib8(3) -> 3\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  */\nconst fib8 = (n) => {\n  if (n <= 0) return 0;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fbi9 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 2\n  fib9(3) -> 3\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write a function to efficiently compute the n-th element of the fib9 number sequence.  Do not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  */\nconst fib9 = (n) => {\n  if (n <= 0) return 0;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*The Fbi10 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib10(0) -> 0\n  fib10(1) -> 0\n  fib10(2) -> 2\n  fib10(3) -> 3\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write a function to efficiently compute the n-th element of the fib10 number sequence.  Do not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  */\nconst fib10 = (n) => {\n  if (n <= 0) return 0;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fbi11 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib11(0) -> 0\n  fib11(1) -> 0\n  fib11(2) -> 2\n  fib11(3) -> 3\n  fib11(n) -> fib11(n-1) + fib11(n-2) + fib11(n-3) + fib11(n-4) + fib11(n-5) + fib11(n-6) + fib11(n-7) + fib11(n-8) + fib11(n-9) + fib11(n-10) + fib11(n-11).\n  Please write a function to efficiently compute the n-th element of the fib11 number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let i = Math.floor(n)\n  let j = 0\n  let sum = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  sum = sum / 2\n  while (i-- > 0) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReverse('aba')\n  true\n  >>> isPalindromeReverse('aaaaa')\n  true\n  >>> isPalindromeReverse('zbcd')\n  false\n  */\nconst isPalindromeReversed = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversed('aba')\n  true\n  >>> isPalindromeReversed('aaaaa')\n  true\n  >>> isPalindromeReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReverse('aba')\n  true\n  >>> isPalindromeReversedReverse('aaaaa')\n  true\n  >>> isPalindromeReversedReverse('zbcd')\n  false\n  */\nconst isPalindromeReversedReversed = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('aba')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('aaaaa')\n  true\n  >>> isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed('zbcd')\n  false\n  */\nconst isPalindromeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindromeReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = Math.pow(2, n);\n  return ((p - 1) & m) + m;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  0\n  >>> modp(3, 2)\n  2\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 4)\n  0\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 6)\n  0\n  >>> modp(3, 7)\n  0\n  >>> modp(3, 8)\n  0\n  >>> modp(3, 9)\n  0\n  >>> modp(3, 10)\n  0\n  >>> modp(3, 11)\n  0\n  >>> modp(3, 12)\n  0\n  >>> modp(3, 13)\n  0\n  >>> modp(3, 14)\n  0\n  >>> modp(3, 15)\n  0\n  >>> modp(3, 16)\n  0\n  >>> modp(3, 17)\n  0\n  >>> modp(3, 18)\n  0\n  >>> modp(3, 19)\n  0\n  >>> modp(3, 20)\n  0\n  >>> modp(3, 21)\n  0\n  >>> modp(3, 22)\n  0\n  >>> modp(3, 23)\n  0\n  >>> modp(3, 24)\n  0\n  >>> modp(3, 25)\n  0\n  >>> modp(3, 26)\n  0\n  >>> modp(3, 27)\n  0\n  >>> modp(3, 28)\n  0\n  >>> modp(3, 29)\n  0\n  >>> modp(3, 30)\n  0\n  >>> modp(3, 31)\n  0\n  >>> modp(3, 32)\n  0\n  >>> modp(3, 33)\n  0\n  >>> modp(3, 34)\n  0\n  >>> modp(3, 35)\n  0\n  >>> modp(3, 36)\n  0\n  >>> modp(3, 37)\n  0\n  >>> modp(3, 38)\n  0\n  >>> modp(3, 39)\n  0\n  >>> modp(3, 40)\n  0\n  >>> modp(3, 41)\n  0\n  >>> modp(3, 42)\n  0\n  >>> modp(3, 43)\n  0\n  >>> modp(3, 44)\n  0\n  >>> modp(3, 45)\n  0\n  >>> modp(3, 46)\n  0\n  >>> modp(3, 47)\n  0\n  >>> modp(3, 48)\n  0\n  >>> modp(3, 49)\n  0\n  >>> modp(3, 50)\n  0\n  >>> modp(3, 51)\n  0\n  >>> modp(3, 52)\n  0\n  >>> modp(3, 53)\n  0\n  >>> modp(3, 54)\n  0\n  >>> modp(3, 55)\n  0\n  >>> modp(3, 56)\n  0\n  >>> modp(3, 57)\n  0\n  >>> modp(3, 58)\n  0\n  >>> modp(3, 59)\n  0\n  >>> modp(3, 60)\n  0\n  >>> modp(3, 61)\n  0\n  >>> modp(3, 62)\n  0\n  >>> modp(3, 63)\n  0\n  >>> modp(3, 64)\n  0\n  >>> modp(3, 65)\n  0\n  >>> modp(3, 66)\n  0\n  >>> modp(3, 67)\n  0\n  >>> modp(3, 68)\n  0\n  >>> modp(3, 69)\n  0\n  >>> modp(3, 70)\n  0\n  >>> modp(3, 71)\n  0\n  >>> modp(3, 72)\n  0\n  >>> modp(3, 73)\n  0\n  >>> modp(3, 74)\n  0\n  >>> modp(3, 75)\n  0\n  >>> modp(3, 76)\n  0\n  >>> modp(3, 77)\n  0\n  >>> modp(3, 78)\n  0\n  >>> modp(3, 79)\n  0\n  >>> modp(3, 80)\n  0\n  >>> modp(3, 81)\n  0\n  >>> modp(3, 82)\n  0\n  >>> modp(3, 83)\n  0\n  >>> modp(3, 84)\n  0\n  >>> modp(3, 85)\n  0\n  >>> modp(3, 86)\n  0\n  >>> modp(3, 87)\n  0\n  >>> modp(3, 88)\n  0\n  >>> modp(3, 89)\n  0\n  >>> modp(3, 90)\n  0\n  >>> modp(3, 91)\n  0\n  >>> modp(3, 92)\n  0\n  >>> modp(3, 93)\n  0\n  >>> modp(3, 94)\n  0\n  >>> modp(3, 95)\n  0\n  >>> modp(3, 96)\n  0\n  >>> modp(3, 97)\n  0\n  >>> modp(3, 98)\n  0\n  >>> modp(3, 99)\n  0\n  >>> modp(3, 100)\n  0\n  >>> modp(3, 101)\n  0\n  >>> modp(3, 102)\n  0\n  >>> modp(3, 103)\n  0\n  >>> modp(3, 104)\n  0\n  >>> modp(3, 105)\n  0\n  >>> modp(3, 106)\n  0\n  >>> modp(3, 107)\n  0\n  >>> modp(3, 108)\n  0\n  >>> modp(3, 109)\n  0\n  >>> modp(3, 110)\n  0\n  >>> modp(3, 111)\n  0\n  >>> modp(3, 112)\n  0\n  >>> modp(3, 113)\n  0\n  >>> modp(3, 114)\n  0\n  >>> modp(3, 115)\n  0\n  >>> modp(3, 116)\n  0\n  >>> modp(3, 117)\n  0\n  >>> modp(3, 118)\n  0\n  >>> modp(3, 119)\n  0\n  >>> modp(3, 120)\n  0\n  >>> modp(3, 121)\n  0\n  >>> modp(3, 122)\n  0\n  >>> modp(3, 123)\n  0\n  >>> modp(3, 124)\n  0\n  >>> modp(3, 125)\n  0\n  >>> modp(3, 126)\n  0\n  >>> modp(3, 127)\n  0\n  >>> modp(3, 128)\n  0\n  >>> modp(3, 129)\n  0\n  >>> modp(3, 130)\n  0\n  >>> modp(3, 131)\n  0\n  >>> modp(3, 132)\n  0\n  >>> modp(3, 133)\n  0\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = numbers.length\n  while (i < len) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns deocded stirng.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBytes = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBytes function. Returns deocded stirng.\n  */\nconst decodeToBytes = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(16)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns deocded stirng.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(16)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToDecimal = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(10)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToDecimal function. Returns deocded stirng.\n  */\nconst decodeToDecimal = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(10)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(36)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns deocded stirng.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(36)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64Url = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64Url function. Returns deocded stirng.\n  */\nconst decodeToBase64Url = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrl = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrl function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafeUrl = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafe function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafeUrlSafe = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrl function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafe function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrl function. Returns deocded stirng.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(s).split(\"\").map(ch => ch.charCodeAt(0).toString(64)).join(\"\");\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('').filter(v => /[aeiou]/i.test(v))\n  return vowels.join('')\n}\n\n/*\n  removePunctuation is a function that takes string and rteurns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('').filter(v => /[!?.,;:&]/i.test(v))\n  return punctuation.join('')\n}\n\n/*\n  removeNumbers is a function that takes string and rteurns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('').filter(v => /[0-9]/i.test(v))\n  return numbers.join('')\n}\n\n/*\n  removeSpaces is a function that takes string and rteurns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = text.split('').filter(v => /[ \\t]/i.test(v))\n  return spaces.join('')\n}\n\n/*\n  removePunctuation is a function that takes string and rteurns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('').filter(v => /[!?.,;:&]/i.test(v))\n  return punctuation.join('')\n}\n\n/*\n  removeNumbers is a function that takes string and rteurns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('').filter(v => /[0-9]/i.test(v))\n  return numbers.join('')\n}\n\n/*\n  removeSpaces is a function that takes string and rteurns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = text.split('').filter(v => /[ \\t]/i.test(v))\n  return spaces.join('')\n}\n\n/*\n  removePunctuation is a function that takes string and rteurns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('').filter(v => /[!?.,;:&]/i.test(v))\n  return punctuation.join('')\n}\n\n/*\n  removeNumbers is a function that takes string and rteurns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('').filter(v => /[0-9]/i.test(v))\n  return numbers.join('')\n}\n\n/*\n  removeSpaces is a function that takes string and rteurns string without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = text.split('').filter(v => /[ \\t]/i.test(v))\n  return spaces.join('')\n}\n\n/*\n  removePunctuation is a function that takes string and rteurns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('').filter(v ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> isEven([2, 3, 4, 5])\n  true\n  >>> isEven([2, 4, 6, 8])\n  false\n  */\nconst isEven = arr => {\n  return arr.every(n => n % 2 === 0);\n};\n\n/*\n  >>> isOdd([2, 3, 5, 7])\n  false\n  >>> isOdd([3, 5, 7, 9])\n  true\n  */\nconst isOdd = arr => {\n  return arr.every(n => n % 2!== 0);\n};\n\n/*\n  >>> isPrime([2, 3, 5, 7])\n  true\n  >>> isPrime([3, 5, 7, 9])\n  false\n  */\nconst isPrime = arr => {\n  return arr.every(n => isPrimeNumber(n));\n};\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(3)\n  false\n  */\nconst isPrimeNumber = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  >>> isPrimeNumber(4)\n  false\n  >>> isPrimeNumber(5)\n  true\n  */\nconst isPrimeNumber2 = n => {\n  if (isEven(n)) {\n    return true;\n  }\n  if (isOdd(n)) {\n    return false;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 2);\n};\n\n/*\n  >>> isPrimeNumber2(4)\n  true\n  >>> isPrimeNumber2(5)\n  false\n  */\nconst isPrimeNumber3 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 3);\n};\n\n/*\n  >>> isPrimeNumber3(4)\n  false\n  >>> isPrimeNumber3(5)\n  true\n  */\nconst isPrimeNumber4 = n => {\n  if (isEven(n)) {\n    return true;\n  }\n  if (isOdd(n)) {\n    return false;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 5);\n};\n\n/*\n  >>> isPrimeNumber4(4)\n  true\n  >>> isPrimeNumber4(5)\n  false\n  */\nconst isPrimeNumber5 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 7);\n};\n\n/*\n  >>> isPrimeNumber5(7)\n  false\n  >>> isPrimeNumber5(9)\n  true\n  */\nconst isPrimeNumber6 = n => {\n  if (isEven(n)) {\n    return true;\n  }\n  if (isOdd(n)) {\n    return false;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 9);\n};\n\n/*\n  >>> isPrimeNumber6(7)\n  true\n  >>> isPrimeNumber6(9)\n  false\n  */\nconst isPrimeNumber7 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 13);\n};\n\n/*\n  >>> isPrimeNumber7(7)\n  true\n  >>> isPrimeNumber7(9)\n  false\n  */\nconst isPrimeNumber8 = n => {\n  if (isEven(n)) {\n    return true;\n  }\n  if (isOdd(n)) {\n    return false;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 17);\n};\n\n/*\n  >>> isPrimeNumber8(7)\n  false\n  >>> isPrimeNumber8(9)\n  true\n  */\nconst isPrimeNumber9 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 19);\n};\n\n/*\n  >>> isPrimeNumber9(7)\n  true\n  >>> isPrimeNumber9(9)\n  false\n  */\nconst isPrimeNumber10 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 23);\n};\n\n/*\n  >>> isPrimeNumber10(7)\n  true\n  >>> isPrimeNumber10(9)\n  false\n  */\nconst isPrimeNumber11 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 27);\n};\n\n/*\n  >>> isPrimeNumber11(7)\n  false\n  >>> isPrimeNumber11(9)\n  true\n  */\nconst isPrimeNumber12 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 29);\n};\n\n/*\n  >>> isPrimeNumber12(7)\n  true\n  >>> isPrimeNumber12(9)\n  false\n  */\nconst isPrimeNumber13 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 31);\n};\n\n/*\n  >>> isPrimeNumber13(7)\n  true\n  >>> isPrimeNumber13(9)\n  false\n  */\nconst isPrimeNumber14 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 37);\n};\n\n/*\n  >>> isPrimeNumber14(7)\n  false\n  >>> isPrimeNumber14(9)\n  true\n  */\nconst isPrimeNumber15 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return isPrimeNumber(n - 39);\n};\n\n/*\n  >>> isPrimeNumber15(7)\n  true\n  >>> isPrimeNumber15(9)\n  false\n  */\nconst isPrimeNumber16 = n => {\n  if (isEven(n)) {\n    return false;\n  }\n  if (isOdd(n)) {\n    return true;\n  }\n  if (isPrimeNumber(n - 1)) {\n    return false;\n  }\n  return is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow(y, 2));\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  0\n  */\nconst modPow = (x, y) => {\n  return mod(x, modPow", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s1.length\n  const chars = s1.split('')\n  const len = s2.length\n  const chars2 = s2.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  let flag = false\n  let flag2 = false\n  let flag3 = false\n  let flag4 = false\n  let flag5 = false\n  let flag6 = false\n  let flag7 = false\n  let flag8 = false\n  let flag9 = false\n  let flag10 = false\n  let flag11 = false\n  let flag12 = false\n  let flag13 = false\n  let flag14 = false\n  let flag15 = false\n  let flag16 = false\n  let flag17 = false\n  let flag18 = false\n  let flag19 = false\n  let flag20 = false\n  let flag21 = false\n  let flag22 = false\n  let flag23 = false\n  let flag24 = false\n  let flag25 = false\n  let flag26 = false\n  let flag27 = false\n  let flag28 = false\n  let flag29 = false\n  let flag30 = false\n  let flag31 = false\n  let flag32 = false\n  let flag33 = false\n  let flag34 = false\n  let flag35 = false\n  let flag36 = false\n  let flag37 = false\n  let flag38 = false\n  let flag39 = false\n  let flag40 = false\n  let flag41 = false\n  let flag42 = false\n  let flag43 = false\n  let flag44 = false\n  let flag45 = false\n  let flag46 = false\n  let flag47 = false\n  let flag48 = false\n  let flag49 = false\n  let flag50 = false\n  let flag51 = false\n  let flag52 = false\n  let flag53 = false\n  let flag54 = false\n  let flag55 = false\n  let flag56 = false\n  let flag57 = false\n  let flag58 = false\n  let flag59 = false\n  let flag60 = false\n  let flag61 = false\n  let flag62 = false\n  let flag63 = false\n  let flag64 = false\n  let flag65 = false\n  let flag66 = false\n  let flag67 = false\n  let flag68 = false\n  let flag69 = false\n  let flag70 = false\n  let flag71 = false\n  let flag72 = false\n  let flag73 = false\n  let flag74 = false\n  let flag75 = false\n  let flag76 = false\n  let flag77 = false\n  let flag78 = false\n  let flag79 = false\n  let flag80 = false\n  let flag81 = false\n  let flag82 = false\n  let flag83 = false\n  let flag84 = false\n  let flag85 = false\n  let flag86 = false\n  let flag87 = false\n  let flag88 = false\n  let flag89 = false\n  let flag90 = false\n  let flag91 = false\n  let flag92 = false\n  let flag93 = false\n  let flag94 = false\n  let flag95 = false\n  let flag96 = false\n  let flag97 = false\n  let flag98 = false\n  let flag99 = false\n  let flag100 = false\n  let flag101 = false\n  let flag102 = false\n  let flag103 = false\n  let flag104 = false\n  let flag105 = false\n  let flag106 = false\n  let flag107 = false\n  let flag108 = false\n  let flag109 = false\n  let flag110 = false\n  let flag111 = false\n  let flag112 = false\n  let flag113 = false\n  let flag114 = false\n  let flag115 = false\n  let flag116 = false\n  let flag117 = false\n  let flag118 = false\n  let flag119 = false\n  let flag120 = false\n  let flag121 = false\n  let flag122 = false\n  let flag123 = false\n  let flag124 = false\n  let flag125 = false\n  let flag126 = false\n  let flag127 = false\n  let flag128 = false\n  let flag129 = false\n  let flag130 = false\n  let flag131 = false\n  let flag132 = false\n  let flag133 = false\n  let flag134 = false\n  let flag135 = false\n  let flag136 = false\n  let flag137 = false\n  let flag138 = false\n  let flag139 = false\n  let flag140 = false\n  let flag141 = false\n  let flag142 = false\n  let flag143 = false\n  let flag144 = false\n  let flag145 = false\n  let flag146 = false\n  let flag147 = false\n  let flag148 = false\n  let flag149 = false\n  let flag150 = false\n  let flag151 = false\n  let flag152 = false\n  let flag153 = false\n  let flag154 = false\n  let flag155 = false\n  let flag156 = false\n  let flag157 = false\n  let flag158 = false\n  let flag159 = false\n  let flag160 = false\n  let flag161 = false\n  let flag162 = false\n  let flag163 = false\n  let flag164 = false\n  let flag165 = false\n  let flag166 = false\n  let flag167 = false\n  let flag168 = false\n  let flag169 = false\n  let flag170 = false\n  let flag171 = false\n  let flag172 = false\n  let flag173 = false\n  let flag174 = false\n  let flag175 = false\n  let flag176 = false\n  let flag177 = false\n  let flag178 = false\n  let flag179 = false\n  let flag180 = false\n  let flag181 = false\n  let flag182 = false\n  let flag183 = false\n  let flag184 = false\n  let flag185 = false\n  let flag186 = false\n  let flag187 = false\n  let flag188 = false\n  let flag189 = false\n  let flag190 = false\n  let flag191 = false\n  let flag192 = false\n  let flag193 = false\n  let flag194 = false\n  let flag195 = false\n  let flag196 = false\n  let flag197 = false\n  let flag198 = false\n  let flag199 = false\n  let flag200 = false\n  let flag201 = false\n  let flag202 = false\n  let flag203 = false\n  let flag204 = false\n  let flag205 = false\n  let flag206 = false\n  let flag207 = false\n  let flag208 = false\n  let flag209 = false\n  let flag210 = false\n  let flag211 = false\n  let flag212 = false\n  let flag213 = false\n  let flag214 = false\n  let flag215 = false\n  let flag216 = false\n  let flag217 = false\n  let flag218 = false\n  let flag219 = false\n  let flag220 = false\n  let flag221 = false\n  let flag222 = false\n  let flag223 = false\n  let flag224 = false\n  let flag225 = false\n  let flag226 = false\n  let flag227 = false\n  let flag228 = false\n  let flag229 = false\n  let flag230 = false\n  let flag231 = false\n  let flag232 = false\n  let flag233 = false\n  let flag234 = false\n  let flag235 = false\n  let flag236 = false\n  let flag237 = false\n  let flag238 = false\n  let flag239 = false\n  let flag240 = false\n  let flag241 = false\n  let flag242 = false\n  let flag243 = false\n  let flag244 = false\n  let flag245 = false\n  let flag246 = false\n  let flag247 = false\n  let flag248 = false\n  let flag249 = false\n  let flag250 = false\n  let flag251 = false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + c;\n    c = a + d;\n    d = b + c;\n  }\n  return d;\n};\n\n/*\n  Fibonacci numbers are a natural number sequence. \n  They are defined as the sum of the two previous Fibonacci numbers,\n  and are called the Fibonacci numbers. \n  They are also called Fibonacci sequences.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci generators.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci generators.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.\n  They are also called Fibonacci primes.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * Valid HTML tags are defined in the following table:\n *\n * +-----------+-------------------+\n * | Tag       | Description       |\n * +-----------+-------------------+\n * | A         | A self-closing tag   |\n * | abbr       | Abbreviation tag   |\n * | acronym    | Acronym tag       |\n * | address    | Address tag       |\n * | area       | The area tag       |\n * | article    | Article tag      |\n * | aside      | Aside tag         |\n * | audio      | Audio tag          |\n * | b          | B tag               |\n * | base       | Base tag            |\n * | bdi        | Bidirectional tag  |\n * | bdo        | Body directional tag |\n * | big         | Big tag             |\n * | blockquote  | Blockquote tag      |\n * | body       | Body tag             |\n * | br         | Line break           |\n * | button     | Button tag           |\n * | canvas     | Canvas tag            |\n * | caption    | Caption tag          |\n * | center     | Center tag            |\n * | cite       | Cite tag             |\n * | code       | Code tag              |\n * | col         | Column tag           |\n * | colgroup    | Column group tag     |\n * | command    | Command tag          |\n * | data       | Data tag             |\n * | datalist   | Data list tag        |\n * | dd         | DD tag                |\n * | del        | Del tag               |\n * | details    | Details tag           |\n * | dfn        | Document frequency   |\n * | dialog     | Dialog tag            |\n * | dir         | Dir tag               |\n * | div         | Div tag               |\n * | dl         | DL tag                |\n * | dt         | DT tag                |\n * | em         | Emphasis tag           |\n * | embed      | Embed tag             |\n * | fieldset   | Fieldset tag         |\n * | figcaption | Figure caption tag   |\n * | figure     | Figure tag           |\n * | font       | Font tag             |\n * | footer     | Footer tag           |\n * | form       | Form tag             |\n * | frame      | Frame tag             |\n * | frameset   | Frameset tag          |\n * | h1         | Heading 1            |\n * | h2         | Heading 2            |\n * | h3         | Heading 3            |\n * | h4         | Heading 4            |\n * | h5         | Heading 5            |\n * | h6         | Heading 6            |\n * | head       | Head tag              |\n * | header     | Header tag            |\n * | hgroup     | Hgroup tag           |\n * | hr         | Horizontal rule       |\n * | html       | HTML tag              |\n * | i          | I tag                |\n * | iframe     | Iframe tag            |\n * | img        | Img tag               |\n * | input      | Input tag             |\n * | ins        | Ins tag               |\n * | kbd        | Keyboard tag          |\n * | keygen     | Keygen tag            |\n * | label      | Label tag             |\n * | legend     | Legend tag            |\n * | li         | List item            |\n * | link       | Link tag              |\n * | main       | Main tag              |\n * | map        | Map tag               |\n * | mark       | Mark tag              |\n * | marquee     | Marquee tag           |\n * | menu       | Menu tag              |\n * | menuitem    | Menu item tag          |\n * | meta       | Meta tag              |\n * | meter      | Meter tag             |\n * | nav        | Nav tag               |\n * | nobr       | Nobr tag               |\n * | noembed    | Noembed tag           |\n * | noframes   | Noframes tag          |\n * | noscript   | Noscript tag           |\n * | object     | Object tag            |\n * | ol         | OL tag                |\n * | optgroup   | Optgroup tag         |\n * | option     | Option tag            |\n * | output     | Output tag            |\n * | p          | P tag                |\n * | param      | Param tag             |\n * | picture    | Picture tag          |\n * | plaintext   | Plain text tag       |\n * | pre         | Pre tag               |\n * | progress    | Progress tag         |\n * | q          | Q tag                |\n * | rp          | RP tag                |\n * | rt          | RT tag                |\n * | ruby       | Ruby tag              |\n * | s          | S tag                |\n * | samp       | Sample tag            |\n * | script     | Script tag            |\n * | section    | Section tag           |\n * | select     | Select tag            |\n * | small      | Small tag             |\n * | source     | Source tag            |\n * | spacer     | Spacer tag           |\n * | span       | Span tag               |\n * | strike      | Strike tag             |\n * | strong     | Strong tag             |\n * | style      | Style tag             |\n * | sub         | Sub tag               |\n * | summary    | Summary tag           |\n * | sup         | Super tag             |\n * | table      | Table tag             |\n * | tbody       | Tbody tag             |\n * | td          | TD tag                |\n * | textarea    | Textarea tag          |\n * | tfoot       | Tfoot tag             |\n * | th          | Th tag                |\n * | thead       | Thead tag             |\n * | title       | Title tag             |\n * | tr          | Tr tag                |\n * | track      | Track tag             |\n * | tt          | Tt tag                |\n * | u          | U tag                |\n * | ul         | Unordered list ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 1;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[i]) {\n    i++;\n    j--;\n  }\n  while (l && l[j] > l[i]) {\n    j++;\n  }\n  while (l && l[i] < l[j]) {\n    k++;\n    i++;\n    j--;\n  }\n  return k === 0;\n};\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> monotonic([4, 1, 0, -10])\n * true\n * >>> monotonic([4, 1, 0, 10])\n * false\n */\nconst inc = monotonic;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> monotonic([4, 1, 0, -10])\n * false\n * >>> monotonic([4, 1, 0, 10])\n * true\n */\nconst dec = monotonic;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([])\n * false\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([])\n * true\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in decreasing order.\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([1])\n * false\n * >>> dec([])\n * true\n */\nconst dec = l => l.length === 0;\n\n/**\n * Returns true if the list elements are in increasing order.\n * >>> inc([1])\n * true\n * >>> inc([1])\n * true\n * >>> inc([])\n * false\n */\nconst inc = l => l.length === 0;\n\n/**\n * Returns true if the ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      if (j === l2.length) {\n        break\n      }\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  >>> getUnique(\n ...   [\n ...     {\n ...       name: 'Jack',\n ...       age: 30,\n ...       gender:'male',\n ...       friends: [\n ...         {\n ...           name: 'Jack',\n ...           age: 30,\n ...           gender:'male',\n ...           friends: [\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...           ],\n ...         },\n ...       ],\n ...     },\n ...     {\n ...       name: 'Jack',\n ...       age: 30,\n ...       gender:'male',\n ...       friends: [\n ...         {\n ...           name: 'Jack',\n ...           age: 30,\n ...           gender:'male',\n ...           friends: [\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...           ],\n ...         },\n ...       ],\n ...     },\n ...   ],\n ...   [\n ...     {\n ...       name: 'Jack',\n ...       age: 30,\n ...       gender:'male',\n ...       friends: [\n ...         {\n ...           name: 'Jack',\n ...           age: 30,\n ...           gender:'male',\n ...           friends: [\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...           ],\n ...         },\n ...       ],\n ...     },\n ...     {\n ...       name: 'Jack',\n ...       age: 30,\n ...       gender:'male',\n ...       friends: [\n ...         {\n ...           name: 'Jack',\n ...           age: 30,\n ...           gender:'male',\n ...           friends: [\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...             {\n ...               name: 'Jack',\n ...               age: 30,\n ...               gender:'male',\n ...             },\n ...           ],\n ...         },\n ...       ],\n ...     },\n ...   ],\n ... )\n  [\n    {\n      name: 'Jack',\n      age: 30,\n      gender:'male',\n      friends: [\n        {\n          name: 'Jack',\n          age: 30,\n          gender:'male',\n          friends: [\n            {\n              name: 'Jack',\n              age: 30,\n              gender:'male',\n              friends: [\n                {\n                  name: 'Jack',\n                  age: 30,\n                  gender:'male',\n                  friends: [\n                    {\n                      name: 'Jack',\n                      age: 30,\n                      gender:'male',\n                      friends: [\n                        {\n                          name: 'Jack',\n                          age: 30,\n                          gender:'male',\n                          friends: [\n                            {\n                              name: 'Jack',\n                              age: 30,\n                              gender:'male',\n                              friends: [\n                                {\n                                  name: 'Jack',\n                                  age: 30,\n                                  gender:'male',\n                                  friends: [\n                                    {\n                                      name: 'Jack',\n                                      age: 30,\n                                      gender:'male',\n                                      friends: [\n                                        {\n                                          name: 'Jack',\n                                          age: 30,\n                                          gender:'male',\n                                          friends: [\n                                            {\n                                              name: 'Jack',\n                                              age: 30,\n                                              gender:'male',\n                                              friends: [\n                                                {\n                                                  name: 'Jack',\n                                                  age: 30,\n                                                  gender:'male',\n                                                  friends: [\n                                                    {\n                                                      name: 'Jack',\n                                                      age: 30,\n                                                      gender:'male',\n                                                      friends: [\n                                                        {\n                                                          name: 'Jack',\n                                                          age: 30,\n                                                          gender:'male',\n                                                          friends: [\n                                                            {\n                                                              name: 'Jack',\n                                                              age: 30,\n                                                              gender:'male',\n                                                              friends: [\n                                                                {\n                                                                  name: 'Jack',\n                                                                  age: 30,\n                                                                  gender:'male',\n                                                                  friends: [\n                                                                    {\n                                                                        name: 'Jack',\n                                                                        age: 30,\n                                                                        gender:'male',\n                                                                        friends: [\n                                                                          {\n                                                                            name: 'Jack',\n                                                                            age: 30,\n                                                                            gender:'male',\n                                                                            friends: [\n                                                                              {\n                                                                                name: 'Jack',\n                                                                                age: 30,\n                                                                                gender:'male',\n                                                                                friends: [\n                                                                                  {\n                                                                                    name: 'Jack',\n                                                                                    age: 30,\n                                                                                    gender:'male',\n                                                                                    friends: [\n                                                                                      {\n                                                                                        name: 'Jack',\n                                                                                        age: 30,\n                                                                                        gender:'male',\n                                                                                        friends: [\n                                                                                          {\n                                                                                            name: 'Jack',\n                                                                                            age: 30,\n                                                                                            gender:'male',\n                                                                                            friends: [\n                                                                                              {\n                                                                                                name: 'Jack',\n                                                                                                age: 30,\n                                                                                                gender:'male',\n                                                                                                friends: [\n                                                                                                  ]\n                                                                                                },\n                                                                                                {\n                                                                                                  name: 'Jack',\n                                                                                                  age: 30,\n                                                                                                  gender:'male',\n                                                                                                  friends: [\n                                                                                                    {\n                                                                                                      name: 'Jack',\n                                                                                                      age: 30,\n                                                                                                      gender:'male',\n                                                                                                      friends: [\n                                                                                                        {\n                                                                                                          name: 'Jack',\n                                                                                                          age: 30,\n                                                                                                          gender:'male',\n                                                                                                          friends: [\n                                                                                                            {\n                                                                                                              name: 'Jack',\n                                                                                                              age: 30,\n                                                                                                              gender:'male',\n                                                                                                              friends: [\n                                                                                                                {\n                                                                                                                  name: 'Jack',\n                                                                                                                  age: 30,\n                                                                                                                  gender:'male',\n                                                                                                                  friends: [\n                                                                                                                    {\n                                                                                                                      name: 'Jack',\n                                                                ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a positive integer n, return true if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/6", "prompt": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const result = [];\n  paren_groups.forEach((group) => {\n    const group_res = group.match(/\\(([^()]+)\\)/g);\n    const group_levels = group_res[0].split(' ');\n    const group_levels_length = group_levels.length;\n    const group_levels_res = [];\n    for (let i = 0; i < group_levels_length; i++) {\n      const group_level = group_levels[i];\n      const group_level_res = group_level.match(/\\(([^()]+)\\)/g);\n      group_levels_res.push(group_level_res);\n    }\n    const group_levels_res_length = group_levels_res.length;\n    const group_levels_res_res = [];\n    for (let i = 0; i < group_levels_res_length; i++) {\n      const group_level_res = group_levels_res[i];\n      const group_level_res_res = group_level_res.map(\n        (level) => parseInt(level, 10)\n      );\n      group_levels_res_res.push(group_level_res_res);\n    }\n    const group_levels_res_res_length = group_levels_res_res.length;\n    const group_levels_res_res_res = [];\n    for (let i = 0; i < group_levels_res_res_length; i++) {\n      const group_level_res_res = group_levels_res_res[i];\n      const group_level_res_res_res = group_level_res_res_res[\n        group_levels_res_res_length - 1\n      ];\n      const group_level_res_res_res_res = group_level_res_res_res_res[\n        group_levels_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res = group_level_res_res_res_res_res[\n        group_levels_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res = group_level_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res_res = group_level_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res_res_res = group_level_res_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res_res_res_res_res = group_level_res_res_res_res_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_res_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res_res_res_res_res_res = group_level_res_res_res_res_res_res_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_res_res_res_res_res_res_res_res_length - 1\n      ];\n      const group_level_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res = group_level_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res[\n        group_levels_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the factorial of a number.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive2(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive3(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive4(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive5(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive6(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive7(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive8(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive9(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive10(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive11(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive12(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive13(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using recursion.\n * If n is 0, the factorial is 1.\n * If n is 1, the factorial is 1.\n * If n is greater than 1, the factorial is n * factorial(n - 1).\n */\nconst factorialRecursive14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return n * factorialRecursive14(n - 1);\n};\n\n/**\n * A function that returns the factorial of a number using ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = /\\(([^)]*)\\)/;\n  const bracketingMatch = bracketingRegex.exec(brackets);\n  return bracketingMatch && bracketingMatch.length > 1;\n};\n\n/**\n * Checks if a string is a valid email address.\n *\n * See https://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n *\n * Note: This implementation is inspired by https://stackoverflow.com/a/46156/9394\n *\n * @param {string} email - The email address to check.\n * @returns {boolean} - True if the email address is valid, false otherwise.\n */\nconst isValidEmailAddress = (email) => {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\n/**\n * Checks if a string is a valid phone number.\n *\n * See https://stackoverflow.com/questions/46155/validate-phone-number-in-javascript\n *\n * Note: This implementation is inspired by https://stackoverflow.com/a/46156/9394\n *\n * @param {string} phone - The phone number to check.\n * @returns {boolean} - True if the phone number is valid, false otherwise.\n */\nconst isValidPhoneNumber = (phone) => {\n  const re = /^((\\+?1\\s*(?:[.-]\\s*)?)?([\\(]{1}[0-9]{2,15})[\\)])?\\s*(ext|x|ext\\.?\\s?|ext\\.?\\s?)$/;\n  return re.test(phone);\n};\n\n/**\n * Checks if a string is a valid URL\n *\n * @param {string} url - The URL to check.\n * @returns {boolean} - True if the URL is valid, false otherwise.\n */\nconst isValidURL = (url) => {\n  const re = /^(https?|ftp|file):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/;\n  return re.test(url);\n};\n\n/**\n * Checks if a string is a valid UUID\n *\n * @param {string} uuid - The UUID to check.\n * @returns {boolean} - True if the UUID is valid, false otherwise.\n */\nconst isValidUUID = (uuid) => {\n  const re = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\n  return re.test(uuid);\n};\n\n/**\n * Checks if a string is a valid IP address.\n *\n * See https://stackoverflow.com/questions/46155/validate-ip-address-in-javascript\n *\n * @param {string} ip - The IP address to check.\n * @returns {boolean} - True if the IP address is valid, false otherwise.\n */\nconst isValidIP = (ip) => {\n  const re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return re.test(ip);\n};\n\n/**\n * Checks if a string is a valid IP address.\n *\n * See https://stackoverflow.com/questions/46155/validate-ip-address-in-javascript\n *\n * Note: This implementation is inspired by https://stackoverflow.com/a/46156/9394\n *\n * @param {string} ip - The IP address to check.\n * @returns {boolean} - True if the IP address is valid, false otherwise.\n */\nconst isValidIPv4 = (ip) => {\n  const re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return re.test(ip);\n};\n\n/**\n * Checks if a string is a valid IP address.\n *\n * See https://stackoverflow.com/questions/46155/validate-ip-address-in-javascript\n *\n * Note: This implementation is inspired by https://stackoverflow.com/a/46156/9394\n *\n * @param {string} ip - The IP address to check.\n * @returns {boolean} - True if the IP address is valid, false otherwise.\n */\nconst isValidIPv6 = (ip) => {\n  const re = /^(?:(?:[0-9a-f]{1,4}:){7,7}[0-9a-f]{1,4}|(?:[0-9a-f]{1,4}:){1,7}:|(?:[0-9a-f]{1,4}:){1,6}:[0-9a-f]{1,4}|(?:[0-9a-f]{1,4}:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < n) {\n    j = i\n    k = i + 1\n    while (j < n) {\n      res.push(\n        xs[j] * xs[k] - (xs[j + 1] * xs[k]) * xs[k]\n      )\n      j += 2\n      k += 1\n    }\n    i += 2\n  }\n  return res\n}\n\n/**\n * Calculate a polynomial coefficient.\n * x^3 + x^2 + x^1 = x\n * x^2 + x^1 + x^0 = 1\n * x^0 + x^1 + x^2 = 1\n * x^1 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^2 + x^1 + x^3 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^2 + x^1 = 1\n * x^3 + x^2 + x^2 = 1\n * x^3 + x^2 + x^3 = 1\n * x^3 + x^2 + x^0 = 1\n * x^3 + x^", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth element of the Fibonacci sequence that starts with 1 and ends with n.\n  >>> fibonacci(8)\n  3\n  >>> fibonacci(10)\n  8\n  >>> fibonacci(15)\n  13\n  >>> fibonacci(20)\n  21\n  >>> fibonacci(25)\n  34\n  >>> fibonacci(30)\n  55\n  >>> fibonacci(35)\n  89\n  >>> fibonacci(40)\n  144\n  >>> fibonacci(45)\n  233\n  >>> fibonacci(50)\n  377\n  >>> fibonacci(55)\n  610\n  >>> fibonacci(60)\n  987\n  >>> fibonacci(65)\n  1597\n  >>> fibonacci(70)\n  2584\n  >>> fibonacci(75)\n  4181\n  >>> fibonacci(80)\n  6765\n  >>> fibonacci(85)\n  10946\n  >>> fibonacci(90)\n  17711\n  >>> fibonacci(95)\n  28657\n  >>> fibonacci(100)\n  46368\n  >>> fibonacci(105)\n  75025\n  >>> fibonacci(110)\n  102334\n  >>> fibonacci(115)\n  130781\n  >>> fibonacci(120)\n  156013\n  >>> fibonacci(125)\n  181457\n  >>> fibonacci(130)\n  199069\n  >>> fibonacci(135)\n  222778\n  >>> fibonacci(140)\n  244233\n  >>> fibonacci(145)\n  277213\n  >>> fibonacci(150)\n  302457\n  >>> fibonacci(155)\n  336873\n  >>> fibonacci(160)\n  361103\n  >>> fibonacci(165)\n  392202\n  >>> fibonacci(170)\n  425293\n  >>> fibonacci(175)\n  467421\n  >>> fibonacci(180)\n  511851\n  >>> fibonacci(185)\n  543961\n  >>> fibonacci(190)\n  572251\n  >>> fibonacci(195)\n  608118\n  >>> fibonacci(200)\n  635721\n  >>> fibonacci(205)\n  670281\n  >>> fibonacci(210)\n  716441\n  >>> fibonacci(215)\n  737702\n  >>> fibonacci(220)\n  762040\n  >>> fibonacci(225)\n  796157\n  >>> fibonacci(230)\n  828331\n  >>> fibonacci(235)\n  874863\n  >>> fibonacci(240)\n  911903\n  >>> fibonacci(245)\n  949421\n  >>> fibonacci(250)\n  991461\n  >>> fibonacci(255)\n  1028293\n  >>> fibonacci(260) \n  1056851\n  >>> fibonacci(265)\n  1103721\n  >>> fibonacci(270)\n  1138391\n  >>> fibonacci(275)\n  1175293\n  >>> fibonacci(280)\n  1220851\n  >>> fibonacci(285)\n  1257421\n  >>> fibonacci(290)\n  1310863\n  >>> fibonacci(295)\n  1347286\n  >>> fibonacci(300)\n  1387903\n  >>> fibonacci(305)\n  1422203\n  >>> fibonacci(310)\n  1455863\n  >>> fibonacci(315)\n  1509421\n  >>> fibonacci(320)\n  1546571\n  >>> fibonacci(325)\n  1585293\n  >>> fibonacci(330)\n  1628791\n  >>> fibonacci(335)\n  1665281\n  >>> fibonacci(340)\n  1709421\n  >>> fibonacci(345)\n  1741461\n  >>> fibonacci(350)\n  1777703\n  >>> fibonacci(355)\n  1820851\n  >>> fibonacci(360)\n  1857421\n  >>> fibonacci(365)\n  1903721\n  >>> fibonacci(370)\n  1950863\n  >>> fibonacci(375)\n  1991461\n  >>> fibonacci(380)\n  2035293\n  >>> fibonacci(385)\n  2074286\n  >>> fibonacci(390)\n  21220851\n  >>> fibonacci(395)\n  2175741\n  >>> fibonacci(400)\n  2210863\n  >>> fibonacci(405)\n  2236571\n  >>> fibonacci(410)\n  2280293\n  >>> fibonacci(415)\n  2316851\n  >>> fibonacci(420)\n  2344293\n  >>> fibonacci(425)\n  2377031\n  >>> fibonacci(430)\n  2411903\n  >>> fibonacci(440)\n  2447286\n  >>> fibonacci(445)\n  2485293\n  >>> fibonacci(500)\n  2529863\n  >>> fibonacci(505)\n  2565281\n  >>> fibonacci(510)\n  2610863", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount wihch takes a string represneting\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('');\n  let reversedDigits = digits.reverse();\n  while (shift > 0) {\n    reversedDigits = reversedDigits.slice(0, shift).concat(reversedDigits.slice(shift, reversedDigits.length));\n    shift -= digits.length;\n  }\n  return reversedDigits.reverse().join('');\n};\n\n/**\n  Converts a string to a number by parsing it into an integer and returning\n  the result.  If the string cannot be parsed into a number, NaN is returned.\n  >>> parseInt('12')\n  12\n  >>> parseInt('12.3')\n  12\n  >>> parseInt('12.34')\n  NaN\n  >>> parseInt('12.34.5')\n  NaN\n  >>> parseInt('12.34.567')\n  NaN\n  >>> parseInt('12.34.567.89')\n  NaN\n  >>> parseInt('12.34.567.89.1')\n  NaN\n  >>> parseInt('12.34.567.89.10')\n  NaN\n  >>> parseInt('12.34.567.89.100')\n  NaN\n  >>> parseInt('12.34.567.89.1000')\n  NaN\n  >>> parseInt('12.34.567.89.10000')\n  NaN\n  >>> parseInt('12.34.567.89.100000')\n  NaN\n  >>> parseInt('12.34.567.89.1000000')\n  NaN\n  >>> parseInt('12.34.567.89.1M')\n  NaN\n  >>> parseInt('12.34.567.89.1E')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+100000000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+1000000000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.567.89.1E+10000000000000000000000000000000000000000000000000')\n  NaN\n  >>> parseInt('12.34.5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper and lower caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaa", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let index = 0;\n  let even = 0;\n  let smallestEven = 0;\n  let smallestEvenIndex = 0;\n  while (index < len) {\n    if (arr[index] % 2 === 0) {\n      even = arr[index];\n      index++;\n    } else {\n      smallestEven = arr[index];\n      smallestEvenIndex = index;\n    }\n  }\n  if (even === smallestEven) {\n    return [smallestEven, smallestEvenIndex];\n  }\n  return [];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = 0;\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = 0;\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDifference = function (nums) {\n  let diff = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += nums[i] - nums[i - 1];\n  }\n  return diff;\n};\n\n// https://leetcode.com/problems/find-the-product-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findProduct = function (nums) {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverage = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedian = function (nums) {\n  let mid = 0;\n  let len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > mid) {\n      mid = nums[i];\n      count += 1;\n    } else {\n      count += 1;\n    }\n  }\n  return mid / count;\n};\n\n// https://leetcode.com/problems/find-the-mode-of-the-numbers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMode = function (nums) {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > mode) {\n      mode = nums[i];\n      count += 1;\n    } else {\n      count += 1;\n    }\n  }\n  return mode / count;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMinII = function (nums) {\n  let min = 0;\n  let min = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxII = function (nums) {\n  let max = 0;\n  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-numbers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumII = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-the-numbers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDifferenceII = function (nums) {\n  let diff = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += nums[i] - nums[i - 1];\n    count += 1;\n  }\n  return diff;\n};\n\n// https://leetcode.com/problems/find-the-product-of-the-numbers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findProductII = function (nums) {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-numbers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverageII = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-the-numbers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianII = function (nums) {\n  let mid = 0;\n  let len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > mid) {\n      mid = nums[i];\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxFreq = 0;\n  let maxFreqIndex = 0;\n  let maxFreqFreq = 0;\n  let maxFreqFreqIndex = 0;\n  let maxFreqFreqFreq = 0;\n  let maxFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreq = 0;\n  let maxFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqFreqIndex = 0;\n  let maxFreqFreqFreqF", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Returns a list of all strings that do not contain given substring\n * >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c) => {\n  const side", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is greater than or equal the maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal to the maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum < maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is greater than or equal to the maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal to the maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum < maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n  }\n  return max <= w;\n};\n\n/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is greater than or equal to the maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  let maxWeight = 0;\n  let maxWeightSum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > maxWeightSum) {\n      max = sum;\n      maxWeight = i;\n      maxWeightSum = sum;\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the maximum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 2\n  largestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  smallestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst smallestChangeReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the maximum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 2\n  largestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst largestChangeReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  smallestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst smallestChangeReverseReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the maximum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 2\n  largestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst largestChangeReverseReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  smallestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst smallestChangeReverseReverseReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the maximum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 2\n  largestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst largestChangeReverseReverseReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  smallestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst smallestChangeReverseReverseReverseReverse = (arr) => {\n  let change = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > change) {\n      change = arr[i];\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers, ifnd the maximum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 2\n  largestChange([1, 2, 3, 1, 1]) == 1\n  */\nconst largestChangeReverseReverseReverse = (arr) => {\n  let change = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item!== lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list greater than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item!== lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list equal the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item === lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list not equal the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item!== lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list not equal the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item!== lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list not equal the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match;\n  for (let i = 0; i < lst1.length; i++) {\n    match = lst2.find(item => item === lst1[i]);\n    if (match) {\n      total += match.length;\n    }\n  }\n  return lst1.filter(item => item!== lst2[lst2.length - 1]);\n};\n\n/**\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list not equal the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = false;\n  let num = 3;\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime9 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime15 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime21 = true;\n  let isPrime23 = true;\n  let isPrime25 = true;\n  let isPrime27 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime33 = true;\n  let isPrime35 = true;\n  let isPrime37 = true;\n  let isPrime39 = true;\n  let isPrime41 = true;\n  let isPrime43 = true;\n  let isPrime45 = true;\n  let isPrime47 = true;\n  let isPrime49 = true;\n  let isPrime51 = true;\n  let isPrime53 = true;\n  let isPrime55 = true;\n  let isPrime57 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime63 = true;\n  let isPrime65 = true;\n  let isPrime67 = true;\n  let isPrime69 = true;\n  let isPrime71 = true;\n  let isPrime73 = true;\n  let isPrime75 = true;\n  let isPrime77 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime83 = true;\n  let isPrime85 = true;\n  let isPrime87 = true;\n  let isPrime89 = true;\n  let isPrime91 = true;\n  let isPrime93 = true;\n  let isPrime95 = true;\n  let isPrime97 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime105 = true;\n  let isPrime107 = true;\n  let isPrime109 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime115 = true;\n  let isPrime117 = true;\n  let isPrime119 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255 = true;\n  let isPrime257 = true;\n  let isPrime259 = true;\n  let isPrime261 = true;\n  let isPrime263 = true;\n  let isPrime265 = true;\n  let isPrime267 = true;\n  let isPrime269 = true;\n  let isPrime271 = true;\n  let isPrime273 = true;\n  let isPrime275 = true;\n  let isPrime277 = true;\n  let isPrime279 = true;\n  let isPrime281 = true;\n  let isPrime283 = true;\n  let isPrime285 = true;\n  let isPrime287 = true;\n  let isPrime289 = true;\n  let isPrime291 = true;\n  let isPrime293 = true;\n  let isPrime295 = true;\n  let isPrime297 = true;\n  let isPrime299 = true;\n  let isPrime301 = true;\n  let isPrime303 = true;\n  let isPrime305 = true;\n  let isPrime307 = true;\n  let isPrime309 = true;\n  let isPrime311 = true;\n  let isPrime313 = true;\n  let isPrime315 = true;\n  let isPrime317 = true;\n  let isPrime319 = true;\n  let isPrime321 = true;\n  let isPrime323 = true;\n  let isPrime325 = true;\n  let isPrime327 = true;\n  let isPrime329 = true;\n  let isPrime331 = true;\n  let isPrime333 = true;\n  let isPrime335 = true;\n  let isPrime337 = true;\n  let isPrime339 = true;\n  let isPrime341 = true;\n  let isPrime343 = true;\n  let isPrime345 = true;\n  let isPrime347 = true;\n  let isPrime349 = true;\n  let isPrime351 = true;\n  let isPrime353 = true;\n  let isPrime355 = true;\n  let isPrime357 = true;\n  let isPrime359 = true;\n  let isPrime361 = true;\n  let isPrime363 = true;\n  let isPrime365 = true;\n  let isPrime367 = true;\n  let isPrime369 = true;\n  let isPrime371 = true;\n  let isPrime373 = true;\n  let isPrime375 = true;\n  let isPrime377 = true;\n  let isPrime379 = true;\n  let isPrime381 = true;\n  let isPrime383 = true;\n  let isPrime385 = true;\n  let isPrime387 = true;\n  let isPrime389 = true;\n  let isPrime391 = true;\n  let isPrime393 = true;\n  let isPrime395", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": false, "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isSimple = true;\n  if (n % x === 0) {\n    isSimple = false;\n  }\n  return isSimple;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a prime\n  number greater than 1 and false in other cases.\n  x is a prime number greater than 1 if n>1 and n%x==0\n  For example:\n  isPrime(2) => true\n  isPrime(3) => true\n  isPrime(5) => false\n  isPrime(7) => false\n  isPrime(11) => false\n  isPrime(13) => false\n  isPrime(17) => true\n  isPrime(19) => true\n  isPrime(23) => true\n  isPrime(29) => true\n  isPrime(31) => true\n  isPrime(37) => true\n  isPrime(39) => true\n  isPrime(43) => true\n  isPrime(47) => true\n  isPrime(53) => true\n  isPrime(59) => true\n  isPrime(67) => true\n  isPrime(69) => true\n  isPrime(73) => true\n  isPrime(79) => true\n  isPrime(83) => true\n  isPrime(89) => true\n  isPrime(97) => true\n  isPrime(101) => true\n  isPrime(103) => true\n  isPrime(107) => true\n  isPrime(109) => true\n  isPrime(111) => true\n  isPrime(113) => true\n  isPrime(115) => true\n  isPrime(117) => true\n  isPrime(119) => true\n  isPrime(121) => true\n  isPrime(123) => true\n  isPrime(127) => true\n  isPrime(129) => true\n  isPrime(131) => true\n  isPrime(133) => true\n  isPrime(135) => true\n  isPrime(137) => true\n  isPrime(139) => true\n  isPrime(141) => true\n  isPrime(143) => true\n  isPrime(145) => true\n  isPrime(147) => true\n  isPrime(149) => true\n  isPrime(151) => true\n  isPrime(153) => true\n  isPrime(155) => true\n  isPrime(157) => true\n  isPrime(159) => true\n  isPrime(161) => true\n  isPrime(163) => true\n  isPrime(165) => true\n  isPrime(167) => true\n  isPrime(169) => true\n  isPrime(171) => true\n  isPrime(173) => true\n  isPrime(175) => true\n  isPrime(177) => true\n  isPrime(179) => true\n  isPrime(181) => true\n  isPrime(183) => true\n  isPrime(185) => true\n  isPrime(187) => true\n  isPrime(189) => true\n  isPrime(191) => true\n  isPrime(193) => true\n  isPrime(195) => true\n  isPrime(197) => true\n  isPrime(199) => true\n  isPrime(201) => true\n  isPrime(203) => true\n  isPrime(205) => true\n  isPrime(207) => true\n  isPrime(209) => true\n  isPrime(211) => true\n  isPrime(213) => true\n  isPrime(215) => true\n  isPrime(217) => true\n  isPrime(219) => true\n  isPrime(221) => true\n  isPrime(223) => true\n  isPrime(225) => true\n  isPrime(227) => true\n  isPrime(229) => true\n  isPrime(231) => true\n  isPrime(233) => true\n  isPrime(235) => true\n  isPrime(237) => true\n  isPrime(239) => true\n  isPrime(241) => true\n  isPrime(243) => true\n  isPrime(245) => true\n  isPrime(247) => true\n  isPrime(249) => true\n  isPrime(251) => true\n  isPrime(253) => true\n  isPrime(255) => true\n  isPrime(257) => true\n  isPrime(259) => true\n  isPrime(261) => true\n  isPrime(263) => true\n  isPrime(265) => true\n  isPrime(267) => true\n  isPrime(269) => true\n  isPrime(271) => true\n  isPrime(273) => true\n  isPrime(275) => true\n  isPrime(277) => true\n  isPrime(279) => true\n  isPrime(281) => true\n  isPrime(283) => true\n  isPrime(285) => true\n  isPrime(287) => true\n  isPrime(289) => true\n  isPrime(291) => true\n  isPrime(293) => true\n  isPrime(295) => true\n  isPrime(297) => true\n  isPrime(299) => true\n  isPrime(301) => true\n  isPrime(303) => true\n  isPrime(305) => true\n  isPrime(307) => true\n  isPrime(309) => true\n  isPrime(311) => true\n  isPrime(313) => true\n  isPrime(315) => true\n  isPrime(317) => true\n  isPrime(319) => true\n  isPrime(321) => true\n  isPrime(323) => true\n  isPrime(325) => true\n  isPrime(327) => true\n  isPrime(329) => true\n  isPrime(331) => true\n  isPrime(333) => true\n  isPrime(335) => true\n  isPrime(337) => true\n  isPrime(339) => true\n  isPrime(341) => true\n  isPrime(343) => true\n  isPrime(345) => true\n  isPrime(347) => true\n  isPrime(349) => true\n  isPrime(351) => true\n  isPrime(353) => true\n  isPrime(355) => true\n  isPrime(357) => true\n  isPrime(359) => true\n  isPrime(361) => true\n  isPrime(363) => true\n  isPrime(365) => true\n  isPrime(367) => true\n  isPrime(369) => true\n  isPrime(371) => true\n  isPrime(373) => true\n  isPrime(375) => true\n  isPrime(377) => true\n  isPrime(379) => true\n  isPrime(381) => true\n  isPrime(38", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube(a / 2);\n  }\n  if (a <= 9) {\n    return iscube(a / 3);\n  }\n  if (a <= 12) {\n    return iscube(a / 4);\n  }\n  if (a <= 15) {\n    return iscube(a / 5);\n  }\n  return false;\n};\n\n/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube2(a / 2);\n  }\n  if (a <= 9) {\n    return iscube2(a / 3);\n  }\n  if (a <= 12) {\n    return iscube2(a / 4);\n  }\n  if (a <= 15) {\n    return iscube2(a / 5);\n  }\n  return false;\n};\n\n/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube3(a / 2);\n  }\n  if (a <= 9) {\n    return iscube3(a / 3);\n  }\n  if (a <= 12) {\n    return iscube3(a / 4);\n  }\n  if (a <= 15) {\n    return iscube3(a / 5);\n  }\n  return false;\n};\n\n/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube4(a / 2);\n  }\n  if (a <= 9) {\n    return iscube4(a / 3);\n  }\n  if (a <= 12) {\n    return iscube4(a / 4);\n  }\n  if (a <= 15) {\n    return iscube4(a / 5);\n  }\n  return false;\n};\n\n/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube5(a / 2);\n  }\n  if (a <= 9) {\n    return iscube5(a / 3);\n  }\n  if (a <= 12) {\n    return iscube5(a / 4);\n  }\n  if (a <= 15) {\n    return iscube5(a / 5);\n  }\n  return false;\n};\n\n/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> true\n  iscube(7) ==> false\n  iscube(8) ==> true\n  iscube(9) ==> false\n  iscube(10) ==> true\n  iscube(11) ==> false\n  iscube(12) ==> true\n  iscube(13) ==> false\n  iscube(14) ==> true\n  iscube(15) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a <= 3) {\n    return true;\n  }\n  if (a <= 6) {\n    return iscube6(a / ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArr = num.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    let num = parseInt(numArr[i], 16);\n    if (num >= 1 && num <= 16) {\n      numStr += num;\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You have to write a function that receives a string and counts the number of uppercase letters.\n  Uppercase letters are A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n  For str = \"AABBCCCDDEEFF\" the output should be 3.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithZero = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 0;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithZero([], 1)\n  (0, 1)\n  >>> sumProductWithZero([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithOne = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 1;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithOne([], 1)\n  (0, 1)\n  >>> sumProductWithOne([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithTwo = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 2;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithTwo([], 1)\n  (0, 1)\n  >>> sumProductWithTwo([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithThree = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 3;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithThree([], 1)\n  (0, 1)\n  >>> sumProductWithThree([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithFour = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 4;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithFour([], 1)\n  (0, 1)\n  >>> sumProductWithFour([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithFive = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 5;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithFive([], 1)\n  (0, 1)\n  >>> sumProductWithFive([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithSix = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 6;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithSix([], 1)\n  (0, 1)\n  >>> sumProductWithSix([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithSeven = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 7;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithSeven([], 1)\n  (0, 1)\n  >>> sumProductWithSeven([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithEight = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 8;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithEight([], 1)\n  (0, 1)\n  >>> sumProductWithEight([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithNine = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 9;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithNine([], 1)\n  (0, 1)\n  >>> sumProductWithNine([2, 3, 4, 5], 2)\n  (4, 12)\n  */\nconst sumProductWithTen = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= 10;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProductWithTen([], 1)\n  (0, 1)\n  >>> sumProduct", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const length = s.length;\n  let isHappy = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 2; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const length = s.length;\n  let isPalindrome = true;\n  for (let i = 0; i < length - 3; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1) && s.charAt(i)!== s.charAt(i + 2) && s.charAt(i)!== s.charAt(i + 3)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*You are given a stirng s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are same.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalin", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade >= 4.0 && grade <= 3.7) {\n      letterGrades.push('A+');\n    } else if (grade >= 3.3 && grade <= 3.7) {\n      letterGrades.push('A');\n    } else if (grade >= 3.0 && grade <= 3.7) {\n      letterGrades.push('B+');\n    } else if (grade >= 2.7 && grade <= 3.7) {\n      letterGrades.push('B');\n    } else if (grade >= 2.3 && grade <= 3.7) {\n      letterGrades.push('B-');\n    } else if (grade >= 2.0 && grade <= 3.7) {\n      letterGrades.push('C+');\n    } else if (grade >= 1.7 && grade <= 3.7) {\n      letterGrades.push('C');\n    } else if (grade >= 1.3 && grade <= 3.7) {\n      letterGrades.push('C-');\n    } else if (grade >= 1.0 && grade <= 3.7) {\n      letterGrades.push('D+');\n    } else if (grade >= 0.7 && grade <= 3.7) {\n      letterGrades.push('D');\n    } else if (grade >= 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a string of\n  the letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0])\n  ==> 'A+B+C-D+E'\n  */\nconst letterGrades = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade >= 4.0 && grade <= 3.7) {\n      letterGrades.push('A+');\n    } else if (grade >= 3.3 && grade <= 3.7) {\n      letterGrades.push('A');\n    } else if (grade >= 3.0 && grade <= 3.7) {\n      letterGrades.push('B+');\n    } else if (grade >= 2.7 && grade <= 3.7) {\n      letterGrades.push('B');\n    } else if (grade >= 2.3 && grade <= 3.7) {\n      letterGrades.push('B-');\n    } else if (grade >= 2.0 && grade <= 3.7) {\n      letterGrades.push('C+');\n    } else if (grade >= 1.7 && grade <= 3.7) {\n      letterGrades.push('C');\n    } else if (grade >= 1.3 && grade <= 3.7) {\n      letterGrades.push('C-');\n    } else if (grade >= 1.0 && grade <= 3.7) {\n      letterGrades.push('D+');\n    } else if (grade >= 0.7 && grade <= 3.7) {\n      letterGrades.push('D');\n    } else if (grade >= 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  });\n  return letterGrades.join('');\n};\n\n/*\n  Write a function that takes an array of grades and returns a string of\n  the letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  letterGrades([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0])\n  ==> 'A+B+C-D+E'\n  */\nconst letterGradesExceptD = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade >= 4.0 && grade <= 3.7) {\n      letterGrades.push('A+');\n    } else if (grade >= 3.3 && grade <= 3.7) {\n      letterGrades.push('A');\n    } else if (grade >= 3.0 && grade <= 3.7) {\n      letterGrades.push('B+');\n    } else if (grade >= 2.7 && grade <= 3.7) {\n      letterGrades.push('B');\n    } else if (grade >= 2.3 && grade <= 3.7) {\n      letterGrades.push('B-');\n    } else if (grade >= 2.0 && grade <= 3.7) {\n      letterGrades.push('C+');\n    } else if (grade >= 1.7 && grade <= 3.7) {\n      letterGrades.push('C');\n    } else if (grade >= 1.3 && grade <= 3.7) {\n      letterGrades.push('C-');\n    } else if (grade >= 1.0 && grade <= 3.7) {\n      letterGrades.push('D+');\n    } else if (grade >= 0.7 && grade <= 3.7) {\n      letterGrades.push('D');\n    } else if (grade >= 0.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n  });\n  return letterGrades.join('');\n};\n\n/*\n  Write a function that takes an array of grades and returns a string of\n  the letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i <= length; i++){\n    if(string[i] === '1'){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst palindrome = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Write a function that takes a string and retursn true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let palindrome = true;\n  let length = string.length;\n  for(let i = length - 1; i >= 0; i--){\n    if(string[i]!== string[i + 1]){\n      palindrome", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst startsZeroEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst endsOneStarts = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst endsZeroStarts = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst endsOneEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst endsZeroEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroEnds = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneStarts = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroStarts = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneEndsZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroEndsZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneStartsZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroStartsZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroEndsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneStartsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst isZeroStartsOne = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n    if (i & 1) count++;\n    i >>= 1;\n  }\n  return count;\n};\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst isOneEndsZero = (n) => {\n  let count = 0;\n  let i = n;\n  while (i) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2!== 0);\n  let odd = lst.filter(x => x % 2 === 0);\n  return even.concat(odd);\n};\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOdd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArr91 = [];\n  let newStrArr92 = [];\n  let newStrArr93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrArr = antiShuffle(s);\n  let newStrArr1 = newStrArr.split(' ');\n  let newStrArr2 = newStrArr1.map((item, index) => {\n    if (index === 0) {\n      return item;\n    }\n    return newStrArr[index - 1];\n  });\n  let newStrArr3 = newStrArr2.join(' ');\n  return newStrArr3;\n};\n\n/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  rows.push(row)\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  rows.push(row)\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowss = (lst, x) => {\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  rows.push(row)\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowss = (lst, x) => {\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  rows.push(row)\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowss = (lst, x) => {\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, j])\n      i++\n      j++\n    } else {\n      row.push([i, j])\n      i++\n    }\n  }\n  rows.push(row)\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      i++\n      j++\n    } else {\n      i++\n      j++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice();\n  let sum = 0;\n  let index = 0;\n  let lastIndex = sortedArray.length - 1;\n  while (sortedArray[index] > 0) {\n    sum += sortedArray[index];\n    index++;\n  }\n  if (sum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  while (lastIndex > 0) {\n    sortedArray[lastIndex] = sortedArray[lastIndex - 1];\n    lastIndex--;\n  }\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its reverse sorted form.\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Note:\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Examples:\n * reverseArray([]) => []\n * reverseArray([5]) => [5]\n * reverseArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * reverseArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst reverseArray = (array) => {\n  let reversedArray = array.slice();\n  let sum = 0;\n  let index = 0;\n  let lastIndex = reversedArray.length - 1;\n  while (reversedArray[index] > 0) {\n    sum += reversedArray[index];\n    index++;\n  }\n  if (sum % 2 === 0) {\n    reversedArray.sort((a, b) => b - a);\n  } else {\n    reversedArray.sort((a, b) => a - b);\n  }\n  while (lastIndex > 0) {\n    reversedArray[lastIndex] = reversedArray[lastIndex - 1];\n    lastIndex--;\n  }\n  return reversedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its rotated form.\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Note:\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Examples:\n * rotateArray([]) => []\n * rotateArray([5]) => [5]\n * rotateArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * rotateArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst rotateArray = (array) => {\n  let rotatedArray = array.slice();\n  let sum = 0;\n  let index = 0;\n  let lastIndex = rotatedArray.length - 1;\n  while (rotatedArray[index] > 0) {\n    sum += rotatedArray[index];\n    index++;\n  }\n  if (sum % 2 === 0) {\n    rotatedArray.sort((a, b) => b - a);\n  } else {\n    rotatedArray.sort((a, b) => a - b);\n  }\n  while (lastIndex > 0) {\n    rotatedArray[lastIndex] = rotatedArray[lastIndex - 1];\n    lastIndex--;\n  }\n  return rotatedArray;\n};\n\n/**\n * Given an array of non-negative integers, return its mirrored form.\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Note:\n * If the given array is empty return an empty array.\n * If the given array has only one element, return that element.\n * If the given array has more than one element, return the array itself.\n * If the given array has more than one element and one of the elements is odd, return the array itself.\n * If the given array has more than one element and one of the elements is even, return the array after sorting,\n * you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n * or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n * Examples:\n * mirrorArray([]) => []\n * mirrorArray([5]) => [5]\n * mirrorArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * mirrorArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst mirrorArray = (array) => {\n  let mirroredArray = array.slice();\n  let sum = 0;\n  let index = 0;\n  let lastIndex = mirroredArray.length - 1;\n  while (mirroredArray[index] > 0) {\n    sum += mirroredArray[index];\n    index++;\n  }\n  if (sum % 2 === 0) {\n    mirroredArray.sort((a, b) => b - a);\n  } else {\n    mirroredArray.sort((a, b) => a - b);\n  }\n  while (lastIndex > 0) {\n    mirroredArray[lastIndex] = mirroredArray[lastIndex - 1];\n    lastIndex--;\n  }", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function decrypt that takes a string as an argument nda\n  returns a string decrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function rotate that takes a string as an argument nda\n  returns a string rotated with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  rotate('lm') returns 'hi'\n  rotate('ewhjklnop') returns 'asdfghjkl'\n  rotate('kj') returns 'gf'\n  rotate('ix') returns 'et'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function decrypt that takes a string as an argument nda\n  returns a string decrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function rotate that takes a string as an argument nda\n  returns a string rotated with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  rotate('lm') returns 'hi'\n  rotate('ewhjklnop') returns 'asdfghjkl'\n  rotate('kj') returns 'gf'\n  rotate('ix') returns 'et'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let nda = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    nda = alphabet.indexOf(s[i])\n    \n    for(let j = 0; j < nda; j++) {\n      rotated += alphabet[j] + alphabet[nda-j-1]\n    }\n  }\n  return rotated\n}\n\n/*Cerate a function decrypt that takes a string as an argument nda\n  returns a string decrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxLength = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueLength = 0;\n  let maxValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueLength = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueValueIndex = 0;\n  let maxValueValueValueLength = 0;\n  let maxValueValueValueValue = 0;\n  let maxValueValueValueValueIndex = 0;\n  let maxValueValueValueValueLength = 0;\n  let maxValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValueValueValueValueValueValueLength = 0;\n  let maxValueValueValueValueValueValueValueValue = 0;\n  let maxValueValueValueValueValueValueValueIndex = 0;\n  let maxValueValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  let minIndexVal = null;\n  let minValIndex = null;\n  let minValIndexVal = null;\n  let minValIndexIndex = null;\n  let minValIndexIndexVal = null;\n  let minValIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let minValIndexIndexIndexVal = null;\n  let minValIndexIndexIndexIndex = null;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = S.split('.');\n  boredom.forEach((word) => {\n    if (word.includes('?') || word.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntence", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isInt = (num) => typeof num === 'number' && isFinite(num) && num % 1 === 0;\n  const isNum = (num) => typeof num === 'number';\n  const isNumOrInt = (num) => isInt(num) || isNum(num);\n  const isNumOrNum = (num) => isNum(num) || isNumOrInt(num);\n  const isNumOrNumOrInt = (num) => isNumOrInt(num) || isNumOrNum(num);\n  const isNumOrNumOrNumOrInt = (num) => isNumOrNumOrInt(num) || isNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num) || isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt(num);\n  const isNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrNumOrInt = (num) => isNumOrNumOrNumOrNumOrNumOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n  let vowelsIndex197 = 0;\n  let vowelsIndex198 = 0;\n  let vowelsIndex199 = 0;\n  let vowelsIndex200 = 0;\n  let vowelsIndex201 = 0;\n  let vowelsIndex202 = 0;\n  let vowelsIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let sumDigit = 0;\n  let maxDigitSum = 0;\n  let sumDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let sumDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let sumDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let sumDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let sumDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let sumDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let sumDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let sumDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let sumDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let sumDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let sumDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let sumDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let sumDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let sumDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let sumDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let sumDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let sumDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let sumDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let sumDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let sumDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let sumDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let sumDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let sumDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let sumDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let sumDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let sumDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let sumDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let sumDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let sumDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let sumDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let sumDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let sumDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let sumDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let sumDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let sumDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let sumDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let sumDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let sumDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let sumDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let sumDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let sumDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let sumDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let sumDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let sumDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let sumDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let sumDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let sumDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let sumDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let sumDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let sumDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let sumDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let sumDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let sumDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let sumDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let sumDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let sumDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let sumDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let sumDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let sumDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let sumDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let sumDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let sumDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let sumDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let sumDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let sumDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let sumDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let sumDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let sumDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let sumDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let sumDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let sumDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let sumDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let sumDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let sumDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let sumDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let sumDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let sumDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let sumDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let sumDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let sumDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let sumDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let sumDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let sumDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let sumDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let sumDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let sumDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let sumDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let sumDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let sumDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let sumDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let sumDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let sumDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let sumDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let sumDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let sumDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let sumDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => typeof dict[key] ==='string' && dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => typeof dict[key] ==='string' && dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/**\n * Given a string, return true if the string is empty or contains only whitespace.\n * Examples:\n  isEmptyOrWhitespace(\"  \") should return true.\n  isEmptyOrWhitespace(\"  \\t\") should return true.\n  isEmptyOrWhitespace(\"  \\t\\n  \\t\") should return true.\n  isEmptyOrWhitespace(\"  \\t\\n  \\t\\n  \\t\") should return true.\n  isEmptyOrWhitespace(\"  \\t\\n  \\t\\n  \\t\\n  \\t\") should return true.\n  isEmptyOrWhitespace(\"  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n  \\t\\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i)\n      i++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer and returns the largest prime number that is\n  greater than or equal to n.\n  for example:\n  primeNumberGreaterThan(5) => 5\n  primeNumberGreaterThan(11) => 11\n  primeNumberGreaterThan(0) => 0\n  primeNumberGreaterThan(20) => 20\n  primeNumberGreaterThan(1) => 1\n  primeNumberGreaterThan(18) => 18\n  */\nconst primeNumberGreaterThan = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i)\n      i++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer and returns the largest prime number that is\n  greater than or equal to n.\n  for example:\n  primeNumberGreaterThanOrEqual(5) => 5\n  primeNumberGreaterThanOrEqual(11) => 11\n  primeNumberGreaterThanOrEqual(0) => 0\n  primeNumberGreaterThanOrEqual(20) => 20\n  primeNumberGreaterThanOrEqual(1) => 1\n  primeNumberGreaterThanOrEqual(18) => 18\n  */\nconst primeNumberGreaterThanOrEqual = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i)\n      i++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer and returns the largest prime number that is\n  less than or equal to n.\n  for example:\n  primeNumberLessThan(5) => 5\n  primeNumberLessThan(11) => 11\n  primeNumberLessThan(0) => 0\n  primeNumberLessThan(20) => 20\n  primeNumberLessThan(1) => 1\n  primeNumberLessThan(18) => 18\n  */\nconst primeNumberLessThan = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i)\n      i++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer and returns the largest prime number that is\n  less than or equal to n.\n  for example:\n  primeNumberLessThanOrEqual(5) => 5\n  primeNumberLessThanOrEqual(11) => 11\n  primeNumberLessThanOrEqual(0) => 0\n  primeNumberLessThanOrEqual(20) => 20\n  primeNumberLessThanOrEqual(1) => 1\n  primeNumberLessThanOrEqual(18) => 18\n  */\nconst primeNumberLessThanOrEqual = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i)\n      i++\n    }\n  }\n  return arr\n}\n\n/*Implement a function that takes an integer and returns the largest prime number that is\n  greater than or equal to n and less than or equal to n.\n  for example:\n  primeNumberBetween(5,10) => 10\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,20) => 20\n  primeNumberBetween(11,", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the square of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  square(148, 412) should return 412.\n  square(19, 28) should return 428.\n  square(2020, 1851) should return 0.\n  square(14,-15) should return 40.\n  */\nconst square = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs2 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs3 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs4 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs5 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs6 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs7 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs8 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs9 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs10 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs11 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs12 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 428.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 40.\n  */\nconst abs13 = (a, b) => {\n  const product = multiply(a, b);\n  return product;\n};\n\n/*Complete the function that tkaes two inteegrs and returns \n  the absolute value of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Given a string, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      lower++;\n    }\n  }\n  return lower;\n};\n\n/*\n  Given a string, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Given a string, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      lower++;\n    }\n  }\n  return lower;\n};\n\n/*\n  Given a string, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Given a string, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      lower++;\n    }\n  }\n  return lower;\n};\n\n/*\n  Given a string, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Given a string, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      lower++;\n    }\n  }\n  return lower;\n};\n\n/*\n  Given a string, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upper++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      upper++;\n    }\n  }\n  return upper;\n};\n\n/*\n  Given a string, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      lower++;\n    }\n  }\n  for (let i = 0; i < s.length - 1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\").map(Number);\n  return Math.max(integer1, integer2);\n};\n\n/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15", "passed": 0, "run_status": 1}
