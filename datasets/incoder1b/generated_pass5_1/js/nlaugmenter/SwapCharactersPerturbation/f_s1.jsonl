{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closest = Number.MAX_VALUE;\n  let closestIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (Math.abs(number - closest) < threshold) {\n      closest = number;\n      closestIndex = i;\n    }\n  }\n  return closestIndex >= 0;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n */\nconst unique = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n * >>> unique([1, 1, 2])\n * false\n */\nconst uniqueArray = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> uniqueArray([1, 2, 3])\n * true\n * >>> uniqueArray([1, 1, 1])\n * false\n * >>> uniqueArray([1, 1, 2])\n * false\n * >>> uniqueArray([1, 1, 2])\n * false\n * >>> uniqueArray([1, 1, 2])\n * false\n * >>> uniqueArray([1, 1, 2])\n * false\n */\nconst uniqueArrayArray = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> uniqueArrayArray([1, 2, 3])\n * true\n * >>> uniqueArrayArray([1, 1, 1])\n * false\n * >>> uniqueArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArray([1, 1, 2])\n * false\n */\nconst uniqueArrayArrayArray = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> uniqueArrayArrayArray([1, 2, 3])\n * true\n * >>> uniqueArrayArrayArray([1, 1, 1])\n * false\n * >>> uniqueArrayArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArrayArray([1, 1, 2])\n * false\n */\nconst uniqueArrayArrayArrayArray = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> uniqueArrayArrayArrayArray([1, 2, 3])\n * true\n * >>> uniqueArrayArrayArrayArray([1, 1, 1])\n * false\n * >>> uniqueArrayArrayArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArrayArrayArray([1, 1, 2])\n * false\n * >>> uniqueArrayArrayArrayArray([1, 1, 2])\n * false\n */\nconst uniqueArrayArrayArrayArrayArray = (arr) => {\n  const seen = {};\n  return arr.filter(\n    (_, index) =>!seen.hasOwnProperty(index) && seen.hasOwnProperty(index + 1)\n  ).length === 1;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * If array contains duplicate elements, returns false.\n * If array contains empty array, returns true.\n * If array contains only one element, returns true.\n * If array contains more than one element, returns false.\n *\n * >>> uniqueArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArrayArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      if (j === paren_group.length - 1) {\n        paren_group_string += paren_group[j];\n      } else {\n        paren_group_string += paren_group[j] +'';\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string of parentheses, return the string that encloses them.\n  >>> parenStringpassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let palindrome = '';\n  let suffix = '';\n  let reversedString = '';\n  let palindromeLength = 0;\n  let palindromeLength2 = 0;\n  let palindromeLength3 = 0;\n  let palindromeLength4 = 0;\n  let palindromeLength5 = 0;\n  let palindromeLength6 = 0;\n  let palindromeLength7 = 0;\n  let palindromeLength8 = 0;\n  let palindromeLength9 = 0;\n  let palindromeLength10 = 0;\n  let palindromeLength11 = 0;\n  let palindromeLength12 = 0;\n  let palindromeLength13 = 0;\n  let palindromeLength14 = 0;\n  let palindromeLength15 = 0;\n  let palindromeLength16 = 0;\n  let palindromeLength17 = 0;\n  let palindromeLength18 = 0;\n  let palindromeLength19 = 0;\n  let palindromeLength20 = 0;\n  let palindromeLength21 = 0;\n  let palindromeLength22 = 0;\n  let palindromeLength23 = 0;\n  let palindromeLength24 = 0;\n  let palindromeLength25 = 0;\n  let palindromeLength26 = 0;\n  let palindromeLength27 = 0;\n  let palindromeLength28 = 0;\n  let palindromeLength29 = 0;\n  let palindromeLength30 = 0;\n  let palindromeLength31 = 0;\n  let palindromeLength32 = 0;\n  let palindromeLength33 = 0;\n  let palindromeLength34 = 0;\n  let palindromeLength35 = 0;\n  let palindromeLength36 = 0;\n  let palindromeLength37 = 0;\n  let palindromeLength38 = 0;\n  let palindromeLength39 = 0;\n  let palindromeLength40 = 0;\n  let palindromeLength41 = 0;\n  let palindromeLength42 = 0;\n  let palindromeLength43 = 0;\n  let palindromeLength44 = 0;\n  let palindromeLength45 = 0;\n  let palindromeLength46 = 0;\n  let palindromeLength47 = 0;\n  let palindromeLength48 = 0;\n  let palindromeLength49 = 0;\n  let palindromeLength50 = 0;\n  let palindromeLength51 = 0;\n  let palindromeLength52 = 0;\n  let palindromeLength53 = 0;\n  let palindromeLength54 = 0;\n  let palindromeLength55 = 0;\n  let palindromeLength56 = 0;\n  let palindromeLength57 = 0;\n  let palindromeLength58 = 0;\n  let palindromeLength59 = 0;\n  let palindromeLength60 = 0;\n  let palindromeLength61 = 0;\n  let palindromeLength62 = 0;\n  let palindromeLength63 = 0;\n  let palindromeLength64 = 0;\n  let palindromeLength65 = 0;\n  let palindromeLength66 = 0;\n  let palindromeLength67 = 0;\n  let palindromeLength68 = 0;\n  let palindromeLength69 = 0;\n  let palindromeLength70 = 0;\n  let palindromeLength71 = 0;\n  let palindromeLength72 = 0;\n  let palindromeLength73 = 0;\n  let palindromeLength74 = 0;\n  let palindromeLength75 = 0;\n  let palindromeLength76 = 0;\n  let palindromeLength77 = 0;\n  let palindromeLength78 = 0;\n  let palindromeLength79 = 0;\n  let palindromeLength80 = 0;\n  let palindromeLength81 = 0;\n  let palindromeLength82 = 0;\n  let palindromeLength83 = 0;\n  let palindromeLength84 = 0;\n  let palindromeLength85 = 0;\n  let palindromeLength86 = 0;\n  let palindromeLength87 = 0;\n  let palindromeLength88 = 0;\n  let palindromeLength89 = 0;\n  let palindromeLength90 = 0;\n  let palindromeLength91 = 0;\n  let palindromeLength92 = 0;\n  let palindromeLength93 = 0;\n  let palindromeLength94 = 0;\n  let palindromeLength95 = 0;\n  let palindromeLength96 = 0;\n  let palindromeLength97 = 0;\n  let palindromeLength98 = 0;\n  let palindromeLength99 = 0;\n  let palindromeLength100 = 0;\n  let palindromeLength101 = 0;\n  let palindromeLength102 = 0;\n  let palindromeLength103 = 0;\n  let palindromeLength104 = 0;\n  let palindromeLength105 = 0;\n  let palindromeLength106 = 0;\n  let palindromeLength107 = 0;\n  let palindromeLength108 = 0;\n  let palindromeLength109 = 0;\n  let palindromeLength110 = 0;\n  let palindromeLength111 = 0;\n  let palindromeLength112 = 0;\n  let palindromeLength113 = 0;\n  let palindromeLength114 = 0;\n  let palindromeLength115 = 0;\n  let palindromeLength116 = 0;\n  let palindromeLength117 = 0;\n  let palindromeLength118 = 0;\n  let palindromeLength119 = 0;\n  let palindromeLength120 = 0;\n  let palindromeLength121 = 0;\n  let palindromeLength122 = 0;\n  let palindromeLength123 = 0;\n  let palindromeLength124 = 0;\n  let palindromeLength125 = 0;\n  let palindromeLength126 = 0;\n  let palindromeLength127 = 0;\n  let palindromeLength128 = 0;\n  let palindromeLength129 = 0;\n  let palindromeLength130 = 0;\n  let palindromeLength131 = 0;\n  let palindromeLength132 = 0;\n  let palindromeLength133 = 0;\n  let palindromeLength134 = 0;\n  let palindromeLength135 = 0;\n  let palindromeLength136 = 0;\n  let palindromeLength137 = 0;\n  let palindromeLength138 = 0;\n  let palindromeLength139 = 0;\n  let palindromeLength140 = 0;\n  let palindromeLength141 = 0;\n  let palindromeLength142 = 0;\n  let palindromeLength143 = 0;\n  let palindromeLength144 = 0;\n  let palindromeLength145 = 0;\n  let palindromeLength146 = 0;\n  let palindromeLength147 = 0;\n  let palindromeLength148 = 0;\n  let palindromeLength149 = 0;\n  let palindromeLength150 = 0;\n  let palindromeLength151 = 0;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile3 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile4 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile5 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile6 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile7 = (n) => {\n  let level = [];\n  let levels = [];\n  let nxt = 0;\n  let eevn = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      levels.push(level);\n      level = [];\n    }\n    nxt = i + 1;\n    eevn = nxt;\n    if (nxt % 2 === 0) {\n      levels.push(nxt);\n      nxt = 0;\n    }\n    i++;\n  }\n  levels.push(level);\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray2 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray3 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray4 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray5 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray6 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray7 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray8 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray9 = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into words and return an array of the words. \n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = 0;\n  let num32 = 0;\n  let num33 = 0;\n  let num34 = 0;\n  let num35 = 0;\n  let num36 = 0;\n  let num37 = 0;\n  let num38 = 0;\n  let num39 = 0;\n  let num40 = 0;\n  let num41 = 0;\n  let num42 = 0;\n  let num43 = 0;\n  let num44 = 0;\n  let num45 = 0;\n  let num46 = 0;\n  let num47 = 0;\n  let num48 = 0;\n  let num49 = 0;\n  let num50 = 0;\n  let num51 = 0;\n  let num52 = 0;\n  let num53 = 0;\n  let num54 = 0;\n  let num55 = 0;\n  let num56 = 0;\n  let num57 = 0;\n  let num58 = 0;\n  let num59 = 0;\n  let num60 = 0;\n  let num61 = 0;\n  let num62 = 0;\n  let num63 = 0;\n  let num64 = 0;\n  let num65 = 0;\n  let num66 = 0;\n  let num67 = 0;\n  let num68 = 0;\n  let num69 = 0;\n  let num70 = 0;\n  let num71 = 0;\n  let num72 = 0;\n  let num73 = 0;\n  let num74 = 0;\n  let num75 = 0;\n  let num76 = 0;\n  let num77 = 0;\n  let num78 = 0;\n  let num79 = 0;\n  let num80 = 0;\n  let num81 = 0;\n  let num82 = 0;\n  let num83 = 0;\n  let num84 = 0;\n  let num85 = 0;\n  let num86 = 0;\n  let num87 = 0;\n  let num88 = 0;\n  let num89 = 0;\n  let num90 = 0;\n  let num91 = 0;\n  let num92 = 0;\n  let num93 = 0;\n  let num94 = 0;\n  let num95 = 0;\n  let num96 = 0;\n  let num97 = 0;\n  let num98 = 0;\n  let num99 = 0;\n  let num100 = 0;\n  let num101 = 0;\n  let num102 = 0;\n  let num103 = 0;\n  let num104 = 0;\n  let num105 = 0;\n  let num106 = 0;\n  let num107 = 0;\n  let num108 = 0;\n  let num109 = 0;\n  let num110 = 0;\n  let num111 = 0;\n  let num112 = 0;\n  let num113 = 0;\n  let num114 = 0;\n  let num115 = 0;\n  let num116 = 0;\n  let num117 = 0;\n  let num118 = 0;\n  let num119 = 0;\n  let num120 = 0;\n  let num121 = 0;\n  let num122 = 0;\n  let num123 = 0;\n  let num124 = 0;\n  let num125 = 0;\n  let num126 = 0;\n  let num127 = 0;\n  let num128 = 0;\n  let num129 = 0;\n  let num130 = 0;\n  let num131 = 0;\n  let num132 = 0;\n  let num133 = 0;\n  let num134 = 0;\n  let num135 = 0;\n  let num136 = 0;\n  let num137 = 0;\n  let num138 = 0;\n  let num139 = 0;\n  let num140 = 0;\n  let num141 = 0;\n  let num142 = 0;\n  let num143 = 0;\n  let num144 = 0;\n  let num145 = 0;\n  let num146 = 0;\n  let num147 = 0;\n  let num148 = 0;\n  let num149 = 0;\n  let num150 = 0;\n  let num151 = 0;\n  let num152 = 0;\n  let num153 = 0;\n  let num154 = 0;\n  let num155 = 0;\n  let num156 = 0;\n  let num157 = 0;\n  let num158 = 0;\n  let num159 = 0;\n  let num160 = 0;\n  let num161 = 0;\n  let num162 = 0;\n  let num163 = 0;\n  let num164 = 0;\n  let num165 = 0;\n  let num166 = 0;\n  let num167 = 0;\n  let num168 = 0;\n  let num169 = 0;\n  let num170 = 0;\n  let num171 = 0;\n  let num172 = 0;\n  let num173 = 0;\n  let num174 = 0;\n  let num175 = 0;\n  let num176 = 0;\n  let num177 = 0;\n  let num178 = 0;\n  let num179 = 0;\n  let num180 = 0;\n  let num181 = 0;\n  let num182 = 0;\n  let num183 = 0;\n  let num184 = 0;\n  let num185 = 0;\n  let num186 = 0;\n  let num187 = 0;\n  let num188 = 0;\n  let num189 = 0;\n  let num190 = 0;\n  let num191 = 0;\n  let num192 = 0;\n  let num193 = 0;\n  let num194 = 0;\n  let num195 = 0;\n  let num196 = 0;\n  let num197 = 0;\n  let num198 = 0;\n  let num199 = 0;\n  let num200 = 0;\n  let num201 = 0;\n  let num202 = 0;\n  let num203 = 0;\n  let num204 = 0;\n  let num205 = 0;\n  let num206 = 0;\n  let num207 = 0;\n  let num208 = 0;\n  let num209 = 0;\n  let num210 = 0;\n  let num211 = 0;\n  let num212 = 0;\n  let num213 = 0;\n  let num214 = 0;\n  let num215 = 0;\n  let num216 = 0;\n  let num217 = 0;\n  let num218 = 0;\n  let num219 = 0;\n  let num220 = 0;\n  let num221 = 0;\n  let num222 = 0;\n  let num223 = 0;\n  let num224 = 0;\n  let num225 = 0;\n  let num226 = 0;\n  let num227 = 0;\n  let num228 = 0;\n  let num229 = 0;\n  let num230 = 0;\n  let num231 = 0;\n  let num232 = 0;\n  let num233 = 0;\n  let num234 = 0;\n  let num235 = 0;\n  let num236 = 0;\n  let num237 = 0;\n  let num238 = 0;\n  let num239 = 0;\n  let num240 = 0;\n  let num241 = 0;\n  let num242 = 0;\n  let num243 = 0;\n  let num244 = 0;\n  let num245 = 0;\n  let num246 = 0;\n  let num247 = 0;\n  let num248 = 0;\n  let num249 = 0;\n  let num250 = 0;\n  let num251 = 0;\n  let num252 = 0;\n  let num253 = 0;\n  let num254 = 0;\n  let num255 = 0;\n  let num256 = 0;\n  let num257 = 0;\n  let num258 = 0;\n  let num259 = 0;\n  let num260 = 0;\n  let num261 = 0;\n  let num262 = 0;\n  let num263 = 0;\n  let num264 = 0;\n  let num265 = 0;\n  let num266 = 0;\n  let num267 = 0;\n  let num268 = 0;\n  let num269 = 0;\n  let num270 = 0;\n  let num271 = 0;\n  let num272 = 0;\n  let num273 = 0;\n  let num274 = 0;\n  let num275 = 0;\n  let num276 = 0;\n  let num277 = 0;\n  let num278 = 0;\n  let num279 = 0;\n  let num280 = 0;\n  let num281 = 0;\n  let num282 = 0;\n  let num283 = 0;\n  let num284 = 0;\n  let num285 = 0;\n  let num286 = 0;\n  let num287 = 0;\n  let num288 = 0;\n  let num289 = 0;\n  let num290 = 0;\n  let num291 = 0;\n  let num292 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let binNum = 0;\n  let binNumStr = \"\";\n  let binNumStr2 = \"0\";\n  let binNumStr3 = \"0\";\n  let binNumStr4 = \"0\";\n  let binNumStr5 = \"0\";\n  let binNumStr6 = \"0\";\n  let binNumStr7 = \"0\";\n  let binNumStr8 = \"0\";\n  let binNumStr9 = \"0\";\n  let binNumStr10 = \"0\";\n  let binNumStr11 = \"0\";\n  let binNumStr12 = \"0\";\n  let binNumStr13 = \"0\";\n  let binNumStr14 = \"0\";\n  let binNumStr15 = \"0\";\n  let binNumStr16 = \"0\";\n  let binNumStr17 = \"0\";\n  let binNumStr18 = \"0\";\n  let binNumStr19 = \"0\";\n  let binNumStr20 = \"0\";\n  let binNumStr21 = \"0\";\n  let binNumStr22 = \"0\";\n  let binNumStr23 = \"0\";\n  let binNumStr24 = \"0\";\n  let binNumStr25 = \"0\";\n  let binNumStr26 = \"0\";\n  let binNumStr27 = \"0\";\n  let binNumStr28 = \"0\";\n  let binNumStr29 = \"0\";\n  let binNumStr30 = \"0\";\n  let binNumStr31 = \"0\";\n  let binNumStr32 = \"0\";\n  let binNumStr33 = \"0\";\n  let binNumStr34 = \"0\";\n  let binNumStr35 = \"0\";\n  let binNumStr36 = \"0\";\n  let binNumStr37 = \"0\";\n  let binNumStr38 = \"0\";\n  let binNumStr39 = \"0\";\n  let binNumStr40 = \"0\";\n  let binNumStr41 = \"0\";\n  let binNumStr42 = \"0\";\n  let binNumStr43 = \"0\";\n  let binNumStr44 = \"0\";\n  let binNumStr45 = \"0\";\n  let binNumStr46 = \"0\";\n  let binNumStr47 = \"0\";\n  let binNumStr48 = \"0\";\n  let binNumStr49 = \"0\";\n  let binNumStr50 = \"0\";\n  let binNumStr51 = \"0\";\n  let binNumStr52 = \"0\";\n  let binNumStr53 = \"0\";\n  let binNumStr54 = \"0\";\n  let binNumStr55 = \"0\";\n  let binNumStr56 = \"0\";\n  let binNumStr57 = \"0\";\n  let binNumStr58 = \"0\";\n  let binNumStr59 = \"0\";\n  let binNumStr60 = \"0\";\n  let binNumStr61 = \"0\";\n  let binNumStr62 = \"0\";\n  let binNumStr63 = \"0\";\n  let binNumStr64 = \"0\";\n  let binNumStr65 = \"0\";\n  let binNumStr66 = \"0\";\n  let binNumStr67 = \"0\";\n  let binNumStr68 = \"0\";\n  let binNumStr69 = \"0\";\n  let binNumStr70 = \"0\";\n  let binNumStr71 = \"0\";\n  let binNumStr72 = \"0\";\n  let binNumStr73 = \"0\";\n  let binNumStr74 = \"0\";\n  let binNumStr75 = \"0\";\n  let binNumStr76 = \"0\";\n  let binNumStr77 = \"0\";\n  let binNumStr78 = \"0\";\n  let binNumStr79 = \"0\";\n  let binNumStr80 = \"0\";\n  let binNumStr81 = \"0\";\n  let binNumStr82 = \"0\";\n  let binNumStr83 = \"0\";\n  let binNumStr84 = \"0\";\n  let binNumStr85 = \"0\";\n  let binNumStr86 = \"0\";\n  let binNumStr87 = \"0\";\n  let binNumStr88 = \"0\";\n  let binNumStr89 = \"0\";\n  let binNumStr90 = \"0\";\n  let binNumStr91 = \"0\";\n  let binNumStr92 = \"0\";\n  let binNumStr93 = \"0\";\n  let binNumStr94 = \"0\";\n  let binNumStr95 = \"0\";\n  let binNumStr96 = \"0\";\n  let binNumStr97 = \"0\";\n  let binNumStr98 = \"0\";\n  let binNumStr99 = \"0\";\n  let binNumStr100 = \"0\";\n  let binNumStr101 = \"0\";\n  let binNumStr102 = \"0\";\n  let binNumStr103 = \"0\";\n  let binNumStr104 = \"0\";\n  let binNumStr105 = \"0\";\n  let binNumStr106 = \"0\";\n  let binNumStr107 = \"0\";\n  let binNumStr108 = \"0\";\n  let binNumStr109 = \"0\";\n  let binNumStr110 = \"0\";\n  let binNumStr111 = \"0\";\n  let binNumStr112 = \"0\";\n  let binNumStr113 = \"0\";\n  let binNumStr114 = \"0\";\n  let binNumStr115 = \"0\";\n  let binNumStr116 = \"0\";\n  let binNumStr117 = \"0\";\n  let binNumStr118 = \"0\";\n  let binNumStr119 = \"0\";\n  let binNumStr120 = \"0\";\n  let binNumStr121 = \"0\";\n  let binNumStr122 = \"0\";\n  let binNumStr123 = \"0\";\n  let binNumStr124 = \"0\";\n  let binNumStr125 = \"0\";\n  let binNumStr126 = \"0\";\n  let binNumStr127 = \"0\";\n  let binNumStr128 = \"0\";\n  let binNumStr129 = \"0\";\n  let binNumStr130 = \"0\";\n  let binNumStr131 = \"0\";\n  let binNumStr132 = \"0\";\n  let binNumStr133 = \"0\";\n  let binNumStr134 = \"0\";\n  let binNumStr135 = \"0\";\n  let binNumStr136 = \"0\";\n  let binNumStr137 = \"0\";\n  let binNumStr138 = \"0\";\n  let binNumStr139 = \"0\";\n  let binNumStr140 = \"0\";\n  let binNumStr141 = \"0\";\n  let binNumStr142 = \"0\";\n  let binNumStr143 = \"0\";\n  let binNumStr144 = \"0\";\n  let binNumStr145 = \"0\";\n  let binNumStr146 = \"0\";\n  let binNumStr147 = \"0\";\n  let binNumStr148 = \"0\";\n  let binNumStr149 = \"0\";\n  let binNumStr150 = \"0\";\n  let binNumStr151 = \"0\";\n  let binNumStr152 = \"0\";\n  let binNumStr153 = \"0\";\n  let binNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      result.push(x[i])\n      i++\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst oddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      result.push(x[i])\n      i++\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst evenDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      result.push(x[i])\n      i++\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst uniqueOddEvenDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      if (x[i] % 2 === 1) {\n        if (result.length === 0) {\n          result.push(x[i])\n        }\n        result.push(x[i])\n        i++\n      } else {\n        if (result.length === 0) {\n          result.push(x[i])\n        }\n        j++\n      }\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueOddEvenDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      if (x[i] % 2 === 1) {\n        if (x[i] % 2 === 1) {\n          if (result.length === 0) {\n            result.push(x[i])\n          }\n          result.push(x[i])\n          i++\n        } else {\n          if (result.length === 0) {\n            result.push(x[i])\n          }\n          j++\n        }\n      } else {\n        if (result.length === 0) {\n          result.push(x[i])\n        }\n        j++\n      }\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueOddEvenOddDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst uniqueOddEvenOddOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      if (x[i] % 2 === 1) {\n        if (x[i] % 2 === 1) {\n          if (x[i] % 2 === 1) {\n            if (result.length === 0) {\n              result.push(x[i])\n            }\n            result.push(x[i])\n            i++\n          } else {\n            if (result.length === 0) {\n              result.push(x[i])\n            }\n            j++\n          }\n        } else {\n          if (result.length === 0) {\n            result.push(x[i])\n          }\n          j++\n        }\n      } else {\n        if (result.length === 0) {\n          result.push(x[i])\n        }\n        j++\n      }\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n  }\n  if (j === 0) {\n    result.push(x[i])\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueOddEvenOddOddDigits([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddOddDigits([152, 323, 1422, 10])\n  [152, 323, 1422]\n  */\nconst uniqueOddEvenOddOddOddDigits = (x) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      if (x[i] % 2 === 1) {\n        if (x[i] % 2 === 1) {\n          if (x[i] % 2 === 1) {\n            if (x[i] % 2 === 1) {\n              if (result.length === 0) {\n                result.push(x[i])\n              }\n              result.push(x[i])\n              i++\n            } else {\n              if (result.length === 0) {\n                result.push(x[i])\n              }\n              j++\n            }\n          } else {\n            if (result.length === 0) {\n              result.push(x[i])\n            }\n            j++\n          }\n        } else {\n          if (result.length === 0) {\n            result.push(x[i])\n          }\n          j++\n        }\n      } else {\n        if (result.length === 0) {\n          result.push(x[i])\n        }\n        j++\n      }\n    } else {\n      if (result.length === 0) {\n        result.push(x[i])\n      }\n      j++\n    }\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n    res.push(name);\n  }\n  return res;\n};\n\n/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndName = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n    res.push(name);\n  }\n  return res;\n};\n\n/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLength = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n    res.push(name);\n  }\n  return res;\n};\n\n/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLengthAndLength = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n    res.push(name);\n  }\n  return res;\n};\n\n/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndLengthAndLengthAndLength = (arr) => {\n  const len = arr.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    let name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1];\n    res.push(name);\n  }\n  return res;\n};\n\n/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 5, 15, 25]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 5, 15, 25]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 5, 15, 25]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 5, 15, 25]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 3, 5, 15, 25]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 5, 15, 25]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 3, 5, 15, 25]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 5, 15, 25]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 5, 15, 25]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, curr) => curr * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n sa a parameetr,\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      oddPalindromes[i] = oddPalindromes[i - 1];\n      evenPalindromes[i] = evenPalindromes[i - 1];\n    }\n  }\n\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a binary string, return its reversed binary string.\n// Example 1:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1001\"\n// Example 2:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 3:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 4:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 5:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 6:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 7:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 8:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 9:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 10:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 11:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 12:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 13:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 14:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 15:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 16:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 17:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 18:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 19:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 20:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 21:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 22:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 23:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 24:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 25:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 26:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 27:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 28:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 29:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 30:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 31:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 32:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 33:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 34:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 35:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 36:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 37:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 38:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 39:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 40:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 41:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 42:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 43:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"\n// Example 44:\n// Input: \"1010\"\n// Output: \"1010\"\n// Explanation: \"1010\" -> \"1010\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 3\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 3\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvensAndOdds which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvensAndOdds([]) == 0\n  >>> countEvensAndOdds([-1, 11, -11]) == 1\n  >>> countEvensAndOdds([1, 1, 2]) == 3\n  */\nconst countEvensAndOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiples which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 1\n  >>> countMultiples([1, 1, 2]) == 3\n  */\nconst countMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndMultiples which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesAndMultiples([]) == 0\n  >>> countMultiplesAndMultiples([-1, 11, -11]) == 1\n  >>> countMultiplesAndMultiples([1, 1, 2]) == 3\n  */\nconst countMultiplesAndMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndOdds which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesAndOdds([]) == 0\n  >>> countMultiplesAndOdds([-1, 11, -11]) == 1\n  >>> countMultiplesAndOdds([1, 1, 2]) == 3\n  */\nconst countMultiplesAndOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndEvens which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesAndEvens([]) == 0\n  >>> countMultiplesAndEvens([-1, 11, -11]) == 1\n  >>> countMultiplesAndEvens([1, 1, 2]) == 3\n  */\nconst countMultiplesAndEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndOddsAndEvens which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesAndOddsAndEvens([]) == 0\n  >>> countMultiplesAndOddsAndEvens([-1, 11, -11]) == 1\n  >>> countMultiplesAndOddsAndEvens([1, 1, 2]) == 3\n  */\nconst countMultiplesAndOddsAndEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 1) {\n      count += 1;\n    }\n    if (arr[i] % 2 === 2) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesAndOddsAndOdds which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesAndOddsAndOdds([]) == 0\n  >>> countMultiplesAndOddsAndOdds([-1, 11, -11]) == 1\n  >>> countMultiplesAndOddsAndOdds([1, 1, 2]) == 3\n  */\nconst countMultiplesAndOddsAndOdds = (arr) => {\n  let count = 0;\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyIndex = 0;\n  let arrCopyIndex1 = 0;\n  let arrCopyIndex2 = 0;\n  let arrCopyIndex3 = 0;\n  let arrCopyIndex4 = 0;\n  let arrCopyIndex5 = 0;\n  let arrCopyIndex6 = 0;\n  let arrCopyIndex7 = 0;\n  let arrCopyIndex8 = 0;\n  let arrCopyIndex9 = 0;\n  let arrCopyIndex10 = 0;\n  let arrCopyIndex11 = 0;\n  let arrCopyIndex12 = 0;\n  let arrCopyIndex13 = 0;\n  let arrCopyIndex14 = 0;\n  let arrCopyIndex15 = 0;\n  let arrCopyIndex16 = 0;\n  let arrCopyIndex17 = 0;\n  let arrCopyIndex18 = 0;\n  let arrCopyIndex19 = 0;\n  let arrCopyIndex20 = 0;\n  let arrCopyIndex21 = 0;\n  let arrCopyIndex22 = 0;\n  let arrCopyIndex23 = 0;\n  let arrCopyIndex24 = 0;\n  let arrCopyIndex25 = 0;\n  let arrCopyIndex26 = 0;\n  let arrCopyIndex27 = 0;\n  let arrCopyIndex28 = 0;\n  let arrCopyIndex29 = 0;\n  let arrCopyIndex30 = 0;\n  let arrCopyIndex31 = 0;\n  let arrCopyIndex32 = 0;\n  let arrCopyIndex33 = 0;\n  let arrCopyIndex34 = 0;\n  let arrCopyIndex35 = 0;\n  let arrCopyIndex36 = 0;\n  let arrCopyIndex37 = 0;\n  let arrCopyIndex38 = 0;\n  let arrCopyIndex39 = 0;\n  let arrCopyIndex40 = 0;\n  let arrCopyIndex41 = 0;\n  let arrCopyIndex42 = 0;\n  let arrCopyIndex43 = 0;\n  let arrCopyIndex44 = 0;\n  let arrCopyIndex45 = 0;\n  let arrCopyIndex46 = 0;\n  let arrCopyIndex47 = 0;\n  let arrCopyIndex48 = 0;\n  let arrCopyIndex49 = 0;\n  let arrCopyIndex50 = 0;\n  let arrCopyIndex51 = 0;\n  let arrCopyIndex52 = 0;\n  let arrCopyIndex53 = 0;\n  let arrCopyIndex54 = 0;\n  let arrCopyIndex55 = 0;\n  let arrCopyIndex56 = 0;\n  let arrCopyIndex57 = 0;\n  let arrCopyIndex58 = 0;\n  let arrCopyIndex59 = 0;\n  let arrCopyIndex60 = 0;\n  let arrCopyIndex61 = 0;\n  let arrCopyIndex62 = 0;\n  let arrCopyIndex63 = 0;\n  let arrCopyIndex64 = 0;\n  let arrCopyIndex65 = 0;\n  let arrCopyIndex66 = 0;\n  let arrCopyIndex67 = 0;\n  let arrCopyIndex68 = 0;\n  let arrCopyIndex69 = 0;\n  let arrCopyIndex70 = 0;\n  let arrCopyIndex71 = 0;\n  let arrCopyIndex72 = 0;\n  let arrCopyIndex73 = 0;\n  let arrCopyIndex74 = 0;\n  let arrCopyIndex75 = 0;\n  let arrCopyIndex76 = 0;\n  let arrCopyIndex77 = 0;\n  let arrCopyIndex78 = 0;\n  let arrCopyIndex79 = 0;\n  let arrCopyIndex80 = 0;\n  let arrCopyIndex81 = 0;\n  let arrCopyIndex82 = 0;\n  let arrCopyIndex83 = 0;\n  let arrCopyIndex84 = 0;\n  let arrCopyIndex85 = 0;\n  let arrCopyIndex86 = 0;\n  let arrCopyIndex87 = 0;\n  let arrCopyIndex88 = 0;\n  let arrCopyIndex89 = 0;\n  let arrCopyIndex90 = 0;\n  let arrCopyIndex91 = 0;\n  let arrCopyIndex92 = 0;\n  let arrCopyIndex93 = 0;\n  let arrCopyIndex94 = 0;\n  let arrCopyIndex95 = 0;\n  let arrCopyIndex96 = 0;\n  let arrCopyIndex97 = 0;\n  let arrCopyIndex98 = 0;\n  let arrCopyIndex99 = 0;\n  let arrCopyIndex100 = 0;\n  let arrCopyIndex101 = 0;\n  let arrCopyIndex102 = 0;\n  let arrCopyIndex103 = 0;\n  let arrCopyIndex104 = 0;\n  let arrCopyIndex105 = 0;\n  let arrCopyIndex106 = 0;\n  let arrCopyIndex107 = 0;\n  let arrCopyIndex108 = 0;\n  let arrCopyIndex109 = 0;\n  let arrCopyIndex110 = 0;\n  let arrCopyIndex111 = 0;\n  let arrCopyIndex112 = 0;\n  let arrCopyIndex113 = 0;\n  let arrCopyIndex114 = 0;\n  let arrCopyIndex115 = 0;\n  let arrCopyIndex116 = 0;\n  let arrCopyIndex117 = 0;\n  let arrCopyIndex118 = 0;\n  let arrCopyIndex119 = 0;\n  let arrCopyIndex120 = 0;\n  let arrCopyIndex121 = 0;\n  let arrCopyIndex122 = 0;\n  let arrCopyIndex123 = 0;\n  let arrCopyIndex124 = 0;\n  let arrCopyIndex125 = 0;\n  let arrCopyIndex126 = 0;\n  let arrCopyIndex127 = 0;\n  let arrCopyIndex128 = 0;\n  let arrCopyIndex129 = 0;\n  let arrCopyIndex130 = 0;\n  let arrCopyIndex131 = 0;\n  let arrCopyIndex132 = 0;\n  let arrCopyIndex133 = 0;\n  let arrCopyIndex134 = 0;\n  let arrCopyIndex135 = 0;\n  let arrCopyIndex136 = 0;\n  let arrCopyIndex137 = 0;\n  let arrCopyIndex138 = 0;\n  let arrCopyIndex139 = 0;\n  let arrCopyIndex140 = 0;\n  let arrCopyIndex141 = 0;\n  let arrCopyIndex142 = 0;\n  let arrCopyIndex143 = 0;\n  let arrCopyIndex144 = 0;\n  let arrCopyIndex145 = 0;\n  let arrCopyIndex146 = 0;\n  let arrCopyIndex147 = 0;\n  let arrCopyIndex148 = 0;\n  let arrCopyIndex149 = 0;\n  let arrCopyIndex150 = 0;\n  let arrCopyIndex151 = 0;\n  let arrCopyIndex152 = 0;\n  let arrCopyIndex153 = 0;\n  let arrCopyIndex154 = 0;\n  let arrCopyIndex155 = 0;\n  let arrCopyIndex156 = 0;\n  let arrCopyIndex157 = 0;\n  let arrCopyIndex158 = 0;\n  let arrCopyIndex159 = 0;\n  let arrCopyIndex160 = 0;\n  let arrCopyIndex161 = 0;\n  let arrCopyIndex162 = 0;\n  let arrCopyIndex163 = 0;\n  let arrCopyIndex164 = 0;\n  let arrCopyIndex165 = 0;\n  let arrCopyIndex166 = 0;\n  let arrCopyIndex167 = 0;\n  let arrCopyIndex168 = 0;\n  let arrCopyIndex169 = 0;\n  let arrCopyIndex170 = 0;\n  let arrCopyIndex171 = 0;\n  let arrCopyIndex172 = 0;\n  let arrCopyIndex173 = 0;\n  let arrCopyIndex174 = 0;\n  let arrCopyIndex175 = 0;\n  let arrCopy", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXor('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary2('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary3('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary4('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary5('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary6('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary7('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary8('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary9('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary10('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary11('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary12('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary13 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary13('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary14 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary14('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary15 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary15('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary16 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary16('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary17 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary17('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary18 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  XOR two binary numbers. Both numbers are represented as binary strings.\n  >>> stringXorBinary18('1010', '1101')\n  '1110'\n  */\nconst stringXorBinary19 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/**\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === lst2[j] % 2) {\n      res.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      res.push(lst2[j]);\n      j++;\n    }\n  }\n  if (i === lst1.length) {\n    res.push(lst2[j]);\n    j++;\n  }\n  if (j === lst2.length) {\n    res.push(lst1[i]);\n    i++;\n  }\n  return res.filter(item => item % 2 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  unique([1, 2, 3, 4]) => [3, 4]\n  unique([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst unique = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  unique([1, 2, 3, 4]) => [3, 4]\n  unique([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray([1, 2, 3, 4]) => [3, 4]\n  uniqueArray([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray2 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray2([1, 2, 3, 4]) => [3, 4]\n  uniqueArray2([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray3 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray3([1, 2, 3, 4]) => [3, 4]\n  uniqueArray3([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray4 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray4([1, 2, 3, 4]) => [3, 4]\n  uniqueArray4([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray5 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray5([1, 2, 3, 4]) => [3, 4]\n  uniqueArray5([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray6 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray6([1, 2, 3, 4]) => [3, 4]\n  uniqueArray6([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray7 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray7([1, 2, 3, 4]) => [3, 4]\n  uniqueArray7([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray8 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray8([1, 2, 3, 4]) => [3, 4]\n  uniqueArray8([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray9 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray9([1, 2, 3, 4]) => [3, 4]\n  uniqueArray9([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray10 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n      res.push(arr[i]);\n      i++;\n    }\n  }\n  return res;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the unique elements of the array.\n  For example:\n  uniqueArray10([1, 2, 3, 4]) => [3, 4]\n  uniqueArray10([1, 1, 2, 3, 4]) => [1, 2, 3, 4]\n  It is assumed that the input array will be non-empty.\n  */\nconst uniqueArray11 = (arr) => {\n  let res = [];\n  let i = 0;\n  while (i < arr.length) {\n    if (res.indexOf(arr[i]) === -1) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramString = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLetters = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCount = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLetters = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLettersAndCount = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLettersAndCountAndLetters = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLettersAndCountAndLettersAndCount = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLettersAndCountAndLettersAndCountAndLettersAndCount = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogramStringWithLettersAndCountAndLettersAndCountAndLettersAndCountAndLettersAndCountAndLettersAndCount = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return Object.keys(histogram).sort().join(' ')\n}\n\n/*\n  Return a string representation of the histogram\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = new Array(len).fill(false)\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp\n  while (i < len) {\n    temp = s[i]\n    s[i] = c[j]\n    c[j] = temp\n    i++\n    j++\n  }\n  return [s.join(''), result.join('')]\n}\n\n/*Task\n  Given a string and an integer k, return true if and only if k characters exist in the string.\n  Example\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 3, the result should be true.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 4, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 5, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 6, the result should be true.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 7, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 8, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 9, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 10, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 16, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 17, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 18, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 19, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 16, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 17, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 18, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 19, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 16, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 17, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 18, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 19, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 16, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 17, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 18, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 19, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 16, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 17, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 18, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 19, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 11, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 12, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 13, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 14, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz\", k = 15, the result should be false.\n  Given s = \"abcdefghijklmnopqrstuvwxyz", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 0) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2!== 0) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 1) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenEvenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 0) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 1) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenEvenEvenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 0) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 1) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenEvenEvenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenEvenCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num % 2 === 0) {\n      res.push(num)\n    }\n  }\n  return res\n}\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum value of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum value of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 5\n * \n * return 6\n */\nconst maxFill2 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * return 5\n */\nconst maxFill3 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill4 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill5 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill6 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill7 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill8 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill9 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill10 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill11 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill12 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function will be called as maxFill(grid, capacity) and should return an\n * integer representing the number of times the grid needs to fill the bucket.\n * \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * return 0\n */\nconst maxFill13 = grid => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Your maxFill function ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp26", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsSet = new Set(vowels);\n  let vowelsArray = vowels.map(v => v.toUpperCase());\n  let vowelsArray2 = vowels.map(v => v.toLowerCase());\n  let vowelsArray3 = vowels.map(v => v.toUpperCase());\n  let vowelsArray4 = vowels.map(v => v.toLowerCase());\n  let vowelsArray5 = vowels.map(v => v.toUpperCase());\n  let vowelsArray6 = vowels.map(v => v.toLowerCase());\n  let vowelsArray7 = vowels.map(v => v.toUpperCase());\n  let vowelsArray8 = vowels.map(v => v.toLowerCase());\n  let vowelsArray9 = vowels.map(v => v.toUpperCase());\n  let vowelsArray10 = vowels.map(v => v.toLowerCase());\n  let vowelsArray11 = vowels.map(v => v.toUpperCase());\n  let vowelsArray12 = vowels.map(v => v.toLowerCase());\n  let vowelsArray13 = vowels.map(v => v.toUpperCase());\n  let vowelsArray14 = vowels.map(v => v.toLowerCase());\n  let vowelsArray15 = vowels.map(v => v.toUpperCase());\n  let vowelsArray16 = vowels.map(v => v.toLowerCase());\n  let vowelsArray17 = vowels.map(v => v.toUpperCase());\n  let vowelsArray18 = vowels.map(v => v.toLowerCase());\n  let vowelsArray19 = vowels.map(v => v.toUpperCase());\n  let vowelsArray20 = vowels.map(v => v.toLowerCase());\n  let vowelsArray21 = vowels.map(v => v.toUpperCase());\n  let vowelsArray22 = vowels.map(v => v.toLowerCase());\n  let vowelsArray23 = vowels.map(v => v.toUpperCase());\n  let vowelsArray24 = vowels.map(v => v.toLowerCase());\n  let vowelsArray25 = vowels.map(v => v.toUpperCase());\n  let vowelsArray26 = vowels.map(v => v.toLowerCase());\n  let vowelsArray27 = vowels.map(v => v.toUpperCase());\n  let vowelsArray28 = vowels.map(v => v.toLowerCase());\n  let vowelsArray29 = vowels.map(v => v.toUpperCase());\n  let vowelsArray30 = vowels.map(v => v.toLowerCase());\n  let vowelsArray31 = vowels.map(v => v.toUpperCase());\n  let vowelsArray32 = vowels.map(v => v.toLowerCase());\n  let vowelsArray33 = vowels.map(v => v.toUpperCase());\n  let vowelsArray34 = vowels.map(v => v.toLowerCase());\n  let vowelsArray35 = vowels.map(v => v.toUpperCase());\n  let vowelsArray36 = vowels.map(v => v.toLowerCase());\n  let vowelsArray37 = vowels.map(v => v.toUpperCase());\n  let vowelsArray38 = vowels.map(v => v.toLowerCase());\n  let vowelsArray39 = vowels.map(v => v.toUpperCase());\n  let vowelsArray40 = vowels.map(v => v.toLowerCase());\n  let vowelsArray41 = vowels.map(v => v.toUpperCase());\n  let vowelsArray42 = vowels.map(v => v.toLowerCase());\n  let vowelsArray43 = vowels.map(v => v.toUpperCase());\n  let vowelsArray44 = vowels.map(v => v.toLowerCase());\n  let vowelsArray45 = vowels.map(v => v.toUpperCase());\n  let vowelsArray46 = vowels.map(v => v.toLowerCase());\n  let vowelsArray47 = vowels.map(v => v.toUpperCase());\n  let vowelsArray48 = vowels.map(v => v.toLowerCase());\n  let vowelsArray49 = vowels.map(v => v.toUpperCase());\n  let vowelsArray50 = vowels.map(v => v.toLowerCase());\n  let vowelsArray51 = vowels.map(v => v.toUpperCase());\n  let vowelsArray52 = vowels.map(v => v.toLowerCase());\n  let vowelsArray53 = vowels.map(v => v.toUpperCase());\n  let vowelsArray54 = vowels.map(v => v.toLowerCase());\n  let vowelsArray55 = vowels.map(v => v.toUpperCase());\n  let vowelsArray56 = vowels.map(v => v.toLowerCase());\n  let vowelsArray57 = vowels.map(v => v.toUpperCase());\n  let vowelsArray58 = vowels.map(v => v.toLowerCase());\n  let vowelsArray59 = vowels.map(v => v.toUpperCase());\n  let vowelsArray60 = vowels.map(v => v.toLowerCase());\n  let vowelsArray61 = vowels.map(v => v.toUpperCase());\n  let vowelsArray62 = vowels.map(v => v.toLowerCase());\n  let vowelsArray63 = vowels.map(v => v.toUpperCase());\n  let vowelsArray64 = vowels.map(v => v.toLowerCase());\n  let vowelsArray65 = vowels.map(v => v.toUpperCase());\n  let vowelsArray66 = vowels.map(v => v.toLowerCase());\n  let vowelsArray67 = vowels.map(v => v.toUpperCase());\n  let vowelsArray68 = vowels.map(v => v.toLowerCase());\n  let vowelsArray69 = vowels.map(v => v.toUpperCase());\n  let vowelsArray70 = vowels.map(v => v.toLowerCase());\n  let vowelsArray71 = vowels.map(v => v.toUpperCase());\n  let vowelsArray72 = vowels.map(v => v.toLowerCase());\n  let vowelsArray73 = vowels.map(v => v.toUpperCase());\n  let vowelsArray74 = vowels.map(v => v.toLowerCase());\n  let vowelsArray75 = vowels.map(v => v.toUpperCase());\n  let vowelsArray76 = vowels.map(v => v.toLowerCase());\n  let vowelsArray77 = vowels.map(v => v.toUpperCase());\n  let vowelsArray78 = vowels.map(v => v.toLowerCase());\n  let vowelsArray79 = vowels.map(v => v.toUpperCase());\n  let vowelsArray80 = vowels.map(v => v.toLowerCase());\n  let vowelsArray81 = vowels.map(v => v.toUpperCase());\n  let vowelsArray82 = vowels.map(v => v.toLowerCase());\n  let vowelsArray83 = vowels.map(v => v.toUpperCase());\n  let vowelsArray84 = vowels.map(v => v.toLowerCase());\n  let vowelsArray85 = vowels.map(v => v.toUpperCase());\n  let vowelsArray86 = vowels.map(v => v.toLowerCase());\n  let vowelsArray87 = vowels.map(v => v.toUpperCase());\n  let vowelsArray88 = vowels.map(v => v.toLowerCase());\n  let vowelsArray89 = vowels.map(v => v.toUpperCase());\n  let vowelsArray90 = vowels.map(v => v.toLowerCase());\n  let vowelsArray91 = vowels.map(v ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(' || lst[i] === ')') {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different letters.\n  A stirng S is considered to be good if and only if all letters in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different words.\n  A stirng S is considered to be good if and only if all words in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different sentences.\n  A stirng S is considered to be good if and only if all sentences in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different paragraphs.\n  A stirng S is considered to be good if and only if all paragraphs in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different sentences.\n  A stirng S is considered to be good if and only if all sentences in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different paragraphs.\n  A stirng S is considered to be good if and only if all paragraphs in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different words.\n  A stirng S is considered to be good if and only if all words in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  countWays('(())', 2) == 'No'\n  */\nconst countWays = (str, k) => {\n  let res = 'No'\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - k]) {\n      if (res == 'Yes') {\n        res = 'No'\n      } else {\n        res = 'Yes'\n      }\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S from K different sentences.\n  A stirng S is considered to be good if and only if all sentences in S are blaacned.\n  For example: the string '(())()' is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  countWays('(())()', 2) == 'Yes'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longestLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestLength = strings[i].length\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/**\n  Given a string, return its first character in uppercase.\n  >>> firstUpper('hello')\n  'H'\n  >>> firstUpper('HELLO')\n  'H'\n  >>> firstUpper('HELLOWORLD')\n  'H'\n  >>> firstUpper('HELLOWORLDHELLO')\n  'H'\n  >>> firstUpper('HELLOWORLDHELLOWORLD')\n  'H'\n  >>> firstUpper('HELLOWORLDHELLOWORLDHELLO')\n  'H'\n  >>> firstUpper('HELLOWORLDHELLOWORLDHELLOWORLD')\n  'H'\n  */\nconst firstUpper = (string) => {\n  return string[0].toUpperCase() + string.slice(1)\n}\n\n/**\n  Given a string, return its first character in lowercase.\n  >>> firstLower(hello)\n  'h'\n  >>> firstLower(HELLO)\n  'h'\n  >>> firstLower(HELLOWORLD)\n  'h'\n  >>> firstLower(HELLOWORLDHELLO)\n  'h'\n  >>> firstLower(HELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstLower(HELLOWORLDHELLOWORLDHELLO)\n  'h'\n  >>> firstLower(HELLOWORLDHELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstLower(HELLOWORLDHELLOWORLDHELLOWORLDHELLO)\n  'h'\n  */\nconst firstLower = (string) => {\n  return string[0].toLowerCase() + string.slice(1)\n}\n\n/**\n  Given a string, return its last character in uppercase.\n  >>> lastUpper('hello')\n  'L'\n  >>> lastUpper('HELLO')\n  'L'\n  >>> lastUpper('HELLOWORLD')\n  'L'\n  >>> lastUpper('HELLOWORLDHELLO')\n  'L'\n  >>> lastUpper('HELLOWORLDHELLOWORLD')\n  'L'\n  >>> lastUpper('HELLOWORLDHELLOWORLDHELLO')\n  'L'\n  >>> lastUpper('HELLOWORLDHELLOWORLDHELLOWORLD')\n  'L'\n  >>> lastUpper('HELLOWORLDHELLOWORLDHELLOWORLDHELLO')\n  'L'\n  */\nconst lastUpper = (string) => {\n  return string[string.length - 1].toUpperCase() + string.slice(0, -1)\n}\n\n/**\n  Given a string, return its last character in lowercase.\n  >>> lastLower(hello)\n  'l'\n  >>> lastLower(HELLO)\n  'l'\n  >>> lastLower(HELLOWORLD)\n  'l'\n  >>> lastLower(HELLOWORLDHELLO)\n  'l'\n  >>> lastLower(HELLOWORLDHELLOWORLD)\n  'l'\n  >>> lastLower(HELLOWORLDHELLOWORLDHELLO)\n  'l'\n  >>> lastLower(HELLOWORLDHELLOWORLDHELLOWORLD)\n  'l'\n  >>> lastLower(HELLOWORLDHELLOWORLDHELLOWORLDHELLO)\n  'l'\n  */\nconst lastLower = (string) => {\n  return string[string.length - 1].toLowerCase() + string.slice(0, -1)\n}\n\n/**\n  Given a string, return its first character in uppercase and first character in lowercase.\n  >>> firstUpperFirstLower(hello)\n  'H'\n  >>> firstUpperFirstLower(HELLO)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLD)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLDHELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLDHELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLower(HELLOWORLDHELLOWORLDHELLOWORLDHELLO)\n  'h'\n  */\nconst firstUpperFirstLower = (string) => {\n  return firstUpper(firstLower(string))\n}\n\n/**\n  Given a string, return its first character in uppercase and first character in lowercase and first character in uppercase.\n  >>> firstUpperFirstLowerFirstUpper(hello)\n  'H'\n  >>> firstUpperFirstLowerFirstUpper(HELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLDHELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLDHELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpper(HELLOWORLDHELLOWORLDHELLOWORLDHELLO)\n  'h'\n  */\nconst firstUpperFirstLowerFirstUpper = (string) => {\n  return firstUpperFirstLower(firstUpperFirstUpper(string))\n}\n\n/**\n  Given a string, return its first character in uppercase and first character in lowercase and first character in uppercase.\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(hello)\n  'H'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLDHELLOWORLDHELLO)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLDHELLOWORLDHELLOWORLD)\n  'h'\n  >>> firstUpperFirstLowerFirstUpperFirstUpper(HELLOWORLDHELLOWORLDHELLOWORLDHELLO)\n  'h'\n  */\nconst firstUpperFirstLowerFirstUpperFirstUpper = (string) => {\n  return firstUpperFirstLowerFirstUpperFirstUpper(string)\n}\n\n/**\n  Given a string, return its first character in uppercase and first character in lowercase and first character in uppercase.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let result = [];\n  let max = 0;\n  let min = -1000;\n  let mid;\n  for (let i = 0; i < len; i++) {\n    mid = Math.floor((i + len - 1) / 2);\n    if (arr[i] > arr[mid]) {\n      max = Math.max(max, mid);\n      min = Math.min(min, mid);\n    } else {\n      max = Math.max(max, i);\n      min = Math.min(min, i);\n    }\n  }\n  if (min > max) {\n    max = min;\n    min = max;\n  }\n  for (let i = min; i <= max; i++) {\n    if (arr[i] > k) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbers = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersII = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersIII = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersIV = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersV = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersVI = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersVII = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersVIII = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar findMinDistinctNumbersIX = function (head) {\n  let count = 0;\n  let minDistinctNumber = Number.MAX_VALUE;\n  let node = head;\n  while (node) {\n    count++;\n    node = node.next;\n  }\n  minDistinctNumber = Math.pow(count, 0.5);\n  return minDistinctNumber;\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-elements-in-an-array/\n/**\n * Definition for singly-linked list.\n * function List", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],15:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return its reverse sorted array.\n  \n  Examples\n  reverse([5, 8, 7, 1]) ==> [7, 8, 5, 1]\n  reverse([3, 3, 3, 3, 3]) ==> [3, 3, 3, 7, 1]\n  reverse([30, 13, 24, 321]) ==> [321, 24, 13, 30, 1]\n  */\nconst reverse = (arr) => {\n  let rev = arr.slice().reverse();\n  return [...arr, rev];\n};\n\nmodule.exports = {\n  reverse,\n};\n\n},{}],16:[function(require,module,exports){\n/*\n  Given a sorted array of integers, return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] % 10;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverse = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 10;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 10000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 1000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 10000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 1000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 10000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 1000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000000000000000 * 100000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000000000000000 * 10000000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumTwoDigitsReverseTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigitsTwoDigits = function (nums) {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum += nums[i] % 100000000000000000 * 100000000000000000;\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-two-digits-in-an-array/\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let reutrned = [];\n  let reutrnedIndex = 0;\n  let reutrnedLength = 1;\n  let reutrnedIndex1 = 0;\n  let reutrnedIndex2 = 0;\n  let reutrnedIndex3 = 0;\n  let reutrnedIndex4 = 0;\n  let reutrnedIndex5 = 0;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reutrned.push(n);\n      reutrnedIndex += 1;\n      reutrnedLength += 1;\n    } else {\n      reutrnedIndex1 += 1;\n      reutrnedIndex2 += 1;\n      reutrnedIndex3 += 1;\n      reutrnedIndex4 += 1;\n      reutrnedIndex5 += 1;\n      reutrned.push((n / 2) * (reutrnedIndex1 + reutrnedIndex2 + reutrnedIndex3 + reutrnedIndex4 + reutrnedIndex5));\n      reutrnedIndex += 6;\n      reutrnedLength += 2;\n    }\n    n /= 2;\n  }\n  return reutrned;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let reutrned = [];\n  let reutrnedIndex = 0;\n  let reutrnedLength = 1;\n  let reutrnedIndex1 = 0;\n  let reutrnedIndex2 = 0;\n  let reutrnedIndex3 = 0;\n  let reutrnedIndex4 = 0;\n  let reutrnedIndex5 = 0;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reutrned.push(n);\n      reutrnedIndex += 1;\n      reutrnedLength += 1;\n    } else {\n      reutrnedIndex1 += 1;\n      reutrnedIndex2 += 1;\n      reutrnedIndex3 += 1;\n      reutrnedIndex4 += 1;\n      reutrnedIndex5 += 1;\n      reutrned.push((n / 2) * (reutrnedIndex1 + reutrnedIndex2 + reutrnedIndex3 + reutrnedIndex4 + reutrnedIndex5));\n      reutrnedIndex += 6;\n      reutrnedLength += 2;\n    }\n    n /= 2;\n  }\n  return reutrned;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let reutrned = [];\n  let reutrnedIndex = 0;\n  let reutrnedLength = 1;\n  let reutrnedIndex1 = 0;\n  let reutrnedIndex2 = 0;\n  let reutrnedIndex3 = 0;\n  let reutrnedIndex4 = 0;\n  let reutrnedIndex5 = 0;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      reutrned.push(n);\n      reutrnedIndex += 1;\n      reutrnedLength += 1;\n    } else {\n      reutrnedIndex1 += 1;\n      reutrnedIndex2 += 1;\n      reutrnedIndex3 += 1;\n      reutrnedIndex4 += 1;\n      reutrnedIndex5 += 1;\n      reutrned.push((n / 2) * (reutrnedIndex1 + reutrnedIndex2 + reutrnedIndex3 + reutrnedIndex4 + reutrnedIndex5));\n      reutrnedIndex += 6;\n      reutrnedLength += 2;\n    }\n    n /= 2;\n  }\n  return reutrned;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, year] = date.split('-').map(Number);\n  const [month, day, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let odd = 0;\n  let even = 0;\n  let word;\n  let wordCount = 0;\n  let wordLength = 0;\n  let wordLower = 0;\n  let wordUpper = 0;\n  let wordLowerCount = 0;\n  let wordUpperCount = 0;\n  let wordLowerLength = 0;\n  let wordUpperLength = 0;\n  let wordLowerLower = 0;\n  let wordUpperLower = 0;\n  let wordLowerUpper = 0;\n  let wordUpperUpper = 0;\n  let wordLowerLowerCount = 0;\n  let wordUpperLowerCount = 0;\n  let wordLowerUpperCount = 0;\n  let wordUpperUpperCount = 0;\n  let wordLowerLowerLength = 0;\n  let wordUpperLowerLength = 0;\n  let wordUpperUpperLength = 0;\n  let wordLowerLowerLower = 0;\n  let wordUpperLowerLower = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLowerUpper = 0;\n  let wordUpperUpperLower = 0;\n  let wordLowerLower", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sortedLst = lst.sort((a, b) => a - b);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in descending order. If list has more than 1 duplicate of the same\n * number, return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isDescending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order. If list has more than 1\n * duplicate of the same number, return false. Assume no negative\n * numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndAscending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndDescending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndDescendingAndAscending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndDescendingAndAscending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndDescendingAndAscending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.every((val, index) => sortedLst[index] === val);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order. If list has more than 1 duplicate of the same number,\n * return false. Assume no negative numbers and only integers.\n * Examples\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  isSorted([5, 4, 3, 2, 1]) ➞ true\n  isSorted([5, 4, 3, 2, 1]) ➞ false\n  */\nconst isSortedAndDescendingAndDescendingAndDescendingAndAscending = (lst) => {\n  let sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let length = Math.max(end1 - start1, end2 - start2);\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (start1 <= end1 && start2 <= end2) {\n      if (start1 === end1 && start2 === end2) {\n        if (start1 === end1 && start2 === end2) {\n          if (start1 === end1 && start2 === end2) {\n            if (start1 === end1 && start2 === end2) {\n              if (start1 === end1 && start2 === end2) {\n                if (start1 === end1 && start2 === end2) {\n                  if (start1 === end1 && start2 === end2) {\n                    if (start1 === end1 && start2 === end2) {\n                      if (start1 === end1 && start2 === end2) {\n                        if (start1 === end1 && start2 === end2) {\n                          isPrime = false;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return isPrime;\n};\n\nmodule.exports = {\n  intersection,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given two intervals interval1 and interval2, where each interval is a pair of \n  integers. Your task is to determine whether interval1 is a subset of interval2.\n  Example, interval1 = (1, 3) and interval2 = (2, 4) are a subset of interval2 = (2, 3).\n  Return true if interval1 is a subset of interval2, otherwise return false.\n  If the two intervals don't intersect, return false.\n  If the two intervals intersect, return true.\n  If the two intervals don't intersect, return false.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, return true.\n  If the two intervals intersect, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i]\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i]\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1 * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1 * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1 * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1 * -1 * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMultiMultiMultiMulti = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i] * 1 * 1 * 1 * 1 * 1 * 1 * 1\n    }\n    if (arr[i] < 0) {\n      sum -= arr[i] * -1 * -1 * -1 * -1 * -1 * -1 * -1 * -1\n    }\n  }\n  return sum\n}\n\n/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multiplied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(k).fill(0).map(() => new Set());\n  const lst_B = new Array(k).fill(0).map(() => new Set());\n  const lts_A = new Array(k).fill(0).map(() => new Set());\n  const lts_B = new Array(k).fill(0).map(() => new Set());\n  const lst_A_ = new Array(k).fill(0).map(() => new Set());\n  const lst_B_ = new Array(k).fill(0).map(() => new Set());\n  const lts_A_ = new Array(k).fill(0).map(() => new Set());\n  const lts_B_ = new Array(k).fill(0).map(() => new Set());\n\n  grid.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      if (cell === k) {\n        lst_A[i].add(j);\n        lst_B[j].add(i);\n        lts_A[j].add(k);\n        lts_B[i].add(k);\n      } else {\n        lst_A[i].add(j);\n        lst_B[j].add(i);\n        lts_A[j].add(k);\n        lts_B[i].add(k);\n      }\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_A[i]);\n      lts_B[j].add(lst_B[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach((lst_B, j) => {\n      lts_A[j].add(lst_B[i]);\n      lts_B[j].add(lst_A[i]);\n    });\n  });\n\n  lst_A.forEach((lst_A, i) => {\n    lst_B.forEach", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return gcd(a, b);\n}\n\n// Given two integers a and b, return true if a is divisible by b\n// and false if not.\nconst isDivisible = (a, b) => {\n  return a % b === 0\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isDivisibleByAllPrimeFactors = n => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i) && isDivisible(n, i)) {\n      return false\n    }\n  }\n  return true\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrime = n => {\n  if (n <= 1) {\n    return false\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactor = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrime(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactors = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactor(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOf = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactors(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactors = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOf(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOf = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOfAllPrimeFactors(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactors = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOfAllPrimeFactorsOf(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOf = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactors(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactors = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOf(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactors = n => {\n  if (n <= 1) {\n    return false\n  }\n  let factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return factors.every(factor => isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOf(factor))\n}\n\n// Given a number n, return true if n is divisible by all prime factors\n// of n.\nconst isPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactorsOfAllPrimeFactors", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  permutations of the numbers from 1 to n.\n  Examples:\n  permutations(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  permutations(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst permutations = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = tri(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n.\n  Examples:\n  combinations(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinations(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinations = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = permutations(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n.\n  Examples:\n  combinationSum(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSum(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSum = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = combinations(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n and \n  that sum to n-1.\n  Examples:\n  combinationSumAndSubset(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSumAndSubset(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSumAndSubset = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = combinationSum(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result.filter((item) => item[1] > item[0]);\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n and \n  that sum to n-1.\n  Examples:\n  combinationSumAndSubsetAndSubset(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSumAndSubsetAndSubset(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSumAndSubsetAndSubset = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = combinationSumAndSubset(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result.filter((item) => item[1] > item[0]);\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n and \n  that sum to n-1.\n  Examples:\n  combinationSumAndSubsetAndSubsetAndSubset(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSumAndSubsetAndSubsetAndSubset(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSumAndSubsetAndSubsetAndSubset = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = combinationSumAndSubsetAndSubset(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result.filter((item) => item[1] > item[0]);\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n and \n  that sum to n-1.\n  Examples:\n  combinationSumAndSubsetAndSubsetAndSubsetAndSubset(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSumAndSubsetAndSubsetAndSubsetAndSubset(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSumAndSubsetAndSubsetAndSubsetAndSubset = (n) => {\n  if (n <= 1) return [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const list = combinationSumAndSubsetAndSubsetAndSubset(i);\n    for (let j = 0; j < list.length; j++) {\n      result.push([...list, i]);\n    }\n  }\n  return result.filter((item) => item[1] > item[0]);\n};\n\n/*\n  Given a non-negative integer number n, return a list of all possible \n  combinations of the numbers from 1 to n that sum to n and \n  that sum to n-1.\n  Examples:\n  combinationSumAndSubsetAndSubsetAndSubsetAndSubsetAndSubset(3) = [[1, 2], [1, 3], [2, 3], [2, 1]]\n  combinationSumAndSubsetAndSubsetAndSubsetAndSubsetAndSubset(5) = [[1, 2], [1, 3], [2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n*/\nconst combinationSumAndSubsetAndSubsetAndSub", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % 10; // the digits are in reverse order\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += n % 2; // the digits are in reverse order\n    n /= 2;\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits2(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits3(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits4(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits5(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits8 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits6(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits9 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits7(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits10 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits8(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits11 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits9(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits12 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits10(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits13 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits11(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits14 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits12(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits15 = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += digits13(i); // the digits are in reverse order\n  }\n  return sum;\n};\n\n/*Given a positive itneger n, return the product of the digits of the number n.\n  Return 0 if n is 0.\n  For example:\n  digits(0)", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const regex = /[[]]/g\n  return regex.test(string)\n}\n\n/*\n  Create a function that takes a string as input which ocntains only square brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of square brackets\n  where at least one square bracket in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is equal to C. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filter = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === C) {\n      filtered.push(nums[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      filtered.push(nums[i]);\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is divisible by at least one element of\n  the other list. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisibleAndDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      if (nums.includes(nums[i])) {\n        filtered.push(nums[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is divisible by at least one element of\n  the other list. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisibleAndDivisibleAndDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      if (nums.includes(nums[i]) && nums.includes(nums[i + 1])) {\n        filtered.push(nums[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is divisible by at least one element of\n  the other list. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisibleAndDivisibleAndDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      if (nums.includes(nums[i]) && nums.includes(nums[i + 1]) && nums.includes(nums[i + 2])) {\n        filtered.push(nums[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is divisible by at least one element of\n  the other list. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisibleAndDivisibleAndDivisibleAndDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      if (nums.includes(nums[i]) && nums.includes(nums[i + 1]) && nums.includes(nums[i + 2]) && nums.includes(nums[i + 3])) {\n        filtered.push(nums[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is divisible by at least one element of\n  the other list. For example, given\n  nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]. You may assume that nums.length is\n  always perfect.\n  Example:\n  Given nums = [1,2,3,4,5], C = 3,\n  the function should return [3,1]\n  Given nums = [1,2,3,4,5], C = 2,\n  the function should return [2,1]\n  Given nums = [1,2,3,4,5], C = 0,\n  the function should return []\n*/\nconst filterDivisibleAndDivisibleAndDivisibleAndDivisible = (nums, C) => {\n  let filtered = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % C === 0) {\n      if (nums.includes(nums[i]) && nums.includes(nums[i + 1]) && nums.includes(nums[i + 2]) && nums.includes(nums[i + 3])) {\n        filtered.push(nums[i]);\n      }\n    }\n  }\n  return filtered;\n};\n\n/*\n  Given a list and a number C, return the list such that each element of\n  the list is divisible by C and is ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isAlpha = (char) => char.match(/[a-zA-Z]/)\n  const isWodr = (char) => char.match(/[aeiou]/)\n  const isPsace = (char) => char.match(/[aeiou]/)\n  const isPsaceAndWodr = (char) => char.match(/[aeiou]/) && isWodr(char.charAt(char.length - 1))\n  const isPsaceAndLastWodr = (char) => char.match(/[aeiou]/) && isWodr(char.charAt(char.length - 1))\n  const isPsaceAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastChar = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastCharAndLastWodr = (char) => char.match(/[aeiou]/) && isLastChar(char.charAt(char.length - 1))\n  const isPsaceAndLastCharAndLastCharAndLastCharAndLastCharAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let maxIndex = 0;\n  let i;\n  for (i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of numbers, return a new array which contains all the\n  numbers in arr except the numbers in arr itself.\n\n  Examples:\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,7,8,9]) = [1,2,3,4,5,6,7,8,9]\n  removeDuplicates([1,2,3,4,5,6,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  let maxI = null;\n  let minI = null;\n  let maxI2 = null;\n  let minI2 = null;\n  let maxI3 = null;\n  let minI3 = null;\n  let maxI4 = null;\n  let minI4 = null;\n  let maxI5 = null;\n  let minI5 = null;\n  let maxI6 = null;\n  let minI6 = null;\n  let maxI7 = null;\n  let minI7 = null;\n  let maxI8 = null;\n  let minI8 = null;\n  let maxI9 = null;\n  let minI9 = null;\n  let maxI10 = null;\n  let minI10 = null;\n  let maxI11 = null;\n  let minI11 = null;\n  let maxI12 = null;\n  let minI12 = null;\n  let maxI13 = null;\n  let minI13 = null;\n  let maxI14 = null;\n  let minI14 = null;\n  let maxI15 = null;\n  let minI15 = null;\n  let maxI16 = null;\n  let minI16 = null;\n  let maxI17 = null;\n  let minI17 = null;\n  let maxI18 = null;\n  let minI18 = null;\n  let maxI19 = null;\n  let minI19 = null;\n  let maxI20 = null;\n  let minI20 = null;\n  let maxI21 = null;\n  let minI21 = null;\n  let maxI22 = null;\n  let minI22 = null;\n  let maxI23 = null;\n  let minI23 = null;\n  let maxI24 = null;\n  let minI24 = null;\n  let maxI25 = null;\n  let minI25 = null;\n  let maxI26 = null;\n  let minI26 = null;\n  let maxI27 = null;\n  let minI27 = null;\n  let maxI28 = null;\n  let minI28 = null;\n  let maxI29 = null;\n  let minI29 = null;\n  let maxI30 = null;\n  let minI30 = null;\n  let maxI31 = null;\n  let minI31 = null;\n  let maxI32 = null;\n  let minI32 = null;\n  let maxI33 = null;\n  let minI33 = null;\n  let maxI34 = null;\n  let minI34 = null;\n  let maxI35 = null;\n  let minI35 = null;\n  let maxI36 = null;\n  let minI36 = null;\n  let maxI37 = null;\n  let minI37 = null;\n  let maxI38 = null;\n  let minI38 = null;\n  let maxI39 = null;\n  let minI39 = null;\n  let maxI40 = null;\n  let minI40 = null;\n  let maxI41 = null;\n  let minI41 = null;\n  let maxI42 = null;\n  let minI42 = null;\n  let maxI43 = null;\n  let minI43 = null;\n  let maxI44 = null;\n  let minI44 = null;\n  let maxI45 = null;\n  let minI45 = null;\n  let maxI46 = null;\n  let minI46 = null;\n  let maxI47 = null;\n  let minI47 = null;\n  let maxI48 = null;\n  let minI48 = null;\n  let maxI49 = null;\n  let minI49 = null;\n  let maxI50 = null;\n  let minI50 = null;\n  let maxI51 = null;\n  let minI51 = null;\n  let maxI52 = null;\n  let minI52 = null;\n  let maxI53 = null;\n  let minI53 = null;\n  let maxI54 = null;\n  let minI54 = null;\n  let maxI55 = null;\n  let minI55 = null;\n  let maxI56 = null;\n  let minI56 = null;\n  let maxI57 = null;\n  let minI57 = null;\n  let maxI58 = null;\n  let minI58 = null;\n  let maxI59 = null;\n  let minI59 = null;\n  let maxI60 = null;\n  let minI60 = null;\n  let maxI61 = null;\n  let minI61 = null;\n  let maxI62 = null;\n  let minI62 = null;\n  let maxI63 = null;\n  let minI63 = null;\n  let maxI64 = null;\n  let minI64 = null;\n  let maxI65 = null;\n  let minI65 = null;\n  let maxI66 = null;\n  let minI66 = null;\n  let maxI67 = null;\n  let minI67 = null;\n  let maxI68 = null;\n  let minI68 = null;\n  let maxI69 = null;\n  let minI69 = null;\n  let maxI70 = null;\n  let minI70 = null;\n  let maxI71 = null;\n  let minI71 = null;\n  let maxI72 = null;\n  let minI72 = null;\n  let maxI73 = null;\n  let minI73 = null;\n  let maxI74 = null;\n  let minI74 = null;\n  let maxI75 = null;\n  let minI75 = null;\n  let maxI76 = null;\n  let minI76 = null;\n  let maxI77 = null;\n  let minI77 = null;\n  let maxI78 = null;\n  let minI78 = null;\n  let maxI79 = null;\n  let minI79 = null;\n  let maxI80 = null;\n  let minI80 = null;\n  let maxI81 = null;\n  let minI81 = null;\n  let maxI82 = null;\n  let minI82 = null;\n  let maxI83 = null;\n  let minI83 = null;\n  let maxI84 = null;\n  let minI84 = null;\n  let maxI85 = null;\n  let minI85 = null;\n  let maxI86 = null;\n  let minI86 = null;\n  let maxI87 = null;\n  let minI87 = null;\n  let maxI88 = null;\n  let minI88 = null;\n  let maxI89 = null;\n  let minI89 = null;\n  let maxI90 = null;\n  let minI90 = null;\n  let maxI91 = null;\n  let minI91 = null;\n  let maxI92 = null;\n  let minI92 = null;\n  let maxI93 = null;\n  let minI93 = null;\n  let maxI94 = null;\n  let minI94 = null;\n  let maxI95 = null;\n  let minI95 = null;\n  let maxI96 = null;\n  let minI96 = null;\n  let maxI97 = null;\n  let minI97 = null;\n  let maxI98 = null;\n  let minI98 = null;\n  let maxI99 = null;\n  let minI99 = null;\n  let maxI100 = null;\n  let minI100 = null;\n  let maxI101 = null;\n  let minI101 = null;\n  let maxI102 = null;\n  let minI102 = null;\n  let maxI103 = null;\n  let minI103 = null;\n  let maxI104 = null;\n  let minI104 = null;\n  let maxI105 = null;\n  let minI105 = null;\n  let maxI106 = null;\n  let minI106 = null;\n  let maxI107 = null;\n  let minI107 = null;\n  let maxI108);\n  let minI108;\n  let maxI109 = null;\n  let minI109 = null;\n  let maxI110);\n  let minI110;\n  let maxI111);\n  let minI111;\n  let maxI112);\n  let minI112;\n  let maxI113);\n  let minI113;\n  let maxI114);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareThree(1, 2.5) ➞ 3\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFour(1, 2.5) ➞ 4\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFive(1, 2.5) ➞ 5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareSix(1, 2.5) ➞ 6\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ null\n  */\nconst compareSix = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareSeven(1, 2.5) ➞ 7\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ null\n  */\nconst compareSeven = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return null\n  }\n  if (isNaN(a)) {\n    return b\n  }\n  if (isNaN(b)) {\n    return a\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the smaller vraiable in its given variable type.\n  Return null ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  return n % 2 === 0 && n % 4!== 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 8 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 8 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd8 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 16 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven16 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 16 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd16 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 32 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven32 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 32 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd32 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0 && n % 32 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 64 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven64 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 64 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd64 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 128 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven128 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 128 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd128 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 256 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven256 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 256 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd256 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 512 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven512 = (n) => {\n  return n % 2 === 0 && n % 4 === 0 && n % 8 === 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 512 positvie odd numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd512 = (n) => {\n  return n % 2 === 0 && n % 4!== 0 && n % 8!== 0 && n % 16 === 0 && n % 32 === 0 && n % 64 === 0 && n % 128 === 0 && n % 256 === 0 && n % 512 === 0;\n};\n\n/*Evaluaet whether the given un", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number from 1 to n\n  For example:\n  >>> factorial(4)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  let currentPrefixLength = string.length;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(currentPrefixLength);\n    currentPrefixLength = currentPrefix.length;\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  let currentSuffixLength = string.length;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(currentSuffixLength);\n    currentSuffixLength = currentSuffix.length;\n  }\n  return suffixes;\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words;\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  const words = [];\n  let currentWord = string;\n  let currentWordLength = string.length;\n  while (currentWord.length > 0) {\n    words.push(currentWord);\n    currentWord = currentWord.substr(currentWordLength);\n    currentWordLength = currentWord.length;\n  }\n  return words.filter((word) => word.length > 0);\n};\n\n/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example 1\"\n  fixSpaces(text) == \"Example_1\"\n  fixSpaces(text) == \" Example 2\"\n  fixSpaces(text) == \" Example   3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.replace(/ /g, \"-\")\n  let consecutiveSpaces = spaces.match(/\\s{2,}/)\n  if (consecutiveSpaces && consecutiveSpaces.length > 1) {\n    spaces = consecutiveSpaces.join(\" \")\n  }\n  return spaces\n}\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_arr = file_name.split('.');\n  const file_name_length = file_name_arr.length;\n  const file_name_digits = file_name_arr.map(item => item.length);\n  const file_name_digits_length = file_name_digits.length;\n  const file_name_digits_length_min = file_name_digits_length >= 3;\n  const file_name_digits_length_max = file_name_digits_length >= 1;\n  const file_name_digits_length_min_max = file_name_digits_length_min && file_name_digits_length_max;\n  const file_name_digits_length_min_max_digits = file_name_digits_length_min_max && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits = file_name_digits_length_min_max_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits = file_name_digits_length_min_max_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits && file_name_digits_length_max > 1;\n  const file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits = file_name_digits_length_min_max_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquareSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the integer entyr if its index is a multiple of 3 and will \n  square it if its index is a multiple of 4. The function will not change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquareSquareSquareSquareSquare = (lst) => {\n  let sum = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      newWords.push(word);\n    }\n  }\n  return newWords.join(\" \");\n};\n\n/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words se", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === \"\") {\n    return false;\n  }\n  const [numerator2, denominator2] = n.split(\"/\");\n  if (numerator2 === \"\" || denominator2 === \"\") {\n    return false;\n  }\n  if (numerator === denominator) {\n    return true;\n  }\n  if (numerator === \"\") {\n    if (denominator2 === \"\") {\n      return true;\n    }\n    if (denominator2 === \"\") {\n      return false;\n    }\n  }\n  if (denominator2 === \"\") {\n    if (numerator === \"\") {\n      return true;\n    }\n    if (numerator === \"\") {\n      return false;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\") {\n    if (denominator2 === \"\") {\n      return false;\n    }\n    if (denominator2 === \"\") {\n      return true;\n    }\n  }\n  if (numerator2 === \"\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  return numsSorted.map(num => num % 10 + sums);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedReversedReversedReversedReversedReversedReversedReversed = (nums) => {\n  const numsSorted = nums.sort((a, b) => b - a);\n  const sums = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let firstDigit = 0;\n  let lastDigit = 0;\n  let firstDigitIndex = 0;\n  let lastDigitIndex = 0;\n  let firstDigitLastDigit = 0;\n  let lastDigitLastDigit = 0;\n  let firstDigitLastDigitIndex = 0;\n  let lastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let lastDigitLastDigitLastDigitLastDigitLastDigitLastDigitIndex = 0;\n  let firstDigitLastDigitLastDigitLastDigitLastDigitLastDigitLastDigit = 0;\n  let lastDigitLastDigitLastDigitLast", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const orbit1 = orbits[planet1]\n  const orbit2 = orbits[planet2]\n  const orbit1Orbit2 = orbit1.orbit(orbit2)\n  const orbit1Orbit2Orbits = orbit1Orbit2.orbits(orbit2)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1Orbit2Orbits2.map(orbit2Orbit => orbit2Orbit)\n  const orbit1Orbit2Orbits2 = orbit1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return lst.sort((a, b) => a - b).map(s => s.length);\n};\n\n/*\n  Given a list and a target number, \n  return the list that sums up to that number.\n  If the target number is negative, return an empty list.\n  If the target number is zero, return an empty list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, return an empty list.\n  If the target number is equal to the length of the list, return that list.\n  If the target number is greater than the length of the list, return an empty list.\n  If the target number is less than the length of the list, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String.fromCharCode(i));\n  }\n  return result.join(' ');\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToString = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToString(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToDecimalString = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToDecimalString(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexString = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexString(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryString = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryString(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalString = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalString(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToHexStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToBinaryStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToBinaryStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToOctalStringWithLeadingZero = (n) => {\n  const s = n.toString();\n  if (s.length < 2) {\n    return s;\n  }\n  return s.substr(0, 1) + numberToOctalStringWithLeadingZero(n.toFixed(2));\n};\n\n// A simple way to convert a number to a string in base 10\nconst numberToHexStringWithLeadingZero = (n) => {\n  const s = n.toString();\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return y;\n  }\n  if (n % y === 1) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*\n  A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSum = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenEvenEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenEvenEvenEvenEvenOdd = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// Returns the sum of the squares of the numbers in the list that are even\n// and odd.\n// doubleTheSum([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n// doubleTheSum([-1, -2, 0]) == -1\n// doubleTheSum([9, -2]) == 9\n// doubleTheSum([0]) == 0\n// If the input list is empty, return 0.\nconst doubleTheSumEvenOddEvenEvenEvenEvenEvenEvenOdd = (lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const diff = [];\n  \n  guesses.forEach((guess, i) => {\n    const score = scores[i];\n    \n    diff.push(Math.abs(score - guess));\n  });\n  \n  return diff;\n};\n\nmodule.exports = compare;\n\n},{}],7:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],8:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],9:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],10:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],11:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],12:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],13:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],14:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],15:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],16:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],17:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],18:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],19:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],20:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],21:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game, guess) => {\n  const diff = [];\n  \n  compare.forEach(compare => {\n    diff.push(Math.abs(compare(game, guess)));\n  });\n  \n  return diff;\n};\n\nmodule.exports = diff;\n\n},{\"./compare\":6}],22:[function(require,module,exports){\nconst compare = require('./compare');\n\n/**\n * \n * @param {Array} game \n * @param {Array} guess \n */\nconst diff = (game", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = '';\n  let extension_strength = 0;\n  let extension_extension = '';\n  let extension_extension_strength = 0;\n  let extension_extension_extension = '';\n  let extension_extension_extension_strength = 0;\n  let extension_extension_extension_extension = '';\n  let extension_extension_extension_extension_strength = 0;\n  let extension_extension_extension_extension_extension = '';\n  let extension_extension_extension_extension_extension_strength = 0;\n  let extension_extension_extension_extension_extension_extension = '';\n  let extension_extension_extension_extension_extension_extension_strength = 0;\n  let extension_extension_extension_extension_extension_extension_extension = '';\n  let extension_extension_extension_extension_extension_extension_extension_extension_strength = 0;\n  let extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for(let i = num; i >= 1; i--) {\n    if(i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a number n, return an array that has all possible combinations of n elements.\n\n   Example:\n      combinations(5) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(6) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(7) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(8) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(9) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(10) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(11) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(12) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(13) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(14) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(15) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(16) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(17) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(18) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(19) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(20) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(21) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(22) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(23) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(24) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(25) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(26) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(27) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(28) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(29) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(30) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(31) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(32) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(33) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(34) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(35) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(36) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]\n      combinations(37) ==> [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = (number + '');\n  let roman = '';\n  let romanArray = [];\n  let romanArray2 = [];\n  let romanArray3 = [];\n  let romanArray4 = [];\n  let romanArray5 = [];\n  let romanArray6 = [];\n  let romanArray7 = [];\n  let romanArray8 = [];\n  let romanArray9 = [];\n  let romanArray10 = [];\n  let romanArray11 = [];\n  let romanArray12 = [];\n  let romanArray13 = [];\n  let romanArray14 = [];\n  let romanArray15 = [];\n  let romanArray16 = [];\n  let romanArray17 = [];\n  let romanArray18 = [];\n  let romanArray19 = [];\n  let romanArray20 = [];\n  let romanArray21 = [];\n  let romanArray22 = [];\n  let romanArray23 = [];\n  let romanArray24 = [];\n  let romanArray25 = [];\n  let romanArray26 = [];\n  let romanArray27 = [];\n  let romanArray28 = [];\n  let romanArray29 = [];\n  let romanArray30 = [];\n  let romanArray31 = [];\n  let romanArray32 = [];\n  let romanArray33 = [];\n  let romanArray34 = [];\n  let romanArray35 = [];\n  let romanArray36 = [];\n  let romanArray37 = [];\n  let romanArray38 = [];\n  let romanArray39 = [];\n  let romanArray40 = [];\n  let romanArray41 = [];\n  let romanArray42 = [];\n  let romanArray43 = [];\n  let romanArray44 = [];\n  let romanArray45 = [];\n  let romanArray46 = [];\n  let romanArray47 = [];\n  let romanArray48 = [];\n  let romanArray49 = [];\n  let romanArray50 = [];\n  let romanArray51 = [];\n  let romanArray52 = [];\n  let romanArray53 = [];\n  let romanArray54 = [];\n  let romanArray55 = [];\n  let romanArray56 = [];\n  let romanArray57 = [];\n  let romanArray58 = [];\n  let romanArray59 = [];\n  let romanArray60 = [];\n  let romanArray61 = [];\n  let romanArray62 = [];\n  let romanArray63 = [];\n  let romanArray64 = [];\n  let romanArray65 = [];\n  let romanArray66 = [];\n  let romanArray67 = [];\n  let romanArray68 = [];\n  let romanArray69 = [];\n  let romanArray70 = [];\n  let romanArray71 = [];\n  let romanArray72 = [];\n  let romanArray73 = [];\n  let romanArray74 = [];\n  let romanArray75 = [];\n  let romanArray76 = [];\n  let romanArray77 = [];\n  let romanArray78 = [];\n  let romanArray79 = [];\n  let romanArray80 = [];\n  let romanArray81 = [];\n  let romanArray82 = [];\n  let romanArray83 = [];\n  let romanArray84 = [];\n  let romanArray85 = [];\n  let romanArray86 = [];\n  let romanArray87 = [];\n  let romanArray88 = [];\n  let romanArray89 = [];\n  let romanArray90 = [];\n  let romanArray91 = [];\n  let romanArray92 = [];\n  let romanArray93 = [];\n  let romanArray94 = [];\n  let romanArray95 = [];\n  let romanArray96 = [];\n  let romanArray97 = [];\n  let romanArray98 = [];\n  let romanArray99 = [];\n  let romanArray100 = [];\n  let romanArray101 = [];\n  let romanArray102 = [];\n  let romanArray103 = [];\n  let romanArray104 = [];\n  let romanArray105 = [];\n  let romanArray106 = [];\n  let romanArray107 = [];\n  let romanArray108 = [];\n  let romanArray109 = [];\n  let romanArray110 = [];\n  let romanArray111 = [];\n  let romanArray112 = [];\n  let romanArray113 = [];\n  let romanArray114 = [];\n  let romanArray115 = [];\n  let romanArray116 = [];\n  let romanArray117 = [];\n  let romanArray118 = [];\n  let romanArray119 = [];\n  let romanArray120 = [];\n  let romanArray121 = [];\n  let romanArray122 = [];\n  let romanArray123 = [];\n  let romanArray124 = [];\n  let romanArray125 = [];\n  let romanArray126 = [];\n  let romanArray127 = [];\n  let romanArray128 = [];\n  let romanArray129 = [];\n  let romanArray130 = [];\n  let romanArray131 = [];\n  let romanArray132 = [];\n  let romanArray133 = [];\n  let romanArray134 = [];\n  let romanArray135 = [];\n  let romanArray136 = [];\n  let romanArray137 = [];\n  let romanArray138 = [];\n  let romanArray139 = [];\n  let romanArray140 = [];\n  let romanArray141 = [];\n  let romanArray142 = [];\n  let romanArray143 = [];\n  let romanArray144 = [];\n  let romanArray145 = [];\n  let romanArray146 = [];\n  let romanArray147 = [];\n  let romanArray148 = [];\n  let romanArray149 = [];\n  let romanArray150 = [];\n  let romanArray151 = [];\n  let romanArray152 = [];\n  let romanArray153 = [];\n  let romanArray154 = [];\n  let romanArray155 = [];\n  let romanArray156 = [];\n  let romanArray157 = [];\n  let romanArray158 = [];\n  let romanArray159 = [];\n  let romanArray160 = [];\n  let romanArray161 = [];\n  let romanArray162 = [];\n  let romanArray163 = [];\n  let romanArray164 = [];\n  let romanArray165 = [];\n  let romanArray166 = [];\n  let romanArray167 = [];\n  let romanArray168 = [];\n  let romanArray169 = [];\n  let romanArray170 = [];\n  let romanArray171 = [];\n  let romanArray172 = [];\n  let romanArray173 = [];\n  let romanArray174 = [];\n  let romanArray175 = [];\n  let romanArray176 = [];\n  let romanArray177 = [];\n  let romanArray178 = [];\n  let romanArray179 = [];\n  let romanArray180 = [];\n  let romanArray181 = [];\n  let romanArray182 = [];\n  let romanArray183 = [];\n  let romanArray184 = [];\n  let romanArray185 = [];\n  let romanArray186 = [];\n  let romanArray187 = [];\n  let romanArray188 = [];\n  let romanArray189 = [];\n  let romanArray190 = [];\n  let romanArray191 = [];\n  let romanArray192 = [];\n  let romanArray193 = [];\n  let romanArray194 = [];\n  let romanArray195 = [];\n  let roman", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-anlged triangle, false otherwise.\n  A left-angled tirangle is a tringale in which one angle is left anlge or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A right-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-anlged triangle, false otherwise.\n  A left-angled tirangle is a tringale in which one angle is left anlge or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A right-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-anlged triangle, false otherwise.\n  A left-angled tirangle is a tringale in which one angle is left anlge or\n  -90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A right-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-anlged triangle, false otherwise.\n  A left-angled tiran", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxLength = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let maxWordLength = 0;\n  let maxCharLength = 0;\n  let maxWordIndex = 0;\n  let maxCharIndex = 0;\n  let maxWordIndex2 = 0;\n  let maxCharIndex2 = 0;\n  let maxWordIndex3 = 0;\n  let maxCharIndex3 = 0;\n  let maxWordIndex4 = 0;\n  let maxCharIndex4 = 0;\n  let maxWordIndex5 = 0;\n  let maxCharIndex5 = 0;\n  let maxWordIndex6 = 0;\n  let maxCharIndex6 = 0;\n  let maxWordIndex7 = 0;\n  let maxCharIndex7 = 0;\n  let maxWordIndex8 = 0;\n  let maxCharIndex8 = 0;\n  let maxWordIndex9 = 0;\n  let maxCharIndex9 = 0;\n  let maxWordIndex10 = 0;\n  let maxCharIndex10 = 0;\n  let maxWordIndex11 = 0;\n  let maxCharIndex11 = 0;\n  let maxWordIndex12 = 0;\n  let maxCharIndex12 = 0;\n  let maxWordIndex13 = 0;\n  let maxCharIndex13 = 0;\n  let maxWordIndex14 = 0;\n  let maxCharIndex14 = 0;\n  let maxWordIndex15 = 0;\n  let maxCharIndex15 = 0;\n  let maxWordIndex16 = 0;\n  let maxCharIndex16 = 0;\n  let maxWordIndex17 = 0;\n  let maxCharIndex17 = 0;\n  let maxWordIndex18 = 0;\n  let maxCharIndex18 = 0;\n  let maxWordIndex19 = 0;\n  let maxCharIndex19 = 0;\n  let maxWordIndex20 = 0;\n  let maxCharIndex20 = 0;\n  let maxWordIndex21 = 0;\n  let maxCharIndex21 = 0;\n  let maxWordIndex22 = 0;\n  let maxCharIndex22 = 0;\n  let maxWordIndex23 = 0;\n  let maxCharIndex23 = 0;\n  let maxWordIndex24 = 0;\n  let maxCharIndex24 = 0;\n  let maxWordIndex25 = 0;\n  let maxCharIndex25 = 0;\n  let maxWordIndex26 = 0;\n  let maxCharIndex26 = 0;\n  let maxWordIndex27 = 0;\n  let maxCharIndex27 = 0;\n  let maxWordIndex28 = 0;\n  let maxCharIndex28 = 0;\n  let maxWordIndex29 = 0;\n  let maxCharIndex29 = 0;\n  let maxWordIndex30 = 0;\n  let maxCharIndex30 = 0;\n  let maxWordIndex31 = 0;\n  let maxCharIndex31 = 0;\n  let maxWordIndex32 = 0;\n  let maxCharIndex32 = 0;\n  let maxWordIndex33 = 0;\n  let maxCharIndex33 = 0;\n  let maxWordIndex34 = 0;\n  let maxCharIndex34 = 0;\n  let maxWordIndex35 = 0;\n  let maxCharIndex35 = 0;\n  let maxWordIndex36 = 0;\n  let maxCharIndex36 = 0;\n  let maxWordIndex37 = 0;\n  let maxCharIndex37 = 0;\n  let maxWordIndex38 = 0;\n  let maxCharIndex38 = 0;\n  let maxWordIndex39 = 0;\n  let maxCharIndex39 = 0;\n  let maxWordIndex40 = 0;\n  let maxCharIndex40 = 0;\n  let maxWordIndex41 = 0;\n  let maxCharIndex41 = 0;\n  let maxWordIndex42 = 0;\n  let maxCharIndex42 = 0;\n  let maxWordIndex43 = 0;\n  let maxCharIndex43 = 0;\n  let maxWordIndex44 = 0;\n  let maxCharIndex44 = 0;\n  let maxWordIndex45 = 0;\n  let maxCharIndex45 = 0;\n  let maxWordIndex46 = 0;\n  let maxCharIndex46 = 0;\n  let maxWordIndex47 = 0;\n  let maxCharIndex47 = 0;\n  let maxWordIndex48 = 0;\n  let maxCharIndex48 = 0;\n  let maxWordIndex49 = 0;\n  let maxCharIndex49 = 0;\n  let maxWordIndex50 = 0;\n  let maxCharIndex50 = 0;\n  let maxWordIndex51 = 0;\n  let maxCharIndex51 = 0;\n  let maxWordIndex52 = 0;\n  let maxCharIndex52 = 0;\n  let maxWordIndex53 = 0;\n  let maxCharIndex53 = 0;\n  let maxWordIndex54 = 0;\n  let maxCharIndex54 = 0;\n  let maxWordIndex55 = 0;\n  let maxCharIndex55 = 0;\n  let maxWordIndex56 = 0;\n  let maxCharIndex56 = 0;\n  let maxWordIndex57 = 0;\n  let maxCharIndex57 = 0;\n  let maxWordIndex58 = 0;\n  let maxCharIndex58 = 0;\n  let maxWordIndex59 = 0;\n  let maxCharIndex59 = 0;\n  let maxWordIndex60 = 0;\n  let maxCharIndex60 = 0;\n  let maxWordIndex61 = 0;\n  let maxCharIndex61 = 0;\n  let maxWordIndex62 = 0;\n  let maxCharIndex62 = 0;\n  let maxWordIndex63 = 0;\n  let maxCharIndex63 = 0;\n  let maxWordIndex64 = 0;\n  let maxCharIndex64 = 0;\n  let maxWordIndex65 = 0;\n  let maxCharIndex65 = 0;\n  let maxWordIndex66 = 0;\n  let maxCharIndex66 = 0;\n  let maxWordIndex67 = 0;\n  let maxCharIndex67 = 0;\n  let maxWordIndex68 = 0;\n  let maxCharIndex68 = 0;\n  let maxWordIndex69 = 0;\n  let maxCharIndex69 = 0;\n  let maxWordIndex70 = 0;\n  let maxCharIndex70 = 0;\n  let maxWordIndex71 = 0;\n  let maxCharIndex71 = 0;\n  let maxWordIndex72 = 0;\n  let maxCharIndex72 = 0;\n  let maxWordIndex73 = 0;\n  let maxCharIndex73 = 0;\n  let maxWordIndex74 = 0;\n  let maxCharIndex74 = 0;\n  let maxWordIndex75 = 0;\n  let maxCharIndex75 = 0;\n  let maxWordIndex76 = 0;\n  let maxCharIndex76 = 0;\n  let maxWordIndex77 = 0;\n  let maxCharIndex77 = 0;\n  let maxWordIndex78 = 0;\n  let maxCharIndex78 = 0;\n  let maxWordIndex79 = 0;\n  let maxCharIndex79 = 0;\n  let maxWordIndex80 = 0;\n  let maxCharIndex80 = 0;\n  let maxWordIndex81 = 0;\n  let maxCharIndex81 = 0;\n  let maxWordIndex82 = 0;\n  let maxCharIndex82 = 0;\n  let maxWordIndex83 = 0;\n  let maxCharIndex83 = 0;\n  let maxWordIndex84 = 0;\n  let maxCharIndex84 = 0;\n  let maxWordIndex85 = 0;\n  let maxCharIndex85 = 0;\n  let maxWordIndex86 = 0;\n  let maxCharIndex86 = 0;\n  let maxWordIndex87 = 0;\n  let maxCharIndex87 = 0;\n  let maxWordIndex88 = 0;\n  let maxCharIndex88 = 0;\n  let maxWordIndex89 = 0;\n  let maxCharIndex89 = 0;\n  let maxWordIndex90 = 0;\n  let maxCharIndex90 = 0;\n  let maxWordIndex91 = 0;\n  let maxCharIndex91 = 0;\n  let maxWordIndex92 = 0;\n  let maxCharIndex92 = 0;\n  let maxWordIndex93 = 0;\n  let maxCharIndex93 = 0;\n  let maxWordIndex94 = 0;\n  let maxCharIndex94 = 0;\n  let maxWordIndex95 = 0;\n  let maxCharIndex95 = 0;\n  let maxWordIndex96 = 0;\n  let maxCharIndex96 = 0;\n  let maxWordIndex97 = 0;\n  let maxCharIndex97 = 0;\n  let maxWordIndex98 = 0;\n  let maxCharIndex98 = 0;\n  let maxWordIndex99 = 0;\n  let maxCharIndex99 = 0;\n  let maxWordIndex100 = 0;\n  let maxCharIndex100 = 0;\n  let maxWordIndex101 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let remaining = Math.min(remaining, need);\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else {\n      if (count > 1) {\n        return count;\n      }\n      count = 0;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters are in it\n * >>> countDistinctCharacters('abc')\n  3\n  >>> countDistinctCharacters('abc def')\n  3\n  >>> countDistinctCharacters('abc def ghi')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z a')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z ab')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z')\n  3\n  >>> countDistinctCharacters('abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl mno pqrs tuv wxyz yz z abc def ghi jkl m", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operatorIndex = -1;\n  let operatorLength = operator.length;\n  for (let i = 0; i < operatorLength; i++) {\n    operatorIndex = operator.indexOf(operator[i]);\n    if (operatorIndex === -1) {\n      result = result * operand[i];\n    } else {\n      result = result + operand[operatorIndex];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = '';\n  let letters = '';\n  let letter = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp271 = '';\n  let temp272 = '';\n  let temp273 = '';\n  let temp274 = '';", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexString = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPadding = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHex = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexString = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPadding = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHex = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPaddingHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHexString = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPaddingHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPadding = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPadding = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPaddingHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPaddingHexString = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPaddingHexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingHexStringWithPaddingHexStringWithPaddingHexStringWithPadding = (text) => {\n  if (!text) return null;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i!== j) {\n    result.push(i);\n    i = Math.floor(i / 10);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i];\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its ASCII code.\n */\nconst replaceCharactersASCII = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCII = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCII = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCII = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by the\n * character at that index and replaced by its Unicode value.\n */\nconst replaceCharactersUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicodeASCIIWithUnicode = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let notes_beats_length = 0;\n  let notes_beats_index = 0;\n  let notes_beats_value = 0;\n  let notes_beats_index2 = 0;\n  let notes_beats_value2 = 0;\n  let notes_beats_index3 = 0;\n  let notes_beats_value3 = 0;\n  let notes_beats_index4 = 0;\n  let notes_beats_value4 = 0;\n\n  for (let i = 0; i < notes_length; i++) {\n    if (notes[i].includes('.')) {\n      notes_beats_length++;\n      notes_beats_index++;\n      notes_beats_value++;\n      notes_beats_index2++;\n      notes_beats_value2++;\n      notes_beats_index3++;\n      notes_beats_value3++;\n      notes_beats_index4++;\n      notes_beats_value4++;\n    } else {\n      notes_beats_length++;\n      notes_beats_index++;\n      notes_beats_value++;\n      notes_beats_index2++;\n      notes_beats_value2++;\n      notes_beats_index3++;\n      notes_beats_value3++;\n      notes_beats_index4++;\n      notes_beats_value4++;\n    }\n  }\n\n  const notes_beats_length = notes_beats_length;\n  const notes_beats_index = notes_beats_index;\n  const notes_beats_value = notes_beats_value;\n  const notes_beats_index2 = notes_beats_index2;\n  const notes_beats_value2 = notes_beats_value2;\n  const notes_beats_index3 = notes_beats_index3;\n  const notes_beats_value3 = notes_beats_value3;\n  const notes_beats_index4 = notes_beats_index4;\n  const notes_beats_value4 = notes_beats_value4;\n\n  const notes_beats_length2 = notes_beats_length * 4;\n  const notes_beats_index2 = notes_beats_index2 * 4;\n  const notes_beats_value2 = notes_beats_value2 * 4;\n  const notes_beats_index3 = notes_beats_index3 * 4;\n  const notes_beats_value3 = notes_beats_value3 * 4;\n  const notes_beats_index4 = notes_beats_index4 * 4;\n  const notes_beats_value4 = notes_beats_value4 * 4;\n\n  const notes_beats_length3 = notes_beats_length * 4;\n  const notes_beats_index3 = notes_beats_index3 * 4;\n  const notes_beats_value3 = notes_beats_value3 * 4;\n  const notes_beats_index4 = notes_beats_index4 * 4;\n  const notes_beats_value4 = notes_beats_value4 * 4;\n\n  const notes_beats_length4 = notes_beats_length * 4;\n  const notes_beats_index4 = notes_beats_index4 * 4;\n  const notes_beats_value4 = notes_beats_value4 * 4;\n\n  const notes_beats_length5 = notes_beats_length * 4;\n  const notes_beats_index5 = notes_beats_index5 * 4;\n  const notes_beats_value5 = notes_beats_value5 * 4;\n\n  const notes_beats_length6 = notes_beats_length * 4;\n  const notes_beats_index6 = notes_beats_index6 * 4;\n  const notes_beats_value6 = notes_beats_value6 * 4;\n\n  const notes_beats_length7 = notes_beats_length * 4;\n  const notes_beats_index7 = notes_beats_index7 * 4;\n  const notes_beats_value7 = notes_beats_value7 * 4;\n\n  const notes_beats_length8 = notes_beats_length * 4;\n  const notes_beats_index8 = notes_beats_index8 * 4;\n  const notes_beats_value8 = notes_beats_value8 * 4;\n\n  const notes_beats_length9 = notes_beats_length * 4;\n  const notes_beats_index9 = notes_beats_index9 * 4;\n  const notes_beats_value9 = notes_beats_value9 * 4;\n\n  const notes_beats_length10 = notes_beats_length * 4;\n  const notes_beats_index10 = notes_beats_index10 * 4;\n  const notes_beats_value10 = notes_beats_value10 * 4;\n\n  const notes_beats_length11 = notes_beats_length * 4;\n  const notes_beats_index11 = notes_beats_index11 * 4;\n  const notes_beats_value11 = notes_beats_value11 * 4;\n\n  const notes_beats_length12 = notes_beats_length * 4;\n  const notes_beats_index12 = notes_beats_index12 * 4;\n  const notes_beats_value12 = notes_beats_value12 * 4;\n\n  const notes_beats_length13 = notes_beats_length * 4;\n  const notes_beats_index13 = notes_beats_index13 * 4;\n  const notes_beats_value13 = notes_beats_value13 * 4;\n\n  const notes_beats_length14 = notes_beats_length * 4;\n  const notes_beats_index14 = notes_beats_index14 * 4;\n  const notes_beats_value14 = notes_beats_value14 * 4;\n\n  const notes_beats_length15 = notes_beats_length * 4;\n  const notes_beats_index15 = notes_beats_index15 * 4;\n  const notes_beats_value15 = notes_beats_value15 * 4;\n\n  const notes_beats_length16 = notes_beats_length * 4;\n  const notes_beats_index16 = notes_beats_index16 * 4;\n  const notes_beats_value16 = notes_beats_value16 * 4;\n\n  const notes_beats_length17 = notes_beats_length * 4;\n  const notes_beats_index17 = notes_beats_index17 * 4;\n  const notes_beats_value17 = notes_beats_value17 * 4;\n\n  const notes_beats_length18 = notes_beats_length * 4;\n  const notes_beats_index18 = notes_beats_index18 * 4;\n  const notes_beats_value18 = notes_beats_value18 * 4;\n\n  const notes_beats_length19 = notes_beats_length * 4;\n  const notes_beats_index19 = notes_beats_index19 * 4;\n  const notes_beats_value19 = notes_beats_value19 * 4;\n\n  const notes_beats_length20 = notes_beats_length * 4;\n  const notes_beats_index20 = notes_beats_index20 * 4;\n  const notes_beats_value20 = notes_beats_value20 * 4;\n\n  const notes_beats_length21 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    count++;\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return count;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAll('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAll = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAll('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitive = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitive('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase2 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase2('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase3 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase3('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase4 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase4('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase5 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase5('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase6 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase6('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase7 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n *\n * Example:\n * Given the string 'abcabcbb', the function returns 'abcbb'.\n *\n * >>> replaceAllCaseInsensitiveNoCase7('abcabcbb', 'a', 'b')\n * 'abcbb'\n */\nconst replaceAllCaseInsensitiveNoCase8 = (string, substring, replacement) => {\n  let newString = string;\n  let index = string.indexOf(substring);\n  while (index >= 0) {\n    newString = newString.substring(0, index) + replacement + newString.substring(index + substring.length);\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return newString;\n};\n\n/**\n * Given a string, return a new string where all occurrences of substring\n * are replaced by substrings.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-0.5)\n  -3\n  */\nconst truncateNegativeNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateZeroNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateToNearestNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToNearestNumber(3.5)\n  3.5\n  */\nconst truncateToEvenNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToEvenNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfTwoNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfTwoNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfThreeNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfThreeNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfFourNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfFourNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfFiveNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfFiveNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfSixNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfSixNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfSevenNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfSevenNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfEightNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let itneger = Math.floor(Math.log(number) / Math.LN10) - decimals;\n  return number / Math.pow(10, itneger) * Math.pow(10, -decimals);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number itself rounded to a whole number.\n  >>> truncateToPowerOfEightNumber(3.5)\n  3.5\n  */\nconst truncateToPowerOfNineNumber = (number) => {\n  let decimals = Math.floor(Math.log(number) / Math.LN10);\n  let it", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [samller, larger] = numbers.sort((a, b) => a - b)\n  return [samller, larger]\n}\n\n/* Given a number and a list that can contain multiple numbers, return the\n  smallest number in the list that is a multiple of the number.\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  6\n  >>> findMultipleOf(3, [1, 2, 3, 4, 5, 6])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max - min;\n  const scaledNumbers = numbers.map((n) => n * scale);\n  return scaledNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffset = (numbers, offset) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max - min;\n  const scaledNumbers = numbers.map((n) => n * scale);\n  return scaledNumbers.map((n) => n + offset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffset = (numbers, offset, offsetOffset) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max - min;\n  const scaledNumbers = numbers.map((n) => n * scale);\n  return scaledNumbers.map((n) => n + offsetOffset + offset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffsetWithOffset = (numbers, offset, offsetOffset, offsetOffsetOffset) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max - min;\n  const scaledNumbers = numbers.map((n) => n * scale);\n  return scaledNumbers.map((n) => n + offsetOffset + offsetOffsetOffset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, -0.5, 0.5)\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithOffsetWithOffsetWithOffsetWithOffset = (numbers, offset, offsetOffset, offsetOffsetOffset, offsetOffsetOffsetOffset) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max - min;\n  const scaledNumbers = numbers.map((n) => n * scale);\n  return scaledNumbers.map((n) => n + offsetOffset + offsetOffsetOffsetOffsetOffset);\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnitWithOffsetWithOffsetWithOffsetWithOffset([1.0, 2.0, 3.0, 4.0, 5.0], -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pyhton values olny for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pyhton values olny for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any pyhton values olny for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any pyhton values olny for dates\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'ab')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWith('abc', 'abc')\n  true\n  >>> endsWith('abc', 'ab')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'ab'\n * >>> startsWith('ab', 'ab')\n  true\n  >>> startsWith('ab', 'abc')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWith('abc', 'abc')\n  true\n  >>> endsWith('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWithIgnoreCase('abc', 'abc')\n  true\n  >>> startsWithIgnoreCase('abc', 'ab')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWithIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCase('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'ab'\n * >>> startsWithIgnoreCaseIgnoreCase('ab', 'ab')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('ab', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.startsWith(prefix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string ends with given suffix\n * e.g. 'abc' ends with 'abc'\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.endsWith(suffix, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase, StringCase.IgnoreCase)\n}\n\n/**\n * Check if given string starts with given prefix\n * e.g. 'abc' starts with 'abc'\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'ab')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnore", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> lar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let num = 1;\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let factor;\n  let factors = [];\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  return isEven(n) || isOdd(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isOddOrZero(n);\n};\n\nconst isEvenOrOddOrOne = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrTwo = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrOne(n);\n};\n\nconst isEvenOrOddOrThree = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwo(n);\n};\n\nconst isEvenOrOddOrFour = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrThree(n);\n};\n\nconst isEvenOrOddOrFive = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrFour(n);\n};\n\nconst isEvenOrOddOrSix = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrFive(n);\n};\n\nconst isEvenOrOddOrSeven = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrSix(n);\n};\n\nconst isEvenOrOddOrEight = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrSeven(n);\n};\n\nconst isEvenOrOddOrNine = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrEight(n);\n};\n\nconst isEvenOrOddOrTen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrNine(n);\n};\n\nconst isEvenOrOddOrEleven = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTen(n);\n};\n\nconst isEvenOrOddOrTwelve = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrEleven(n);\n};\n\nconst isEvenOrOddOrThirteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwelve(n);\n};\n\nconst isEvenOrOddOrFourteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrThirteen(n);\n};\n\nconst isEvenOrOddOrFifteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrFourteen(n);\n};\n\nconst isEvenOrOddOrSixteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrFifteen(n);\n};\n\nconst isEvenOrOddOrSeventeen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrSixteen(n);\n};\n\nconst isEvenOrOddOrEighteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrSeventeen(n);\n};\n\nconst isEvenOrOddOrNineteen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrEighteen(n);\n};\n\nconst isEvenOrOddOrTwenty = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrNineteen(n);\n};\n\nconst isEvenOrOddOrTwentyOne = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwenty(n);\n};\n\nconst isEvenOrOddOrTwentyTwo = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyOne(n);\n};\n\nconst isEvenOrOddOrTwentyThree = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyTwo(n);\n};\n\nconst isEvenOrOddOrTwentyFour = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyThree(n);\n};\n\nconst isEvenOrOddOrTwentyFive = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyFour(n);\n};\n\nconst isEvenOrOddOrTwentySix = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyFive(n);\n};\n\nconst isEvenOrOddOrTwentySeven = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentySix(n);\n};\n\nconst isEvenOrOddOrTwentyEight = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentySeven(n);\n};\n\nconst isEvenOrOddOrTwentyNine = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyEight(n);\n};\n\nconst isEvenOrOddOrTwentyTen = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyNine(n);\n};\n\nconst isEvenOrOddOrTwentyEleven = (n) => {\n  return isEvenOrOdd(n) || isOdd(n) || isEvenOrOddOrTwentyTen(n);\n};\n\nconst isEvenOrOddOrTwentyTwelve = (n) => {\n  return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .toUpperCase();\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLowerCaseLetter = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter.toLowerCase() === letter);\n};\n\n/**\n * Given a string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n */\nconst firstUpperCaseLetter = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter.toUpperCase() === letter);\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetter = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0]);\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrLowerCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toLowerCase());\n};\n\n/**\n * Given a string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n */\nconst firstLetterOrUpperCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toUpperCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrUpperCaseOrLowerCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toLowerCase() || letter[0] === letter[0].toUpperCase());\n};\n\n/**\n * Given a string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n */\nconst firstLetterOrUpperCaseOrLowerCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toUpperCase() || letter[0] === letter[0].toLowerCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrLowerCaseOrUpperCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toLowerCase() || letter[0] === letter[0].toUpperCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrUpperCaseOrLowerCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toUpperCase() || letter[0] === letter[0].toLowerCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrUpperCaseOrLowerCaseOrUpperCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toUpperCase() || letter[0] === letter[0].toLowerCase() || letter[0] === letter[0].toUpperCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrLowerCaseOrUpperCaseOrLowerCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toLowerCase() || letter[0] === letter[0].toUpperCase() || letter[0] === letter[0].toLowerCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrUpperCaseOrLowerCaseOrUpperCase = (string) => {\n  return string\n   .split('')\n   .find((letter) => letter[0] === letter[0].toUpperCase() || letter[0] === letter[0].toLowerCase() || letter[0] === letter[0].toUpperCase());\n};\n\n/**\n * Given a string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n * For a given string, return the first character that is a uppercase letter, or\n * null if there is no uppercase letter.\n * For a given string, return the first character that is a lowercase letter, or\n * null if there is no lowercase letter.\n */\nconst firstLetterOrLowerCaseOrUpperCaseOrLowerCase = (string) => {\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => acc + string, \"\");\n};\n\n/**\n * Converts string to lowercase.\n * If string contains only letters, returns string.\n * If string contains numbers, returns string.\n * If string contains special characters, returns string.\n * If string contains other characters, returns string.\n * If string contains whitespace, returns string.\n * If string contains other whitespace, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special characters, returns string.\n * If string contains other special ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that start with a given prefix.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those that start with the prefix are returned.\n * If no prefix is given, all strings are returned.\n * If prefix is given, only those ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let balanceOfAccount = 0;\n  let isBalanceZero = true;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      isBalanceZero = false;\n      break;\n    }\n    balance += operations[i];\n    balanceOfAccount += operations[i];\n  }\n  if (balance === 0) {\n    isBalanceZero = false;\n  }\n  if (balanceOfAccount === 0) {\n    isBalanceZero = false;\n  }\n  return isBalanceZero;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, -4, 5])\n  false\n  */\nconst sumOfOperations = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum === operations.length;\n};\n\n/* Given a list of operations, return true if all operations sum up to a certain value\n  >>> sumOfOperations([1, 2, 3])\n  true\n  >>> sumOfOperations([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] > 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result;\n};\n\n/*Return noly negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] < 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result;\n};\n\n/*Return noly numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 3, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] > 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result;\n};\n\n/*Return noly numbers in the list with positive and negative signs.\n  >>> getNumbersWithPositiveAndNegativeSigns([-1, 2, -4, 5, 6])\n  [2, 3, 5, 6]\n  >>> getNumbersWithPositiveAndNegativeSigns([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersWithPositiveAndNegativeSigns = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] > 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result.concat(getPositive(l), getNegative(l));\n};\n\n/*Return noly numbers in the list with positive and negative signs.\n  >>> getNumbersWithPositiveAndNegativeSigns([-1, 2, -4, 5, 6])\n  [2, 3, 5, 6]\n  >>> getNumbersWithPositiveAndNegativeSigns([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersWithPositiveAndNegativeSignsNoNegativeSigns = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] < 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result.concat(getPositive(l), getNegative(l));\n};\n\n/*Return noly numbers in the list with positive and negative signs.\n  >>> getNumbersWithPositiveAndNegativeSignsNoNegativeSigns([-1, 2, -4, 5, 6])\n  [2, 3, 5, 6]\n  >>> getNumbersWithPositiveAndNegativeSignsNoNegativeSigns([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersWithPositiveAndNegativeSignsNoNegativeSignsNoNegativeSigns = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] < 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result.concat(getPositive(l), getNegative(l));\n};\n\n/*Return noly numbers in the list with positive and negative signs.\n  >>> getNumbersWithPositiveAndNegativeSignsNoNegativeSignsNoNegativeSigns([-1, 2, -4, 5, 6])\n  [2, 3, 5, 6]\n  >>> getNumbersWithPositiveAndNegativeSignsNoNegativeSignsNoNegativeSigns([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersWithPositiveAndNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSigns = (l) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (j < l.length) {\n    if (l[j] < 0) {\n      result.push(l[j]);\n      j++;\n    } else {\n      k++;\n    }\n  }\n  return result.concat(getPositive(l), getNegative(l));\n};\n\n/*Return noly numbers in the list with positive and negative signs.\n  >>> getNumbersWithPositiveAndNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSignsNoNegativeSign", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> factors(2)\n  [2,1]\n  >>> factors(3)\n  []\n  >>> factors(5)\n  []\n  >>> factors(7)\n  []\n  >>> factors(11)\n  [2,1]\n  >>> factors(13)\n  []\n  >>> factors(15)\n  []\n  >>> factors(17)\n  []\n  >>> factors(19)\n  [2,1]\n  >>> factors(20)\n  []\n  >>> factors(21)\n  []\n  >>> factors(23)\n  [2,1]\n  >>> factors(24)\n  []\n  >>> factors(25)\n  []\n  >>> factors(27)\n  [2,1]\n  >>> factors(28)\n  []\n  >>> factors(29)\n  []\n  >>> factors(31)\n  [2,1]\n  >>> factors(32)\n  []\n  >>> factors(33)\n  []\n  >>> factors(35)\n  [2,1]\n  >>> factors(36)\n  []\n  >>> factors(37)\n  []\n  >>> factors(39)\n  [2,1]\n  >>> factors(40)\n  []\n  >>> factors(41)\n  []\n  >>> factors(43)\n  [2,1]\n  >>> factors(44)\n  []\n  >>> factors(45)\n  []\n  >>> factors(47)\n  [2,1]\n  >>> factors(48)\n  []\n  >>> factors(49)\n  []\n  >>> factors(51)\n  [2,1]\n  >>> factors(52)\n  []\n  >>> factors(53)\n  []\n  >>> factors(55)\n  [2,1]\n  >>> factors(56)\n  []\n  >>> factors(57)\n  []\n  >>> factors(59)\n  [2,1]\n  >>> factors(60)\n  []\n  >>> factors(61)\n  []\n  >>> factors(63)\n  [2,1]\n  >>> factors(64)\n  []\n  >>> factors(65)\n  []\n  >>> factors(67)\n  [2,1]\n  >>> factors(68)\n  []\n  >>> factors(69)\n  []\n  >>> factors(71)\n  [2,1]\n  >>> factors(72)\n  []\n  >>> factors(73)\n  []\n  >>> factors(75)\n  [2,1]\n  >>> factors(76)\n  []\n  >>> factors(77)\n  []\n  >>> factors(79)\n  [2,1]\n  >>> factors(80)\n  []\n  >>> factors(81)\n  []\n  >>> factors(83)\n  [2,1]\n  >>> factors(84)\n  []\n  >>> factors(85)\n  []\n  >>> factors(87)\n  [2,1]\n  >>> factors(88)\n  []\n  >>> factors(89)\n  []\n  >>> factors(91)\n  [2,1]\n  >>> factors(92)\n  []\n  >>> factors(93)\n  []\n  >>> factors(95)\n  [2,1]\n  >>> factors(96)\n  []\n  >>> factors(97)\n  []\n  >>> factors(99)\n  [2,1]\n  >>> factors(100)\n  []\n  >>> factors(101)\n  []\n  >>> factors(103)\n  [2,1]\n  >>> factors(104)\n  []\n  >>> factors(105)\n  []\n  >>> factors(107)\n  [2,1]\n  >>> factors(108)\n  []\n  >>> factors(109)\n  []\n  >>> factors(111)\n  [2,1]\n  >>> factors(112)\n  []\n  >>> factors(113)\n  []\n  >>> factors(115)\n  [2,1]\n  >>> factors(116)\n  []\n  >>> factors(117)\n  []\n  >>> factors(119)\n  [2,1]\n  >>> factors(120)\n  []\n  >>> factors(121)\n  []\n  >>> factors(123)\n  [2,1]\n  >>> factors(124)\n  []\n  >>> factors(125)\n  []\n  >>> factors(127)\n  [2,1]\n  >>> factors(128)\n  []\n  >>> factors(129)\n  []\n  >>> factors(131)\n  [2,1]\n  >>> factors(132)\n  []\n  >>> factors(133)\n  []\n  >>> factors(135)\n  [2,1]\n  >>> factors(136)\n  []\n  >>> factors(137)\n  []\n  >>> factors(139)\n  [2,1]\n  >>> factors(140)\n  []\n  >>> factors(141)\n  []\n  >>> factors(143)\n  [2,1]\n  >>> factors(144)\n  []\n  >>> factors(145)\n  []\n  >>> factors(147)\n  [2,1]\n  >>> factors(148)\n  []\n  >>> factors(149)\n  []\n  >>> factors(151)\n  [2,1]\n  >>> factors(152)\n  []\n  >>> factors(153)\n  []\n  >>> factors(155)\n  [2,1]\n  >>> factors(156)\n  []\n  >>> factors(157)\n  []\n  >>> factors(159)\n  [2,1]\n  >>> factors(160)\n  []\n  >>> factors(161)\n  []\n  >>> factors(163)\n  [2,1]\n  >>> factors(164)\n  []\n  >>> factors(165)\n  []\n  >>> factors(167)\n  [2,1]\n  >>> factors(168)\n  []\n  >>> factors(169)\n  []\n  >>> factors(171)\n  [2,1]\n  >>> factors(172)\n  []\n  >>> factors(173)\n  []\n  >>> factors(175)\n  [2,1]\n  >>> factors(176)\n  []\n  >>> factors(177)\n  []\n  >>> factors(179)\n  [2,1]\n  >>> factors(180)\n  []\n  >>> factors(181)\n  []\n  >>> factors(183)\n  [2,1]\n  >>> factors(184)\n  []\n  >>> factors(185)\n  []\n  >>> factors(187)\n  [2,1]\n  >>> factors(188)\n  []\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxIndexValue = 0;\n  let maxIndexValue2 = 0;\n  let maxIndexValue3 = 0;\n  let maxIndexValue4 = 0;\n  let maxIndexValue5 = 0;\n  let maxIndexValue6 = 0;\n  let maxIndexValue7 = 0;\n  let maxIndexValue8 = 0;\n  let maxIndexValue9 = 0;\n  let maxIndexValue10 = 0;\n  let maxIndexValue11 = 0;\n  let maxIndexValue12 = 0;\n  let maxIndexValue13 = 0;\n  let maxIndexValue14 = 0;\n  let maxIndexValue15 = 0;\n  let maxIndexValue16 = 0;\n  let maxIndexValue17 = 0;\n  let maxIndexValue18 = 0;\n  let maxIndexValue19 = 0;\n  let maxIndexValue20 = 0;\n  let maxIndexValue21 = 0;\n  let maxIndexValue22 = 0;\n  let maxIndexValue23 = 0;\n  let maxIndexValue24 = 0;\n  let maxIndexValue25 = 0;\n  let maxIndexValue26 = 0;\n  let maxIndexValue27 = 0;\n  let maxIndexValue28 = 0;\n  let maxIndexValue29 = 0;\n  let maxIndexValue30 = 0;\n  let maxIndexValue31 = 0;\n  let maxIndexValue32 = 0;\n  let maxIndexValue33 = 0;\n  let maxIndexValue34 = 0;\n  let maxIndexValue35 = 0;\n  let maxIndexValue36 = 0;\n  let maxIndexValue37 = 0;\n  let maxIndexValue38 = 0;\n  let maxIndexValue39 = 0;\n  let maxIndexValue40 = 0;\n  let maxIndexValue41 = 0;\n  let maxIndexValue42 = 0;\n  let maxIndexValue43 = 0;\n  let maxIndexValue44 = 0;\n  let maxIndexValue45 = 0;\n  let maxIndexValue46 = 0;\n  let maxIndexValue47 = 0;\n  let maxIndexValue48 = 0;\n  let maxIndexValue49 = 0;\n  let maxIndexValue50 = 0;\n  let maxIndexValue51 = 0;\n  let maxIndexValue52 = 0;\n  let maxIndexValue53 = 0;\n  let maxIndexValue54 = 0;\n  let maxIndexValue55 = 0;\n  let maxIndexValue56 = 0;\n  let maxIndexValue57 = 0;\n  let maxIndexValue58 = 0;\n  let maxIndexValue59 = 0;\n  let maxIndexValue60 = 0;\n  let maxIndexValue61 = 0;\n  let maxIndexValue62 = 0;\n  let maxIndexValue63 = 0;\n  let maxIndexValue64 = 0;\n  let maxIndexValue65 = 0;\n  let maxIndexValue66 = 0;\n  let maxIndexValue67 = 0;\n  let maxIndexValue68 = 0;\n  let maxIndexValue69 = 0;\n  let maxIndexValue70 = 0;\n  let maxIndexValue71 = 0;\n  let maxIndexValue72 = 0;\n  let maxIndexValue73 = 0;\n  let maxIndexValue74 = 0;\n  let maxIndexValue75 = 0;\n  let maxIndexValue76 = 0;\n  let maxIndexValue77 = 0;\n  let maxIndexValue78 = 0;\n  let maxIndexValue79 = 0;\n  let maxIndexValue80 = 0;\n  let maxIndexValue81 = 0;\n  let maxIndexValue82 = 0;\n  let maxIndexValue83 = 0;\n  let maxIndexValue84 = 0;\n  let maxIndexValue85 = 0;\n  let maxIndexValue86 = 0;\n  let maxIndexValue87 = 0;\n  let maxIndexValue88 = 0;\n  let maxIndexValue89 = 0;\n  let maxIndexValue90 = 0;\n  let maxIndexValue91 = 0;\n  let maxIndexValue92 = 0;\n  let maxIndexValue93 = 0;\n  let maxIndexValue94 = 0;\n  let maxIndexValue95 = 0;\n  let maxIndexValue96 = 0;\n  let maxIndexValue97 = 0;\n  let maxIndexValue98 = 0;\n  let maxIndexValue99 = 0;\n  let maxIndexValue100 = 0;\n  let maxIndexValue101 = 0;\n  let maxIndexValue102 = 0;\n  let maxIndexValue103 = 0;\n  let maxIndexValue104 = 0;\n  let maxIndexValue105 = 0;\n  let maxIndexValue106 = 0;\n  let maxIndexValue107 = 0;\n  let maxIndexValue108 = 0;\n  let maxIndexValue109 = 0;\n  let maxIndexValue110 = 0;\n  let maxIndexValue111 = 0;\n  let maxIndexValue112 = 0;\n  let maxIndexValue113 = 0;\n  let maxIndexValue114 = 0;\n  let maxIndexValue115 = 0;\n  let maxIndexValue116 = 0;\n  let maxIndexValue117 = 0;\n  let maxIndexValue118 = 0;\n  let maxIndexValue119 = 0;\n  let maxIndexValue120 = 0;\n  let maxIndexValue121 = 0;\n  let maxIndexValue122 = 0;\n  let maxIndexValue123 = 0;\n  let maxIndexValue124 = 0;\n  let maxIndexValue125 = 0;\n  let maxIndexValue126 = 0;\n  let maxIndexValue127 = 0;\n  let maxIndexValue128 = 0;\n  let maxIndexValue129 = 0;\n  let maxIndexValue130 = 0;\n  let maxIndexValue131 = 0;\n  let maxIndexValue132 = 0;\n  let maxIndexValue133 = 0;\n  let maxIndexValue134 = 0;\n  let maxIndexValue135 = 0;\n  let maxIndexValue136 = 0;\n  let maxIndexValue137 = 0;\n  let maxIndexValue138 = 0;\n  let maxIndexValue139 = 0;\n  let maxIndexValue140 = 0;\n  let maxIndexValue141 = 0;\n  let maxIndexValue142 = 0;\n  let maxIndexValue143 = 0;\n  let maxIndexValue144 = 0;\n  let maxIndexValue145 = 0;\n  let maxIndexValue146 = 0;\n  let maxIndexValue147 = 0;\n  let maxIndexValue148 = 0;\n  let maxIndexValue149 = 0;\n  let maxIndexValue150 = 0;\n  let maxIndexValue151 = 0;\n  let maxIndexValue152 = 0;\n  let maxIndexValue153 = 0;\n  let maxIndexValue154 = 0;\n  let maxIndexValue155 = 0;\n  let maxIndexValue156 = 0;\n  let maxIndexValue157 = 0;\n  let maxIndexValue158 = 0;\n  let maxIndexValue159 = 0;\n  let maxIndexValue160 = 0;\n  let maxIndexValue161 = 0;\n  let maxIndexValue162 = 0;\n  let maxIndexValue163 = 0;\n  let maxIndexValue164 = 0;\n  let maxIndexValue165 = 0;\n  let maxIndexValue166 = 0;\n  let maxIndexValue167 = 0;\n  let maxIndexValue168 = 0;\n  let maxIndexValue169 = 0;\n  let maxIndexValue170 = 0;\n  let maxIndexValue171 = 0;\n  let maxIndexValue172 = 0;\n  let maxIndexValue173 = 0;\n  let maxIndexValue174 = 0;\n  let maxIndexValue175 = 0;\n  let maxIndexValue176 = 0;\n  let maxIndexValue177 = 0;\n  let maxIndexValue178 = 0;\n  let maxIndexValue179 = 0;\n  let maxIndexValue180 = 0;\n  let maxIndexValue181 = 0;\n  let maxIndexValue182 = 0;\n  let maxIndexValue183 = 0;\n  let maxIndexValue184 = 0;\n  let maxIndexValue185", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l2[e3] = l[e];\n      e3++;\n    } else {\n      l2[e3] = l[e];\n      e3++;\n    }\n    e++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSorted = (l) => {\n  let l2 = l.slice();\n  let e = 0;\n  let e2 = 1;\n  let e3 = 1;\n  while (e < l.length) {\n    if (l[e] % 3 === 0) {\n      l2[e2] = l[e];\n      e2++;\n    } else {\n      l2[e2] = l[e];\n      e2++;\n    }\n    if (l[e] % 3 === 1) {\n      l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el]\n    seen[el] = 1\n    return el\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1\n    return el[key]\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['bar', 'baz', 'foo']\n  */\nconst uniqueBy = (key) => {\n  let seen = {}\n  return l.filter(function (el) {\n    return!seen[el[key]]\n    seen[el[key]] = 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum leement in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return average leement in the list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median leement in the list.\n  >>> medianElement([1, 2, 3])\n  3\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst medianElement = (l) => {\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mid) {\n      mid = l[i];\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    return mid;\n  } else {\n    return (count - 1) / 2;\n  }\n};\n\n/*Return standard deviation leement in the list.\n  >>> stdDevElement([1, 2, 3])\n  1.5\n  >>> stdDevElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDevElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([1, 2, 3])\n  3\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElement = (l) => {\n  let max = 0;\n  let min = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    count++;\n  }\n  return max;\n};\n\n/*Return mode leement in the list.\n  >>> mode", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    digit = n % 13;\n  }\n  if (digit === 1) {\n    result = 1;\n  } else if (digit === 2) {\n    result = 2;\n  } else if (digit === 3) {\n    result = 3;\n  } else if (digit === 4) {\n    result = 4;\n  } else if (digit === 5) {\n    result = 5;\n  } else if (digit === 6) {\n    result = 6;\n  } else if (digit === 7) {\n    result = 7;\n  } else if (digit === 8) {\n    result = 8;\n  } else if (digit === 9) {\n    result = 9;\n  } else if (digit === 10) {\n    result = 10;\n  } else if (digit === 11) {\n    result = 11;\n  } else if (digit === 12) {\n    result = 12;\n  } else if (digit === 13) {\n    result = 13;\n  } else if (digit === 14) {\n    result = 14;\n  } else if (digit === 15) {\n    result = 15;\n  } else if (digit === 16) {\n    result = 16;\n  } else if (digit === 17) {\n    result = 17;\n  } else if (digit === 18) {\n    result = 18;\n  } else if (digit === 19) {\n    result = 19;\n  } else if (digit === 20) {\n    result = 20;\n  } else if (digit === 21) {\n    result = 21;\n  } else if (digit === 22) {\n    result = 22;\n  } else if (digit === 23) {\n    result = 23;\n  } else if (digit === 24) {\n    result = 24;\n  } else if (digit === 25) {\n    result = 25;\n  } else if (digit === 26) {\n    result = 26;\n  } else if (digit === 27) {\n    result = 27;\n  } else if (digit === 28) {\n    result = 28;\n  } else if (digit === 29) {\n    result = 29;\n  } else if (digit === 30) {\n    result = 30;\n  } else if (digit === 31) {\n    result = 31;\n  }\n  return result;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7, 8]\n  >>> sortEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7, 8]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7, 8, 9]\n  >>> sortEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7, 8, 9]\n  */\nconst sortEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7, 8, 9]\n  >>> sortEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7, 8, 9]\n  */\nconst sortEvenOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7, 8, 9]\n  >>> sortEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7, 8, 9]\n  */\nconst sortEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7, 8, 9]\n  >>> sortEvenOddOddOddOddOddOddO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string and returns array of strings with all possible combinations of 3 letters.\n  */\nconst getCombinations = (s) => {\n  var combinations = [];\n  var groups = [];\n  var groups2 = [];\n  var groups3 = [];\n  var groups32 = [];\n  var groups33 = [];\n  var groups312 = [];\n  var groups313 = [];\n  var groups314 = [];\n  var groups315 = [];\n  var groups316 = [];\n  var groups317 = [];\n  var groups318 = [];\n  var groups319 = [];\n  var groups320 = [];\n  var groups32 = [];\n  var groups33 = [];\n  var groups34 = [];\n  var groups35 = [];\n  var groups36 = [];\n  var groups37 = [];\n  var groups38 = [];\n  var groups39 = [];\n  var groups40 = [];\n  var groups41 = [];\n  var groups42 = [];\n  var groups43 = [];\n  var groups44 = [];\n  var groups45 = [];\n  var groups46 = [];\n  var groups47 = [];\n  var groups48 = [];\n  var groups49 = [];\n  var groups50 = [];\n  var groups51 = [];\n  var groups52 = [];\n  var groups53 = [];\n  var groups54 = [];\n  var groups55 = [];\n  var groups56 = [];\n  var groups57 = [];\n  var groups58 = [];\n  var groups59 = [];\n  var groups60 = [];\n  var groups61 = [];\n  var groups62 = [];\n  var groups63 = [];\n  var groups64 = [];\n  var groups65 = [];\n  var groups66 = [];\n  var groups67 = [];\n  var groups68 = [];\n  var groups69 = [];\n  var groups70 = [];\n  var groups71 = [];\n  var groups72 = [];\n  var groups73 = [];\n  var groups74 = [];\n  var groups75 = [];\n  var groups76 = [];\n  var groups77 = [];\n  var groups78 = [];\n  var groups79 = [];\n  var groups80 = [];\n  var groups81 = [];\n  var groups82 = [];\n  var groups83 = [];\n  var groups84 = [];\n  var groups85 = [];\n  var groups86 = [];\n  var groups87 = [];\n  var groups88 = [];\n  var groups89 = [];\n  var groups90 = [];\n  var groups91 = [];\n  var groups92 = [];\n  var groups93 = [];\n  var groups94 = [];\n  var groups95 = [];\n  var groups96 = [];\n  var groups97 = [];\n  var groups98 = [];\n  var groups99 = [];\n  var groups100 = [];\n  var groups101 = [];\n  var groups102 = [];\n  var groups103 = [];\n  var groups104 = [];\n  var groups105 = [];\n  var groups106 = [];\n  var groups107 = [];\n  var groups108 = [];\n  var groups109 = [];\n  var groups110 = [];\n  var groups111 = [];\n  var groups112 = [];\n  var groups113 = [];\n  var groups114 = [];\n  var groups115 = [];\n  var groups116 = [];\n  var groups117 = [];\n  var groups118 = [];\n  var groups119 = [];\n  var groups120 = [];\n  var groups121 = [];\n  var groups122 = [];\n  var groups123 = [];\n  var groups124 = [];\n  var groups125 = [];\n  var groups126 = [];\n  var groups127 = [];\n  var groups128 = [];\n  var groups129 = [];\n  var groups130 = [];\n  var groups131 = [];\n  var groups132 = [];\n  var groups133 = [];\n  var groups134 = [];\n  var groups135 = [];\n  var groups136 = [];\n  var groups137 = [];\n  var groups138 = [];\n  var groups139 = [];\n  var groups140 = [];\n  var groups141 = [];\n  var groups142 = [];\n  var groups143 = [];\n  var groups144 = [];\n  var groups145 = [];\n  var groups146 = [];\n  var groups147 = [];\n  var groups148 = [];\n  var groups149 = [];\n  var groups150 = [];\n  var groups151 = [];\n  var groups152 = [];\n  var groups153 = [];\n  var groups154 = [];\n  var groups155 = [];\n  var groups156 = [];\n  var groups157 = [];\n  var groups158 = [];\n  var groups159 = [];\n  var groups160 = [];\n  var groups161 = [];\n  var groups162 = [];\n  var groups163 = [];\n  var groups164 = [];\n  var groups165 = [];\n  var groups166 = [];\n  var groups167 = [];\n  var groups168 = [];\n  var groups169 = [];\n  var groups170 = [];\n  var groups171 = [];\n  var groups172 = [];\n  var groups173 = [];\n  var groups174 = [];\n  var groups175 = [];\n  var groups176 = [];\n  var groups177 = [];\n  var groups178 = [];\n  var groups179 = [];\n  var groups180 = [];\n  var groups181 = [];\n  var groups182 = [];\n  var groups183 = [];\n  var groups184 = [];\n  var groups185 = [];\n  var groups186 = [];\n  var groups187 = [];\n  var groups188 = [];\n  var groups189 = [];\n  var groups190 = [];\n  var groups191 = [];\n  var groups192 = [];\n  var groups193 = [];\n  var groups194 = [];\n  var groups195 = [];\n  var groups196 = [];\n  var groups197 = [];\n  var groups198 = [];\n  var groups199 = [];\n  var groups200 = [];\n  var groups201 = [];\n  var groups202 = [];\n  var groups203 = [];\n  var groups204 = [];\n  var groups205 = [];\n  var groups206 = [];\n  var groups207 = [];\n  var groups208 = [];\n  var groups209 = [];\n  var groups210 = [];\n  var groups211 = [];\n  var groups212 = [];\n  var groups213 = [];\n  var groups214 = [];\n  var groups215 = [];\n  var groups216 = [];\n  var groups217 = [];\n  var groups218 = [];\n  var groups219 = [];\n  var groups220 = [];\n  var groups221 = [];\n  var groups222 = [];\n  var groups223 = [];\n  var groups224 = [];\n  var groups225 = [];\n  var groups226 = [];\n  var groups227 = [];\n  var groups228 = [];\n  var groups229 = [];\n  var groups230 = [];\n  var groups231 = [];\n  var groups232 = [];\n  var groups233 = [];\n  var groups234 = [];\n  var groups235 = [];\n  var groups236 = [];\n  var groups237 = [];\n  var groups238 = [];\n  var groups239 = [];\n  var groups240 = [];\n  var groups241 = [];\n  var groups242 = [];\n  var groups243 = [];\n  var groups244 = [];\n  var groups245 = [];\n  var groups246 = [];\n  var groups247 = [];\n  var groups248 = [];\n  var groups249 = [];\n  var groups250 = [];\n  var groups251 = [];\n  var groups252 = [];\n  var groups253 = [];\n  var groups254 = [];\n  var groups255 = [];\n  var groups256 = [];\n  var groups257 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j <= n; j++) {\n      if (num % j === 0) {\n        isPrime = true;\n        break;\n      }\n    }\n    if (isPrime) {\n      num++;\n    }\n    i++;\n  }\n  return num;\n};\n\n/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num = 1;\n  let isPrime = true;\n  while (isPrime) {\n    isPrime = false;\n    for (let j = 2; j ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfList = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfList([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpoint = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpoint([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLast([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLast([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLast([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLast([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLast([1.0, 2.0, 3.0, 4.0])\n * 4.0\n */\nconst meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLast = (numbers) => {\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculates the mean absolute deviation of a list of numbers, ignoring the\n * centerpoint and ignoring the first and last elements and ignoring the\n * first and last elements.\n * Mean absolute deviation is the average absolute difference between each\n * elemnet and a centerpoint (mean in thsi case):\n * MAD = average | x - x_mean |\n * >>> meanAbsoluteDeviationOfListOfCenterpointAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLastAndFirstLast", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to one, adn false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to two, adn false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to three, adn false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to four, adn false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to five, adn false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to six, adn false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to seven, adn false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to eight, adn false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to nine, adn false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = cars[i];\n    const car2 = cars[(i + 1) % n];\n    if (car1.speed > car2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoad = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeed = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeed = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeed = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistanceAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistanceAndDistanceAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistanceAndDistanceAndDistance = (car, point) => {\n  const x = point.x;\n  const y = point.y;\n  const dx = x - car.x;\n  const dy = y - car.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const speed = car.speed;\n  return distance;\n};\n\n/*\n  Given a car and a point on the road, determine if that point is within the\n  road and if so, what is the distance to that point.\n  */\nconst pointInRoadWithDistanceAndSpeedAndDistanceAndSpeedAndDistanceAndDistanceAndDistanceAndDistance = (car, point) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n    i++\n  }\n  return res\n}\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let i = 0\n  let res = []\n  while (i < l.length) {\n    if (l[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  findPairsSumToZero takes a list of integers as an input.\n  it returns all pairs of integers that sum to zero, and false otherwise.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToZero([1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  */\nconst findPairsSumToZero = (l) => {\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i]];\n    if (pairsSumToZero(pair) === true) {\n      pairs.push(pair);\n    }\n  }\n  return pairs;\n};\n\n/*\n  findPairsSumToOne takes a list of integers as an input.\n  it returns all pairs of integers that sum to one, and false otherwise.\n  >>> findPairsSumToOne([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToOne([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToOne([1, 2, 3, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToOne([2, 4, -5, 3, 5, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToOne([1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  */\nconst findPairsSumToOne = (l) => {\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i]];\n    if (pairsSumToOne(pair) === true) {\n      pairs.push(pair);\n    }\n  }\n  return pairs;\n};\n\n/*\n  findPairsSumToTwo takes a list of integers as an input.\n  it returns all pairs of integers that sum to two, and false otherwise.\n  >>> findPairsSumToTwo([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToTwo([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToTwo([1, 2, 3, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToTwo([2, 4, -5, 3, 5, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToTwo([1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  */\nconst findPairsSumToTwo = (l) => {\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i]];\n    if (pairsSumToTwo(pair) === true) {\n      pairs.push(pair);\n    }\n  }\n  return pairs;\n};\n\n/*\n  findPairsSumToThree takes a list of integers as an input.\n  it returns all pairs of integers that sum to three, and false otherwise.\n  >>> findPairsSumToThree([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToThree([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToThree([1, 2, 3, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToThree([2, 4, -5, 3, 5, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToThree([1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  */\nconst findPairsSumToThree = (l) => {\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i]];\n    if (pairsSumToThree(pair) === true) {\n      pairs.push(pair);\n    }\n  }\n  return pairs;\n};\n\n/*\n  findPairsSumToFour takes a list of integers as an input.\n  it returns all pairs of integers that sum to four, and false otherwise.\n  >>> findPairsSumToFour([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToFour([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToFour([1, 2, 3, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToFour([2, 4, -5, 3, 5, 7])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToFour([1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  */\nconst findPairsSumToFour = (l) => {\n  let pairs = [];\n  for (let i = 0; i < l.length; i++) {\n    let pair = [l[i], l[i]];\n    if (pairsSumToFour(pair) === true) {\n      pairs.push(pair);\n    }\n  }\n  return pairs;\n};\n\n/*\n  findPairsSumToFive takes a list of integers as an input.\n  it returns all pairs of integers that sum to five, and false otherwise.\n  >>> findPairsSumToFive([1, 3, 5, 0])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairsSumToFive([1, 3, -2, 1])\n  [\n    [1, 3],\n    [1, 3],\n    [1, 3],\n    [1, 3]\n  ]\n  >>> findPairs", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  return x.toString(base);\n};\n\n/**\n * Convert string x to base y.\n * If base is 10, return string x.\n * If base is 2, return string x.\n * If base is 3, return string x.\n * If base is 6, return string x.\n * If base is 8, return string x.\n * If base is 16, return string x.\n * If base is 32, return string x.\n * If base is 64, return string x.\n * If base is 256, return string x.\n * If base is 1024, return string x.\n * If base is 2048, return string x.\n * If base is 4096, return string x.\n * If base is 8192, return string x.\n * If base is 16384, return string x.\n * If base is 32768, return string x.\n * If base is 65536, return string x.\n * If base is 131072, return string x.\n * If base is 262144, return string x.\n * If base is 524288, return string x.\n * If base is 1048576, return string x.\n * If base is 2097152, return string x.\n * If base is 4194304, return string x.\n * If base is 8388608, return string x.\n * If base is 16777216, return string x.\n * If base is 33554432, return string x.\n * If base is 67108864, return string x.\n * If base is 134217728, return string x.\n * If base is 268435456, return string x.\n * If base is 536870912, return string x.\n * If base is 1073741824, return string x.\n * If base is 2147483648, return string x.\n * If base is 4294967296, return string x.\n * If base is 0 return empty string.\n */\nconst toBase = (x, base) => {\n  if (base === 10) {\n    return x;\n  }\n  if (base === 2) {\n    return x.toString(2);\n  }\n  if (base === 3) {\n    return x.toString(3);\n  }\n  if (base === 6) {\n    return x.toString(6);\n  }\n  if (base === 8) {\n    return x.toString(8);\n  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 32) {\n    return x.toString(32);\n  }\n  if (base === 64) {\n    return x.toString(64);\n  }\n  if (base === 256) {\n    return x.toString(256);\n  }\n  if (base === 1024) {\n    return x.toString(1024);\n  }\n  if (base === 2048) {\n    return x.toString(2048);\n  }\n  if (base === 4096) {\n    return x.toString(4096);\n  }\n  if (base === 8192) {\n    return x.toString(8192);\n  }\n  if (base === 16384) {\n    return x.toString(16384);\n  }\n  if (base === 32768) {\n    return x.toString(32768);\n  }\n  if (base === 65536) {\n    return x.toString(65536);\n  }\n  if (base === 131072) {\n    return x.toString(131072);\n  }\n  if (base === 262144) {\n    return x.toString(262144);\n  }\n  if (base === 524288) {\n    return x.toString(524288);\n  }\n  if (base === 1048576) {\n    return x.toString(1048576);\n  }\n  if (base === 2097152) {\n    return x.toString(2097152);\n  }\n  if (base === 4194304) {\n    return x.toString(4194304);\n  }\n  if (base === 8388608) {\n    return x.toString(8388608);\n  }\n  if (base === 16777216) {\n    return x.toString(16777216);\n  }\n  if (base === 33554432) {\n    return x.toString(33554432);\n  }\n  if (base === 67108864) {\n    return x.toString(67108864);\n  }\n  if (base === 134217728) {\n    return x.toString(134217728);\n  }\n  if (base === 268435456) {\n    return x.toString(268435456);\n  }\n  if (base === 536870912) {\n    return x.toString(536870912);\n  }\n  if (base === 1073741824) {\n    return x.toString(1073741824);\n  }\n  if (base === 2147483648) {\n    return x.toString(2147483648);\n  }\n  if (base === 4294967296) {\n    return x.toString(4294967296);\n  }\n  if (base === 0) {\n    return '';\n  }\n  return x.toString(base);\n};\n\n/**\n * Convert string x to base y.\n * If base is 10, return string x.\n * If base is 2, return string x.\n * If base is 3, return string x.\n * If base is 6, return string x.\n * If base is 8, return string x.\n * If base is 16, return string x.\n * If base is 32, return string x.\n * If base is 64, return string x.\n * If base is 256, return string x.\n * If base is 1024, return string x.\n * If base is 2048, return string x.\n * If base is 4096, return string x.\n * If base is 8192, return string x.\n * If base is 16384, return string x.\n * If base is 32768, return string x.\n * If base is 65536, return string x.\n * If base is 131072, return string x.\n * If base is 262144, return string x.\n * If base is 524288, return string x.\n * If base is 1048576, return string x.\n * If base is 2097152, return string x.\n * If base is 4194304, return string x.\n * If base is 8388608, return string x.\n * If base is 16777216, return string x.\n * If base is 33554432, return string x.\n * If base is 67108864, return string x.\n * If base is 134217728, return string x.\n * If base is 268435456, return string x.\n * If base is 536870912, return string x.\n * If base is 1073741824, return string x.\n * If base is 2147483648, return string x.\n * If base is 4294967296, return string x.\n * If base is 0 return empty string.\n */\nconst fromBase = (x, base) => {\n  if (base === 10) {\n    return x;\n  }\n  if (base === 2) {\n    return x.toString(2);\n  }\n  if (base === 3) {\n    return x.toString(3);\n  }\n  if (base === 6) {\n    return x.toString(6);\n  }\n  if (base === 8) {\n    return x.toString(8);\n  }\n  if (base === 16) {\n    return x.toString(16);\n  }\n  if (base === 32) {\n    return x.toString(32);\n  }\n  if (base === 64) {\n    return x.toString(64);\n  }\n  if (base === 256) {\n    return x.toString(256);\n  }\n  if (base === 1024) {\n    return x.toString(1024);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (h * (h - 1) * (a - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c.\n  >>> triangleArea(6, 3)\n  15.0\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (b * (b - 1) * (c - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d.\n  >>> triangleArea(6, 4, 3)\n  15.0\n  */\nconst triangleArea = (a, b, c, d) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e.\n  >>> triangleArea(6, 4, 3, 3)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f.\n  >>> triangleArea(6, 4, 3, 3, 4, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1) * (l - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l,m.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1) * (l - 1) * (m - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l,m,n.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1) * (l - 1) * (m - 1) * (n - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l,m,n,o.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1) * (l - 1) * (m - 1) * (n - 1) * (o - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p.\n  >>> triangleArea(6, 4, 3, 3, 4, 5, 5, 5, 5, 5, 5)\n  15.0\n  */\nconst triangleArea = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) => {\n  const area = (b * (b - 1) * (c - 1) * (d - 1) * (e - 1) * (f - 1) * (g - 1) * (h - 1) * (i - 1) * (j - 1) * (k - 1) * (l - 1) * (m - 1) * (n - 1) * (o - 1) * (p - 1)) / 2;\n  return area;\n};\n\n/*Given length of a side and ihgh return area for a triangle with sides a,b,c,d,e,f,g,h,i,j,k,l,m,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4 = 0, fib4n = n;\n  while(fib4n > 0) {\n    fib4 = fib4n - fib4;\n    fib4n = fib4n - fib4;\n  }\n  return fib4;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fibn = (n) => {\n  let fibn = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibn = fib2n + fibn;\n    fib2n++;\n  }\n  return fibn;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibn = fib2n + fibn + fib;\n    fib2n++;\n  }\n  return fib;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fibs = (n) => {\n  let fibs = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibs = fibs + fibn + fib;\n    fib2n++;\n  }\n  return fibs;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5) + Fib(n-6).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibn = fib2n + fibn + fib + fib;\n    fib2n++;\n  }\n  return fib;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5) + Fib(n-6) + Fib(n-7).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fibs = (n) => {\n  let fibs = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibs = fibs + fibn + fib + fib + fib;\n    fib2n++;\n  }\n  return fibs;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5) + Fib(n-6) + Fib(n-7) + Fib(n-8).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  >>> fibn(8)\n  34\n  */\nconst fib = (n) => {\n  let fib = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibn = fib2n + fibn + fib + fib + fib + fib + fib + fib;\n    fib2n++;\n  }\n  return fib;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5) + Fib(n-6) + Fib(n-7) + Fib(n-8) + Fib(n-9).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  >>> fibn(8)\n  34\n  >>> fibn(9)\n  55\n  */\nconst fibs = (n) => {\n  let fibs = 0, fib2n = 0;\n  while(fib2n <= n) {\n    fibs = fibs + fibn + fib + fib + fib + fib + fib + fib + fib + fib;\n    fib2n++;\n  }\n  return fibs;\n};\n\n/*\n  A function which returns the nth Fibonacci number in the Fibonacci sequence that satisfies the following conditions:\n  Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3) + Fib(n-4) + Fib(n-5) + Fib(n-6) + Fib(n-7) + Fib(n-8) + Fib(n-9) + Fib(n-10).\n  Please write a function to efficiently compute the nth Fibonacci number in the Fibonacci sequence that satisfies the above conditions.\n  >>> fibn(5)\n  8\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  >>> fibn(8)\n  34\n  >>> fibn(9)\n  55\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let sum = 0;\n  while (i < j) {\n    sum += l[i];\n    i++;\n    j--;\n  }\n  return sum / 2;\n};\n\n/*Return median of elements in list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (k = length - 1; k >= 0; k--) {\n    reversedText += text.charAt(length - 1 - k);\n  }\n\n  return reversedText == text;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReverse = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (k = length - 1; k >= 0; k--) {\n    reversedText += text.charAt(length - 1 - k);\n  }\n\n  return reversedText == text;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindromeReverse('aba')\n  true\n  >>> isPalindromeReverse('aaaaa')\n  true\n  >>> isPalindromeReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverse = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (k = length - 1; k >= 0; k--) {\n    reversedText += text.charAt(length - 1 - k);\n  }\n\n  return reversedText == text;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverse = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (k = length - 1; k >= 0; k--) {\n    reversedText += text.charAt(length - 1 - k);\n  }\n\n  return reversedText == text;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverse = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.charAt(length - 1 - j);\n  }\n\n  for (k = length - 1; k >= 0; k--) {\n    reversedText += text.charAt(length - 1 - k);\n  }\n\n  return reversedText == text;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverse = (text) => {\n  let reversedText = '';\n  let length = text.length;\n  let i;\n  let j;\n  let k;\n\n  for (i = 0; i < length / 2; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = length - 1; i >= 0; i--) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (i = 0; i < length; i++) {\n    reversedText += text.charAt(length - 1 - i);\n  }\n\n  for (j = length - 1; j >= 0; j--) {\n    reversedText += text.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst mod = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('mod requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modPow = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modPow requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modInverse = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modInverse requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCD = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCD requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modPowprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modPowprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modInverseprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modInverseprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modPowprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modPowprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modInverseprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modInverseprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modPowprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modPowprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modInverseprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modInverseprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprimeprimeprime = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modGCDprimeprimeprime requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  return ((n % p) + p) % p;\n};\n\n/**\n * Return 2^n modulo p (be aware of numerics).\n * See http://en.wikipedia.org/wiki/Modular_arithmetic\n */\nconst modGCDprimeprime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n      j = 1\n    } else {\n      result.push(numbers[i])\n      i++\n      j++\n    }\n  }\n  if (j > 0) {\n    result.push(numbers[i])\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> take([], 2)\n * []\n * >>> take([1, 2, 3], 2)\n * [1, 3]\n * >>> take([1, 2, 3], 3)\n * [1, 3]\n * >>> take([1, 2, 3], 4)\n * [1, 2, 3]\n */\nconst take = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> takeLast([], 2)\n * []\n * >>> takeLast([1, 2, 3], 2)\n * [3]\n * >>> takeLast([1, 2, 3], 3)\n * [3]\n * >>> takeLast([1, 2, 3], 4)\n * [1, 2, 3]\n */\nconst takeLast = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> dropLast([], 2)\n * []\n * >>> dropLast([1, 2, 3], 2)\n * []\n * >>> dropLast([1, 2, 3], 3)\n * []\n * >>> dropLast([1, 2, 3], 4)\n * []\n */\nconst dropLast = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last n elements of a given list\n * \n * >>> drop([], 2)\n * []\n * >>> drop([1, 2, 3], 2)\n * []\n * >>> drop([1, 2, 3], 3)\n * []\n * >>> drop([1, 2, 3], 4)\n * []\n */\nconst drop = (numbers, n) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length) {\n    if (i === n) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[i])\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 2)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.replace(/[^aeiou]/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < vowels.length; i++) {\n    let letter = vowels[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a functino that takes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.replace(/[^aeiou]/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < punctuations.length; i++) {\n    let letter = punctuations[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a functino that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.replace(/\\s+/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    let letter = whitespace[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a functino that takes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.replace(/[^aeiou]/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < punctuations.length; i++) {\n    let letter = punctuations[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a functino that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.replace(/\\s+/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    let letter = whitespace[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a functino that takes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.replace(/[^aeiou]/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < punctuations.length; i++) {\n    let letter = punctuations[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a functino that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.replace(/\\s+/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    let letter = whitespace[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a functino that takes string and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = text.replace(/[^aeiou]/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < punctuations.length; i++) {\n    let letter = punctuations[i];\n    if (letter!== '') {\n      newText += letter;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a functino that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.replace(/\\s+/gi, '').split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    let letter = whitespace[i];\n    if (letter!== '') {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(x => x < t);\n};\n\n/**\n * Returns true if all unmbers in teh list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(x => x > t);\n};\n\n/**\n * Returns true if all unmbers in teh list l are equal to t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.every((x, i) => x === t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 100)\n  true\n  >>> differentFrom([1, 20, 4, 10], 5)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n  >>> differentFrom([1, 2, 4, 10], 5)\n  true\n  >>> differentFrom([1, 20, 4, 10], 100)\n  false\n  */\nconst differentFrom = (l, t) => {\n  return l.every((x, i) => x!== t[i]);\n};\n\n/**\n * Returns true if all unmbers in teh list l are different from t.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y with rounding\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  6\n  */\nconst addRound = (x, y) => {\n  return x + Math.round(x * 100) / 100;\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y with rounding\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -2\n  */\nconst subtractRound = (x, y) => {\n  return x - Math.round(x * 100) / 100;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  Multiply two numbers x and y with rounding\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiplyRound = (x, y) => {\n  return x * Math.round(x * 100) / 100;\n};\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  Divide two numbers x and y with rounding\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divideRound = (x, y) => {\n  return x / Math.round(x * 100) / 100;\n};\n\n/*\n  Calculate the remainder of division between two numbers\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  0.5\n  */\nconst remainder = (x, y) => {\n  return x - y * Math.floor(x / y);\n};\n\n/*\n  Calculate the remainder of division between two numbers with\n  rounding\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  0.5\n  */\nconst remainderRound = (x, y) => {\n  return x - y * Math.floor(x / y) / 100;\n};\n\n/*\n  Calculate the absolute value of number\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  -2\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  Calculate the absolute value of number with rounding\n  >>> abs(2)\n  2\n  >>> abs(-2)\n  -2\n  */\nconst absRound = (x) => {\n  return Math.abs(x) / 100;\n};\n\n/*\n  Calculate the square root of number\n  >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  0.5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  Calculate the square root of number with rounding\n  >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  0.5\n  */\nconst sqrtRound = (x) => {\n  return Math.sqrt(x) / 100;\n};\n\n/*\n  Calculate the cube root of number\n  >>> cube(2)\n  4\n  >>> cube(-2)\n  8\n  */\nconst cube = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*\n  Calculate the cube root of number with rounding\n  >>> cube(2)\n  4\n  >>> cube(-2)\n  8\n  */\nconst cubeRound = (x) => {\n  return Math.pow(x, 3) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number\n  >>> log(2)\n  2\n  >>> log(-2)\n  -2\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  Calculate the natural logarithm of number with rounding\n  >>> log(2)\n  2\n  >>> log(-2)\n  -2\n  */\nconst logRound = (x) => {\n  return Math.log(x) / 100;\n};\n\n/*\n  Calculate the exponential of number\n  >>> exp(2)\n  2\n  >>> exp(-2)\n  -2\n  */\nconst exp = (x) => {\n  return Math.exp(x);\n};\n\n/*\n  Calculate the exponential of number with rounding\n  >>> exp(2)\n  2\n  >>> exp(-2)\n  -2\n  */\nconst expRound = (x) => {\n  return Math.exp(x) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBase = (x, base) => {\n  return Math.log(x, base);\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  2\n  >>> log(2, -2)\n  -2\n  */\nconst logBaseRoundRound = (x, base) => {\n  return Math.log(x, base) / 100;\n};\n\n/*\n  Calculate the natural logarithm of number with base and\n  rounding with rounding\n  >>> log(2, 2)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.split('').every((c, i) => {\n    return c === s1[i]\n  })\n}\n\n/*\n  Check if two owrds have the same length.\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.length === s1.length\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContent('abcd', 'dddddddabc')\n  true\n  >>> sameContent('dddddddabc', 'abcd')\n  true\n  >>> sameContent('eabcd', 'dddddddabc')\n  false\n  >>> sameContent('abcd', 'dddddddabce')\n  false\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContent = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.split('').every((c, i) => {\n    return c === s1[i]\n  })\n}\n\n/*\n  Check if two owrds have the same length.\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContent('abcd', 'dddddddabc')\n  true\n  >>> sameContent('dddddddabc', 'abcd')\n  true\n  >>> sameContent('eabcd', 'dddddddabc')\n  false\n  >>> sameContent('abcd', 'dddddddabce')\n  false\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContentLength = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.length === s1.length\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContentLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContentLength('abcd', 'dddddddabc')\n  true\n  >>> sameContentLength('dddddddabc', 'abcd')\n  true\n  >>> sameContentLength('eabcd', 'dddddddabc')\n  false\n  >>> sameContentLength('abcd', 'dddddddabce')\n  false\n  >>> sameContentLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContentLength = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.length === s1.length\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContentLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContentLength('abcd', 'dddddddabc')\n  true\n  >>> sameContentLength('dddddddabc', 'abcd')\n  true\n  >>> sameContentLength('eabcd', 'dddddddabc')\n  false\n  >>> sameContentLength('abcd', 'dddddddabce')\n  false\n  >>> sameContentLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContentContent = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.split('').every((c, i) => {\n    return c === s1[i]\n  })\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContentContent('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContentContent('abcd', 'dddddddabc')\n  true\n  >>> sameContentContent('dddddddabc', 'abcd')\n  true\n  >>> sameContentContent('eabcd', 'dddddddabc')\n  false\n  >>> sameContentContent('abcd', 'dddddddabce')\n  false\n  >>> sameContentContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContentContent = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.split('').every((c, i) => {\n    return c === s1[i]\n  })\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContentContent('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameContentContent('abcd', 'dddddddabc')\n  true\n  >>> sameContentContent('dddddddabc', 'abcd')\n  true\n  >>> sameContentContent('eabcd', 'dddddddabc')\n  false\n  >>> sameContentContent('abcd', 'dddddddabce')\n  false\n  >>> sameContentContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContentContentLength = (s0, s1) => {\n  const s0 = String(s0)\n  const s1 = String(s1)\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  return s0.length === s1.length\n}\n\n/*\n  Check if two owrds have the same content.\n  >>> sameContentContentLength('eabcdzzzz', 'dddzzzzzzzdde", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = (a + b) % n;\n    b = a;\n  }\n  return b;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  55\n  >>> fib(3)\n  89\n  >>> fib(2)\n  144\n  >>> fib(1)\n  233\n  >>> fib(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(6)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  55\n  >>> fibonacci(3)\n  89\n  >>> fibonacci(2)\n  144\n  >>> fibonacci(1)\n  233\n  >>> fibonacci(0)\n  Infinity\n*/\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  const openingBracketsIsRight = openingBracketsLength === closingBracketsLength;\n  const openingBracketsIsRightWithOpeningBrackets = openingBracketsIsRight\n    && openingBrackets.every(opening => opening === \">\");\n  const closingBracketsIsRight = closingBracketsLength === openingBracketsLength;\n  const closingBracketsIsRightWithClosingBrackets = closingBracketsIsRight\n    && closingBrackets.every(closing => closing === \"<\");\n  return openingBracketsIsRightWithClosingBrackets\n    || openingBracketsIsRightWithOpeningBrackets;\n};\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * <p>\n * If a string is invalid, it is considered invalid.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is valid, it will be returned unchanged.\n * </p>\n *\n * <p>\n * If a string is invalid, it will be returned unchanged.\n * </p>\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < l.length) {\n    if (l[j] < l[k]) {\n      flag = false;\n      k++;\n    } else if (l[j] > l[k]) {\n      flag = true;\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true if two arrays are equal, false otherwise.\n * If two arrays have the same length, then they must have the same elements.\n * If two arrays have different lengths, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not have different elements.\n * If two arrays have different elements, they must not ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return sorted unique elements for two lists.\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1` and `l2` will be sorted.\n * If `isSorted` is false, `l1` and `l2` will be unsorted.\n *\n * If `isSorted` is true, then `l1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n % i!== 0) {\n    n /= i;\n    i++;\n  }\n  while (n % i!== 0) {\n    factor++;\n    n /= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(123)\n  [2, 3, 5, 7]\n  >>> primeFactors(1235)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(12356)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactors = (n) => {\n  let factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(1235)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(12356)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactors2 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(1235)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(12356)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primeFactors3 = (n) => {\n  let factors = [];\n  let i = 2;\n  while (n % i!== 0) {\n    factors.push(i);\n    n /= i;\n    i++;\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(1235)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(12356)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 46", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_count = 0;\n  const paren_stack_len = 0;\n  const paren_stack_res = [];\n  const paren_stack_res_len = 0;\n  const paren_stack_res_res = [];\n  const paren_stack_res_res_len = 0;\n  const paren_stack_res_res_res = [];\n  const paren_stack_res_res_res_len = 0;\n  const paren_stack_res_res_res_res = [];\n  const paren_stack_res_res_res_res_len = 0;\n  const paren_stack_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_len = 0;\n  const paren_stack_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_len = 0;\n  const paren_stack_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_len = 0;\n  const paren_stack_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_len = 0;\n  const paren_stack_res_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_res_res_res_res_res_res_res = [];\n  const paren_stack_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN2 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN3 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN4 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN5 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN6 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is stored in variable sum.\n * After the loops are done, sum is returned.\n * If n is even, sum is returned as sum of first and second loops.\n * If n is odd, sum is returned as sum of first and second loops.\n */\nconst sumOfOneToN7 = (n) => {\n  let sum = 0;\n  let firstSum = 0;\n  let secondSum = 0;\n  for (let i = 1; i <= n; i++) {\n    firstSum += i;\n    secondSum += i;\n  }\n  if (n % 2 === 0) {\n    sum = firstSum + secondSum;\n  } else {\n    sum = firstSum + secondSum;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all the numbers from 1 to n.\n * It works by using two nested loops.\n * First loop iterates through 1 to n (inclusive).\n * Second loop iterates through 1 to n (inclusive).\n * Sum of first loop is stored in variable sum.\n * Sum of second loop is ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[^()]+/g);\n  const closingBrackets = brackets.match(/[^)]+/g);\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if it starts with \"(\" and ends with \")\".\n */\nconst startsWithClosingBracket = (string) => {\n  return string.startsWith(\"(\") && string.endsWith(\")\");\n};\n\n/**\n * Given a string, return true if it starts with \"(\" and ends with \"[\".\n */\nconst startsWithOpeningBracket = (string) => {\n  return string.startsWith(\"(\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"]\".\n */\nconst startsWithClosingBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"]\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"{\".\n */\nconst startsWithOpeningBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"{\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithClosingBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracket = (string) => {\n  return string.startsWith(\"[\") && string.endsWith(\"[\");\n};\n\n/**\n * Given a string, return true if it starts with \"[\" and ends with \"[\".\n */\nconst startsWithOpeningBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAndBracketAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [];\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let xq = 1;\n  let xr = 1;\n  let xs = 0;\n  let x = 0;\n  let xp = 1;\n  let x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += fibfib(i-1);\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the n-th Fibonac", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let vowelsCount204 = 0;\n  let vowelsCount205 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).length;\n  shift = shift || digits;\n  return x.toString(2).slice(digits, digits + shift).reverse().join(\"\");\n};\n\n/**\n  Return the number of leading zeros of a number.\n  >>> leadingZeros(123)\n  3\n  >>> leadingZeros(-123)\n  -1\n  >>> leadingZeros(0)\n  0\n  >>> leadingZeros(-1)\n  -1\n  >>> leadingZeros(-0)\n  -1\n  >>> leadingZeros(1)\n  1\n  >>> leadingZeros(-1)\n  -1\n  >>> leadingZeros(-2)\n  -1\n  >>> leadingZeros(-3)\n  -1\n  >>> leadingZeros(-4)\n  -1\n  >>> leadingZeros(-5)\n  -1\n  >>> leadingZeros(-6)\n  -1\n  >>> leadingZeros(-7)\n  -1\n  >>> leadingZeros(-8)\n  -1\n  >>> leadingZeros(-9)\n  -1\n  >>> leadingZeros(-10)\n  -1\n  >>> leadingZeros(-100)\n  -1\n  >>> leadingZeros(-1000)\n  -1\n  >>> leadingZeros(-10000)\n  -1\n  >>> leadingZeros(-100000)\n  -1\n  >>> leadingZeros(-1000000)\n  -1\n  >>> leadingZeros(-100000000)\n  -1\n  >>> leadingZeros(-10000000000)\n  -1\n  >>> leadingZeros(-1000000000000)\n  -1\n  >>> leadingZeros(-100000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-100000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-1000000000000000000000000000000000000000000)\n  -1\n  >>> leadingZeros(-10000000000", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the lower characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 47;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper and lower case characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woAr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n  let count = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let minEven = Infinity;\n  let minIndex = -1;\n  let minValue = 0;\n  for (let i = 0; i < len; i++) {\n    const value = arr[i];\n    if (value % 2 === 0) {\n      if (value < minValue) {\n        minValue = value;\n        minIndex = i;\n      }\n    }\n  }\n  return [minValue, minIndex];\n};\n\n// Given an array representing a tree with non-negatvie integre nodes\n// your task is to pluck one of the nodes and return it.\n// The plcuked node should be the node wtih the msallest odd value.\n// If mulptile nodes with the same smallest odd vlaue are found return the ndoe that has msallest index.\n\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no odd vaules or the gvien array is mepty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckOdd = (arr) => {\n  const len = arr.length;\n  let maxOdd = -Infinity;\n  let maxIndex = -1;\n  let maxValue = 0;\n  for (let i = 0; i < len; i++) {\n    const value = arr[i];\n    if (value % 2 === 1) {\n      if (value > maxOdd) {\n        maxOdd = value;\n        maxIndex = i;\n      }\n    }\n  }\n  return [maxValue, maxIndex];\n};\n\n// Given an array representing a tree with non-negatvie integre nodes\n// your task is to pluck one of the nodes and return it.\n// The plcuked node should be the node wtih the msallest even value.\n// If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even vaules or the gvien array is mepty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckEven = (arr) => {\n  const len = arr.length;\n  let minEven = Infinity;\n  let minIndex = -1;\n  let minValue = 0;\n  for (let i = 0; i < len; i++) {\n    const value = arr[i];\n    if (value % 2 === 0) {\n      if (value < minValue) {\n        minValue = value;\n        minIndex = i;\n      }\n    }\n  }\n  return [minValue, minIndex];\n};\n\n// Given an array representing a tree with non-negatvie integre nodes\n// your task is to pluck one of the nodes and return it.\n// The plcuked node should be the node wtih the msallest odd value.\n// If mulptile nodes with the same smallest odd vlaue are found return the ndoe that has msallest index.\n\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no odd vaules or the gvien array is mepty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n */\nconst pluckOddEven = (arr) => {\n  const len = arr.length;\n  let maxOdd = -Infinity;\n  let maxIndex = -1;\n  let maxValue = 0;\n  for (let i = 0; i < len; i++) {\n    const value = arr[i];\n    if (value % 2 === 1) {\n      if (value > maxOdd) {\n        maxOdd = value;\n        maxIndex = i;\n      }\n    }\n  }\n  return [maxValue, maxIndex];\n};\n\n// Given an array representing a tree with non-negatvie integre nodes\n// your task is to pluck one of the nodes and return it.\n// The plcuked node should be the node wtih the msallest odd value.\n// If mulptile nodes with the same smallest odd vlaue are found return the ndoe that has msallest index.\n\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no odd vaules or the gvien array is mepty, return [].\n\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n// Example 3:\n//     Input: []\n//     Output: []\n\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      max = lst[i];\n      maxIndex = i;\n      maxValue = lst[i];\n    }\n    if (lst[i] === maxValue) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Rteurn the greatest integer that is less than\n  zero, and has a frequency less than, equal to, or greater than the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Get a random element from an array\n * \n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 1)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 2)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 3)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 4)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 5)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 6)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 7)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 8)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 9)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 10)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 11)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 12)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 13)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 14)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 15)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 16)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 17)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 18)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 19)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 20)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 21)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 22)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 23)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 24)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 25)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 26)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 27)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 28)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 29)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 30)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 31)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 32)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 33)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 34)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 35)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 36)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 37)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 38)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 39)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 40)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 41)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 42)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 43)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 44)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 45)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 46)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 47)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 48)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 49)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 50)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 51)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 52)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 53)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 54)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 55)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 56)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 57)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 58)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 59)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 60)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 61)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 62)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 63)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 64)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 65)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 66)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 67)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 68)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 69)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 70)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 71)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 72)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 73)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 74)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 75)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 76)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 77)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 78)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 79)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 80)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 81)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 82)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 83)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 84)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 85)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 86)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 87)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 88)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 89)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 90)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 91)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 92)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 93)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 94)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 95)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 96)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 97)\n * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sorted = lst.sort((a, b) => a - b);\n  let res = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] > sorted[i + 1]) {\n      res.push(sorted[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  Sort a list by ascending or descending order.\n  Sort is done by comparing each element with its next element.\n  If the next element is smaller than the current element,\n  the element is moved to the end of the list.\n  If the next element is greater than the current element,\n  the element is moved to the beginning of the list.\n  If the next element is equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the end of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the beginning of the list.\n  If the next element is not equal to the current element,\n  the element is moved to the middle of the list.\n  If the next element is not equal to the current element,\n  the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a hexagon. Return the area of\n  the hexagon rounded to 2 dceimal points if the three sides from a valid hexagon.\n  Otherwise return -1\n  Three sides make a valid hexagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon. Return the area of\n  the heptagon rounded to 2 dceimal points if the three sides from a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 6.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a decagon. Return the area of\n  the decagon rounded to 2 dceimal points if the three sides from a valid decagon.\n  Otherwise return -1\n  Three sides make a valid decagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  decagonArea(3, 4, 5) == 6.00\n  decagonArea(1, 2, 10) == -1\n  */\nconst decagonArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a dodecagon. Return the area of\n  the dodecagon rounded to 2 dceimal points if the three sides from a valid dodecagon.\n  Otherwise return -1\n  Three sides make a valid dodecagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  dodecagonArea(3, 4, 5) == 6.00\n  dodecagonArea(1, 2, 10) == -1\n  */\nconst dodecagonArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a quintic cylinder. Return the area of\n  the quintic cylinder rounded to 2 dceimal points if the three sides from a valid quintic cylinder.\n  Otherwise return -1\n  Three sides make a valid quintic cylinder when the sum of any two sides is greater\n  than the third side.\n  Example:\n  quinticCylinderArea(3, 4, 5) == 6.00\n  quinticCylinderArea(1, 2, 10) == -1\n  */\nconst quinticCylinderArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a hexahedron. Return the area of\n  the hexahedron rounded to 2 dceimal points if the three sides from a valid hexahedron.\n  Otherwise return -1\n  Three sides make a valid hexahedron when the sum of any two sides is greater\n  than the third side.\n  Example:\n  hexahedronArea(3, 4, 5) == 6.00\n  hexahedronArea(1, 2, 10) == -1\n  */\nconst hexahedronArea = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon with two sides perpendicular to each other. Return the area of\n  the heptagon rounded to 2 dceimal points if the three sides from a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 6.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonAreaPerpendicularTo = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a heptagon with two sides perpendicular to each other. Return the area of\n  the heptagon rounded to 2 dceimal points if the three sides from a valid heptagon.\n  Otherwise return -1\n  Three sides make a valid heptagon when the sum of any two sides is greater\n  than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 6.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonAreaPerpendicularTo2 = (a, b, c) => {\n  const aSum = a + b;\n  const bSum = a + c;\n  const cSum = b + c;\n  if (aSum > bSum || aSum > cSum) {\n    return -1;\n  }\n  return (aSum + bSum + cSum) / 3;\n};\n\n/*\n  Given the lengths of the three sides of a he", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two lists are equal, and false otherwise.\n  The lists are equal if they have the same number of elements and each element in the two lists is equal to each other.\n\n  Example:\n  equalLists([1, 2], [1, 2]) ➞ true\n  # both lists have the same number of elements.\n\n  equalLists([1, 2], [1, 1]) ➞ false\n  # the lists don't have the same number of elements.\n\n  equalLists([], []) ➞ false\n  # the lists are empty.\n  */\nconst equalLists = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two strings are equal, and false otherwise.\n  The strings are equal if they have the same length, and each character in the two strings is equal to each other.\n\n  Example:\n  equalStrings('a', 'a') ➞ true\n  # both strings have the same length.\n\n  equalStrings('a', 'b') ➞ false\n  # the strings don't have the same length.\n\n  equalStrings([], []) ➞ false\n  # the strings are empty.\n  */\nconst equalStrings = (s1, s2) => {\n  if (s1.length!== s2.length) {\n    return false;\n  }\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i]!== s2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two numbers are equal, and false otherwise.\n  The numbers are equal if they have the same value, and each digit in the two numbers is equal to each other.\n\n  Example:\n  equalNumbers(1, 1) ➞ true\n  # both numbers have the same value.\n\n  equalNumbers(1, 2) ➞ false\n  # the numbers don't have the same value.\n\n  equalNumbers([], []) ➞ false\n  # the numbers are empty.\n  */\nconst equalNumbers = (num1, num2) => {\n  if (num1!== num2) {\n    return false;\n  }\n  for (let i = 0; i < num1; i++) {\n    if (num1!== num2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two booleans are equal, and false otherwise.\n  The booleans are equal if they have the same value, and each letter in the two booleans is equal to each other.\n\n  Example:\n  equalBooleans(true, true) ➞ true\n  # both booleans have the same value.\n\n  equalBooleans(true, false) ➞ false\n  # the booleans don't have the same value.\n\n  equalBooleans([], []) ➞ false\n  # the booleans are empty.\n  */\nconst equalBooleans = (bool1, bool2) => {\n  if (bool1!== bool2) {\n    return false;\n  }\n  for (let i = 0; i < bool1.length; i++) {\n    if (bool1!== bool2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two objects are equal, and false otherwise.\n  The objects are equal if they have the same properties, and each property in the two objects are equal to each other.\n\n  Example:\n  equalObjects({a: 1, b: 2, c: 3}, {a: 1, b: 2, c: 3}) ➞ true\n  # both objects have the same properties.\n\n  equalObjects({a: 1, b: 2, c: 3}, {a: 1, b: 2, c: 4}) ➞ false\n  # the objects don't have the same properties.\n\n  equalObjects({}, {a: 1, b: 2, c: 3}) ➞ false\n  # the objects have no properties.\n  */\nconst equalObjects = (obj1, obj2) => {\n  if (obj1 === obj2) {\n    return true;\n  }\n  for (let prop in obj1) {\n    if (obj1.hasOwnProperty(prop)) {\n      if (obj1[prop]!== obj2[prop]) {\n        return false;\n      }\n    }\n  }\n  for (let prop in obj2) {\n    if (obj2.hasOwnProperty(prop)) {\n      if (obj1[prop]!== obj2[prop]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two arrays are equal, and false otherwise.\n  The arrays are equal if they have the same length, and each element in the two arrays is equal to each other.\n\n  Example:\n  equalArrays([1, 2], [1, 2]) ➞ true\n  # both arrays have the same length.\n\n  equalArrays([1, 2], [1, 1]) ➞ false\n  # the arrays don't have the same length.\n\n  equalArrays([], []) ➞ false\n  # the arrays are empty.\n  */\nconst equalArrays = (l1, l2) => {\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two strings are equal, and false otherwise.\n  The strings are equal if they have the same length, and each character in the two strings is equal to each other.\n\n  Example:\n  equalStrings('a', 'a') ➞ true\n  # both strings have the same length.\n\n  equalStrings('a', 'b') ➞ false\n  # the strings don't have the same length.\n\n  equalStrings([], []) ➞ false\n  # the strings are empty.\n  */\nconst equalStrings = (s1, s2) => {\n  if (s1.length!== s2.length) {\n    return false;\n  }\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i]!== s2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two numbers are equal, and false otherwise.\n  The numbers are equal if they have the same value, and each digit in the two numbers is equal to each other.\n\n  Example:\n  equalNumbers(1, 1) ➞ true\n  # both numbers have the same value.\n\n  equalNumbers(1, 2) ➞ false\n  # the numbers don't have the same value.\n\n  equalNumbers([], []) ➞ false\n  # the numbers are empty.\n  */\nconst equalNumbers = (num1, num2) => {\n  if (num1!== num2) {\n    return false;\n  }\n  for (let i = 0; i < num1; i++) {\n    if (num1!== num2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returns true if two booleans are equal, and false otherwise.\n  The booleans are equal if they have the same value, and each letter in the two booleans is equal to each other.\n\n  Example:\n  equalBooleans(true, true) ➞ true\n  # both booleans have the same value.\n\n  equalBooleans(true, false) ➞ false\n  # the booleans don't have the same value.\n\n  equalBooleans([], []) ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversedReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversedReversedReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversedReversedReversedReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversedReversedReversedReversedReversedReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReversedReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let minChange = arr[0]\n  let minCount = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (arr[i] < minChange) {\n      minChange = arr[i]\n      minCount = 1\n    }\n    if (minCount > minChange) {\n      minChange = minCount\n    }\n  }\n  return minChange\n}\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let totalMatch = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      total++;\n      totalMatch.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < lst1.length) {\n    total++;\n    totalMatch.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    total++;\n    totalMatch.push(lst2[j]);\n    j++;\n  }\n  return totalMatch;\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let totalMatch = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      total++;\n      totalMatch.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < lst1.length) {\n    total++;\n    totalMatch.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    total++;\n    totalMatch.push(lst2[j]);\n    j++;\n  }\n  return totalMatch;\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let totalMatch = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      total++;\n      totalMatch.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < lst1.length) {\n    total++;\n    totalMatch.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    total++;\n    totalMatch.push(lst2[j]);\n    j++;\n  }\n  return totalMatch;\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let totalMatch = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!== lst2[j]) {\n      total++;\n      totalMatch.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < lst1.length) {\n    total++;\n    totalMatch.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    total++;\n    totalMatch.push(lst2[j]);\n    j++;\n  }\n  return totalMatch;\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let totalMatch = [];\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i]!== lst2[j]) {\n      total++;\n      totalMatch.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < lst1.length) {\n    total++;\n    totalMatch.push(lst1[i]);\n    i++;\n  }\n  while (j < lst2.length) {\n    total++;\n    totalMatch.push(lst2[j]);\n    j++;\n  }\n  return totalMatch;\n};\n\n/*\n  Write a function taht accepts two lists of stirn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime5 = true;\n  let isPrime7 = true;\n  let isPrime9 = true;\n  let isPrime11 = true;\n  let isPrime13 = true;\n  let isPrime15 = true;\n  let isPrime17 = true;\n  let isPrime19 = true;\n  let isPrime23 = true;\n  let isPrime29 = true;\n  let isPrime31 = true;\n  let isPrime35 = true;\n  let isPrime37 = true;\n  let isPrime39 = true;\n  let isPrime41 = true;\n  let isPrime45 = true;\n  let isPrime47 = true;\n  let isPrime49 = true;\n  let isPrime51 = true;\n  let isPrime53 = true;\n  let isPrime55 = true;\n  let isPrime57 = true;\n  let isPrime59 = true;\n  let isPrime61 = true;\n  let isPrime63 = true;\n  let isPrime65 = true;\n  let isPrime67 = true;\n  let isPrime69 = true;\n  let isPrime71 = true;\n  let isPrime73 = true;\n  let isPrime75 = true;\n  let isPrime77 = true;\n  let isPrime79 = true;\n  let isPrime81 = true;\n  let isPrime83 = true;\n  let isPrime85 = true;\n  let isPrime87 = true;\n  let isPrime89 = true;\n  let isPrime91 = true;\n  let isPrime93 = true;\n  let isPrime95 = true;\n  let isPrime97 = true;\n  let isPrime99 = true;\n  let isPrime101 = true;\n  let isPrime103 = true;\n  let isPrime105 = true;\n  let isPrime107 = true;\n  let isPrime109 = true;\n  let isPrime111 = true;\n  let isPrime113 = true;\n  let isPrime115 = true;\n  let isPrime117 = true;\n  let isPrime119 = true;\n  let isPrime121 = true;\n  let isPrime123 = true;\n  let isPrime125 = true;\n  let isPrime127 = true;\n  let isPrime129 = true;\n  let isPrime131 = true;\n  let isPrime133 = true;\n  let isPrime135 = true;\n  let isPrime137 = true;\n  let isPrime139 = true;\n  let isPrime141 = true;\n  let isPrime143 = true;\n  let isPrime145 = true;\n  let isPrime147 = true;\n  let isPrime149 = true;\n  let isPrime151 = true;\n  let isPrime153 = true;\n  let isPrime155 = true;\n  let isPrime157 = true;\n  let isPrime159 = true;\n  let isPrime161 = true;\n  let isPrime163 = true;\n  let isPrime165 = true;\n  let isPrime167 = true;\n  let isPrime169 = true;\n  let isPrime171 = true;\n  let isPrime173 = true;\n  let isPrime175 = true;\n  let isPrime177 = true;\n  let isPrime179 = true;\n  let isPrime181 = true;\n  let isPrime183 = true;\n  let isPrime185 = true;\n  let isPrime187 = true;\n  let isPrime189 = true;\n  let isPrime191 = true;\n  let isPrime193 = true;\n  let isPrime195 = true;\n  let isPrime197 = true;\n  let isPrime199 = true;\n  let isPrime201 = true;\n  let isPrime203 = true;\n  let isPrime205 = true;\n  let isPrime207 = true;\n  let isPrime209 = true;\n  let isPrime211 = true;\n  let isPrime213 = true;\n  let isPrime215 = true;\n  let isPrime217 = true;\n  let isPrime219 = true;\n  let isPrime221 = true;\n  let isPrime223 = true;\n  let isPrime225 = true;\n  let isPrime227 = true;\n  let isPrime229 = true;\n  let isPrime231 = true;\n  let isPrime233 = true;\n  let isPrime235 = true;\n  let isPrime237 = true;\n  let isPrime239 = true;\n  let isPrime241 = true;\n  let isPrime243 = true;\n  let isPrime245 = true;\n  let isPrime247 = true;\n  let isPrime249 = true;\n  let isPrime251 = true;\n  let isPrime253 = true;\n  let isPrime255 = true;\n  let isPrime257 = true;\n  let isPrime259 = true;\n  let isPrime261 = true;\n  let isPrime263 = true;\n  let isPrime265 = true;\n  let isPrime267 = true;\n  let isPrime269 = true;\n  let isPrime271 = true;\n  let isPrime273 = true;\n  let isPrime275 = true;\n  let isPrime277 = true;\n  let isPrime279 = true;\n  let isPrime281 = true;\n  let isPrime283 = true;\n  let isPrime285 = true;\n  let isPrime287 = true;\n  let isPrime289 = true;\n  let isPrime291 = true;\n  let isPrime293 = true;\n  let isPrime295 = true;\n  let isPrime297 = true;\n  let isPrime299 = true;\n  let isPrime301 = true;\n  let isPrime303 = true;\n  let isPrime305 = true;\n  let isPrime307 = true;\n  let isPrime309 = true;\n  let isPrime311 = true;\n  let isPrime313 = true;\n  let isPrime315 = true;\n  let isPrime317 = true;\n  let isPrime319 = true;\n  let isPrime321 = true;\n  let isPrime323 = true;\n  let isPrime325 = true;\n  let isPrime327 = true;\n  let isPrime329 = true;\n  let isPrime331 = true;\n  let isPrime333 = true;\n  let isPrime335 = true;\n  let isPrime337 = true;\n  let isPrime339 = true;\n  let isPrime341 = true;\n  let isPrime343 = true;\n  let isPrime345 = true;\n  let isPrime347 = true;\n  let isPrime349 = true;\n  let isPrime351 = true;\n  let isPrime353 = true;\n  let isPrime355 = true;\n  let isPrime357 = true;\n  let isPrime359 = true;\n  let isPrime361 = true;\n  let isPrime363 = true;\n  let isPrime365 = true;\n  let isPrime367 = true;\n  let isPrime369 = true;\n  let isPrime371 = true;\n  let isPrime373 = true;\n  let isPrime375 = true;\n  let isPrime377 = true;\n  let isPrime379 = true;\n  let isPrime381 = true;\n  let isPrime383 = true;\n  let isPrime385 = true;\n  let isPrime387 = true;\n  let isPrime389 = true;\n  let isPrime391 = true;\n  let isPrime393 = true;\n  let isPrime395 = true;\n  let isPrime397 = true;\n  let isPrime399 = true;\n  let isPrime401 = true;\n  let isPrime403 = true;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let isPowerOfN = true;\n  let isPowerOfX = true;\n  let isPowerOfX2 = true;\n  let isPowerOfX3 = true;\n  let isPowerOfX4 = true;\n  let isPowerOfX5 = true;\n  let isPowerOfX6 = true;\n  let isPowerOfX7 = true;\n  let isPowerOfX8 = true;\n  let isPowerOfX9 = true;\n  let isPowerOfX10 = true;\n  let isPowerOfX11 = true;\n  let isPowerOfX12 = true;\n  let isPowerOfX13 = true;\n  let isPowerOfX14 = true;\n  let isPowerOfX15 = true;\n  let isPowerOfX16 = true;\n  let isPowerOfX17 = true;\n  let isPowerOfX18 = true;\n  let isPowerOfX19 = true;\n  let isPowerOfX20 = true;\n  let isPowerOfX21 = true;\n  let isPowerOfX22 = true;\n  let isPowerOfX23 = true;\n  let isPowerOfX24 = true;\n  let isPowerOfX25 = true;\n  let isPowerOfX26 = true;\n  let isPowerOfX27 = true;\n  let isPowerOfX28 = true;\n  let isPowerOfX29 = true;\n  let isPowerOfX30 = true;\n  let isPowerOfX31 = true;\n  let isPowerOfX32 = true;\n  let isPowerOfX33 = true;\n  let isPowerOfX34 = true;\n  let isPowerOfX35 = true;\n  let isPowerOfX36 = true;\n  let isPowerOfX37 = true;\n  let isPowerOfX38 = true;\n  let isPowerOfX39 = true;\n  let isPowerOfX40 = true;\n  let isPowerOfX41 = true;\n  let isPowerOfX42 = true;\n  let isPowerOfX43 = true;\n  let isPowerOfX44 = true;\n  let isPowerOfX45 = true;\n  let isPowerOfX46 = true;\n  let isPowerOfX47 = true;\n  let isPowerOfX48 = true;\n  let isPowerOfX49 = true;\n  let isPowerOfX50 = true;\n  let isPowerOfX51 = true;\n  let isPowerOfX52 = true;\n  let isPowerOfX53 = true;\n  let isPowerOfX54 = true;\n  let isPowerOfX55 = true;\n  let isPowerOfX56 = true;\n  let isPowerOfX57 = true;\n  let isPowerOfX58 = true;\n  let isPowerOfX59 = true;\n  let isPowerOfX60 = true;\n  let isPowerOfX61 = true;\n  let isPowerOfX62 = true;\n  let isPowerOfX63 = true;\n  let isPowerOfX64 = true;\n  let isPowerOfX65 = true;\n  let isPowerOfX66 = true;\n  let isPowerOfX67 = true;\n  let isPowerOfX68 = true;\n  let isPowerOfX69 = true;\n  let isPowerOfX70 = true;\n  let isPowerOfX71 = true;\n  let isPowerOfX72 = true;\n  let isPowerOfX73 = true;\n  let isPowerOfX74 = true;\n  let isPowerOfX75 = true;\n  let isPowerOfX76 = true;\n  let isPowerOfX77 = true;\n  let isPowerOfX78 = true;\n  let isPowerOfX79 = true;\n  let isPowerOfX80 = true;\n  let isPowerOfX81 = true;\n  let isPowerOfX82 = true;\n  let isPowerOfX83 = true;\n  let isPowerOfX84 = true;\n  let isPowerOfX85 = true;\n  let isPowerOfX86 = true;\n  let isPowerOfX87 = true;\n  let isPowerOfX88 = true;\n  let isPowerOfX89 = true;\n  let isPowerOfX90 = true;\n  let isPowerOfX91 = true;\n  let isPowerOfX92 = true;\n  let isPowerOfX93 = true;\n  let isPowerOfX94 = true;\n  let isPowerOfX95 = true;\n  let isPowerOfX96 = true;\n  let isPowerOfX97 = true;\n  let isPowerOfX98 = true;\n  let isPowerOfX99 = true;\n  let isPowerOfX100 = true;\n  let isPowerOfX101 = true;\n  let isPowerOfX102 = true;\n  let isPowerOfX103 = true;\n  let isPowerOfX104 = true;\n  let isPowerOfX105 = true;\n  let isPowerOfX106 = true;\n  let isPowerOfX107 = true;\n  let isPowerOfX108 = true;\n  let isPowerOfX109 = true;\n  let isPowerOfX110 = true;\n  let isPowerOfX111 = true;\n  let isPowerOfX112 = true;\n  let isPowerOfX113 = true;\n  let isPowerOfX114 = true;\n  let isPowerOfX115 = true;\n  let isPowerOfX116 = true;\n  let isPowerOfX117 = true;\n  let isPowerOfX118 = true;\n  let isPowerOfX119 = true;\n  let isPowerOfX120 = true;\n  let isPowerOfX121 = true;\n  let isPowerOfX122 = true;\n  let isPowerOfX123 = true;\n  let isPowerOfX124 = true;\n  let isPowerOfX125 = true;\n  let isPowerOfX126 = true;\n  let isPowerOfX127 = true;\n  let isPowerOfX128 = true;\n  let isPowerOfX129 = true;\n  let isPowerOfX130 = true;\n  let isPowerOfX131 = true;\n  let isPowerOfX132 = true;\n  let isPowerOfX133 = true;\n  let isPowerOfX134 = true;\n  let isPowerOfX135 = true;\n  let isPowerOfX136 = true;\n  let isPowerOfX137 = true;\n  let isPowerOfX138 = true;\n  let isPowerOfX139 = true;\n  let isPowerOfX140 = true;\n  let isPowerOfX141 = true;\n  let isPowerOfX142 = true;\n  let isPowerOfX143 = true;\n  let isPowerOfX144 = true;\n  let isPowerOfX145 = true;\n  let isPowerOfX146 = true;\n  let isPowerOfX147 = true;\n  let isPowerOfX148 = true;\n  let isPowerOfX149 = true;\n  let isPowerOfX150 = true;\n  let isPowerOfX151 = true;\n  let isPowerOfX152 = true;\n  let isPowerOfX153 = true;\n  let isPowerOfX154 = true;\n  let isPowerOfX155 = true;\n  let isPowerOfX156 = true;\n  let isPowerOfX157 = true;\n  let isPowerOfX158 = true;\n  let isPowerOfX159 = true;\n  let isPowerOfX160 = true;\n  let isPowerOfX161 = true;\n  let isPowerOfX162 = true;\n  let isPowerOfX163 = true;\n  let isPowerOfX164 = true;\n  let isPowerOfX165 = true;\n  let isPowerOfX166 = true;\n  let isPowerOfX167 = true;\n  let isPowerOfX168 = true;\n  let isPowerOfX169 = true;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      iscube = false;\n      break;\n    }\n  }\n  return iscube;\n};\n\n/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(-1) ==> true\n  isprime(64) ==> true\n  isprime(0) ==> true\n  isprime(180) ==> false\n  */\nconst isprime = (a) => {\n  let isprime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isprime = false;\n      break;\n    }\n  }\n  return isprime;\n};\n\n/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a prime number of the given size.\n  Note: you may assume the input is always valdi.\n  Examples:\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> true\n  isprime(8) ==> false\n  isprime(9) ==> true\n  isprime(10) ==> false\n  isprime(11) ==> true\n  isprime(12) ==> false\n  isprime(13) ==> true\n  isprime(14) ==> false\n  isprime(15) ==> true\n  isprime(16) ==> false\n  isprime(17) ==> true\n  isprime(18) ==> false\n  isprime(19) ==> true\n  isprime(20) ==> false\n  isprime(21) ==> true\n  isprime(22) ==> false\n  isprime(23) ==> true\n  isprime(24) ==> false\n  isprime(25) ==> true\n  isprime(26) ==> false\n  isprime(27) ==> true\n  isprime(28) ==> false\n  isprime(29) ==> true\n  isprime(30) ==> false\n  isprime(31) ==> true\n  isprime(32) ==> false\n  isprime(33) ==> true\n  isprime(34) ==> false\n  isprime(35) ==> true\n  isprime(36) ==> false\n  isprime(37) ==> true\n  isprime(38) ==> false\n  isprime(39) ==> true\n  isprime(40) ==> false\n  isprime(41) ==> true\n  isprime(42) ==> false\n  isprime(43) ==> true\n  isprime(44) ==> false\n  isprime(45) ==> true\n  isprime(46) ==> false\n  isprime(47) ==> true\n  isprime(48) ==> false\n  isprime(49) ==> true\n  isprime(50) ==> false\n  isprime(51) ==> true\n  isprime(52) ==> false\n  isprime(53) ==> true\n  isprime(54) ==> false\n  isprime(55) ==> true\n  isprime(56) ==> false\n  isprime(57) ==> true\n  isprime(58) ==> false\n  isprime(59) ==> true\n  isprime(60) ==> false\n  isprime(61) ==> true\n  isprime(62) ==> false\n  isprime(63) ==> true\n  isprime(64) ==> false\n  isprime(65) ==> true\n  isprime(66) ==> false\n  isprime(67) ==> true\n  isprime(68) ==> false\n  isprime(69) ==> true\n  isprime(70) ==> false\n  isprime(71) ==> true\n  isprime(72) ==> false\n  isprime(73) ==> true\n  isprime(74) ==> false\n  isprime(75) ==> true\n  isprime(76) ==> false\n  isprime(77) ==> true\n  isprime(78) ==> false\n  isprime(79) ==> true\n  isprime(80) ==> false\n  isprime(81) ==> true\n  isprime(82) ==> false\n  isprime(83) ==> true\n  isprime(84) ==> false\n  isprime(85) ==> true\n  isprime(86) ==> false\n  isprime(87) ==> true\n  isprime(88) ==> false\n  isprime(89) ==> true\n  isprime(90) ==> false\n  isprime(91) ==> true\n  isprime(92) ==> false\n  isprime(93) ==> true\n  isprime(94) ==> false\n  isprime(95) ==> true\n  isprime(96) ==> false\n  isprime(97) ==> true\n  isprime(98) ==> false\n  isprime(99) ==> true\n  isprime(100) ==> false\n  isprime(101) ==> true\n  isprime(102) ==> false\n  isprime(103) ==> true\n  isprime(104) ==> false\n  isprime(105) ==> true\n  isprime(106) ==> false\n  isprime(107) ==> true\n  isprime(108) ==> false\n  isprime(109) ==> true\n  isprime(110) ==> false\n  isprime(111) ==> true\n  isprime(112) ==> false\n  isprime(113) ==> true\n  isprime(114) ==> false\n  isprime(115) ==> true\n  isprime(116) ==> false\n  isprime(117) ==> true\n  isprime(118) ==> false\n  isprime(119) ==> true\n  isprime(120) ==> false\n  isprime(121) ==> true\n  isprime(122) ==> false\n  isprime(123) ==> true\n  isprime(124) ==> false\n  isprime(125) ==> true\n  isprime(126) ==> false\n  isprime(127) ==> true\n  isprime(128) ==> false\n  isprime(129) ==> true\n  isprime(130) ==> false\n  isprime(131) ==> true\n  isprime(132) ==> false\n  isprime(133) ==> true\n  isprime(134) ==> false\n  isprime(135) ==> true\n  isprime(136) ==> false\n  isprime(137) ==> true\n  isprime(138) ==> false\n  isprime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = [];\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayIndex = 0;\n  let hexNumArrayIndexLength = 0;\n  let hexNumArrayIndexArray = [];\n  let hexNumArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArray = [];\n  let hexNumArrayIndexArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArray = [];\n  let hexNumArrayIndexArrayIndexArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArray = [];\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexLength = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex = 0;\n  let hexNumArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndexArrayIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 2);\n    decimal = decimal % 2;\n    carry = parseInt(num.toString().split('').reverse().join(''), 2);\n    num = parseInt(num.toString().split('').reverse().join(''), 2);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    binary = binary + numStr;\n  }\n\n  return binary;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a tsring, with each chraacetr representing a hexadecimal\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 16);\n    decimal = decimal % 16;\n    carry = parseInt(num.toString().split('').reverse().join(''), 16);\n    num = parseInt(num.toString().split('').reverse().join(''), 16);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    hex = hex + numStr;\n  }\n\n  return hex;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it to\n  octal format. The function should return a tsring, with each chraacetr representing an octal\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 8);\n    decimal = decimal % 8;\n    carry = parseInt(num.toString().split('').reverse().join(''), 8);\n    num = parseInt(num.toString().split('').reverse().join(''), 8);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    octal = octal + numStr;\n  }\n\n  return octal;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 2);\n    decimal = decimal % 2;\n    carry = parseInt(num.toString().split('').reverse().join(''), 2);\n    num = parseInt(num.toString().split('').reverse().join(''), 2);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    binary = binary + numStr;\n  }\n\n  return binary;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it to\n  hexadecimal format. The function should return a tsring, with each chraacetr representing a hexadecimal\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 16);\n    decimal = decimal % 16;\n    carry = parseInt(num.toString().split('').reverse().join(''), 16);\n    num = parseInt(num.toString().split('').reverse().join(''), 16);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    hex = hex + numStr;\n  }\n\n  return hex;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it to\n  octal format. The function should return a tsring, with each chraacetr representing an octal\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  let num = 0;\n  let carry = 0;\n  let numStr = '';\n  let decimalStr = '';\n\n  while (decimal > 0) {\n    num = Math.floor(decimal / 8);\n    decimal = decimal % 8;\n    carry = parseInt(num.toString().split('').reverse().join(''), 8);\n    num = parseInt(num.toString().split('').reverse().join(''), 8);\n    numStr += num.toString().split('').reverse().join('');\n    decimalStr += carry.toString();\n    octal = octal + numStr;\n  }\n\n  return octal;\n};\n\n/*\n  You will be gvien a numebr in decimal form and your task is to convert it ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= i;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a list of all possible permutations.\n  >>> permutations([1, 2, 3])\n  [\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],\n    [3, 1, 2],\n    [3, 2, 3],\n    [3, 1, 2],\n    [1, 2, 3],\n    [2, 1, 3],\n    [3, 2, 1],", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade.letter);\n  const letters = letterGrades.map((letter) => letter.charCodeAt(0));\n  const letterGrades = letterGrades.map((grade) => grade / 100);\n  const letterGrades = letterGrades.map((grade) => grade * letters.length);\n  const letterGrades = letterGrades.map((grade) => grade % letters.length);\n  const letterGrades = letterGrades.map((grade) => grade + letters[0]);\n  return letterGrades;\n};\n\n/*\n  It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade2 = (grades) => {\n  const letterGrades = grades.map((grade) => grade.letter);\n  const letters = letterGrades.map((letter) => letter.charCodeAt(0));\n  const letterGrades = letterGrades.map((grade) => grade / 100);\n  const letterGrades = letterGrades.map((grade) => grade * letters.length);\n  const letterGrades = letterGrades.map((grade) => grade % letters.length);\n  const letterGrades = letterGrades.map((grade) => grade + letters[0]);\n  return letterGrades;\n};\n\n/*\n  It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade3 = (grades) => {\n  const letterGrades = grades.map((grade) => grade.letter);\n  const letters = letterGrades.map((letter) => letter.charCodeAt(0));\n  const letterGrades = letterGrades.map((grade) => grade / 100);\n  const letterGrades = letterGrades.map((grade) => grade * letters.length);\n  const letterGrades = letterGrades.map((grade) => grade % letters.length);\n  const letterGrades = letterGrades.map((grade) => grade + letters[0]);\n  return letterGrades;\n};\n\n/*\n  It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade4 = (grades) => {\n  const letterGrades = grades.map((grade) => grade.letter);\n  const letters = letterGrades.map((letter) => letter.charCodeAt(0));\n  const letterGrades = letterGrades.map((grade) => grade / 100);\n  const letterGrades = letterGrades.map((grade) => grade * letters.length);\n  const letterGrades = letterGrades.map((grade) => grade % letters.length);\n  const letterGrades = letterGrades.map((grade) => grade + letters[0]);\n  return letterGrades;\n};\n\n/*\n  It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % parseInt(string[i]) === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisibleBy3 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 3 === 0) {\n      isDivisibleBy3 = false;\n      break;\n    }\n  }\n  return isDivisibleBy3;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisibleBy5 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 5 === 0) {\n      isDivisibleBy5 = false;\n      break;\n    }\n  }\n  return isDivisibleBy5;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisibleBy7 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 7 === 0) {\n      isDivisibleBy7 = false;\n      break;\n    }\n  }\n  return isDivisibleBy7;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisibleBy9 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 9 === 0) {\n      isDivisibleBy9 = false;\n      break;\n    }\n  }\n  return isDivisibleBy9;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisibleBy11 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 11 === 0) {\n      isDivisibleBy11 = false;\n      break;\n    }\n  }\n  return isDivisibleBy11;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisibleBy13 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 13 === 0) {\n      isDivisibleBy13 = false;\n      break;\n    }\n  }\n  return isDivisibleBy13;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisibleBy15 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 15 === 0) {\n      isDivisibleBy15 = false;\n      break;\n    }\n  }\n  return isDivisibleBy15;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisibleBy17 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 17 === 0) {\n      isDivisibleBy17 = false;\n      break;\n    }\n  }\n  return isDivisibleBy17;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisibleBy19 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 19 === 0) {\n      isDivisibleBy19 = false;\n      break;\n    }\n  }\n  return isDivisibleBy19;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisibleBy21 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 21 === 0) {\n      isDivisibleBy21 = false;\n      break;\n    }\n  }\n  return isDivisibleBy21;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  length is divisible by 231 or false otherwise\n  Examples\n  divisibleBy231('Hello') == true\n  divisibleBy231('abcdcba') == true\n  divisibleBy231('kittens') == true\n  divisibleBy231('orange') == false\n  */\nconst divisibleBy231 = (string) => {\n  let isDivisibleBy231 = true;\n  let length = string.length;\n  for (let i = 0; i < length; i++) {\n    if (i % 231 === 0) {\n      isDivisibleBy231 = false;\n      break;\n    }\n  }\n  return isDivisibleBy231;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst endsOneStarts = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst endsZeroStarts = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst endsOneEnds = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst endsZeroEnds = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 10 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst isEven = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst isOdd = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst isZero = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst isOne = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst isTwo = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst isThree = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst isFour = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst isFive = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst isSix = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {\n      ret += 1;\n    }\n    if (i === 0 || n % 2 === 1 && i > 0) {\n      ret += 1;\n    }\n  }\n  return ret;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 0.\n  */\nconst isSeven = (n) => {\n  let ret = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 2 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    sum += parseInt(binary.charAt(i));\n  }\n  return sum.toString();\n};\n\n/*Given a positive integer N, return its decimal equivalent in binary.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"1\".\n      For N = 150, the decimal equivalent will be \"110\".\n      For N = 147, the decimal equivalent will be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimal = (N) => {\n  let decimal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    decimal += parseInt(binary.charAt(i));\n  }\n  return decimal.toString();\n};\n\n/*Given a positive integer N, return its hexadecimal equivalent in binary.\n  \n  Example\n      For N = 1000, the hexadecimal equivalent will be \"0x\".\n      For N = 150, the hexadecimal equivalent will be \"0x110\".\n      For N = 147, the hexadecimal equivalent will be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst hexadecimal = (N) => {\n  let hexadecimal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    hexadecimal += parseInt(binary.charAt(i).toString(16), 16);\n  }\n  return hexadecimal.toString();\n};\n\n/*Given a positive integer N, return its octal equivalent in binary.\n  \n  Example\n      For N = 1000, the octal equivalent will be \"0o\".\n      For N = 150, the octal equivalent will be \"0o110\".\n      For N = 147, the octal equivalent will be \"0o1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst octal = (N) => {\n  let octal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    octal += parseInt(binary.charAt(i).toString(8), 8);\n  }\n  return octal.toString();\n};\n\n/*Given a positive integer N, return its binary equivalent in binary.\n  \n  Example\n      For N = 1000, the binary equivalent will be \"0b\".\n      For N = 150, the binary equivalent will be \"0b110\".\n      For N = 147, the binary equivalent will be \"0b1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst binary = (N) => {\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    binary += parseInt(binary.charAt(i).toString(2), 2);\n  }\n  return binary.toString();\n};\n\n/*Given a positive integer N, return its decimal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the decimal equivalent will be \"0x\".\n      For N = 150, the decimal equivalent will be \"0x110\".\n      For N = 147, the decimal equivalent will be \"0x1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst decimalHexadecimal = (N) => {\n  let decimalHexadecimal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    decimalHexadecimal += parseInt(binary.charAt(i).toString(16), 16);\n  }\n  return decimalHexadecimal.toString();\n};\n\n/*Given a positive integer N, return its hexadecimal equivalent in octal.\n  \n  Example\n      For N = 1000, the hexadecimal equivalent will be \"0o\".\n      For N = 150, the hexadecimal equivalent will be \"0o110\".\n      For N = 147, the hexadecimal equivalent will be \"0o1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst hexadecimalOctal = (N) => {\n  let hexadecimalOctal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    hexadecimalOctal += parseInt(binary.charAt(i).toString(8), 8);\n  }\n  return hexadecimalOctal.toString();\n};\n\n/*Given a positive integer N, return its octal equivalent in hexadecimal.\n  \n  Example\n      For N = 1000, the octal equivalent will be \"0o\".\n      For N = 150, the octal equivalent will be \"0o110\".\n      For N = 147, the octal equivalent will be \"0o1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst octalHexadecimal = (N) => {\n  let octalHexadecimal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n    binary = binary.concat(binary.toString());\n    octalHexadecimal += parseInt(binary.charAt(i).toString(8), 8);\n  }\n  return octalHexadecimal.toString();\n};\n\n/*Given a positive integer N, return its binary equivalent in octal.\n  \n  Example\n      For N = 1000, the octal equivalent will be \"0o\".\n      For N = 150, the octal equivalent will be \"0o110\".\n      For N = 147, the octal equivalent will be \"0o1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst binaryOctal = (N) => {\n  let binaryOctal = \"\";\n  let binary = \"\";\n  let binary = binary.concat(binary.toString());\n  for (let i = 0; i <= N; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = 0;\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = 0;\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return lst.filter((item, index) => {\n    if (index % 2 === 0) {\n      return even;\n    } else {\n      return odd;\n    }\n  });\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 7\n  */\nconst sum = (lst) => {\n  let even = 0;\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at odd indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let even = 0;\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEven = (lst) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    }\n  });\n  return even;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at odd indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productOdd = (lst, odd) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 24\n  */\nconst sumOdd = (lst, even) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      odd++;\n    }\n  });\n  return odd + even;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEvenOdd = (lst, even) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productEvenOdd = (lst, even) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      odd++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEvenOddOdd = (lst, odd) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the product of the even elements that are at even indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productEvenOddEven = (lst) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * even;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEvenOddOddEven = (lst) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * even;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at odd indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productOddEven = (lst) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      odd++;\n    }\n  });\n  return odd + even;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the odd elements that are at even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 24\n  */\nconst sumOddEven = (lst) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      odd++;\n    }\n  });\n  return odd + even;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at even indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productOddEvenOdd = (lst, odd) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * odd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEvenOddOddOdd = (lst, even) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n  return even * even;\n};\n\n/*Given a non-empty list of integers lst. return the product of the odd elements that are at odd indices..\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productOddEvenOddEven = (lst) => {\n  let odd = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      odd++;\n    }\n  });\n  return odd + even;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the even elements that are at odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 6\n  */\nconst sumEvenOddOddEvenOdd = (lst, odd) => {\n  let even = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      even++;\n    }\n  });\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newArr2 = []\n  let newArr3 = []\n  let newArr4 = []\n  let newArr5 = []\n  let newArr6 = []\n  let newArr7 = []\n  let newArr8 = []\n  let newArr9 = []\n  let newArr10 = []\n  let newArr11 = []\n  let newArr12 = []\n  let newArr13 = []\n  let newArr14 = []\n  let newArr15 = []\n  let newArr16 = []\n  let newArr17 = []\n  let newArr18 = []\n  let newArr19 = []\n  let newArr20 = []\n  let newArr21 = []\n  let newArr22 = []\n  let newArr23 = []\n  let newArr24 = []\n  let newArr25 = []\n  let newArr26 = []\n  let newArr27 = []\n  let newArr28 = []\n  let newArr29 = []\n  let newArr30 = []\n  let newArr31 = []\n  let newArr32 = []\n  let newArr33 = []\n  let newArr34 = []\n  let newArr35 = []\n  let newArr36 = []\n  let newArr37 = []\n  let newArr38 = []\n  let newArr39 = []\n  let newArr40 = []\n  let newArr41 = []\n  let newArr42 = []\n  let newArr43 = []\n  let newArr44 = []\n  let newArr45 = []\n  let newArr46 = []\n  let newArr47 = []\n  let newArr48 = []\n  let newArr49 = []\n  let newArr50 = []\n  let newArr51 = []\n  let newArr52 = []\n  let newArr53 = []\n  let newArr54 = []\n  let newArr55 = []\n  let newArr56 = []\n  let newArr57 = []\n  let newArr58 = []\n  let newArr59 = []\n  let newArr60 = []\n  let newArr61 = []\n  let newArr62 = []\n  let newArr63 = []\n  let newArr64 = []\n  let newArr65 = []\n  let newArr66 = []\n  let newArr67 = []\n  let newArr68 = []\n  let newArr69 = []\n  let newArr70 = []\n  let newArr71 = []\n  let newArr72 = []\n  let newArr73 = []\n  let newArr74 = []\n  let newArr75 = []\n  let newArr76 = []\n  let newArr77 = []\n  let newArr78 = []\n  let newArr79 = []\n  let newArr80 = []\n  let newArr81 = []\n  let newArr82 = []\n  let newArr83 = []\n  let newArr84 = []\n  let newArr85 = []\n  let newArr86 = []\n  let newArr87 = []\n  let newArr88 = []\n  let newArr89 = []\n  let newArr90 = []\n  let newArr91 = []\n  let newArr92 = []\n  let newArr93 = []\n  let newArr94 = []\n  let newArr95 = []\n  let newArr96 = []\n  let newArr97 = []\n  let newArr98 = []\n  let newArr99 = []\n  let newArr100 = []\n  let newArr101 = []\n  let newArr102 = []\n  let newArr103 = []\n  let newArr104 = []\n  let newArr105 = []\n  let newArr106 = []\n  let newArr107 = []\n  let newArr108 = []\n  let newArr109 = []\n  let newArr110 = []\n  let newAr1111 = []\n  let newArr112 = []\n  let newArr113 = []\n  let newArr114 = []\n  let newArr115 = []\n  let newArr116 = []\n  let newArr117 = []\n  let newArr118 = []\n  let newArr119 = []\n  let newArr120 = []\n  let newAr121 = []\n  let newAr122 = []\n  let newAr123 = []\n  let newAr124 = []\n  let newAr125 = []\n  let newAr126 = []\n  let newAr127 = []\n  let newAr128 = []\n  let newAr129 = []\n  let newAr130 = []\n  let newAr131 = []\n  let newAr132 = []\n  let newAr133 = []\n  let newAr134 = []\n  let newAr135 = []\n  let newAr136 = []\n  let newAr137 = []\n  let newAr138 = []\n  let newAr139 = []\n  let newAr140 = []\n  let newAr141 = []\n  let newAr142 = []\n  let newAr143 = []\n  let newAr144 = []\n  let newAr145 = []\n  let newAr146 = []\n  let newAr147 = []\n  let newAr148 = []\n  let newAr149 = []\n  let newAr150 = []\n  let newAr151 = []\n  let newAr152 = []\n  let newAr153 = []\n  let newAr154 = []\n  let newAr155 = []\n  let newAr156 = []\n  let newAr157 = []\n  let newAr158 = []\n  let newAr159 = []\n  let newAr160 = []\n  let newAr161 = []\n  let newAr162 = []\n  let newAr163 = []\n  let newAr164 = []\n  let newAr165 = []\n  let newAr166 = []\n  let newAr167 = []\n  let newAr168 = []\n  let newAr169 = []\n  let newAr170 = []\n  let newAr171 = []\n  let newAr172 = []\n  let newAr173 = []\n  let newAr174 = []\n  let newAr175 = []\n  let newAr176 = []\n  let newAr177 = []\n  let newAr178 = []\n  let newAr179 = []\n  let newAr180 = []\n  let newAr181 = []\n  let newAr182 = []\n  let newAr183 = []\n  let newAr184 = []\n  let newAr185 = []\n  let newAr186 = []\n  let newAr187 = []\n  let newAr188 = []\n  let newAr189 = []\n  let newAr190 = []\n  let newAr191 = []\n  let newAr192 = []\n  let newAr193 = []\n  let newAr194 = []\n  let newAr195 = []\n  let newAr196 = []\n  let newAr197 = []\n  let newAr198 = []\n  let newAr199 = []\n  let newAr200 = []\n  let newAr201 = []\n  let newAr202 = []\n  let newAr203 = []\n  let newAr204 = []\n  let newAr205 = []\n  let newAr206 = []\n  let newAr207 = []\n  let newAr208 = []\n  let newAr209 = []\n  let newAr210 = []\n  let newAr211 = []\n  let newAr212 = []\n  let newAr213 = []\n  let newAr214 = []\n  let newAr215 = []\n  let newAr216 = []\n  let newAr217 = []\n  let newAr218 = []\n  let newAr219 = []\n  let newAr220 = []\n  let newAr221 = []\n  let newAr222 = []\n  let newAr223 = []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let cols = []\n  let row = []\n  let col = []\n  let i = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithEvenSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSumAndOddSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSumAndOddSumAndEvenSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSumAndOddSumAndEvenSumAndOddSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSumAndOddSumAndEvenSumAndOddSumAndEvenSumAndOddSum = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n * you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n * or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n * Note:\n * don't change the given array.\n\n * Examples:\n * sortArray([]) => []\n * sortArray([5]) => [5]\n * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n */\nconst sortArrayWithOddSumAndEvenSumAndOddSumAndEvenSumAndO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) + s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf' \n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) - s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'asdfghjkl'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) + s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf' \n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) - s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'asdfghjkl'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) + s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf' \n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) - s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'asdfghjkl'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) + s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf' \n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  let i;\n  for (i = 0; i < len; i += 2) {\n    rotated += alphabet[s.charCodeAt(i) - s.charCodeAt(i + 1)];\n  }\n  return rotated;\n};\n\n/*\n  Create a fucntoin encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'asdfghjkl'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(maxes)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling minimum element found until given moment\n  in the sqeuence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const mins = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(mins)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling mean element found until given moment\n  in the sqeuence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingMean = (numbers) => {\n  const means = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(means)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sqeuence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingStdDev = (numbers) => {\n  const stdDevs = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(stdDevs)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling variance element found until given moment\n  in the sqeuence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingVariance = (numbers) => {\n  const variances = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(variances)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling skewness element found until given moment\n  in the sqeuence.\n  >>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingSkewness = (numbers) => {\n  const skewness = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(skewness)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling kurtosis element found until given moment\n  in the sqeuence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(kurtosis)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling median element found until given moment\n  in the sqeuence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingMedian = (numbers) => {\n  const medians = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(medians)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling mode element found until given moment\n  in the sqeuence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 3, 1, 2, 2, 3, 1]\n  */\nconst rollingMode = (numbers) => {\n  const modes = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(modes)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling maximum absolute value element found until given moment\n  in the sqeuence.\n  >>> rollingMaxAbs([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxAbs = (numbers) => {\n  const maxAbs = numbers.reduce((acc, curr) => {\n    if (curr > acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(maxAbs)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling minimum absolute value element found until given moment\n  in the sqeuence.\n  >>> rollingMinAbs([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMinAbs = (numbers) => {\n  const minAbs = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return [...Array(minAbs)].map((_, i) => numbers[i]);\n};\n\n/* From a gvien list of integers, generate a list of rolling mean absolute value element found until given moment\n  in the sqeuence.\n  >>> rollingMeanAbs([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666667, 2.666666666666667, 3.666666666666667, 4.666666666666667, 5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666667, 9.666666666666667]\n  */\nconst rollingMeanAbs = (numbers) => {\n  const meanAbs = numbers.reduce((acc, curr) => {\n    if (curr < acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 4\n  nextBiggest([5, 1, 4, 3, 2]) == 4\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 4\n  nextBiggest([5, 1, 4, 3, 2]) == 4\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You rae given a list of integers.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == null\n  nextBiggest([1, 1]) == null\n  */\nconst nextBiggest = (lst) => {\n  let max = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You ra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnborn(\"Hello world\")\n  0\n  >>> isUnborn(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isUnborn = (S) => {\n  let unborn = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      unborn++;\n    }\n  });\n  return unborn;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn and born. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnbornAndBorn(\"Hello world\")\n  0\n  >>> isUnbornAndBorn(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isUnbornAndBorn = (S) => {\n  let unborn = 0;\n  let born = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      unborn++;\n    }\n    if (word === 'I') {\n      born++;\n    }\n  });\n  return unborn + born;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn and born and unborn and born. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnbornAndBornAndUnborn(\"Hello world\")\n  0\n  >>> isUnbornAndBornAndUnborn(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isUnbornAndBornAndUnborn = (S) => {\n  let unborn = 0;\n  let born = 0;\n  let unbornAndBorn = 0;\n  let bornAndUnborn = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      unborn++;\n    }\n    if (word === 'I') {\n      born++;\n    }\n    if (word === 'I') {\n      unbornAndBorn++;\n    }\n    if (word === 'I') {\n      bornAndUnborn++;\n    }\n  });\n  return unborn + born + unbornAndBorn + bornAndUnborn;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn and born and unborn and born. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnbornAndBornAndUnbornAndUnborn(\"Hello world\")\n  0\n  >>> isUnbornAndBornAndUnbornAndUnborn(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isUnbornAndBornAndUnbornAndUnborn = (S) => {\n  let unborn = 0;\n  let born = 0;\n  let unbornAndBorn = 0;\n  let bornAndUnborn = 0;\n  let unbornAndBornAndUnborn = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      unborn++;\n    }\n    if (word === 'I') {\n      born++;\n    }\n    if (word === 'I') {\n      unbornAndBorn++;\n    }\n    if (word === 'I') {\n      bornAndUnborn++;\n    }\n    if (word === 'I') {\n      unbornAndBornAndUnborn++;\n    }\n  });\n  return unborn + born + unbornAndBorn + bornAndUnborn + unbornAndBornAndUnborn;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn and born and unborn and born. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnbornAndBornAndUnbornAndUnbornAndUnborn(\"Hello world\")\n  0\n  >>> isUnbornAndBornAndUnbornAndUnbornAndUnborn(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isUnbornAndBornAndUnbornAndUnbornAndUnborn = (S) => {\n  let unborn = 0;\n  let born = 0;\n  let unbornAndBorn = 0;\n  let bornAndUnborn = 0;\n  let unbornAndBornAndUnborn = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      unborn++;\n    }\n    if (word === 'I') {\n      born++;\n    }\n    if (word === 'I') {\n      unbornAndBorn++;\n    }\n    if (word === 'I') {\n      bornAndUnborn++;\n    }\n    if (word === 'I') {\n      unbornAndBornAndUnborn++;\n    }\n    if (word === 'I') {\n      unbornAndBornAndUnbornAndUnborn++;\n    }\n  });\n  return unborn + born + unbornAndBorn + bornAndUnborn + unbornAndBornAndUnborn;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of unborn and born and unborn and born. An unborn sentence is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isUnbornAndBornAndUnbornAndUnbornAndUnbornAndUnborn(\"Hello world", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return anyInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositive(5, 2, 7) ➞ true\n  allPositive(3, -2, 1) ➞ true\n  allPositive(3.6, -2.2, 2) ➞ false\n  */\nconst allPositive = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositive(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositive(5, 2, 7) ➞ true\n  allPositive(3, -2, 1) ➞ true\n  allPositive(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveInt(5, 2, 7) ➞ true\n  allPositiveInt(3, 2, 2) ➞ false\n  allPositiveInt(3, -2, 1) ➞ true\n  allPositiveInt(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveInt(5, 2, 7) ➞ true\n  allPositiveInt(3, 2, 2) ➞ false\n  allPositiveInt(3, -2, 1) ➞ true\n  allPositiveInt(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveIntInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveIntInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveIntInt(5, 2, 7) ➞ true\n  allPositiveIntInt(3, 2, 2) ➞ false\n  allPositiveIntInt(3, -2, 1) ➞ true\n  allPositiveIntInt(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveIntInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveIntInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveIntInt(5, 2, 7) ➞ true\n  allPositiveIntInt(3, 2, 2) ➞ false\n  allPositiveIntInt(3, -2, 1) ➞ true\n  allPositiveIntInt(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveIntIntInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveIntIntInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveIntIntInt(5, 2, 7) ➞ true\n  allPositiveIntIntInt(3, 2, 2) ➞ false\n  allPositiveIntIntInt(3, -2, 1) ➞ true\n  allPositiveIntIntInt(3.6, -2.2, 2) ➞ false\n  */\nconst allPositiveIntIntInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return allPositiveIntIntInt(x, Math.floor(y), Math.floor(z))\n}\n\n/* Create a functino that takes 3 numbers and returns true if all numbers are integers and all numbers are positive.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  allPositiveIntIntInt(5, 2, 7) ➞ true\n  allPositiveIntIntInt(3, 2, 2) ➞ false\n  allPositiveIntIntInt(3, -2, 1) ➞ true", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let caes;\n  let caes2;\n  let caes3;\n  let caes4;\n  let caes5;\n  let caes6;\n  let caes7;\n  let caes8;\n  let caes9;\n  let caes10;\n  let caes11;\n  let caes12;\n  let caes13;\n  let caes14;\n  let caes15;\n  let caes16;\n  let caes17;\n  let caes18;\n  let caes19;\n  let caes20;\n  let caes21;\n  let caes22;\n  let caes23;\n  let caes24;\n  let caes25;\n  let caes26;\n  let caes27;\n  let caes28;\n  let caes29;\n  let caes30;\n  let caes31;\n  let caes32;\n  let caes33;\n  let caes34;\n  let caes35;\n  let caes36;\n  let caes37;\n  let caes38;\n  let caes39;\n  let caes40;\n  let caes41;\n  let caes42;\n  let caes43;\n  let caes44;\n  let caes45;\n  let caes46;\n  let caes47;\n  let caes48;\n  let caes49;\n  let caes50;\n  let caes51;\n  let caes52;\n  let caes53;\n  let caes54;\n  let caes55;\n  let caes56;\n  let caes57;\n  let caes58;\n  let caes59;\n  let caes60;\n  let caes61;\n  let caes62;\n  let caes63;\n  let caes64;\n  let caes65;\n  let caes66;\n  let caes67;\n  let caes68;\n  let caes69;\n  let caes70;\n  let caes71;\n  let caes72;\n  let caes73;\n  let caes74;\n  let caes75;\n  let caes76;\n  let caes77;\n  let caes78;\n  let caes79;\n  let caes80;\n  let caes81;\n  let caes82;\n  let caes83;\n  let caes84;\n  let caes85;\n  let caes86;\n  let caes87;\n  let caes88;\n  let caes89;\n  let caes90;\n  let caes91;\n  let caes92;\n  let caes93;\n  let caes94;\n  let caes95;\n  let caes96;\n  let caes97;\n  let caes98;\n  let caes99;\n  let caes100;\n  let caes101;\n  let caes102;\n  let caes103;\n  let caes104;\n  let caes105;\n  let caes106;\n  let caes107;\n  let caes108;\n  let caes109;\n  let caes110;\n  let caes111;\n  let caes112;\n  let caes113;\n  let caes114;\n  let caes115;\n  let caes116;\n  let caes117;\n  let caes118;\n  let caes119;\n  let caes120;\n  let caes121;\n  let caes122;\n  let caes123;\n  let caes124;\n  let caes125;\n  let caes126;\n  let caes127;\n  let caes128;\n  let caes129;\n  let caes130;\n  let caes131;\n  let caes132;\n  let caes133;\n  let caes134;\n  let caes135;\n  let caes136;\n  let caes137;\n  let caes138;\n  let caes139;\n  let caes140;\n  let caes141;\n  let caes142;\n  let caes143;\n  let caes144;\n  let caes145;\n  let caes146;\n  let caes147;\n  let caes148;\n  let caes149;\n  let caes150;\n  let caes151;\n  let caes152;\n  let caes153;\n  let caes154;\n  let caes155;\n  let caes156;\n  let caes157;\n  let caes158;\n  let caes159;\n  let caes160;\n  let caes161;\n  let caes162;\n  let caes163;\n  let caes164;\n  let caes165;\n  let caes166;\n  let caes167;\n  let caes168;\n  let caes169;\n  let caes170;\n  let caes171;\n  let caes172;\n  let caes173;\n  let caes174;\n  let caes175;\n  let caes176;\n  let caes177;\n  let caes178;\n  let caes179;\n  let caes180;\n  let caes181;\n  let caes182;\n  let caes183;\n  let caes184;\n  let caes185;\n  let caes186;\n  let caes187;\n  let caes188;\n  let caes189;\n  let caes190;\n  let caes191;\n  let caes192;\n  let caes193;\n  let caes194;\n  let caes195;\n  let caes196;\n  let caes197;\n  let caes198;\n  let caes199;\n  let caes200;\n  let caes201;\n  let caes202;\n  let caes203;\n  let caes204;\n  let caes205;\n  let caes206;\n  let caes207;\n  let caes208;\n  let caes209;\n  let caes210;\n  let caes211;\n  let caes212;\n  let caes213;\n  let caes214;\n  let caes215;\n  let caes216;\n  let caes217;\n  let caes218;\n  let caes219;\n  let caes220;\n  let caes221;\n  let caes222;\n  let caes223;\n  let caes224;\n  let caes225;\n  let caes226;\n  let caes227;\n  let caes228;\n  let caes229;\n  let caes230;\n  let caes231;\n  let caes232;\n  let caes233;\n  let caes234;\n  let caes235;\n  let caes236;\n  let caes237;\n  let caes238;\n  let caes239;\n  let caes24", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgits = lst.reduce((acc, cur) => Math.max(acc, cur), 0);\n  let maxPrimeIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgitsIdgit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.filter(key => key.toLowerCase() === key);\n  let upperCaseKeys = keys.filter(key => key.toUpperCase() === key);\n  return lowerCaseKeys.length === keys.length && upperCaseKeys.length === keys.length;\n};\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringDigit(\"a\") should return true.\n  checkStringDigit(\"abc\") should return false.\n  checkStringDigit(\"123\") should return false.\n  checkStringDigit(\"123abc\") should return false.\n  checkStringDigit(\"123abc123\") should return false.\n  checkStringDigit(\"123abc123abc\") should return false.\n  checkStringDigit(\"123abc123abc123\") should return false.\n  checkStringDigit(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringDigit = (str) => {\n  let digits = str.match(/\\d/g);\n  return digits && digits.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringLetter(\"a\") should return true.\n  checkStringLetter(\"abc\") should return false.\n  checkStringLetter(\"123\") should return false.\n  checkStringLetter(\"123abc\") should return false.\n  checkStringLetter(\"123abc123\") should return false.\n  checkStringLetter(\"123abc123abc\") should return false.\n  checkStringLetter(\"123abc123abc123\") should return false.\n  checkStringLetter(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLetter = (str) => {\n  let letters = str.match(/[a-zA-Z]/g);\n  return letters && letters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringDigit(\"a\") should return true.\n  checkStringDigit(\"abc\") should return false.\n  checkStringDigit(\"123\") should return false.\n  checkStringDigit(\"123abc\") should return false.\n  checkStringDigit(\"123abc123\") should return false.\n  checkStringDigit(\"123abc123abc\") should return false.\n  checkStringDigit(\"123abc123abc123\") should return false.\n  checkStringDigit(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringDigit = (str) => {\n  let digits = str.match(/\\d/g);\n  return digits && digits.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringLetter(\"a\") should return true.\n  checkStringLetter(\"abc\") should return false.\n  checkStringLetter(\"123\") should return false.\n  checkStringLetter(\"123abc\") should return false.\n  checkStringLetter(\"123abc123\") should return false.\n  checkStringLetter(\"123abc123abc\") should return false.\n  checkStringLetter(\"123abc123abc123\") should return false.\n  checkStringLetter(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLetter = (str) => {\n  let letters = str.match(/[a-zA-Z]/g);\n  return letters && letters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringDigit(\"a\") should return true.\n  checkStringDigit(\"abc\") should return false.\n  checkStringDigit(\"123\") should return false.\n  checkStringDigit(\"123abc\") should return false.\n  checkStringDigit(\"123abc123\") should return false.\n  checkStringDigit(\"123abc123abc\") should return false.\n  checkStringDigit(\"123abc123abc123\") should return false.\n  checkStringDigit(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringDigit = (str) => {\n  let digits = str.match(/\\d/g);\n  return digits && digits.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringLetter(\"a\") should return true.\n  checkStringLetter(\"abc\") should return false.\n  checkStringLetter(\"123\") should return false.\n  checkStringLetter(\"123abc\") should return false.\n  checkStringLetter(\"123abc123\") should return false.\n  checkStringLetter(\"123abc123abc\") should return false.\n  checkStringLetter(\"123abc123abc123\") should return false.\n  checkStringLetter(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLetter = (str) => {\n  let letters = str.match(/[a-zA-Z]/g);\n  return letters && letters.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringDigit(\"a\") should return true.\n  checkStringDigit(\"abc\") should return false.\n  checkStringDigit(\"123\") should return false.\n  checkStringDigit(\"123abc\") should return false.\n  checkStringDigit(\"123abc123\") should return false.\n  checkStringDigit(\"123abc123abc\") should return false.\n  checkStringDigit(\"123abc123abc123\") should return false.\n  checkStringDigit(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringDigit = (str) => {\n  let digits = str.match(/\\d/g);\n  return digits && digits.length === str.length;\n};\n\n/*\n  Given a string, return true if all characters are letters, else return false.\n  The function should return false if the given string is empty.\n  Examples:\n  checkStringLetter(\"a\") should return true.\n  checkStringLetter(\"abc\") should return false.\n  checkStringLetter(\"123\") should return false.\n  checkStringLetter(\"123abc\") should return false.\n  checkStringLetter(\"123abc123\") should return false.\n  checkStringLetter(\"123abc123abc\") should return false.\n  checkStringLetter(\"123abc123abc123\") should return false.\n  checkStringLetter(\"123abc123abc123abc\") should return false.\n  */\nconst checkStringLetter = (str) => {\n  let letters = str.match(/[a-zA-Z]/g);\n  return letters && letters.length === str.length;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i--;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i--;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i--;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 1;\n  let prime = true;\n  let isPrime = true;\n  while (i <= n) {\n    if (prime) {\n      if (isPrime) {\n        arr.push(i);\n        prime = false;\n      } else {\n        isPrime = false;\n      }\n    } else {\n      isPrime = true;\n    }\n    i--;\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit = parseInt(a[i]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    i++;\n  }\n  \n  while(j < b.length){\n    digit = parseInt(b[j]);\n    unit = digit % 10;\n    carry = digit / 10;\n    \n    temp = carry * 10 + unit;\n    \n    sum += temp;\n    \n    j++;\n  }\n  \n  return sum;\n}\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16\n  sumDigits(19, 28) should return 72\n  sumDigits(2020, 1851) should return 0\n  sumDigits(14,-15) should return 20\n  */\nconst sumDigits = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let unit = 0;\n  let digit = 0;\n  let temp;\n  \n  while(i < a.length){\n    digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase ovwels in veen indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toLowerCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toLowerCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in veen indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toLowerCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toLowerCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in veen indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toLowerCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toLowerCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toLowerCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toLowerCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j].toUpperCase() === s[j]) {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k].toUpperCase() === s[k]) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, wto] = value.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = wto.split(\".\");\n  const [wto, ezro] = w", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
